/*##################################################################################################
# Name:                                                                                   2016-08-01
#    ut_zzVBX
#
####################################################################################################
# Description: 
#    List extended VBA code statements
#
####################################################################################################
# Utilities:
EXEC ut_zzANL VAT
EXEC ut_zzANL VAV
EXEC ut_zzANL VAP
EXEC ut_zzANL VAF
##################################################################################################*/
SET QUOTED_IDENTIFIER OFF
SET NOCOUNT           ON
GO
----------------------------------------------------------------------------------------------------
--USE DBGen
GO
----------------------------------------------------------------------------------------------------
IF OBJECT_ID('dbo.ut_zzVBX') IS NOT NULL DROP PROCEDURE dbo.ut_zzVBX  -- (IXS)
GO
----------------------------------------------------------------------------------------------------
CREATE PROCEDURE dbo.ut_zzVBX (    -- (PSB)
    @BldLST varchar(2000) = '',             -- Build code list (comma delimited; see below)
    @InpTxt varchar(max)  = '',             -- Input Object text (comma delimited)
    @LftMrg smallint      = 0,              -- Increase left margin (4x)
    @IncSpc tinyint       = 1,              -- Include space(s) before the header
    @IncTtl tinyint       = 0,              -- Include code segment titles
    @IncBat tinyint       = 0,              -- Include batch GO statement
    @StdTx1 varchar(max)  = '',             -- Miscellaneous text value
    @StdTx2 varchar(max)  = '',             -- Miscellaneous text value
    @StdTx3 varchar(max)  = '',             -- Miscellaneous text value
    @IncTrn tinyint       = 0,              -- Include transaction logic
    @IncIdn tinyint       = 0,              -- Include identity column logic
    @IncErm tinyint       = 0               -- Include error message
) AS BEGIN
    ------------------------------------------------------------------------------------------------
    -- Signature Template  (PIF)
    /*----------------------------------------------------------------------------------------------
    --   ut_zzVBX BldTxtLftSpcTtlBatTx1Tx2Tx3TrnIdnErm
    EXEC ut_zzVBX ,'',0,1,0,0,'','','',0,0,0
    --   ut_zzVBX BldTxtLftSpcTtlBatTx1Tx2Tx3TrnIdnErm
    EXEC ut_zzVBX @BldLST,@InpTxt,@LftMrg,@IncSpc,@IncTtl,@IncBat,@StdTx1,@StdTx2,@StdTx3,@IncTrn,@IncIdn,@IncErm
    ----------------------------------------------------------------------------------------------*/
    -- Set the Environment
    ------------------------------------------------------------------------------------------------
    SET NOCOUNT       ON   -- ON OFF
    SET ANSI_WARNINGS OFF  -- ON OFF
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
    ------------------------------------------------------------------------------------------------
    -- Prep Parameters
    ------------------------------------------------------------------------------------------------
    SET @BldLST = UPPER(@BldLST)
    ------------------------------------------------------------------------------------------------
    -- Assign Procedure Profile Values
    ------------------------------------------------------------------------------------------------
    DECLARE @CurUSP    varchar(30)     ; SET @CurUSP = 'ut_zzVBX'
    DECLARE @CurREF    varchar(30)     ; SET @CurREF = 'dbo.ut_zzVBX'
    DECLARE @CurDSC    varchar(100)    ; SET @CurDSC = 'List extended VBA code statements'
    DECLARE @CurCAT    varchar(10)     ; SET @CurCAT = 'GEN'
    DECLARE @CurFMT    char(3)         ; SET @CurFMT = RIGHT(@CurUSP,3)
    ------------------------------------------------------------------------------------------------
    -- Manage Execution Flags
    ------------------------------------------------------------------------------------------------
    DECLARE @CurEXC    tinyint         ; SET @CurEXC = 1                                          -- Execution: 0=Disabled 1=Enabled
    DECLARE @CurDBG    tinyint         ; SET @CurDBG = 0                                          -- DebugMode: 0=Disabled 1=Enabled
    ------------------------------------------------------------------------------------------------
    DECLARE @DbgLvl    varchar(9)      ; SET @DbgLvl = ''                                         -- DebugText: Customize for Debug Tracking
    DECLARE @DbgFlg    tinyint         ; SET @DbgFlg = @CurDBG                                    -- DebugFlag: Backward Compatibility; Assign @CurDBG
    ------------------------------------------------------------------------------------------------
    SET @DbgFlg = CASE WHEN @BldLST = 'ZZZ' THEN 1 ELSE @DbgFlg END
    ------------------------------------------------------------------------------------------------
    -- Display text based on Debug/Execution modes
    ------------------------------------------------------------------------------------------------
    IF @CurDBG = 1 OR 0=9 BEGIN
    ------------------------------------------------------------------------------------------------
        SELECT
        LEFT(@CurUSP ,15) AS CurUSP,
        LEFT(@BldLST ,30) AS BldLST,
        LEFT(@InpTxt ,30) AS InpTxt,
        @LftMrg           AS LftMrg,
        @IncSpc           AS IncSpc,
        @IncTtl           AS IncTtl,
        @IncBat           AS IncBat,
        LEFT(@StdTx1 ,30) AS StdTx1,
        LEFT(@StdTx2 ,30) AS StdTx2,
        LEFT(@StdTx3 ,30) AS StdTx3,
        @IncTrn           AS IncTrn,
        @IncIdn           AS IncIdn,
        @IncErm           AS IncErm
    ------------------------------------------------------------------------------------------------
    END ELSE IF @CurEXC = 0 OR 0=9 BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        PRINT ''
        PRINT 'Procedure   :  '+@CurREF
        PRINT 'Description :  '+@CurDSC
        PRINT 'Status      :  Disabled'
        PRINT ''
        PRINT '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        RETURN
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldLST IN ('', 'h','/h','help','*') OR 0=9 BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        PRINT ''
        PRINT 'Procedure   :  '+@CurREF
        PRINT 'Description :  '+@CurDSC
        PRINT 'Parameters  :'
        PRINT "    @BldLST varchar(2000) = '',             -- Build code list (comma delimited; see below)"
        PRINT "    @InpTxt varchar(max)  = '',             -- Input Object text (comma delimited)"
        PRINT "    @LftMrg smallint      = 0,              -- Increase left margin (4x)"
        PRINT "    @IncSpc tinyint       = 1,              -- Include space(s) before the header"
        PRINT "    @IncTtl tinyint       = 0,              -- Include code segment titles"
        PRINT "    @IncBat tinyint       = 0,              -- Include batch GO statement"
        PRINT "    @StdTx1 varchar(max)  = '',             -- Miscellaneous text value"
        PRINT "    @StdTx2 varchar(max)  = '',             -- Miscellaneous text value"
        PRINT "    @StdTx3 varchar(max)  = '',             -- Miscellaneous text value"
        PRINT "    @IncTrn tinyint       = 0,              -- Include transaction logic"
        PRINT "    @IncIdn tinyint       = 0,              -- Include identity column logic"
        PRINT "    @IncErm tinyint       = 0               -- Include error message"
        PRINT ''
        PRINT '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        PRINT 'Build Codes:'
        PRINT ''
        PRINT '    PSH    = Push margin 4 spaces right'
        PRINT '    PUL    = Pull margin 4 spaces left'
        PRINT '    LMS    = Set left margin lines'
        PRINT '    LM0    = Set left margin to zero'
        PRINT '    LM1    = Set left margin to one'
        PRINT '    LM2    = Set left margin to two'
        PRINT '    RWP    = Set report width Portrait'
        PRINT '    RWL    = Set report width Landscape'
        PRINT '    '
        PRINT '    GHF    = Adjust for page header/footer'
        PRINT '    NPG    = Pad trailing lines for new page'
        PRINT '    '
        PRINT '    LSG    = Set lines for single lines'
        PRINT '    LDB    = Set lines for double lines'
        PRINT '    LPD    = Set lines for pound  lines'
        PRINT '    '
        PRINT '    HSG    = Set header for single lines'
        PRINT '    HDB    = Set header for double lines'
        PRINT '    HPD    = Set header for pound  lines'
        PRINT '    '
        PRINT '    SLN    = Print single line'
        PRINT '    DLN    = Print double line'
        PRINT '    ALN    = Print asterick line'
        PRINT '    PLN    = Print pound line'
        PRINT '    MLN    = Print ampersand line'
        PRINT '    TLN    = Print tilde line'
        PRINT '    '
        PRINT '    SLT    = Print single    title'
        PRINT '    DLT    = Print double    title'
        PRINT '    ALT    = Print asterick  title'
        PRINT '    PLT    = Print pound     title'
        PRINT '    MLT    = Print ampersand title'
        PRINT '    TLT    = Print tilde     title'
        PRINT '    '
        PRINT '    JLT    = Object list - Tables'
        PRINT '    JLV    = Object list - Views'
        PRINT '    JLU    = Object list - SProcs'
        PRINT '    '
        PRINT '    LCP    = Lookup Constants: PKey'
        PRINT '    LCC    = Lookup Constants: Code'
        PRINT '    LCN    = Lookup Constants: Name'
        PRINT '    LCX    = Lookup Constants: CmdTxt'
        PRINT '    '
        PRINT '    LPP    = Lookup Properties: PKey'
        PRINT '    LPC    = Lookup Properties: Code'
        PRINT '    LPN    = Lookup Properties: Name'
        PRINT '    LPX    = Lookup Properties: CmdTxt'
        PRINT '    '
        PRINT '    BMC    = Basic  module standard comment'
        PRINT '    CMC    = Class  module standard comment'
        PRINT '    FMC    = Form   module standard comment'
        PRINT '    RMC    = Report module standard comment'
        PRINT '    CEV    = Public class events'
        PRINT '    TFL    = Temporary file location constants'
        PRINT '    DCS    = Declare class services'
        PRINT '    BTX    = Basic Text Constants/Variables'
        PRINT '    XTX    = Extended Text Constants/Variables'
        PRINT '    SQC    = SQL Construction Constants/Variables'
        PRINT '    SNC    = Standard Null Comparison Constants/Variables'
        PRINT '    TCV    = Standard Open Form/Report variables'
        PRINT '    ORV    = Standard Open Form/Report variables'
        PRINT '    SFC    = Standard form constants'
        PRINT '    CTV    = Criteria tracking variables'
        PRINT '    SCV    = Standard criteria variables'
        PRINT '    STV    = Standard criteria variables'
        PRINT '    CNC    = Connection component constants'
        PRINT '    PPH    = Public properties header'
        PRINT '    FIN    = Finish Initilization'
        PRINT '    DON    = Done with Code'
        PRINT '    '
        PRINT '    ICS    = Initialize class services'
        PRINT '    TXP    = Text concatenation properties'
        PRINT '    IWT    = Initialize write text services'
        PRINT '    TXC    = Text concatenation methods'
        PRINT '    TXM    = Text manipulation methods'
        PRINT '    TXW    = Text write methods'
        PRINT '    TOC    = Test text output - class module format'
        PRINT '    TOB    = Test text output - base module format'
        PRINT '    TRC    = Translate Criteria methods'
        PRINT '    '
        PRINT '    RPH    = Report header'
        PRINT '    '
        PRINT '    LODCLM = Load #ObjClm records'
        PRINT '    '
        PRINT '    MOJVAR = Module object variables'
        PRINT '    MOJPRP = Module object properties'
        PRINT '    MOJWHR = Module object where'
        PRINT '    '
        PRINT '    BASAPC = Build module:  bas_AppCons'
        PRINT '    BASAPF = Build module:  bas_AppFunc'
        PRINT '    BASAPT = Build module:  bas_AppTest'
        PRINT '    BASAPV = Build module:  bas_AppVars'
        PRINT '    '
        PRINT '    BASGLB = Build module:  bas_Global'
        PRINT '    BASIMX = Build module:  bas_ImpExp'
        PRINT '    BASTST = Build module:  bas_Test01'
        PRINT '    BASTBM = Build module:  bas_TblMnt'
        PRINT '    '
        PRINT '    UTLASC = Build module:  clsUtlASC'
        PRINT '    UTLFMT = Build module:  clsUtlFMT'
        PRINT '    UTLVBG = Build module:  clsUtlVBG'
        PRINT '    UTLWSH = Build module:  clsUtlWSH'
        PRINT '    UTLWTX = Build module:  clsUtlWTX'
        PRINT '    '
        PRINT '    GENGLB = Build module:  vba_Global'
        PRINT '    GENSTD = Build module:  vbaGenSTD'
        PRINT '    GENJET = Build module:  vbaGenJET'
        PRINT '    '
        PRINT '    SGNFLG = StdGEN Objects:  Flags'
        PRINT '    '
        PRINT '    SGXTBL = StdGEN Execute:  Table'
        PRINT '    SGXPRP = StdGEN Execute:  Property'
        PRINT '    SGXCMD = StdGEN Execute:  Command'
        PRINT '    SGXRPT = StdGEN Execute:  Report'
        PRINT '    SGXFRM = StdGEN Execute:  Form'
        PRINT '    SGXCTL = StdGEN Execute:  Control'
        PRINT '    SGXGBY = StdGEN Execute:  GroupBy'
        PRINT '    SGXSQL = StdGEN Execute:  SQLCode'
        PRINT '    SGXSBY = StdGEN Execute:  SortBy'
        PRINT '    SGXPTH = StdGEN Execute:  Path'
        PRINT '    '
        PRINT '    GEN_IT = Build module:  vbaGen_IT'
        PRINT '    GENFRM = Build module:  vbaGenFRM'
        PRINT '    GENCTL = Build module:  vbaGenCTL'
        PRINT '    GENTBL = Build module:  vbaGenTBL'
        PRINT '    GENPRP = Build module:  vbaGenPRP'
        PRINT '    GENCMD = Build module:  vbaGenCMD'
        PRINT '    GENRPT = Build module:  vbaGenRPT'
        PRINT '    GENPTH = Build module:  vbaGenPTH'
        PRINT '    GENSQL = Build module:  vbaGenSQL'
        PRINT '    GENSBY = Build module:  vbaGenSBY'
        PRINT '    GENGBY = Build module:  vbaGenGBY'
        PRINT '    GENSLO = Build module:  vbaGenSLO'
        PRINT '    '
        PRINT '    CLSAPC = Build module:  clsAppCons'
        PRINT '    CLSAPV = Build module:  clsAppVals'
        PRINT '    '
        PRINT '    BASCMG = Build module:  bas_CmgCons'
        PRINT '    CLSCMG = Build module:  clsCtlMgr'
        PRINT '    '
        PRINT '    REGTBL = Build module:  clsRegTBL'
        PRINT '    REGPRP = Build module:  clsRegPRP'
        PRINT '    REGCMD = Build module:  clsRegCMD'
        PRINT '    REGRPT = Build module:  clsRegRPT'
        PRINT '    REGPTH = Build module:  clsRegPTH'
        PRINT '    REGSRC = Build module:  clsRegSRC'
        PRINT '    '
        PRINT '    SQLSTM = Build module:  clsSqlSTM'
        PRINT '    SQLOBY = Build module:  clsSqlOBY'
        PRINT '    RUNWHR = Build module:  clsRunWHR'
        PRINT '    '
        PRINT '    RUNCMD = Build module:  clsRunCMD'
        PRINT '    RUNCMM = Build module:  Run_Process_0000 (CALL cls_Method)'
        PRINT '    RUNCMF = Build module:  Run_Process_0000 (OPEN frm_FrmNam)'
        PRINT '    '
        PRINT '    RUNRPT = Build module:  clsRunRPT'
        PRINT '    RUNRPR = Build module:  Run_Report_0000'
        PRINT '    RUNRPX = Build module:  Print_rpt_ReportName'
        PRINT '    '
        PRINT '    RUNUSP = Build module:  clsRunUSP'
        PRINT '    RUNUSR = Build module:  Run_Process_0000 (EXEC PROC)'
        PRINT '    RUNUSF = Build module:  Run_Process_0000 (OPEN FORM)'
        PRINT '    '
        PRINT '    RUNRST = Build module:  clsRunRST'
        PRINT '    RUNSQL = Build module:  clsRunSQL'
        PRINT '    RUNSBY = Build module:  clsRunSBY'
        PRINT '    RUNGBY = Build module:  clsRunGBY'
        PRINT '    '
        PRINT '    FRMCLR = Build module:  sys_Colors'
        PRINT '    FRMLNK = Build module:  sys_LinkAPP'
        PRINT '    '
        PRINT '    RPTNAR = Build module:  tpl_NARROW'
        PRINT '    RPTWID = Build module:  tpl_WIDE'
        PRINT '    '
        PRINT '    ANYFRM = Build module:  frm_FrmName'
        PRINT '    ANYTAB = Build module:  frm_FrmName'
        PRINT '    ANYLST = Build module:  lst_FrmName'
        PRINT '    ANYPOP = Build module:  pop_FrmName'
        PRINT '    ANYSUB = Build module:  sub_FrmName'
        PRINT '    ANYBAS = Build module:  basBasName'
        PRINT '    ANYCLS = Build module:  clsClsNam'
        PRINT '    ANYRPT = Build module:  rpt_RptNam'
        PRINT '    '
        PRINT '    CLSTCN = Build module:  clsTxtCon'
        PRINT '    '
        PRINT '    ADJMRS = Object - Manual recordset'
        PRINT '    '
        PRINT '    ADFDEC = Form - Form module declarations'
        PRINT '    ADFFOP = Form - Standard form open function'
        PRINT '    ADPFOP = Form - Popup form open functions'
        PRINT '    ADFFUN = Form - Standard form module functions'
        PRINT '    ADFSQ1 = FORM - Manage SelectOn synchronization'
        PRINT '    ADFSQ2 = FORM - Manage SelectOn events'
        PRINT '    '
        PRINT '    ADECBO = Event - Combo Box'
        PRINT '    ADECHK = Event - Check Box'
        PRINT '    ADEKPS = Event - KeyPress'
        PRINT '    ADETBX = Event - Text Box (text)'
        PRINT '    ADETBC = Event - Text Box (code)'
        PRINT '    ADETBN = Event - Text Box (numeric)'
        PRINT '    ADETBD = Event - Text Box (date)'
        PRINT '    '
        PRINT '    ADFCMD = Form - Standard form commands'
        PRINT '    ADPCMD = Form - Popup form commands'
        PRINT '    ADFPRN = Form - Print default report'
        PRINT '    ADFRPT = Form - Process default report'
        PRINT '    ADFXTD = Form - Extend object for active tax years'
        PRINT '    ADFSYN = Form - Synchronize related objects'
        PRINT '    ADFOPN = Form - Open external form'
        PRINT '    ADIVFY = Form - Verify insert process'
        PRINT '    '
        PRINT '    XTDXYR = Extend Tax Year'
        PRINT '    XTDXPD = Extend Tax Period'
        PRINT '    XTDXMN = Extend Tax Month'
        PRINT '    XTDXAY = Extend Active Tax Year'
        PRINT ''
        PRINT '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        PRINT 'Example Code:'
        PRINT ''
        PRINT '    --   ut_zzVBX Oup     Stx Lft Spc Ttl Bat Tx1 Tx2 Tx3 Trn Idn Erm'
        PRINT '    EXEC ut_zzVBX        ,'''' ,0  ,1  ,0  ,0  ,'''' ,'''' ,'''' ,0  ,0  ,0'
        PRINT '    '
        PRINT '    --   ut_zzVBX Oup     Stx     Lft     Spc     Ttl     Bat     Tx1     Tx2     Tx3     Trn     Idn     Erm'
        PRINT '    EXEC ut_zzVBX @BldLST,@InpTxt,@LftMrg,@IncSpc,@IncTtl,@IncBat,@StdTx1,@StdTx2,@StdTx3,@IncTrn,@IncIdn,@IncErm'
        PRINT ''
        PRINT '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
        RETURN
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldLST IN ('?','?N','?Y') OR 0=9 BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT CASE @BldLST WHEN '?N' THEN '*' WHEN '?Y' THEN ' ' ELSE '' END+@CurUSP+' ('+@CurCAT+') = '+@CurDSC; RETURN
    END
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Debug flags
    ------------------------------------------------------------------------------------------------
    DECLARE @DbgCon    smallint        ; SET @DbgCon    = 0                                       -- Debug tracking
    DECLARE @DbgInd    smallint        ; SET @DbgInd    = 0                                       -- Debug tracking
    ------------------------------------------------------------------------------------------------
    -- Build codes formatting
    ------------------------------------------------------------------------------------------------
    SET @BldLST = UPPER(@BldLST)                                                                  -- Build list
    ------------------------------------------------------------------------------------------------
    -- Build codes tracking
    ------------------------------------------------------------------------------------------------
    DECLARE @BldCOD    varchar(100)    ; SET @BldCOD    = @BldLST                                 -- Build code
    DECLARE @BldVAL    varchar(100)    ; SET @BldVAL    = ''                                      -- Build value (=Xxx)
    DECLARE @BldFLG    bit             ; SET @BldFLG    = 0                                       -- Build flag
    ------------------------------------------------------------------------------------------------
    DECLARE @BldENV    varchar(11)     ; SET @BldENV    = ''                                      -- Build environment
    DECLARE @BldCLS    varchar(11)     ; SET @BldCLS    = ''                                      -- Build class
    DECLARE @BldCAT    varchar(11)     ; SET @BldCAT    = ''                                      -- Build category
    DECLARE @BldTYP    varchar(11)     ; SET @BldTYP    = ''                                      -- Build type
    ------------------------------------------------------------------------------------------------
    DECLARE @PrvBLD    varchar(100)    ; SET @PrvBLD    = ''                                      -- Previous build code
    DECLARE @PrvBLV    varchar(100)    ; SET @PrvBLV    = ''                                      -- Previous build value
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Initialize Standard Default Objects  (ID1)                              
    ------------------------------------------------------------------------------------------------
    DECLARE @InpObj    sysname         ; SET @InpObj    = @InpTxt                                 -- Input object name
    DECLARE @NamFmt    varchar(3)      ; SET @NamFmt    = ''                                      -- Name format (revised from @BldCOD)
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Initialize Output Default Objects  (ID2)                                
    ------------------------------------------------------------------------------------------------
    DECLARE @OupObj    sysname         ; SET @OupObj    = ''                                      -- Output object (what is created)
    DECLARE @OupDsc    sysname         ; SET @OupDsc    = ''                                      -- Output description
    DECLARE @OvrOup    tinyint         ; SET @OvrOup    = 0                                       -- Output override flag
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Initialize Code Generation Default Objects  (ID3)                       
    ------------------------------------------------------------------------------------------------
    DECLARE @OupCls    varchar(11)     ; SET @OupCls    = ''                                      -- Output class  (TBL,VEW,etc)
    DECLARE @OupFmt    varchar(11)     ; SET @OupFmt    = ''                                      -- Output format (SEL,INS,etc)
    DECLARE @OupAls    varchar(11)     ; SET @OupAls    = ''                                      -- Output table alias (abc,xyz,...)
    DECLARE @OupSfx    varchar(11)     ; SET @OupSfx    = ''                                      -- Output table suffix (ABC,XYZ,...)
    DECLARE @OupCpx    varchar(20)     ; SET @OupCpx    = ''                                      -- Output column prefix (Abcdef,...)
    DECLARE @OupUtl    varchar(11)     ; SET @OupUtl    = RIGHT(@CurUSP,3)                        -- Output utility (TBX,USX,etc)
    DECLARE @SqlExc    tinyint         ; SET @SqlExc    = 0                                       -- Execute the dynamic SQL statement
    DECLARE @IncCmt    tinyint         ; SET @IncCmt    = 0                                       -- Include comment text
    DECLARE @IncHdr    tinyint         ; SET @IncHdr    = 0                                       -- Include header lines/text
    DECLARE @IncTpl    tinyint         ; SET @IncTpl    = 0                                       -- Include templates
    DECLARE @IncDbg    tinyint         ; SET @IncDbg    = 0                                       -- Include debug logic
    DECLARE @IncMsg    tinyint         ; SET @IncMsg    = 0                                       -- Include information message
    DECLARE @IncSep    tinyint         ; SET @IncSep    = 1                                       -- Include separator line between objects
    DECLARE @IncDrp    tinyint         ; SET @IncDrp    = 0                                       -- Include drop statement
    DECLARE @IncAdd    tinyint         ; SET @IncAdd    = 0                                       -- Include add statement
    DECLARE @IncTcd    tinyint         ; SET @IncTcd    = 0                                       -- Include test code
    DECLARE @IncDat    tinyint         ; SET @IncDat    = NULL                                    -- Include data insert statements
    DECLARE @IncPrm    tinyint         ; SET @IncPrm    = 0                                       -- Include permissions statements
    DECLARE @SelStm    varchar(100)    ; SET @SelStm    = ''                                      -- SELECT statement (DISTINCT, TOP, etc)
    DECLARE @SetLst    varchar(2000)   ; SET @SetLst    = ''                                      -- SET Column = Value list (colon delimited)
    DECLARE @JnnLst    varchar(2000)   ; SET @JnnLst    = ''                                      -- JOIN list (colon delimited)
    DECLARE @WhrLst    varchar(2000)   ; SET @WhrLst    = ''                                      -- WHERE list (colon delimited)
    DECLARE @GbyLst    varchar(2000)   ; SET @GbyLst    = ''                                      -- GROUP BY list (colon delimited)
    DECLARE @HavLst    varchar(2000)   ; SET @HavLst    = ''                                      -- HAVING list (colon delimited)
    DECLARE @ObyLst    varchar(2000)   ; SET @ObyLst    = ''                                      -- ORDER BY list (comma delimited)
    DECLARE @LkpLst    varchar(2000)   ; SET @LkpLst    = ''                                      -- Lookup parameters (comma delimited list)
    DECLARE @StdFlg    tinyint         ; SET @StdFlg    = 0                                       -- Miscellaneous flag value
    DECLARE @StdCnt    int             ; SET @StdCnt    = 0                                       -- Miscellaneous count value
    DECLARE @IncHtk    tinyint         ; SET @IncHtk    = NULL                                    -- Include record history tracking columns
    DECLARE @IncDim    tinyint         ; SET @IncDim    = NULL                                    -- Include record dimension columns
    DECLARE @IncFct    tinyint         ; SET @IncFct    = NULL                                    -- Include record fact columns
    DECLARE @IncUsd    tinyint         ; SET @IncUsd    = NULL                                    -- Include record used column
    DECLARE @IncLkd    tinyint         ; SET @IncLkd    = NULL                                    -- Include record locked column
    DECLARE @IncDsb    tinyint         ; SET @IncDsb    = NULL                                    -- Include record disabled column
    DECLARE @IncDlt    tinyint         ; SET @IncDlt    = NULL                                    -- Include record delflag column
    DECLARE @IncLok    tinyint         ; SET @IncLok    = NULL                                    -- Include record locking columns
    DECLARE @IncCrt    tinyint         ; SET @IncCrt    = NULL                                    -- Include record created columns
    DECLARE @IncUpd    tinyint         ; SET @IncUpd    = NULL                                    -- Include record updated columns
    DECLARE @IncExp    tinyint         ; SET @IncExp    = NULL                                    -- Include record expired columns
    DECLARE @IncDel    tinyint         ; SET @IncDel    = NULL                                    -- Include record deleted columns
    DECLARE @IncAud    tinyint         ; SET @IncAud    = NULL                                    -- Include record auditing columns
    DECLARE @IncHst    tinyint         ; SET @IncHst    = NULL                                    -- Include record history columns
    DECLARE @IncMod    tinyint         ; SET @IncMod    = NULL                                    -- Include record modified columns
    DECLARE @BldSfx    varchar(11)     ; SET @BldSfx    = RIGHT(@OupFmt,3)                        -- Output suffix
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Track Original Values  (TOV)                                            
    ------------------------------------------------------------------------------------------------
    DECLARE @OrgAdd    tinyint         ; SET @OrgAdd    = @IncAdd                                 -- Include add statement
    DECLARE @OrgAud    tinyint         ; SET @OrgAud    = @IncAud                                 -- Include record auditing columns
    DECLARE @OrgBat    tinyint         ; SET @OrgBat    = @IncBat                                 -- Include batch GO statement
    DECLARE @OrgCmt    tinyint         ; SET @OrgCmt    = @IncCmt                                 -- Include comment text
    DECLARE @OrgCrt    tinyint         ; SET @OrgCrt    = @IncCrt                                 -- Include record created columns
    DECLARE @OrgDat    tinyint         ; SET @OrgDat    = @IncDat                                 -- Include data insert statements
    DECLARE @OrgDbg    tinyint         ; SET @OrgDbg    = @IncDbg                                 -- Include debug logic
    DECLARE @OrgDel    tinyint         ; SET @OrgDel    = @IncDel                                 -- Include record deleted columns
    DECLARE @OrgDim    tinyint         ; SET @OrgDim    = @IncDim                                 -- Include record dimension columns
    DECLARE @OrgDlt    tinyint         ; SET @OrgDlt    = @IncDlt                                 -- Include record delflag column
    DECLARE @OrgDrp    tinyint         ; SET @OrgDrp    = @IncDrp                                 -- Include drop statement
    DECLARE @OrgDsb    tinyint         ; SET @OrgDsb    = @IncDsb                                 -- Include record disabled column
    DECLARE @OrgErm    tinyint         ; SET @OrgErm    = @IncErm                                 -- Include error message
    DECLARE @OrgExp    tinyint         ; SET @OrgExp    = @IncExp                                 -- Include record expired columns
    DECLARE @OrgFct    tinyint         ; SET @OrgFct    = @IncFct                                 -- Include record fact columns
    DECLARE @OrgHdr    tinyint         ; SET @OrgHdr    = @IncHdr                                 -- Include header lines/text
    DECLARE @OrgHst    tinyint         ; SET @OrgHst    = @IncHst                                 -- Include record history columns
    DECLARE @OrgHtk    tinyint         ; SET @OrgHtk    = @IncHtk                                 -- Include record history tracking columns
    DECLARE @OrgIdn    tinyint         ; SET @OrgIdn    = @IncIdn                                 -- Include identity column logic
    DECLARE @OrgLkd    tinyint         ; SET @OrgLkd    = @IncLkd                                 -- Include record locked column
    DECLARE @OrgLok    tinyint         ; SET @OrgLok    = @IncLok                                 -- Include record locking columns
    DECLARE @OrgMod    tinyint         ; SET @OrgMod    = @IncMod                                 -- Include record modified columns
    DECLARE @OrgMsg    tinyint         ; SET @OrgMsg    = @IncMsg                                 -- Include information message
    DECLARE @OrgPrm    tinyint         ; SET @OrgPrm    = @IncPrm                                 -- Include permissions statements
    DECLARE @OrgSep    tinyint         ; SET @OrgSep    = @IncSep                                 -- Include separator line between objects
    DECLARE @OrgSpc    tinyint         ; SET @OrgSpc    = @IncSpc                                 -- Include space(s) before the header
    DECLARE @OrgTcd    tinyint         ; SET @OrgTcd    = @IncTcd                                 -- Include test code
    DECLARE @OrgTpl    tinyint         ; SET @OrgTpl    = @IncTpl                                 -- Include templates
    DECLARE @OrgTrn    tinyint         ; SET @OrgTrn    = @IncTrn                                 -- Include transaction logic
    DECLARE @OrgTtl    tinyint         ; SET @OrgTtl    = @IncTtl                                 -- Include code segment titles
    DECLARE @OrgUpd    tinyint         ; SET @OrgUpd    = @IncUpd                                 -- Include record updated columns
    DECLARE @OrgUsd    tinyint         ; SET @OrgUsd    = @IncUsd                                 -- Include record used column
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Standard Working Constants  (SWC)                                       EXEC ut_zzUTL zzz,SWC
    ------------------------------------------------------------------------------------------------
    DECLARE @NOP       bit             ; SET @NOP       = 0                                       -- Standard Flag = False
    DECLARE @YUP       bit             ; SET @YUP       = 1                                       -- Standard Flag = True
    DECLARE @False     bit             ; SET @False     = 0                                       -- Standard Flag = False
    DECLARE @True      bit             ; SET @True      = 1                                       -- Standard Flag = True
    ------------------------------------------------------------------------------------------------
    DECLARE @CRT       char(1)         ; SET @CRT       = CHAR(13)                                -- Standard Character: CarrRtn
    DECLARE @LFD       char(1)         ; SET @LFD       = CHAR(10)                                -- Standard Character: LineFeed
    DECLARE @NLN       char(2)         ; SET @NLN       = @CRT+@LFD                               -- Standard Character: Newline
    DECLARE @SPC       char(1)         ; SET @SPC       = ' '                                     -- Standard Character: Space
    DECLARE @MTY       varchar(1)      ; SET @MTY       = ''                                      -- Standard Character: Empty
    ------------------------------------------------------------------------------------------------
    DECLARE @DOT       char(1)         ; SET @DOT       = '.'                                     -- Standard Character: Period
    DECLARE @CMA       char(1)         ; SET @CMA       = ','                                     -- Standard Character: Comma
    DECLARE @CLN       char(1)         ; SET @CLN       = ':'                                     -- Standard Character: Colon
    DECLARE @SCN       char(1)         ; SET @SCN       = ';'                                     -- Standard Character: SemiColon
    DECLARE @UBR       char(1)         ; SET @UBR       = '_'                                     -- Standard Character: Underbar
    DECLARE @PCT       char(1)         ; SET @PCT       = '%'                                     -- Standard Character: Percent
    ------------------------------------------------------------------------------------------------
    DECLARE @SGL       char(1)         ; SET @SGL       = '-'                                     -- Standard Character: Single
    DECLARE @DBL       char(1)         ; SET @DBL       = '='                                     -- Standard Character: Double
    DECLARE @AST       char(1)         ; SET @AST       = '*'                                     -- Standard Character: Asterisk
    DECLARE @PND       char(1)         ; SET @PND       = '#'                                     -- Standard Character: Pound
    DECLARE @ATS       char(1)         ; SET @ATS       = '@'                                     -- Standard Character: AtSign
    DECLARE @TLD       char(1)         ; SET @TLD       = '~'                                     -- Standard Character: Tilde
    DECLARE @BNG       char(1)         ; SET @BNG       = '!'                                     -- Standard Character: Bang
    DECLARE @VBR       char(1)         ; SET @VBR       = '|'                                     -- Standard Character: VertBar
    ------------------------------------------------------------------------------------------------
    DECLARE @NQT       varchar(1)      ; SET @NQT       = ''                                      -- Standard Character: Quote Empty
    DECLARE @SQT       char(1)         ; SET @SQT       = "'"                                     -- Standard Character: Quote Single
    DECLARE @DQT       char(1)         ; SET @DQT       = '"'                                     -- Standard Character: Quote Double
    DECLARE @BTK       char(1)         ; SET @BTK       = '`'                                     -- Standard Character: Quote BackTick
    ------------------------------------------------------------------------------------------------
    DECLARE @AND       char(4)         ; SET @AND       = 'AND '                                  -- Standard Statement: And
    DECLARE @ONN       char(4)         ; SET @ONN       = ' ON '                                  -- Standard Statement: On
    ------------------------------------------------------------------------------------------------
    DECLARE @WUB       char(1)         ; SET @WUB       = '_'                                     -- WildCard: Underbar (single char)
    DECLARE @WPC       char(1)         ; SET @WPC       = '%'                                     -- WildCard: Percent  (multi chars)
    DECLARE @WBG       char(1)         ; SET @WBG       = '!'                                     -- WildCard: Bang     (escape char)
    ------------------------------------------------------------------------------------------------
    DECLARE @ITX       char(500)       ; SET @ITX       = ''                                      -- Standard String: Pad with Spaces
    DECLARE @ITZ       char(100)       ; SET @ITZ       = REPLICATE('Z',100)                      -- Standard String: Pad with Zzzzs
    DECLARE @IT0       char(100)       ; SET @IT0       = REPLICATE('0',100)                      -- Standard String: Pad with Zeros
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Standard Working Variables  (SWV)                                       EXEC ut_zzUTL zzz,SWV
    ------------------------------------------------------------------------------------------------
    DECLARE @CNT       int             ; SET @CNT       = 0                                       -- Working CountValue
    DECLARE @CNX       varchar(10)     ; SET @CNX       = ''                                      -- Working CountText
    ------------------------------------------------------------------------------------------------
    DECLARE @IDN       int             ; SET @IDN       = 0                                       -- Working IndexValue
    DECLARE @IDX       varchar(10)     ; SET @IDX       = ''                                      -- Working IndexText
    ------------------------------------------------------------------------------------------------
    DECLARE @FLG       bit             ; SET @FLG       = 0                                       -- Working FlagValue
    DECLARE @FLX       varchar(10)     ; SET @FLX       = ''                                      -- Working FlagText
    ------------------------------------------------------------------------------------------------
    DECLARE @LVL       int             ; SET @LVL       = 0                                       -- Working Level
    DECLARE @SIZ       dec(15,2)       ; SET @SIZ       = 0                                       -- Working Size
    DECLARE @SQX       varchar(10)     ; SET @SQX       = ''                                      -- Working SequenceText
    DECLARE @QOT       varchar(1)      ; SET @QOT       = ''                                      -- Working QuoteMark
    DECLARE @NUL       varchar(1)      ; SET @NUL       = ''                                      -- Working Null Output
    ------------------------------------------------------------------------------------------------
    DECLARE @MIN       int             ; SET @MIN       = 0                                       -- Working Minimum
    DECLARE @MAX       int             ; SET @MAX       = 0                                       -- Working Maximum
    ------------------------------------------------------------------------------------------------
    DECLARE @LSP       varchar(20)     ; SET @LSP       = ''                                      -- Working Line Space
    ------------------------------------------------------------------------------------------------
    DECLARE @VAL       varchar(200)    ; SET @VAL       = ''                                      -- Working General Value
    DECLARE @PRV       varchar(200)    ; SET @PRV       = ''                                      -- Working Previous Value
    DECLARE @CUR       varchar(200)    ; SET @CUR       = ''                                      -- Working Current Value
    ------------------------------------------------------------------------------------------------
    DECLARE @BLD       varchar(200)    ; SET @BLD       = ''                                      -- Working Build
    DECLARE @TYP       varchar(200)    ; SET @TYP       = ''                                      -- Working Type
    DECLARE @PTN       varchar(200)    ; SET @PTN       = ''                                      -- Working Pattern
    DECLARE @UNK       varchar(200)    ; SET @UNK       = ''                                      -- Working Unknown
    DECLARE @ZZZ       varchar(200)    ; SET @ZZZ       = ''                                      -- Working Placeholder
    ------------------------------------------------------------------------------------------------
    DECLARE @TST       bit             ; SET @TST       = 0                                       -- Working Flag
    DECLARE @RUN       bit             ; SET @RUN       = 0                                       -- Working Flag
    ------------------------------------------------------------------------------------------------
    DECLARE @TXT       varchar(max)    ; SET @TXT       = ''                                      -- Working Text
    DECLARE @LEN       int             ; SET @LEN       = 0                                       -- Working Length (numeric)
    DECLARE @LEX       varchar(10)     ; SET @LEX       = ''                                      -- Working Length (text)
    ------------------------------------------------------------------------------------------------
    DECLARE @CMX       varchar(2)      ; SET @CMX       = ''                                      -- Working SQL Comma
    DECLARE @ANX       varchar(40)     ; SET @ANX       = ''                                      -- Working SQL AND
    DECLARE @ONX       varchar(40)     ; SET @ONX       = ''                                      -- Working SQL ON
    ------------------------------------------------------------------------------------------------
    DECLARE @OPN       varchar(11)     ; SET @OPN       = ''                                      -- Working Paren: Open
    DECLARE @CPN       varchar(11)     ; SET @CPN       = ''                                      -- Working Paren: Close
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Extended Working Variables  (XWV)                                       EXEC ut_zzUTL zzz,XWV
    ------------------------------------------------------------------------------------------------
    DECLARE @CN1       int             ; SET @CN1       = 0                                       -- Working Count
    DECLARE @CN2       int             ; SET @CN2       = 0                                       -- Working Count
    DECLARE @CN3       int             ; SET @CN3       = 0                                       -- Working Count
    ------------------------------------------------------------------------------------------------
    DECLARE @ID1       int             ; SET @ID1       = 0                                       -- Working Index
    DECLARE @ID2       int             ; SET @ID2       = 0                                       -- Working Index
    DECLARE @ID3       int             ; SET @ID3       = 0                                       -- Working Index
    ------------------------------------------------------------------------------------------------
    DECLARE @PS1       int             ; SET @PS1       = 0                                       -- Working Position
    DECLARE @PS2       int             ; SET @PS2       = 0                                       -- Working Position
    DECLARE @PS3       int             ; SET @PS3       = 0                                       -- Working Position
    ------------------------------------------------------------------------------------------------
    DECLARE @TX0       varchar(max)    ; SET @TX0       = ''                                      -- Working text
    DECLARE @TX1       varchar(max)    ; SET @TX1       = ''                                      -- Working text
    DECLARE @TX2       varchar(max)    ; SET @TX2       = ''                                      -- Working text
    DECLARE @TX3       varchar(max)    ; SET @TX3       = ''                                      -- Working text
    DECLARE @TX4       varchar(max)    ; SET @TX4       = ''                                      -- Working text
    DECLARE @TX5       varchar(max)    ; SET @TX5       = ''                                      -- Working text
    DECLARE @TX6       varchar(max)    ; SET @TX6       = ''                                      -- Working text
    DECLARE @TX7       varchar(max)    ; SET @TX7       = ''                                      -- Working text
    DECLARE @TX8       varchar(max)    ; SET @TX8       = ''                                      -- Working text
    DECLARE @TX9       varchar(max)    ; SET @TX9       = ''                                      -- Working text
    ------------------------------------------------------------------------------------------------
    DECLARE @LN0       int             ; SET @LN0       = 0                                       -- Working length
    DECLARE @LN1       int             ; SET @LN1       = 0                                       -- Working length
    DECLARE @LN2       int             ; SET @LN2       = 0                                       -- Working length
    DECLARE @LN3       int             ; SET @LN3       = 0                                       -- Working length
    DECLARE @LN4       int             ; SET @LN4       = 0                                       -- Working length
    DECLARE @LN5       int             ; SET @LN5       = 0                                       -- Working length
    DECLARE @LN6       int             ; SET @LN6       = 0                                       -- Working length
    ------------------------------------------------------------------------------------------------
    DECLARE @FG0       bit             ; SET @FG0       = 0                                       -- Working flag
    DECLARE @FG1       bit             ; SET @FG1       = 0                                       -- Working flag
    DECLARE @FG2       bit             ; SET @FG2       = 0                                       -- Working flag
    DECLARE @FG3       bit             ; SET @FG3       = 0                                       -- Working flag
    DECLARE @FG4       bit             ; SET @FG4       = 0                                       -- Working flag
    DECLARE @FG5       bit             ; SET @FG5       = 0                                       -- Working flag
    DECLARE @FG6       bit             ; SET @FG6       = 0                                       -- Working flag
    ------------------------------------------------------------------------------------------------
    DECLARE @SPX       varchar(20)     ; SET @SPX       = ''                                      -- Working  Space
    DECLARE @SP0       varchar(1)      ; SET @SP0       = ''                                      -- Constant Space 00
    DECLARE @SP1       char(1)         ; SET @SP1       = ''                                      -- Constant Space 01
    DECLARE @SP2       char(2)         ; SET @SP2       = ''                                      -- Constant Space 02
    DECLARE @SP3       char(3)         ; SET @SP3       = ''                                      -- Constant Space 03
    DECLARE @SP4       char(4)         ; SET @SP4       = ''                                      -- Constant Space 04
    ------------------------------------------------------------------------------------------------
    DECLARE @MRG       tinyint         ; SET @MRG       = 0                                       -- Working  Margin Increment
    DECLARE @MG0       tinyint         ; SET @MG0       = 0                                       -- Constant Margin Increment 00
    DECLARE @MG1       tinyint         ; SET @MG1       = 1                                       -- Constant Margin Increment 01
    DECLARE @MG2       tinyint         ; SET @MG2       = 2                                       -- Constant Margin Increment 02
    DECLARE @MG3       tinyint         ; SET @MG3       = 3                                       -- Constant Margin Increment 03
    DECLARE @MG4       tinyint         ; SET @MG4       = 4                                       -- Constant Margin Increment 04
    DECLARE @MG5       tinyint         ; SET @MG5       = 5                                       -- Constant Margin Increment 05
    ------------------------------------------------------------------------------------------------
    DECLARE @MWD       tinyint         ; SET @MWD       = 0                                       -- Working  Margin Width
    DECLARE @MW0       tinyint         ; SET @MW0       = 00                                      -- Constant Margin Width 00
    DECLARE @MW1       tinyint         ; SET @MW1       = 04                                      -- Constant Margin Width 01
    DECLARE @MW2       tinyint         ; SET @MW2       = 08                                      -- Constant Margin Width 02
    DECLARE @MW3       tinyint         ; SET @MW3       = 12                                      -- Constant Margin Width 03
    DECLARE @MW4       tinyint         ; SET @MW4       = 16                                      -- Constant Margin Width 04
    DECLARE @MW5       tinyint         ; SET @MW5       = 20                                      -- Constant Margin Width 05
    ------------------------------------------------------------------------------------------------
    DECLARE @MRX       varchar(20)     ; SET @MRX       = ''                                      -- Working  Margin Space
    DECLARE @MXX       varchar(20)     ; SET @MXX       = ''                                      -- Working  Margin Space
    DECLARE @MX0       varchar(1)      ; SET @MX0       = ''                                      -- Constant Margin Space 00
    DECLARE @MX1       char(04)        ; SET @MX1       = ''                                      -- Constant Margin Space 01
    DECLARE @MX2       char(08)        ; SET @MX2       = ''                                      -- Constant Margin Space 02
    DECLARE @MX3       char(12)        ; SET @MX3       = ''                                      -- Constant Margin Space 03
    DECLARE @MX4       char(16)        ; SET @MX4       = ''                                      -- Constant Margin Space 04
    DECLARE @MX5       char(20)        ; SET @MX5       = ''                                      -- Constant Margin Space 05
    ------------------------------------------------------------------------------------------------
    DECLARE @LXX       varchar(500)    ; SET @LXX       = ''                                      -- Working  Line
    DECLARE @LX0       char(100)       ; SET @LX0       = @MX0+REPLICATE('-',100)                 -- Constant Line 00
    DECLARE @LX1       char(100)       ; SET @LX1       = @MX1+REPLICATE('-',096)                 -- Constant Line 01
    DECLARE @LX2       char(100)       ; SET @LX2       = @MX2+REPLICATE('-',092)                 -- Constant Line 02
    DECLARE @LX3       char(100)       ; SET @LX3       = @MX3+REPLICATE('-',088)                 -- Constant Line 03
    DECLARE @LX4       char(100)       ; SET @LX4       = @MX4+REPLICATE('-',084)                 -- Constant Line 04
    DECLARE @LX5       char(100)       ; SET @LX5       = @MX5+REPLICATE('-',080)                 -- Constant Line 05
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Extended Construction Variables  (XCV)                                  EXEC ut_zzUTL zzz,XCV
    ------------------------------------------------------------------------------------------------
    -- Manage Variable Declarations
    ------------------------------------------------------------------------------------------------
    DECLARE @VAR       varchar(100)    ; SET @VAR       = ''                                      -- Working Variable
    DECLARE @VAX       char(9)         ; SET @VAX       = ''                                      -- Working Variable
    DECLARE @DTP       char(16)        ; SET @DTP       = ''                                      -- Working DataType
    DECLARE @STM       varchar(max)    ; SET @STM       = ''                                      -- Working Statement
    DECLARE @CMT       varchar(200)    ; SET @CMT       = ''                                      -- Working Comment
    DECLARE @VER       varchar(20)     ; SET @VER       = ''                                      -- Working VersionText
    ------------------------------------------------------------------------------------------------
    -- Manage Objects
    ------------------------------------------------------------------------------------------------
    DECLARE @SRV       varchar(100)    ; SET @SRV       = ''                                      -- Working Server
    DECLARE @DBS       varchar(100)    ; SET @DBS       = ''                                      -- Working Database
    DECLARE @SCM       varchar(100)    ; SET @SCM       = ''                                      -- Working Schema
    DECLARE @OBJ       varchar(100)    ; SET @OBJ       = ''                                      -- Working Object
    DECLARE @REF       varchar(100)    ; SET @REF       = ''                                      -- Working scm.obj
    DECLARE @FQD       varchar(100)    ; SET @FQD       = ''                                      -- Working dbs.scm.obj
    DECLARE @FQS       varchar(100)    ; SET @FQS       = ''                                      -- Working srv.dbs.scm.obj
    ------------------------------------------------------------------------------------------------
    DECLARE @ALS       varchar(10)     ; SET @ALS       = ''                                      -- Working Alias
    DECLARE @ALD       varchar(10)     ; SET @ALD       = ''                                      -- Working als.
    DECLARE @ALN       varchar(10)     ; SET @ALN       = ''                                      -- Working spc als
    ------------------------------------------------------------------------------------------------
    DECLARE @TBL       varchar(100)    ; SET @OBJ       = ''                                      -- Working Table
    DECLARE @VEW       varchar(100)    ; SET @VEW       = ''                                      -- Working View
    DECLARE @USP       varchar(100)    ; SET @USP       = ''                                      -- Working SProc
    DECLARE @UFN       varchar(100)    ; SET @UFN       = ''                                      -- Working Function
    DECLARE @EXC       varchar(100)    ; SET @EXC       = ''                                      -- Working Execute
    ------------------------------------------------------------------------------------------------
    -- Manage Columns
    ------------------------------------------------------------------------------------------------
    DECLARE @CLM       varchar(100)    ; SET @CLM       = ''                                      -- Working Column
    DECLARE @ALM       varchar(100)    ; SET @ALM       = ''                                      -- Working als.clm
    DECLARE @NLX       char(9)         ; SET @NLX       = ''                                      -- Working Nullable
    DECLARE @IDT       varchar(9)      ; SET @IDT       = ''                                      -- Working Identity
    ------------------------------------------------------------------------------------------------
    -- Manage KeyIDs
    ------------------------------------------------------------------------------------------------
    DECLARE @KEY       varchar(100)    ; SET @KEY       = ''                                      -- Working KeyIDColumn
    DECLARE @KID       int             ; SET @KID       = 0                                       -- Working KeyIDValue
    DECLARE @KIX       varchar(100)    ; SET @KIX       = ''                                      -- Working KeyIDText
    ------------------------------------------------------------------------------------------------
    -- Manage Signatures
    ------------------------------------------------------------------------------------------------
    DECLARE @SIG       varchar(max)    ; SET @SIG       = ''                                      -- Working Signature
    DECLARE @MOD       varchar(100)    ; SET @MOD       = ''                                      -- Working Module
    DECLARE @TSK       varchar(100)    ; SET @TSK       = ''                                      -- Working Task
    DECLARE @PRM       varchar(100)    ; SET @PRM       = ''                                      -- Working Parameters
    DECLARE @PRX       varchar(100)    ; SET @PRX       = ''                                      -- Working ParamsText
    DECLARE @DBG       varchar(100)    ; SET @DBG       = ''                                      -- Working DebugFlags
    --CLARE @NAM       varchar(100)    ; SET @NAM       = ''                                      -- Working ProcessName
    DECLARE @NAS       varchar(100)    ; SET @NAS       = ''                                      -- Working ProcessName (plural)
    ------------------------------------------------------------------------------------------------
    -- Manage Paramaters
    ------------------------------------------------------------------------------------------------
    DECLARE @OUP       varchar(20)     ; SET @OUP       = ''                                      -- Working Output
    ------------------------------------------------------------------------------------------------
    DECLARE @PFX       varchar(20)     ; SET @PFX       = ''                                      -- Working Prefix
    DECLARE @SFX       varchar(20)     ; SET @SFX       = ''                                      -- Working Suffix
    DECLARE @COD       varchar(100)    ; SET @COD       = ''                                      -- Working Code
    DECLARE @SYS       varchar(100)    ; SET @SYS       = ''                                      -- Working System
    DECLARE @BAS       varchar(100)    ; SET @BAS       = ''                                      -- Working Base
    DECLARE @NAM       varchar(100)    ; SET @NAM       = ''                                      -- Working Name
    DECLARE @TTL       varchar(100)    ; SET @TTL       = ''                                      -- Working Title
    DECLARE @TTX       varchar(200)    ; SET @TTX       = ''                                      -- Working TitleText
    DECLARE @DSC       varchar(200)    ; SET @DSC       = ''                                      -- Working Description
    ------------------------------------------------------------------------------------------------
    -- Manage Lists
    ------------------------------------------------------------------------------------------------
    DECLARE @SEP       varchar(10)     ; SET @SEP       = @CMA                                    -- Working Separator
    DECLARE @DLM       varchar(10)     ; SET @DLM       = ','                                     -- Working Delimiter
    DECLARE @POS       smallint        ; SET @POS       = 0                                       -- Working Position
    DECLARE @LST       varchar(max)    ; SET @LST       = ''                                      -- Working List
    DECLARE @ITM       varchar(500)    ; SET @ITM       = ''                                      -- Working Item (variable length)
    ------------------------------------------------------------------------------------------------
    -- Manage Concatenation
    ------------------------------------------------------------------------------------------------
    DECLARE @N         varchar(2)      ; SET @N         = CHAR(13)+CHAR(10)                       -- Working newline characters
    DECLARE @D         varchar(9)      ; SET @D         = @N                                      -- Working delimiter
    DECLARE @X         varchar(max)    ; SET @X         = ''                                      -- Working dynamic SQL text
    DECLARE @Z         varchar(max)    ; SET @Z         = ''                                      -- Working dynamic SQL text
    DECLARE @S         varchar(2)      ; SET @S         = ' '                                     -- Working dynamic SQL space
    DECLARE @B         varchar(2)      ; SET @B         = ''                                      -- Working dynamic SQL blank
    /*----------------------------------------------------------------------------------------------
    SET @X = @B+@B+''                                                                             -- Firstline initialized with blank
    SET @X = @X+@N+''                                                                             -- Next lines accumulate the text
    PRINT @X                                                                                      -- Print   the text (8000 max)
    EXEC (@X)                                                                                     -- Execute the text (unlimited)
    ----------------------------------------------------------------------------------------------*/

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Adjust Margin Values  (AMV)                                             EXEC ut_zzUTL zzz,AMV
    ------------------------------------------------------------------------------------------------
    DECLARE @MrgInc    tinyint         ; SET @MrgInc    = 4                                       -- Left margin space increment
    DECLARE @StdLen    tinyint         ; SET @StdLen    = 100                                     -- Standard line length
    ------------------------------------------------------------------------------------------------
    DECLARE @LftWid    tinyint         ; SET @LftWid    = @LftMrg * @MrgInc                       -- Left margin space length Beg
    DECLARE @LftLen    tinyint         ; SET @LftLen    = @StdLen - @LftWid                       -- Left length
    ------------------------------------------------------------------------------------------------
    DECLARE @StmMrg    smallint        ; SET @StmMrg    = @LftMrg+1                             -- Code statement margin
    DECLARE @StmWid    smallint        ; SET @StmWid    = @StmMrg * @MrgInc                       -- Statement margin space length
    DECLARE @StmLen    smallint        ; SET @StmLen    = @StdLen - @StmWid                       -- Statement line length
    ------------------------------------------------------------------------------------------------
    DECLARE @M         varchar(50)     ; SET @M         = REPLICATE(' ', @LftWid)                 -- Left margin
    DECLARE @T         varchar(50)     ; SET @T         = REPLICATE(' ', @StmWid)                 -- Statement margin
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Display Size Variables  (DSV)                                           EXEC ut_zzUTL zzz,DSV
    ------------------------------------------------------------------------------------------------
    -- Notepad Setup: Font=Fixedsys 8pt; Margins=.5x.5x.5x.5;  Footer='&f   Page &p'
    ------------------------------------------------------------------------------------------------
    DECLARE @811WidPOR smallint        ; SET @811WidPOR = 100                                    -- 08.5 x 11.0 Protrait
    DECLARE @811WidLND smallint        ; SET @811WidLND = 149                                    -- 08.5 x 11.0 Landscape
    ------------------------------------------------------------------------------------------------
    DECLARE @811HgtPOR smallint        ; SET @811HgtPOR =  94                                    -- 08.5 x 11.0 Protrait
    DECLARE @811HgtLND smallint        ; SET @811HgtLND =  63                                    -- 08.5 x 11.0 Landscape
    ------------------------------------------------------------------------------------------------
    DECLARE @RptWid    smallint        ; SET @RptWid    = @811WidPOR                             -- Report width
    DECLARE @WidMn0    smallint        ; SET @WidMn0    = @RptWid - 0                            -- Report width minus 0
    DECLARE @WidMn1    smallint        ; SET @WidMn1    = @RptWid - 1                            -- Report width minus 1
    DECLARE @WidMn2    smallint        ; SET @WidMn2    = @RptWid - 2                            -- Report width minus 2
    DECLARE @WidMn4    smallint        ; SET @WidMn4    = @RptWid - 4                            -- Report width minus 4
    ------------------------------------------------------------------------------------------------
    DECLARE @RptHgt    smallint        ; SET @RptHgt    = @811HgtPOR                             -- Report height
    DECLARE @RptAdj    smallint        ; SET @RptAdj    = 0                                      -- Report height adjustment
    DECLARE @AdjHgt    smallint        ; SET @AdjHgt    = 0                                      -- Adjusted report count
    DECLARE @LinCnt    smallint        ; SET @LinCnt    = 0                                      -- Line count
    ------------------------------------------------------------------------------------------------
    DECLARE @WidSLT    varchar(10)     ; SET @WidSLT    = 'SLT'                                  -- Report width prefix for SQX
    DECLARE @WidDLT    varchar(10)     ; SET @WidDLT    = 'DLT'                                  -- Report width prefix for SQX
    ------------------------------------------------------------------------------------------------
    SET @LftLen = @RptWid - @LftWid                                                              -- Initial Value
    SET @StmLen = @RptWid - @StmWid                                                              -- Initial Value
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Assign Standard Line Variables  (LNV)                                   EXEC ut_zzUTL zzz,LNV
    ------------------------------------------------------------------------------------------------
    DECLARE @LinCmt    varchar(200)    ; SET @LinCmt    = "' "
    ------------------------------------------------------------------------------------------------
    DECLARE @LinSgl    varchar(200)    ; SET @LinSgl    = "'"+REPLICATE(@SGL,@WidMn1 - @LftWid)
    DECLARE @LinDbl    varchar(200)    ; SET @LinDbl    = "'"+REPLICATE(@DBL,@WidMn1 - @LftWid)
    DECLARE @LinAst    varchar(200)    ; SET @LinAst    = "'"+REPLICATE(@AST,@WidMn1 - @LftWid)
    DECLARE @LinPnd    varchar(200)    ; SET @LinPnd    = "'"+REPLICATE(@PND,@WidMn1 - @LftWid)
    DECLARE @LinAts    varchar(200)    ; SET @LinAts    = "'"+REPLICATE(@ATS,@WidMn1 - @LftWid)
    DECLARE @LinTld    varchar(200)    ; SET @LinTld    = "'"+REPLICATE(@TLD,@WidMn1 - @LftWid)
    DECLARE @LinBng    varchar(200)    ; SET @LinBng    = "'"+REPLICATE(@BNG,@WidMn1 - @LftWid)
    ------------------------------------------------------------------------------------------------
    DECLARE @HdrBeg    varchar(200)    ; SET @HdrBeg    = ''
    DECLARE @HdrEnd    varchar(200)    ; SET @HdrEnd    = ''
    DECLARE @HdrCmt    varchar(200)    ; SET @HdrCmt    = ''
    DECLARE @HdrSep    varchar(200)    ; SET @HdrSep    = ''
    DECLARE @LinWid    smallint        ; SET @LinWid    = LEN(@LinSgl)
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Extended Utility Variables  (XUV)                                       EXEC ut_zzUTL zzz,XUV
    ------------------------------------------------------------------------------------------------
    DECLARE @LM        tinyint         ; SET @LM        = 0                                      -- Utility Flag:  Left margin
    DECLARE @SP        tinyint         ; SET @SP        = 0                                      -- Utility Flag:  Space lines
    DECLARE @TL        tinyint         ; SET @TL        = 0                                      -- Utility Flag:  Include header title
    DECLARE @BT        tinyint         ; SET @BT        = 0                                      -- Utility Flag:  Include batch GO
    DECLARE @TR        tinyint         ; SET @TR        = 0                                      -- Utility Flag:  Include transaction logic
    DECLARE @ID        tinyint         ; SET @ID        = 0                                      -- Utility Flag:  Include identity column
    DECLARE @EM        tinyint         ; SET @EM        = 0                                      -- Utility Flag:  Include error message
    ------------------------------------------------------------------------------------------------

    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Development utility constants (EXEC ut_zzNAX DEVUTL,DVU)
    ------------------------------------------------------------------------------------------------
    DECLARE @DevUtlTBX varchar(03)     ; SET @DevUtlTBX = 'TBX'                                   -- Table Scripts
    DECLARE @DevUtlVEX varchar(03)     ; SET @DevUtlVEX = 'VEX'                                   -- View  Scripts
    DECLARE @DevUtlUSX varchar(03)     ; SET @DevUtlUSX = 'USX'                                   -- SProc Scripts
    DECLARE @DevUtlTRX varchar(03)     ; SET @DevUtlTRX = 'TRX'                                   -- Trigger Scripts
    DECLARE @DevUtlUFX varchar(03)     ; SET @DevUtlUFX = 'UFX'                                   -- Function Scripts
    DECLARE @DevUtlLKX varchar(03)     ; SET @DevUtlLKX = 'LKX'                                   -- Lookup Scripts
    DECLARE @DevUtlDMX varchar(03)     ; SET @DevUtlDMX = 'DMX'                                   -- Dimension Scripts
    DECLARE @DevUtlFTX varchar(03)     ; SET @DevUtlFTX = 'FTX'                                   -- Fact Scripts
    DECLARE @DevUtlPOX varchar(03)     ; SET @DevUtlPOX = 'POX'                                   -- Population Scripts
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    --  Working Report Variables  (WRV)                                        EXEC ut_zzUTL zzz,WRV
    ------------------------------------------------------------------------------------------------
    DECLARE @RptLin    varchar(500)    ; SET @RptLin    = ''                                      -- Report line
    DECLARE @RptFil    varchar(100)    ; SET @RptFil    = ''                                      -- Report filename
    DECLARE @RptMsg    varchar(100)    ; SET @RptMsg    = ''                                      -- Report message
    DECLARE @RptFlt    varchar(100)    ; SET @RptFlt    = ''                                      -- Report filter  text
    DECLARE @RptOrd    varchar(100)    ; SET @RptOrd    = ''                                      -- Report orderby text
    DECLARE @RptTtl    varchar(500)    ; SET @RptTtl    = ''                                      -- Report title
    DECLARE @RptHdr    varchar(4000)   ; SET @RptHdr    = ''                                      -- Report header
    DECLARE @RptCmd    varchar(4000)   ; SET @RptCmd    = ''                                      -- Report command
    DECLARE @RptFtr    varchar(4000)   ; SET @RptFtr    = ''                                      -- Report footer
    DECLARE @RptCnt    int             ; SET @RptCnt    = 0                                       -- Report record count (numeric)
    DECLARE @RptCnx    varchar(100)    ; SET @RptCnx    = ''                                      -- Report record count (text)
    DECLARE @RptTsz    dec(15,2)       ; SET @RptTsz    = 0                                       -- Report table size   (numeric)
    DECLARE @RptTsx    varchar(100)    ; SET @RptTsx    = ''                                      -- Report table size   (text)
    DECLARE @RptNul    varchar(20)     ; SET @RptNul    = ''                                      -- Report NULL display value
    DECLARE @RptDtm    datetime        ; SET @RptDtm    = GETDATE()                               -- Report Date/Time value
    DECLARE @RptDat    varchar(10)     ; SET @RptDat    = CONVERT(varchar(10),@RptDtm,121)        -- 121 yyyy-mm-dd hh:mi:ss.mmm | 110 = mm-dd-yyyy | 101 mm/dd/yyyy
    DECLARE @RptTim    varchar(05)     ; SET @RptTim    = CONVERT(varchar(08),@RptDtm,114)        -- 114 (05/08/12) hh:mi:ss:mmm
    DECLARE @RptDtx    varchar(20)     ; SET @RptDtx    = @RptDat+' '+@RptTim                 -- Report Date+Time
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Get Environment Values  (GEV)                                           EXEC ut_zzUTL zzz,GEV
    ------------------------------------------------------------------------------------------------
    DECLARE @PrjCod    varchar(3)      ; SET @PrjCod    = ''                                      -- Project Code
    DECLARE @DvpNam    varchar(12)     ; SET @DvpNam    = ''                                      -- Developer name
    DECLARE @ClnNam    varchar(30)     ; SET @ClnNam    = ''                                      -- Client Name
    DECLARE @WksNam    varchar(20)     ; SET @WksNam    = ''                                      -- Workstation Name
    DECLARE @SinNam    sysname         ; SET @SinNam    = ''                                      -- Instance Name
    DECLARE @SrvNam    sysname         ; SET @SrvNam    = ''                                      -- Server Name
    DECLARE @DbsNam    sysname         ; SET @DbsNam    = ''                                      -- Database Name
    DECLARE @DbsPfx    sysname         ; SET @DbsPfx    = ''                                      -- Database Prefix
    DECLARE @ImpLvl    varchar(3)      ; SET @ImpLvl    = ''                                      -- Implementation Level
    ------------------------------------------------------------------------------------------------
    -- Assign environment values
    ------------------------------------------------------------------------------------------------
    EXEC ut_zzENV GET,
        @PrjCod OUTPUT,
        @DvpNam OUTPUT,
        @ClnNam OUTPUT,
        @WksNam OUTPUT,
        @SinNam OUTPUT,
        @SrvNam OUTPUT,
        @DbsNam OUTPUT,
        @DbsPfx OUTPUT,
        @ImpLvl OUTPUT
    ------------------------------------------------------------------------------------------------

    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Set line space values  (SLS)
    ------------------------------------------------------------------------------------------------
    DECLARE @LinSpc    varchar(20)     ; SET @LinSpc    = NULL                                    -- Line Space
    DECLARE @PrnSpc    bit             ; SET @PrnSpc    = 0                                       -- Print Space Flag
    DECLARE @SpcCnt    smallint        ; SET @SpcCnt    = 0                                       -- Space Count
    SET @CNT = @IncSpc; WHILE @CNT > 0 BEGIN
        SET @LinSpc = ISNULL(@LinSpc,'')+@N; SET @PrnSpc = 1; SET @SpcCnt += 1; SET @CNT -= 1
    END; SET @LinSpc = ISNULL(@LinSpc,'')
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Object Class (EXEC ut_zzNAX OBJCLS,JCL)
    ------------------------------------------------------------------------------------------------
    DECLARE @ObjClsTBL varchar(03)     ; SET @ObjClsTBL = 'TBL'                                   -- Table
    DECLARE @ObjClsVEW varchar(03)     ; SET @ObjClsVEW = 'VEW'                                   -- View
    DECLARE @ObjClsUSP varchar(03)     ; SET @ObjClsUSP = 'USP'                                   -- SProc
    DECLARE @ObjClsTRG varchar(03)     ; SET @ObjClsTRG = 'TRG'                                   -- Trigger
    DECLARE @ObjClsUFN varchar(03)     ; SET @ObjClsUFN = 'UFN'                                   -- Function
    DECLARE @ObjClsPKY varchar(03)     ; SET @ObjClsPKY = 'PKY'                                   -- PrimaryKey
    DECLARE @ObjClsUKY varchar(03)     ; SET @ObjClsUKY = 'UKY'                                   -- UniqueKey
    DECLARE @ObjClsIND varchar(03)     ; SET @ObjClsIND = 'IND'                                   -- Index
    DECLARE @ObjClsSTT varchar(03)     ; SET @ObjClsSTT = 'STT'                                   -- Statistic
    DECLARE @ObjClsFKY varchar(03)     ; SET @ObjClsFKY = 'FKY'                                   -- ForeignKey
    DECLARE @ObjClsDEF varchar(03)     ; SET @ObjClsDEF = 'DEF'                                   -- Default
    DECLARE @ObjClsCHK varchar(03)     ; SET @ObjClsCHK = 'CHK'                                   -- Check
    DECLARE @ObjClsDDL varchar(03)     ; SET @ObjClsDDL = 'DDL'                                   -- DataDict
    DECLARE @ObjClsSCP varchar(03)     ; SET @ObjClsSCP = 'SCP'                                   -- Script
    DECLARE @ObjClsVDN varchar(03)     ; SET @ObjClsVDN = 'VDN'                                   -- VB.NET
    DECLARE @ObjClsUNK varchar(03)     ; SET @ObjClsUNK = 'UNK'                                   -- Unknown
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Object Type (sys.objects.type) (EXEC ut_zzNAX OBJTYP,JTP)
    ------------------------------------------------------------------------------------------------
    DECLARE @ObjTypTBL varchar(03)     ; SET @ObjTypTBL = 'U'                                     -- Table
    DECLARE @ObjTypVEW varchar(03)     ; SET @ObjTypVEW = 'V'                                     -- View
    DECLARE @ObjTypUSP varchar(03)     ; SET @ObjTypUSP = 'P'                                     -- SProc
    DECLARE @ObjTypTRG varchar(03)     ; SET @ObjTypTRG = 'TR'                                    -- Trigger
    DECLARE @ObjTypUFN varchar(03)     ; SET @ObjTypUFN = 'FN'                                    -- Function
    DECLARE @ObjTypPKY varchar(03)     ; SET @ObjTypPKY = 'PK'                                    -- PrimaryKey
    DECLARE @ObjTypUKY varchar(03)     ; SET @ObjTypUKY = 'UQ'                                    -- UniqueKey
    DECLARE @ObjTypIND varchar(03)     ; SET @ObjTypIND = ''                                      -- Index
    DECLARE @ObjTypSTT varchar(03)     ; SET @ObjTypSTT = ''                                      -- Statistic
    DECLARE @ObjTypFKY varchar(03)     ; SET @ObjTypFKY = 'F'                                     -- ForeignKey
    DECLARE @ObjTypDEF varchar(03)     ; SET @ObjTypDEF = 'D'                                     -- Default
    DECLARE @ObjTypCHK varchar(03)     ; SET @ObjTypCHK = 'C'                                     -- Check
    DECLARE @ObjTypDDL varchar(03)     ; SET @ObjTypDDL = ''                                      -- DataDict
    DECLARE @ObjTypSCP varchar(03)     ; SET @ObjTypSCP = ''                                      -- Script
    DECLARE @ObjTypVDN varchar(03)     ; SET @ObjTypVDN = ''                                      -- VB.NET
    DECLARE @ObjTypUNK varchar(03)     ; SET @ObjTypUNK = ''                                      -- Unknown
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Table Category (EXEC ut_zzNAX TBLCAT,TCT)
    ------------------------------------------------------------------------------------------------
    DECLARE @TblCatSTP varchar(03)     ; SET @TblCatSTP = 'STP'                                   -- Setup
    DECLARE @TblCatLKP varchar(03)     ; SET @TblCatLKP = 'LKP'                                   -- Lookup
    DECLARE @TblCatSEC varchar(03)     ; SET @TblCatSEC = 'SEC'                                   -- Security
    DECLARE @TblCatREF varchar(03)     ; SET @TblCatREF = 'REF'                                   -- Reference
    DECLARE @TblCatTRX varchar(03)     ; SET @TblCatTRX = 'TRX'                                   -- Transaction
    DECLARE @TblCatLNK varchar(03)     ; SET @TblCatLNK = 'LNK'                                   -- Link
    DECLARE @TblCatDSS varchar(03)     ; SET @TblCatDSS = 'DSS'                                   -- DecisionSupport
    DECLARE @TblCatHIS varchar(03)     ; SET @TblCatHIS = 'HIS'                                   -- History
    DECLARE @TblCatARC varchar(03)     ; SET @TblCatARC = 'ARC'                                   -- Archive
    DECLARE @TblCatTBL varchar(03)     ; SET @TblCatTBL = 'TBL'                                   -- Table
    DECLARE @TblCatETL varchar(03)     ; SET @TblCatETL = 'ETL'                                   -- Transform
    DECLARE @TblCatDIM varchar(03)     ; SET @TblCatDIM = 'DIM'                                   -- Dimension
    DECLARE @TblCatFCT varchar(03)     ; SET @TblCatFCT = 'FCT'                                   -- Fact
    DECLARE @TblCatVBA varchar(03)     ; SET @TblCatVBA = 'VBA'                                   -- Table (VBAGen)
    DECLARE @TblCatUNK varchar(03)     ; SET @TblCatUNK = 'UNK'                                   -- Unknown
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Table Prefix (EXEC ut_zzNAX TBLPFX,TPX)
    ------------------------------------------------------------------------------------------------
    DECLARE @TblPfxSTP varchar(20)     ; SET @TblPfxSTP = 'stp_'                                  -- @TblPfxSTP + @TblBas
    DECLARE @TblPfxSTB varchar(20)     ; SET @TblPfxSTB = 'Stp'                                   -- @TblPfxSTB + @TblBas
    DECLARE @TblPfxLKP varchar(20)     ; SET @TblPfxLKP = 'lkp_'                                  -- @TblPfxLKP + @TblBas
    DECLARE @TblPfxZLK varchar(20)     ; SET @TblPfxZLK = 'zlk_'                                  -- @TblPfxZLB + @TblBas
    DECLARE @TblPfxZLB varchar(20)     ; SET @TblPfxZLB = 'zlk'                                   -- @TblPfxZLK + @TblBas
    DECLARE @TblPfxSEC varchar(20)     ; SET @TblPfxSEC = 'sec_'                                  -- @TblPfxSEC + @TblBas
    DECLARE @TblPfxREF varchar(20)     ; SET @TblPfxREF = 'ref_'                                  -- @TblPfxREF + @TblBas
    DECLARE @TblPfxTRX varchar(20)     ; SET @TblPfxTRX = 'trx_'                                  -- @TblPfxTRX + @TblBas
    DECLARE @TblPfxDAT varchar(20)     ; SET @TblPfxDAT = 'dat_'                                  -- @TblPfxDAT + @TblBas
    DECLARE @TblPfxTBB varchar(20)     ; SET @TblPfxTBB = 'tbl'                                   -- @TblPfxTBL + @TblBas
    DECLARE @TblPfxTBL varchar(20)     ; SET @TblPfxTBL = 'tbl_'                                  -- @TblPfxTBB + @TblBas
    DECLARE @TblPfxTXX varchar(20)     ; SET @TblPfxTXX = 'Tx'                                    -- @TblPfxTXX + @TblBas
    DECLARE @TblPfxENT varchar(20)     ; SET @TblPfxENT = 'ent_'                                  -- @TblPfxENT + @TblBas
    DECLARE @TblPfxAPP varchar(20)     ; SET @TblPfxAPP = 'app_'                                  -- @TblPfxAPP + @TblBas
    DECLARE @TblPfxAPX varchar(20)     ; SET @TblPfxAPX = 'apx_'                                  -- @TblPfxAPX + @TblBas
    DECLARE @TblPfxLNK varchar(20)     ; SET @TblPfxLNK = 'lnk_'                                  -- @TblPfxLNK + @TblBas
    DECLARE @TblPfxDSS varchar(20)     ; SET @TblPfxDSS = 'dss_'                                  -- @TblPfxDSS + @TblBas
    DECLARE @TblPfxHIS varchar(20)     ; SET @TblPfxHIS = 'his_'                                  -- @TblPfxHIS + @TblBas
    DECLARE @TblPfxARC varchar(20)     ; SET @TblPfxARC = 'arc_'                                  -- @TblPfxARC + @TblBas
    DECLARE @TblPfxZAR varchar(20)     ; SET @TblPfxZAR = 'zar_'                                  -- @TblPfxZAR + @TblBas
    DECLARE @TblPfxVBA varchar(20)     ; SET @TblPfxVBA = 'vba_'                                  -- @TblPfxVBA + @TblBas
    DECLARE @TblPfxLKM varchar(20)     ; SET @TblPfxLKM = 'lkm_'                                  -- @TblPfxLKM + @TblBas
    DECLARE @TblPfxLKX varchar(20)     ; SET @TblPfxLKX = 'lkx_'                                  -- @TblPfxLKX + @TblBas
    DECLARE @TblPfxDMM varchar(20)     ; SET @TblPfxDMM = 'dmm_'                                  -- @TblPfxDMM + @TblBas
    DECLARE @TblPfxDMX varchar(20)     ; SET @TblPfxDMX = 'dmx_'                                  -- @TblPfxDMX + @TblBas
    DECLARE @TblPfxDIM varchar(20)     ; SET @TblPfxDIM = 'dim_'                                  -- @TblPfxDIM + @TblBas
    DECLARE @TblPfxFTS varchar(20)     ; SET @TblPfxFTS = 'fts_'                                  -- @TblPfxFTS + @TblBas
    DECLARE @TblPfxFTM varchar(20)     ; SET @TblPfxFTM = 'ftm_'                                  -- @TblPfxFTM + @TblBas
    DECLARE @TblPfxFTX varchar(20)     ; SET @TblPfxFTX = 'ftx_'                                  -- @TblPfxFTX + @TblBas
    DECLARE @TblPfxFCT varchar(20)     ; SET @TblPfxFCT = 'fct_'                                  -- @TblPfxFCT + @TblBas
    ------------------------------------------------------------------------------------------------
    DECLARE @TblPfxALL varchar(20)     ; SET @TblPfxALL = ''                                      -- @TblPfxFCT + @TblBas
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Datatype categories (EXEC ut_zzNAX DTPCAT,DTC)
    ------------------------------------------------------------------------------------------------
    DECLARE @DtpCatBLN varchar(03)     ; SET @DtpCatBLN = 'BLN'                                   -- Boolean
    DECLARE @DtpCatNBR varchar(03)     ; SET @DtpCatNBR = 'NBR'                                   -- Numeric
    DECLARE @DtpCatDAT varchar(03)     ; SET @DtpCatDAT = 'DAT'                                   -- Date
    DECLARE @DtpCatTXT varchar(03)     ; SET @DtpCatTXT = 'TXT'                                   -- Text
    DECLARE @DtpCatBIN varchar(03)     ; SET @DtpCatBIN = 'BIN'                                   -- Binary
    DECLARE @DtpCatVRN varchar(03)     ; SET @DtpCatVRN = 'VRN'                                   -- Variant
    DECLARE @DtpCatUNK varchar(03)     ; SET @DtpCatUNK = 'UNK'                                   -- Unknown
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Datatype values (EXEC ut_zzNAX DTPVAL,DTV)
    ------------------------------------------------------------------------------------------------
    DECLARE @DtpValBLN varchar(10)     ; SET @DtpValBLN = '0'                                     -- Boolean
    DECLARE @DtpValNBR varchar(10)     ; SET @DtpValNBR = '0'                                     -- Numeric
    DECLARE @DtpValDAT varchar(10)     ; SET @DtpValDAT = 'NULL'                                  -- Date
    DECLARE @DtpValTXT varchar(10)     ; SET @DtpValTXT = ''''                                    -- Text
    DECLARE @DtpValBIN varchar(10)     ; SET @DtpValBIN = ''''                                    -- Binary
    DECLARE @DtpValVRN varchar(10)     ; SET @DtpValVRN = 'NULL'                                  -- Variant
    DECLARE @DtpValUNK varchar(10)     ; SET @DtpValUNK = ''''                                    -- Unknown
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Initialize FieldLevel categories (EXEC ut_zzNAX FLVCAT,FLV)
    ------------------------------------------------------------------------------------------------
    DECLARE @FlvPKY    tinyint         ; SET @FlvPKY    = 01                                      -- Primary Keys
    DECLARE @FlvFKY    tinyint         ; SET @FlvFKY    = 02                                      -- Foreign Keys
    DECLARE @FlvMKY    tinyint         ; SET @FlvMKY    = 03                                      -- Mapping Keys
    DECLARE @FlvRTN    tinyint         ; SET @FlvRTN    = 04                                      -- Return Values
    DECLARE @FlvHTK    tinyint         ; SET @FlvHTK    = 05                                      -- History Tracking
    DECLARE @FlvLKX    tinyint         ; SET @FlvLKX    = 06                                      -- Lookup Exceptons
    DECLARE @FlvLKM    tinyint         ; SET @FlvLKM    = 07                                      -- Lookup KeyMap
    DECLARE @FlvDMM    tinyint         ; SET @FlvDMM    = 08                                      -- Dimension Master
    DECLARE @FlvFTM    tinyint         ; SET @FlvFTM    = 09                                      -- FactTable Master
    DECLARE @FlvFTX    tinyint         ; SET @FlvFTX    = 10                                      -- FactTable Exceptons
    DECLARE @FlvELD    tinyint         ; SET @FlvELD    = 11                                      -- Load ID
    DECLARE @FlvSRC    tinyint         ; SET @FlvSRC    = 12                                      -- Dimension Source IDs
    DECLARE @FlvST1    tinyint         ; SET @FlvST1    = 13                                      -- Standard Fields 1
    DECLARE @FlvSTD    tinyint         ; SET @FlvSTD    = 14                                      -- Standard Fields 2
    DECLARE @FlvST3    tinyint         ; SET @FlvST3    = 15                                      -- Standard Fields 3
    DECLARE @FlvLKP    tinyint         ; SET @FlvLKP    = 16                                      -- Lookup Fields
    DECLARE @FlvLNK    tinyint         ; SET @FlvLNK    = 17                                      -- Link Fields
    DECLARE @FlvPRS    tinyint         ; SET @FlvPRS    = 18                                      -- Parsing Fields
    DECLARE @FlvSEC    tinyint         ; SET @FlvSEC    = 19                                      -- Security Fields
    DECLARE @FlvLKD    tinyint         ; SET @FlvLKD    = 20                                      -- IsLocked Flag
    DECLARE @FlvUSD    tinyint         ; SET @FlvUSD    = 21                                      -- IsUsed Flag
    DECLARE @FlvDSB    tinyint         ; SET @FlvDSB    = 22                                      -- IsDisabled Flag
    DECLARE @FlvDLT    tinyint         ; SET @FlvDLT    = 23                                      -- IsDeleted Flag
    DECLARE @FlvLOK    tinyint         ; SET @FlvLOK    = 24                                      -- Locked  By/On
    DECLARE @FlvCRT    tinyint         ; SET @FlvCRT    = 25                                      -- Created By/On
    DECLARE @FlvUPD    tinyint         ; SET @FlvUPD    = 26                                      -- Updated By/On
    DECLARE @FlvEXP    tinyint         ; SET @FlvEXP    = 27                                      -- Expired By/On
    DECLARE @FlvDEL    tinyint         ; SET @FlvDEL    = 28                                      -- Deleted By/On
    DECLARE @FlvHST    tinyint         ; SET @FlvHST    = 29                                      -- History By/On
    DECLARE @FlvFLG    tinyint         ; SET @FlvFLG    = 30                                      -- History Flags
    DECLARE @FlvCLU    tinyint         ; SET @FlvCLU    = 31                                      -- Clear Used Flag
    DECLARE @FlvXPF    tinyint         ; SET @FlvXPF    = 32                                      -- Expire Record Flag
    DECLARE @FlvMDF    tinyint         ; SET @FlvMDF    = 33                                      -- Modify Record Flag
    DECLARE @FlvANF    tinyint         ; SET @FlvANF    = 34                                      -- AddNew Record Flag
    DECLARE @FlvDLF    tinyint         ; SET @FlvDLF    = 35                                      -- Delete Record Flag
    DECLARE @FlvRNT    tinyint         ; SET @FlvRNT    = 36                                      -- Runit Flag
    DECLARE @FlvRST    tinyint         ; SET @FlvRST    = 37                                      -- Reset Flag
    DECLARE @FlvTMR    tinyint         ; SET @FlvTMR    = 38                                      -- Timer Flag
    DECLARE @FlvDBG    tinyint         ; SET @FlvDBG    = 39                                      -- Debug Flag
    DECLARE @FlvTST    tinyint         ; SET @FlvTST    = 40                                      -- Test Flag
    DECLARE @FlvFWK    tinyint         ; SET @FlvFWK    = 41                                      -- Framework Flags
    DECLARE @FlvUTL    tinyint         ; SET @FlvUTL    = 42                                      -- Utility Flags
    DECLARE @FlvZZZ    tinyint         ; SET @FlvZZZ    = 43                                      -- Template
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Initialize FieldList Constants  (FLC)                                   EXEC ut_zzUTL zzz,FLC
    ------------------------------------------------------------------------------------------------
    DECLARE @DecStmSTD char(8)         ; SET @DecStmSTD = 'DECLARE '                              -- Constant
    DECLARE @DecStmCMT char(8)         ; SET @DecStmCMT = '--CLARE '                              -- Constant
    DECLARE @DecAtsSTD char(9)         ; SET @DecAtsSTD = 'DECLARE @'                             -- Constant
    DECLARE @DecAtsCMT char(9)         ; SET @DecAtsCMT = '--CLARE @'                             -- Constant
    DECLARE @DecStmTXT varchar(9)      ; SET @DecStmTXT = ''                                      -- Reserved
    ------------------------------------------------------------------------------------------------
    DECLARE @SetStmSTD char(4)         ; SET @SetStmSTD = 'SET '                                  -- Constant
    DECLARE @SetStmCMT char(4)         ; SET @SetStmCMT = '--T '                                  -- Constant
    DECLARE @SetAtsSTD char(5)         ; SET @SetAtsSTD = 'SET @'                                 -- Constant
    DECLARE @SetAtsCMT char(5)         ; SET @SetAtsCMT = '--T @'                                 -- Constant
    DECLARE @SetStmTXT varchar(5)      ; SET @SetStmTXT = ''                                      -- Reserved
    ------------------------------------------------------------------------------------------------
    DECLARE @SetStmASN char(7)         ; SET @SetStmASN = '; SET '                                -- Constant
    DECLARE @SetAtsASN char(7)         ; SET @SetAtsASN = '; SET @'                               -- Constant
    DECLARE @SetStmSCN char(2)         ; SET @SetStmSCN = '; '                                    -- Constant
    DECLARE @SetStmEQL char(3)         ; SET @SetStmEQL = ' = '                                   -- Constant
    ------------------------------------------------------------------------------------------------
    DECLARE @ClmNulALN char(9)         ; SET @ClmNulALN = '     NULL'                             -- Constant
    DECLARE @ClmNulNNL char(9)         ; SET @ClmNulNNL = ' NOT NULL'                             -- Constant
    ------------------------------------------------------------------------------------------------
    DECLARE @ClmIdtYID char(9)         ; SET @ClmIdtYID = ' IDENTITY'                             -- Constant
    DECLARE @ClmIdtNID varchar(1)      ; SET @ClmIdtNID = ''                                      -- Constant
    ------------------------------------------------------------------------------------------------
    DECLARE @CfdTxtPFX char(3)         ; SET @CfdTxtPFX = 'AS '                                   -- Constant
    ------------------------------------------------------------------------------------------------
    DECLARE @CmtTxtPFX char(4)         ; SET @CmtTxtPFX = ' -- '                                  -- Constant
    DECLARE @CmtTxtSEP char(2)         ; SET @CmtTxtSEP = ': '                                    -- Constant
    ------------------------------------------------------------------------------------------------
    DECLARE @PrmOupTXT char(7)         ; SET @PrmOupTXT = ' OUTPUT'                               -- Constant
    ------------------------------------------------------------------------------------------------

    --##############################################################################################

    ------------------------------------------------------------------------------------------------
    -- Initialize Statement Constants  (STC)                                   EXEC ut_zzUTL zzz,STC
    ------------------------------------------------------------------------------------------------
    -- For Variable declaration See ut_zzSQJ -> SecDTV
    -- For Column   definition  See ut_zzSQJ -> SecTSC
    /*----------------------------------------------------------------------------------------------
    +++++++++1+++++++++2+++++++++3+++++++++4+++++++++5+++++++++6+++++++++7+++++++++8+++++++++9++++++
    123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456
    ------------------------------------------------------------------------------------------------
    DEC     VAR       _DTP             ;_SET VAR       EQLVAL                 _CMT    (SPC=_ SCN=;_)
    ----------------------------------------------------------------------------------------------*/
    DECLARE @MinLenVAR tinyint         ; SET @MinLenVAR = 9                                       -- Constant Length: Variable Minimum
    DECLARE @MaxLenDTP tinyint         ; SET @MaxLenDTP = 16                                      -- Constant Length: DataType Maximum = LEN('uniqueidentifier')
    ------------------------------------------------------------------------------------------------
    DECLARE @StdRmgVAR tinyint         ; SET @StdRmgVAR = 23                                      -- Constant Margin: Variable   (LM4+DEC+VAR+SPC                        ; to  DTP)
    DECLARE @StdRmgDEC tinyint         ; SET @StdRmgDEC = 39                                      -- Constant Margin: Declare    (LM4+DEC+VAR+SPC+DTP                    ; to  SCN)
    DECLARE @StdRmgEQX tinyint         ; SET @StdRmgEQX = 38                                      -- Constant Margin: Assign     (LM4+DEC+VAR+SPC+DTP+SCN+EQL            ; to  VAL)
    DECLARE @StdRmgSET tinyint         ; SET @StdRmgSET = 55                                      -- Constant Margin: Assign     (LM4+DEC+VAR+SPC+DTP+SCN+SET+VAR        ; to _EQL)
    DECLARE @StdRmgEQL tinyint         ; SET @StdRmgEQL = 58                                      -- Constant Margin: Assign     (LM4+DEC+VAR+SPC+DTP+SCN+SET+VAR+EQL    ; to  VAL)
    DECLARE @StdRmgSTM tinyint         ; SET @StdRmgSTM = 97                                      -- Constant Margin: Statement  (LM4+DEC+VAR+SPC+DTP+SCN+SET+VAR+EQL+VAL; to _CMT)
    ------------------------------------------------------------------------------------------------
    DECLARE @StmLenVAR tinyint         ; SET @StmLenVAR = 19                                      -- Constant Length: Variable   (DEC+VAR                                ; to  SCN)
    DECLARE @StmLenSVR tinyint         ; SET @StmLenSVR = 14                                      -- Constant Length: Assign     (SET+VAR                                ; to _EQL)
    DECLARE @StmLenAVR tinyint         ; SET @StmLenAVR = 17                                      -- Constant Length: Assign     (SET+VAR+EQL                            ; to  VAL)
    DECLARE @StmLenSET tinyint         ; SET @StmLenSET = 19                                      -- Constant Length: Assign     (SCN+SET+VAR+EQL                        ; to  VAL)
    DECLARE @StmLenDEC tinyint         ; SET @StmLenDEC = 35                                      -- Constant Length: Declare    (DEC+VAR+SPC+DTP                        ; to  SCN)
    DECLARE @StmLenINT tinyint         ; SET @StmLenINT = 54                                      -- Constant Length: Initialize (DEC+VAR+SPC+DTP+SCN+SET+VAR+EQL        ; to  VAL)
    DECLARE @StmLenSTM tinyint         ; SET @StmLenSTM = 97                                      -- Constant Length: Statement  (DEC+VAR+SPC+DTP+SCN+SET+VAR+EQL+VAL    ; to _CMT)
    ------------------------------------------------------------------------------------------------
    DECLARE @ClmLenFLD tinyint         ; SET @ClmLenFLD = 55                                      -- Constant Length: ColumnName (CLM                                    ; to  SPC)
    DECLARE @ClmLenCLM tinyint         ; SET @ClmLenCLM = @ClmLenFLD+1                            -- Constant Length: ColumnName (CLM+SPC                                ; to  DTP)
    DECLARE @ClmLenDFN tinyint         ; SET @ClmLenDFN = 93                                      -- Constant Length: Comment    (MX1+CLM+SPC+DTP+NUL+IDT                ; to _CMT)
    /*----------------------------------------------------------------------------------------------
    SET @PFX = 'VarPfx'; SET @COD = 'COD'; SET @DTP = 'varchar(11)'; SET @TTL = 'Description;
    PRINT LEFT(LEFT(LEFT(LEFT(@MX1+@DecAtsSTD+@PFX+@COD+@ITX,@StdRmgVAR)+@DTP+@ITX,@StdRmgDEC)+@SetStmASN+@PFX+@COD+@ITX,@StdRmgSET)+@SetStmEQL+@SQT+@COD+@SQT+@ITX,@StdRmgSTM)+@CmtTxtPFX+@TTL
    ----------------------------------------------------------------------------------------------*/
    DECLARE @WrkLenSTM tinyint         ; SET @WrkLenSTM = @StmLenSTM-@LftWid                      -- Constant Length
    DECLARE @WrkLenCLM tinyint         ; SET @WrkLenCLM = @ClmLenCLM-@LftWid                      -- Constant Length
    DECLARE @WrkLenDFN tinyint         ; SET @WrkLenDFN = @ClmLenDFN-@LftWid                      -- Constant Length
    ------------------------------------------------------------------------------------------------
    DECLARE @VfxMTY    varchar(1)      ; SET @VfxMTY    = ''                                      -- Constant PlaceHolder
    DECLARE @StmMTY    varchar(1)      ; SET @StmMTY    = ''                                      -- Constant PlaceHolder
    DECLARE @StmSPC    char(1)         ; SET @StmSPC    = ' '                                     -- Constant PlaceHolder
    ------------------------------------------------------------------------------------------------
    DECLARE @VlnDEC    tinyint         ; SET @VlnDEC    = 0                                       -- Working Length : Declare    (DEC+VAR+SPC+DTP                        ; to  SCN)
    DECLARE @VlnSET    tinyint         ; SET @VlnSET    = 0                                       -- Working Length : Set        (SCN+SET+VAR+EQL                        ; to  VAL)
    DECLARE @VlnINT    tinyint         ; SET @VlnINT    = 0                                       -- Working Length : Initialize (DEC+VAR+SPC+DTP+SCN+SET+VAR+EQL        ; to  VAL)
    DECLARE @VlnSTM    smallint        ; SET @VlnSTM    = 0                                       -- Working Length : Statement  (DEC+VAR+SPC+DTP+SCN+SET+VAR+EQL+VAL    ; to _CMT)
    ------------------------------------------------------------------------------------------------
    DECLARE @TxtDEC    varchar(300)    ; SET @TxtDEC    = ''                                      -- Working Text   : Declare    (DEC+VAR+SPC+DTP                        ; to  SCN)
    DECLARE @TxtSET    varchar(300)    ; SET @TxtSET    = ''                                      -- Working Text   : Set        (SCN+SET+VAR+EQL                        ; to  VAL)
    DECLARE @TxtINT    varchar(300)    ; SET @TxtINT    = ''                                      -- Working Text   : Initialize (DEC+VAR+SPC+DTP+SCN+SET+VAR+EQL        ; to  VAL)
    DECLARE @TxtSTM    varchar(300)    ; SET @TxtSTM    = ''                                      -- Working Text   : Statement  (DEC+VAR+SPC+DTP+SCN+SET+VAR+EQL+VAL    ; to _CMT)
    ------------------------------------------------------------------------------------------------
    DECLARE @StmOBJ    sysname         ; SET @StmOBJ    = ''                                      -- Working
    DECLARE @StmFLD    sysname         ; SET @StmFLD    = ''                                      -- Working
    DECLARE @StmCLM    sysname         ; SET @StmCLM    = ''                                      -- Working
    DECLARE @StmDTX    char(16)        ; SET @StmDTX    = ''                                      -- Working (Keep this in sync with GenSQL.clsUtlFMT.mcCrtLenDTP = 16)
    DECLARE @StmCFX    varchar(300)    ; SET @StmCFX    = ''                                      -- Working (Virtual field calculation text)
    DECLARE @StmNUL    char(9)         ; SET @StmNUL    = ''                                      -- Working
    DECLARE @StmIDT    varchar(9)      ; SET @StmIDT    = ''                                      -- Working
    DECLARE @StmVAL    varchar(100)    ; SET @StmVAL    = ''                                      -- Working
    DECLARE @StmCMT    varchar(200)    ; SET @StmCMT    = ''                                      -- Working
    ------------------------------------------------------------------------------------------------
    DECLARE @StmFLN    smallint        ; SET @StmFLN    = 0                                       -- Working FldLen
    DECLARE @StmCLN    smallint        ; SET @StmCLN    = 0                                       -- Working ClmLen
    ------------------------------------------------------------------------------------------------
    DECLARE @StmTMP    char(300)       ; SET @StmTMP    = ''                                      -- Working TempText
    DECLARE @FldTMP    char(300)       ; SET @FldTMP    = ''                                      -- Working TempText
    ------------------------------------------------------------------------------------------------
    DECLARE @HasCFX    bit             ; SET @HasCFX    = 0                                       -- Working
    ------------------------------------------------------------------------------------------------

    --##############################################################################################
 
 
    ------------------------------------------------------------------------------------------------
    -- Synchronize Source object with FirstTable  (SJS)
    ------------------------------------------------------------------------------------------------
    DECLARE @SrcObj    sysname        = ''                                                        -- Source object text
    IF LEN(@SrcObj) = 0 EXEC ut_zzNAM TBL,FST,TBL,'',@SrcObj OUTPUT
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT SJS='SJS',SrcObj=LEFT(@SrcObj,30)
    ------------------------------------------------------------------------------------------------
 
    ------------------------------------------------------------------------------------------------
    -- Set Source object identifier  (SJI)
    ------------------------------------------------------------------------------------------------
    DECLARE @SrcID     int          ; SET @SrcID     = ISNULL(OBJECT_ID(@SrcObj),0)
    DECLARE @SrcExs    bit          ; SET @SrcExs    = CASE WHEN @SrcID > 0 THEN 1 ELSE 0 END
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT SJI='SJI',SrcObj=LEFT(@SrcObj,30),SrcID=@SrcID,SrcExs=@SrcExs
    ------------------------------------------------------------------------------------------------
 
    ------------------------------------------------------------------------------------------------
    -- Assign Source object values  (SJV)
    DECLARE @SrcNam    sysname      ; SET @SrcNam    = @SrcObj
    DECLARE @SrcTbl    sysname      ; EXEC ut_zzNAM TBL,NAM,XXX,@SrcNam,@SrcTbl OUTPUT
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT SJV='SJV',SrcObj=LEFT(@SrcObj,30),SrcNam=LEFT(@SrcNam,30),SrcTbl=LEFT(@SrcTbl,30)
    ------------------------------------------------------------------------------------------------
 
    ------------------------------------------------------------------------------------------------
    -- Lookup Source object attributes (SJT - see ut_zzNAM)
    ------------------------------------------------------------------------------------------------
    DECLARE @SrcAls    varchar(10)  ; EXEC ut_zzNAM TBL,ALS,AL0,@SrcTbl,@SrcAls OUTPUT  -- Table Alias
    DECLARE @SrcBas    sysname      ; EXEC ut_zzNAM TBL,BAS,XXX,@SrcTbl,@SrcBas OUTPUT  -- Table Base
    DECLARE @SrcPfx    varchar(10)  ; EXEC ut_zzNAM TBL,PFX,XXX,@SrcTbl,@SrcPfx OUTPUT  -- Table Prefix
    DECLARE @SrcCpx    varchar(20)  ; EXEC ut_zzNAM TBL,CPX,XXX,@SrcTbl,@SrcCpx OUTPUT  -- Column Prefix
    DECLARE @SrcCur    varchar(50)  ; EXEC ut_zzNAM TBL,CUR,XXX,@SrcTbl,@SrcCur OUTPUT  -- Cursor Name
    DECLARE @SrcHst    sysname      ; EXEC ut_zzNAM TBL,HST,XXX,@SrcTbl,@SrcHst OUTPUT  -- History Name
    DECLARE @SrcCat    varchar(03)  ; EXEC ut_zzNAM TBL,CAT,XXX,@SrcTbl,@SrcCat OUTPUT  -- Table Category
    DECLARE @SrcFmx    varchar(03)  ; EXEC ut_zzNAM TBL,FMX,XXX,@SrcTbl,@SrcFmx OUTPUT  -- Table Format
    DECLARE @SrcDat    bit          ; EXEC ut_zzNAM TBL,DAT,XXX,@SrcTbl,@SrcDat OUTPUT  -- IncludeData Flag
    DECLARE @SrcAud    bit          ; EXEC ut_zzNAM TBL,AUD,XXX,@SrcTbl,@SrcAud OUTPUT  -- IncludeAudit Flag
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT SJT='SJT',SrcTbl=LEFT(@SrcTbl,30),SrcAls=@SrcAls,SrcBas=@SrcBas,SrcPfx=@SrcPfx,SrcCpx=@SrcCpx,SrcCur=@SrcCur,SrcHst=@SrcHst,SrcCat=@SrcCat,SrcFmx=@SrcFmx,SrcDat=@SrcDat,SrcAud=@SrcAud
    ------------------------------------------------------------------------------------------------
 
    ------------------------------------------------------------------------------------------------
    -- Lookup Source object type  (SJY - see ut_zzNAM)
    ------------------------------------------------------------------------------------------------
    DECLARE @SrcTyp    varchar(3)   ; EXEC ut_zzNAM LKP,CLS,XXX,@SrcObj,@SrcTyp OUTPUT
    DECLARE @StpTBL    bit          ; SET @StpTBL = CASE WHEN @SrcTyp = @ObjTypTBL THEN 1 ELSE 0 END  -- Table
    DECLARE @StpVEW    bit          ; SET @StpVEW = CASE WHEN @SrcTyp = @ObjTypVEW THEN 1 ELSE 0 END  -- View
    DECLARE @StpUSP    bit          ; SET @StpUSP = CASE WHEN @SrcTyp = @ObjTypUSP THEN 1 ELSE 0 END  -- SProc
    DECLARE @StpTRG    bit          ; SET @StpTRG = CASE WHEN @SrcTyp = @ObjTypTRG THEN 1 ELSE 0 END  -- Trigger
    DECLARE @StpUFN    bit          ; SET @StpUFN = CASE WHEN @SrcTyp = @ObjTypUFN THEN 1 ELSE 0 END  -- Function
    DECLARE @StpPKY    bit          ; SET @StpPKY = CASE WHEN @SrcTyp = @ObjTypPKY THEN 1 ELSE 0 END  -- PrimaryKey
    DECLARE @StpUKY    bit          ; SET @StpUKY = CASE WHEN @SrcTyp = @ObjTypUKY THEN 1 ELSE 0 END  -- UniqueKey
    DECLARE @StpIND    bit          ; SET @StpIND = CASE WHEN @SrcTyp = @ObjTypIND THEN 1 ELSE 0 END  -- Index
    DECLARE @StpFKY    bit          ; SET @StpFKY = CASE WHEN @SrcTyp = @ObjTypFKY THEN 1 ELSE 0 END  -- ForeignKey
    DECLARE @StpDEF    bit          ; SET @StpDEF = CASE WHEN @SrcTyp = @ObjTypDEF THEN 1 ELSE 0 END  -- Default
    DECLARE @StpCHK    bit          ; SET @StpCHK = CASE WHEN @SrcTyp = @ObjTypCHK THEN 1 ELSE 0 END  -- Check
    DECLARE @StpDDL    bit          ; SET @StpDDL = CASE WHEN @SrcTyp = @ObjTypDDL THEN 1 ELSE 0 END  -- DataDict
    DECLARE @StpSCP    bit          ; SET @StpSCP = CASE WHEN @SrcTyp = @ObjTypSCP THEN 1 ELSE 0 END  -- Script
    DECLARE @StpVDN    bit          ; SET @StpVDN = CASE WHEN @SrcTyp = @ObjTypVDN THEN 1 ELSE 0 END  -- VB.NET
    DECLARE @StpUNK    bit          ; SET @StpUNK = CASE WHEN @SrcTyp = @ObjTypUNK THEN 1 ELSE 0 END  -- Unknown
    DECLARE @SrcPrm    bit          ; SET @SrcPrm = CASE WHEN @SrcTyp IN (@ObjTypUSP,@ObjTypTRG,@ObjTypUFN) THEN 1 ELSE 0 END
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT SJY='SJY',SrcObj=LEFT(@SrcObj,30),SrcTyp=@SrcTyp,SrcPrm=@SrcPrm,StpTBL=@StpTBL,StpVEW=@StpVEW,StpUSP=@StpUSP,StpTRG=@StpTRG,StpUFN=@StpUFN,StpPKY=@StpPKY,StpUKY=@StpUKY,StpIND=@StpIND,StpFKY=@StpFKY,StpDEF=@StpDEF,StpCHK=@StpCHK,StpDDL=@StpDDL,StpSCP=@StpSCP,StpVDN=@StpVDN,StpUNK=@StpUNK
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Synchronize Table object with Source object  (TJS)
    ------------------------------------------------------------------------------------------------
    DECLARE @TblObj    sysname      ; SET @TblObj    = @SrcObj
    IF @StpTBL <> 1 BEGIN
        EXEC ut_zzNAM TBN,"","",@SrcObj,@TblObj OUTPUT
    END
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT TJS='TJS',SrcObj=LEFT(@SrcObj,30),TblObj=LEFT(@TblObj,30)
    ------------------------------------------------------------------------------------------------
 
    ------------------------------------------------------------------------------------------------
    -- Set Table object identifier  (TJI)
    ------------------------------------------------------------------------------------------------
    DECLARE @TblID     int          ; SET @TblID     = ISNULL(OBJECT_ID(@TblObj),0)
    DECLARE @TblExs    bit          ; SET @TblExs    = CASE WHEN @TblID > 0 THEN 1 ELSE 0 END
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT TJI='TJI',TblObj=LEFT(@TblObj,30),TblID=@TblID,TblExs=@TblExs
    ------------------------------------------------------------------------------------------------
 
    ------------------------------------------------------------------------------------------------
    -- Assign Table object values  (TJV)
    ------------------------------------------------------------------------------------------------
    DECLARE @TblNam    sysname      ; SET @TblNam    = @TblObj
    IF @DbgFlg = 1 OR 0=9 SELECT TJV='TJV',TblObj=LEFT(@TblObj,30),TblNam=LEFT(@TblNam,30)
    ------------------------------------------------------------------------------------------------
 
    ------------------------------------------------------------------------------------------------
    -- Lookup Table object attributes (TJT - see ut_zzNAM)
    ------------------------------------------------------------------------------------------------
    DECLARE @TblAls    varchar(10)  ; EXEC ut_zzNAM TBL,ALS,AL0,@TblNam,@TblAls OUTPUT  -- Table Alias
    DECLARE @TblBas    sysname      ; EXEC ut_zzNAM TBL,BAS,XXX,@TblNam,@TblBas OUTPUT  -- Table Base
    DECLARE @TblPfx    varchar(10)  ; EXEC ut_zzNAM TBL,PFX,XXX,@TblNam,@TblPfx OUTPUT  -- Table Prefix
    DECLARE @TblCpx    varchar(20)  ; EXEC ut_zzNAM TBL,CPX,XXX,@TblNam,@TblCpx OUTPUT  -- Column Prefix
    DECLARE @TblCur    varchar(50)  ; EXEC ut_zzNAM TBL,CUR,XXX,@TblNam,@TblCur OUTPUT  -- Cursor Name
    DECLARE @TblHst    sysname      ; EXEC ut_zzNAM TBL,HST,XXX,@TblNam,@TblHst OUTPUT  -- History Name
    DECLARE @TblCat    varchar(03)  ; EXEC ut_zzNAM TBL,CAT,XXX,@TblNam,@TblCat OUTPUT  -- Table Category
    DECLARE @TblFmx    varchar(03)  ; EXEC ut_zzNAM TBL,FMX,XXX,@TblNam,@TblFmx OUTPUT  -- Table Format
    DECLARE @TblDat    bit          ; EXEC ut_zzNAM TBL,DAT,XXX,@TblNam,@TblDat OUTPUT  -- IncludeData Flag
    DECLARE @TblAud    bit          ; EXEC ut_zzNAM TBL,AUD,XXX,@TblNam,@TblAud OUTPUT  -- IncludeAudit Flag
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT TJT='TJT',TblNam=LEFT(@TblNam,30),TblAls=@TblAls,TblBas=@TblBas,TblPfx=@TblPfx,TblCpx=@TblCpx,TblCur=@TblCur,TblHst=@TblHst,TblCat=@TblCat,TblFmx=@TblFmx,TblDat=@TblDat,TblAud=@TblAud
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Lookup Table object category (TJC - see ut_zzNAM)
    ------------------------------------------------------------------------------------------------
    DECLARE @TblCtg    varchar(3)   ; EXEC ut_zzNAM TBL,CAT,XXX,@TblNam,@TblCtg OUTPUT
    DECLARE @TctSTP    bit          ; SET @TctSTP = CASE WHEN @TblCtg = @TblCatSTP THEN 1 ELSE 0 END  -- Setup
    DECLARE @TctLKP    bit          ; SET @TctLKP = CASE WHEN @TblCtg = @TblCatLKP THEN 1 ELSE 0 END  -- Lookup
    DECLARE @TctSEC    bit          ; SET @TctSEC = CASE WHEN @TblCtg = @TblCatSEC THEN 1 ELSE 0 END  -- Security
    DECLARE @TctREF    bit          ; SET @TctREF = CASE WHEN @TblCtg = @TblCatREF THEN 1 ELSE 0 END  -- Reference
    DECLARE @TctTRX    bit          ; SET @TctTRX = CASE WHEN @TblCtg = @TblCatTRX THEN 1 ELSE 0 END  -- Transaction
    DECLARE @TctLNK    bit          ; SET @TctLNK = CASE WHEN @TblCtg = @TblCatLNK THEN 1 ELSE 0 END  -- Link
    DECLARE @TctDSS    bit          ; SET @TctDSS = CASE WHEN @TblCtg = @TblCatDSS THEN 1 ELSE 0 END  -- DecisionSupport
    DECLARE @TctHIS    bit          ; SET @TctHIS = CASE WHEN @TblCtg = @TblCatHIS THEN 1 ELSE 0 END  -- History
    DECLARE @TctARC    bit          ; SET @TctARC = CASE WHEN @TblCtg = @TblCatARC THEN 1 ELSE 0 END  -- Archive
    DECLARE @TctTBL    bit          ; SET @TctTBL = CASE WHEN @TblCtg = @TblCatTBL THEN 1 ELSE 0 END  -- Table
    DECLARE @TctFCT    bit          ; SET @TctFCT = CASE WHEN @TblCtg = @TblCatFCT THEN 1 ELSE 0 END  -- Fact
    DECLARE @TctDIM    bit          ; SET @TctDIM = CASE WHEN @TblCtg = @TblCatDIM THEN 1 ELSE 0 END  -- Dimension
    DECLARE @TctETL    bit          ; SET @TctETL = CASE WHEN @TblCtg = @TblCatETL THEN 1 ELSE 0 END  -- Transform
    DECLARE @TctVBA    bit          ; SET @TctVBA = CASE WHEN @TblCtg = @TblCatVBA THEN 1 ELSE 0 END  -- Table (VBAGen)
    DECLARE @TctUNK    bit          ; SET @TctUNK = CASE WHEN @TblCtg = @TblCatUNK THEN 1 ELSE 0 END  -- Unknown
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT TJC='TJC',TblNam=LEFT(@TblNam,30),TblCat=@TblCat,TctSTP=@TctSTP,TctLKP=@TctLKP,TctSEC=@TctSEC,TctREF=@TctREF,TctTRX=@TctTRX,TctLNK=@TctLNK,TctDSS=@TctDSS,TctHIS=@TctHIS,TctARC=@TctARC,TctTBL=@TctTBL,TctFCT=@TctFCT,TctDIM=@TctDIM,TctETL=@TctETL,TctVBA=@TctVBA,TctUNK=@TctUNK
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Initialize general working variables  (MLV - Custom)
    ------------------------------------------------------------------------------------------------
    DECLARE @IsTmpl bit       ; SET @IsTmpl = CASE LEFT(@SrcObj,4) WHEN 'tpl_' THEN 1 ELSE 0 END
    DECLARE @IsCbox bit       ; SET @IsCbox = 0
    DECLARE @IncDup bit       ; SET @IncDup = 0
    DECLARE @IncFld bit       ; SET @IncFld = 0
    DECLARE @NUX    varchar(3); SET @NUX    = ''
    DECLARE @CVX    varchar(4); SET @CVX    = ''
    DECLARE @BLN    varchar(4); SET @BLN    = ''
    DECLARE @ELN    varchar(4); SET @ELN    = ''
    DECLARE @ORR    varchar(3); SET @ORR    = ''
    ------------------------------------------------------------------------------------------------
    -- Initialize general working variables  (MLV - Custom)
    ------------------------------------------------------------------------------------------------
    DECLARE @PrcDsc    varchar(100) ; SET @PrcDsc   = ''
    DECLARE @NamTxt    char(200)    ; SET @NamTxt   = ''
    DECLARE @OldNam    varchar(200) ; SET @OldNam   = ''
    DECLARE @NewNam    varchar(200) ; SET @NewNam   = ''
    DECLARE @DatTxt    varchar(11)  ; SET @DatTxt   = ''
    DECLARE @MaxLen    int          ; SET @MaxLen   = 0
    DECLARE @DecTln    int          ; SET @DecTln   = 13
    DECLARE @ClmTxt    varchar(50)  ; SET @ClmTxt   = ''
    DECLARE @IdnClm    varchar(50)  ; SET @IdnClm   = ''
    DECLARE @TypTxt    varchar(21)  ; SET @TypTxt   = ''
    ------------------------------------------------------------------------------------------------
    -- Assign standard values  (MLV)
    ------------------------------------------------------------------------------------------------
    SET @IdnClm = @InpTxt
    ------------------------------------------------------------------------------------------------
    -- Track temporary table
    ------------------------------------------------------------------------------------------------
    DECLARE @IsTemp    bit          ; SET @IsTemp    = CASE WHEN LEFT(@InpTxt,1) = "#" THEN 1 ELSE 0 END
    DECLARE @TblOwn    varchar(10)  ; SET @TblOwn    = CASE WHEN @IsTemp = 1 THEN "" ELSE "dbo." END
    ------------------------------------------------------------------------------------------------
    -- Assign output flags
    ------------------------------------------------------------------------------------------------
    DECLARE @HasIdn    bit          ; SET @HasIdn    = CASE WHEN LEN(@IdnClm) > 0 THEN 1 ELSE 0 END
    DECLARE @PrcNam    sysname      ; SET @PrcNam   = "_"+@PrjCod+"_RenTbl"
    ------------------------------------------------------------------------------------------------
    -- Assign working text values
    ------------------------------------------------------------------------------------------------
    SET @IdnClm = CASE WHEN LEN(@IdnClm) > 0 THEN @IdnClm ELSE "IdnClm" END
    SET @ClmTxt = CASE WHEN LEN(@StdTx1) > 0 THEN @StdTx1 ELSE "ClmNam" END
    SET @TypTxt = CASE WHEN LEN(@StdTx1) > 0 THEN @StdTx2 ELSE "TypNam" END
    ------------------------------------------------------------------------------------------------
    -- Initialize Module working variables
    ------------------------------------------------------------------------------------------------
    DECLARE @ModNam    varchar(100) ; SET @ModNam    = ''
    DECLARE @ModTtl    varchar(100) ; SET @ModTtl    = ''
    ------------------------------------------------------------------------------------------------
    DECLARE @ModObj    varchar(100) ; SET @ModObj    = ''
    DECLARE @ModSrc    varchar(100) ; SET @ModSrc    = ''
    DECLARE @ModAls    varchar(10)  ; SET @ModAls    = ''
    DECLARE @ModTyp    varchar(11)  ; SET @ModTyp    = ''
    DECLARE @ModBld    varchar(11)  ; SET @ModBld    = ''
    ------------------------------------------------------------------------------------------------
    DECLARE @DvpTxt    char(12)     ; SET @DvpTxt    = @DvpNam
    ------------------------------------------------------------------------------------------------
    DECLARE @FncNam    varchar(100) ; SET @FncNam    = ''
    DECLARE @FncTtl    varchar(100) ; SET @FncTtl    = ''
    DECLARE @FncScp    varchar(10)  ; SET @FncScp    = ''
    ------------------------------------------------------------------------------------------------
    DECLARE @HdrNam    varchar(100) ; SET @HdrNam    = ''
    DECLARE @HdrVer    varchar(100) ; SET @HdrVer    = ''
    ------------------------------------------------------------------------------------------------
    -- Create Table:  #ClmDfn  - Column definitions
    ------------------------------------------------------------------------------------------------
    DECLARE @DfnID     int
    DECLARE @ObjNam    sysname
    DECLARE @ClmNam    sysname
    DECLARE @SysCod    char(2)
    DECLARE @ClmOrd    smallint
    DECLARE @ClmLen    smallint
    DECLARE @ClmPrc    tinyint
    DECLARE @ClmScl    tinyint
    DECLARE @ClmDtp    varchar(30)
    DECLARE @NulFlg    bit
    DECLARE @IdnFlg    bit
    DECLARE @CmpFlg    bit
    DECLARE @ParFlg    bit
    DECLARE @OutFlg    bit
    DECLARE @DelFlg    bit
    DECLARE @CmpTxt    varchar(4000)
    ------------------------------------------------------------------------------------------------
    CREATE TABLE #ClmDfn (
        DfnID                                             int                  NOT NULL IDENTITY PRIMARY KEY CLUSTERED,
        ObjNam                                            sysname                  NULL,
        ClmNam                                            sysname                  NULL,
        SysCod                                            char(2)                  NULL,
        ClmOrd                                            smallint                 NULL,
        ClmLen                                            smallint                 NULL,
        ClmPrc                                            tinyint                  NULL,
        ClmScl                                            tinyint                  NULL,
        ClmDtp                                            varchar(30)              NULL,
        NulFlg                                            bit                  NOT NULL DEFAULT 0,
        IdnFlg                                            bit                  NOT NULL DEFAULT 0,
        CmpFlg                                            bit                  NOT NULL DEFAULT 0,
        ParFlg                                            bit                  NOT NULL DEFAULT 0,
        OutFlg                                            bit                  NOT NULL DEFAULT 0,
        DelFlg                                            bit                  NOT NULL DEFAULT 0,
        CmpTxt                                            varchar(4000)            NULL
    )
    ------------------------------------------------------------------------------------------------
    -- Code Construction:  Variables/Properties
    ------------------------------------------------------------------------------------------------
    DECLARE @VarTxt    char(27)
    DECLARE @DtpTxt    char(21)
    DECLARE @VarNam    varchar(60)
    DECLARE @VarDtp    varchar(30)
    DECLARE @VarPfx    varchar(10)
    ------------------------------------------------------------------------------------------------
 
 
    --##############################################################################################
    -- Output section handler  (OPB)
    --##############################################################################################
 
 
    ------------------------------------------------------------------------------------------------
    -- Initialize package options
    ------------------------------------------------------------------------------------------------
    DECLARE @OupSep    varchar(2)      ; SET @OupSep    = ','
    DECLARE @CusSep    varchar(2)      ; SET @CusSep    = ':'
    DECLARE @CusTyp    varchar(10)     ; SET @CusTyp    = ''
    ------------------------------------------------------------------------------------------------
 
 
    ------------------------------------------------------------------------------------------------
    -- Initialize standard section Constants
    ------------------------------------------------------------------------------------------------
    DECLARE @SecALL    varchar(11)     ; SET @SecALL    = 'ALL'               -- Include all code sections
    DECLARE @SecXXX    varchar(11)     ; SET @SecXXX    = 'XXX'               -- New code section
    DECLARE @SecZZZ    varchar(11)     ; SET @SecZZZ    = 'ZZZ'               -- Invalid code error message
    ------------------------------------------------------------------------------------------------
 
 
    ------------------------------------------------------------------------------------------------
    -- Initialize output section Constants
    ------------------------------------------------------------------------------------------------
    DECLARE @SecPSH varchar(11)     ; SET @SecPSH = 'PSH'                                         -- Push margin 4 spaces right
    DECLARE @SecPUL varchar(11)     ; SET @SecPUL = 'PUL'                                         -- Pull margin 4 spaces left
    DECLARE @SecLMS varchar(11)     ; SET @SecLMS = 'LMS'                                         -- Set left margin lines
    DECLARE @SecLM0 varchar(11)     ; SET @SecLM0 = 'LM0'                                         -- Set left margin to zero
    DECLARE @SecLM1 varchar(11)     ; SET @SecLM1 = 'LM1'                                         -- Set left margin to one
    DECLARE @SecLM2 varchar(11)     ; SET @SecLM2 = 'LM2'                                         -- Set left margin to two
    DECLARE @SecRWP varchar(11)     ; SET @SecRWP = 'RWP'                                         -- Set report width Portrait
    DECLARE @SecRWL varchar(11)     ; SET @SecRWL = 'RWL'                                         -- Set report width Landscape
 
    DECLARE @SecGHF varchar(11)     ; SET @SecGHF = 'GHF'                                         -- Adjust for page header/footer
    DECLARE @SecNPG varchar(11)     ; SET @SecNPG = 'NPG'                                         -- Pad trailing lines for new page
 
    DECLARE @SecLSG varchar(11)     ; SET @SecLSG = 'LSG'                                         -- Set lines for single lines
    DECLARE @SecLDB varchar(11)     ; SET @SecLDB = 'LDB'                                         -- Set lines for double lines
    DECLARE @SecLPD varchar(11)     ; SET @SecLPD = 'LPD'                                         -- Set lines for pound  lines
 
    DECLARE @SecHSG varchar(11)     ; SET @SecHSG = 'HSG'                                         -- Set header for single lines
    DECLARE @SecHDB varchar(11)     ; SET @SecHDB = 'HDB'                                         -- Set header for double lines
    DECLARE @SecHPD varchar(11)     ; SET @SecHPD = 'HPD'                                         -- Set header for pound  lines
 
    DECLARE @SecSLN varchar(11)     ; SET @SecSLN = 'SLN'                                         -- Print single line
    DECLARE @SecDLN varchar(11)     ; SET @SecDLN = 'DLN'                                         -- Print double line
    DECLARE @SecALN varchar(11)     ; SET @SecALN = 'ALN'                                         -- Print asterick line
    DECLARE @SecPLN varchar(11)     ; SET @SecPLN = 'PLN'                                         -- Print pound line
    DECLARE @SecMLN varchar(11)     ; SET @SecMLN = 'MLN'                                         -- Print ampersand line
    DECLARE @SecTLN varchar(11)     ; SET @SecTLN = 'TLN'                                         -- Print tilde line
 
    DECLARE @SecSLT varchar(11)     ; SET @SecSLT = 'SLT'                                         -- Print single    title
    DECLARE @SecDLT varchar(11)     ; SET @SecDLT = 'DLT'                                         -- Print double    title
    DECLARE @SecALT varchar(11)     ; SET @SecALT = 'ALT'                                         -- Print asterick  title
    DECLARE @SecPLT varchar(11)     ; SET @SecPLT = 'PLT'                                         -- Print pound     title
    DECLARE @SecMLT varchar(11)     ; SET @SecMLT = 'MLT'                                         -- Print ampersand title
    DECLARE @SecTLT varchar(11)     ; SET @SecTLT = 'TLT'                                         -- Print tilde     title
 
    DECLARE @SecJLT varchar(11)     ; SET @SecJLT = 'JLT'                                         -- Object list - Tables
    DECLARE @SecJLV varchar(11)     ; SET @SecJLV = 'JLV'                                         -- Object list - Views
    DECLARE @SecJLU varchar(11)     ; SET @SecJLU = 'JLU'                                         -- Object list - SProcs
 
    DECLARE @SecLCP varchar(11)     ; SET @SecLCP = 'LCP'                                         -- Lookup Constants: PKey
    DECLARE @SecLCC varchar(11)     ; SET @SecLCC = 'LCC'                                         -- Lookup Constants: Code
    DECLARE @SecLCN varchar(11)     ; SET @SecLCN = 'LCN'                                         -- Lookup Constants: Name
    DECLARE @SecLCX varchar(11)     ; SET @SecLCX = 'LCX'                                         -- Lookup Constants: CmdTxt
 
    DECLARE @SecLPP varchar(11)     ; SET @SecLPP = 'LPP'                                         -- Lookup Properties: PKey
    DECLARE @SecLPC varchar(11)     ; SET @SecLPC = 'LPC'                                         -- Lookup Properties: Code
    DECLARE @SecLPN varchar(11)     ; SET @SecLPN = 'LPN'                                         -- Lookup Properties: Name
    DECLARE @SecLPX varchar(11)     ; SET @SecLPX = 'LPX'                                         -- Lookup Properties: CmdTxt

    DECLARE @SecSHD varchar(11)     ; SET @SecSHD = 'SHD'                                         -- Basic  module standard comment
    DECLARE @SecBHT varchar(11)     ; SET @SecBHT = 'BHT'                                         -- Basic  module standard comment
    DECLARE @SecBHP varchar(11)     ; SET @SecBHP = 'BHP'                                         -- Basic  module standard comment
    DECLARE @SecBHL varchar(11)     ; SET @SecBHL = 'BHL'                                         -- Basic  module standard comment
    DECLARE @SecBHR varchar(11)     ; SET @SecBHR = 'BHR'                                         -- Basic  module standard comment
 
    DECLARE @SecBMC varchar(11)     ; SET @SecBMC = 'BMC'                                         -- Basic  module standard comment
    DECLARE @SecCMC varchar(11)     ; SET @SecCMC = 'CMC'                                         -- Class  module standard comment
    DECLARE @SecFMC varchar(11)     ; SET @SecFMC = 'FMC'                                         -- Form   module standard comment
    DECLARE @SecRMC varchar(11)     ; SET @SecRMC = 'RMC'                                         -- Report module standard comment
    DECLARE @SecCEV varchar(11)     ; SET @SecCEV = 'CEV'                                         -- Public class events
    DECLARE @SecTFL varchar(11)     ; SET @SecTFL = 'TFL'                                         -- Temporary file location constants
    DECLARE @SecDCS varchar(11)     ; SET @SecDCS = 'DCS'                                         -- Declare class services
    DECLARE @SecBTX varchar(11)     ; SET @SecBTX = 'BTX'                                         -- Basic Text Constants/Variables
    DECLARE @SecXTX varchar(11)     ; SET @SecXTX = 'XTX'                                         -- Extended Text Constants/Variables
    DECLARE @SecSQC varchar(11)     ; SET @SecSQC = 'SQC'                                         -- SQL Construction Constants/Variables
    DECLARE @SecSNC varchar(11)     ; SET @SecSNC = 'SNC'                                         -- Standard Null Comparison Constants/Variables
    DECLARE @SecTCV varchar(11)     ; SET @SecTCV = 'TCV'                                         -- Standard Open Form/Report variables
    DECLARE @SecORV varchar(11)     ; SET @SecORV = 'ORV'                                         -- Standard Open Form/Report variables
    DECLARE @SecSFC varchar(11)     ; SET @SecSFC = 'SFC'                                         -- Standard form constants
    DECLARE @SecCTV varchar(11)     ; SET @SecCTV = 'CTV'                                         -- Criteria tracking variables
    DECLARE @SecSCV varchar(11)     ; SET @SecSCV = 'SCV'                                         -- Standard criteria variables
    DECLARE @SecSTV varchar(11)     ; SET @SecSTV = 'STV'                                         -- Standard criteria variables
    DECLARE @SecCNC varchar(11)     ; SET @SecCNC = 'CNC'                                         -- Connection component constants
    DECLARE @SecPPH varchar(11)     ; SET @SecPPH = 'PPH'                                         -- Public properties header
    DECLARE @SecFIN varchar(11)     ; SET @SecFIN = 'FIN'                                         -- Finish Initilization
    DECLARE @SecDON varchar(11)     ; SET @SecDON = 'DON'                                         -- Done with Code
 
    DECLARE @SecICS varchar(11)     ; SET @SecICS = 'ICS'                                         -- Initialize class services
    DECLARE @SecTXP varchar(11)     ; SET @SecTXP = 'TXP'                                         -- Text concatenation properties
    DECLARE @SecIWT varchar(11)     ; SET @SecIWT = 'IWT'                                         -- Initialize write text services
    DECLARE @SecTXC varchar(11)     ; SET @SecTXC = 'TXC'                                         -- Text concatenation methods
    DECLARE @SecTXM varchar(11)     ; SET @SecTXM = 'TXM'                                         -- Text manipulation methods
    DECLARE @SecTXW varchar(11)     ; SET @SecTXW = 'TXW'                                         -- Text write methods
    DECLARE @SecTOC varchar(11)     ; SET @SecTOC = 'TOC'                                         -- Test text output - class module format
    DECLARE @SecTOB varchar(11)     ; SET @SecTOB = 'TOB'                                         -- Test text output - base module format
    DECLARE @SecTRC varchar(11)     ; SET @SecTRC = 'TRC'                                         -- Translate Criteria methods
 
    DECLARE @SecRPH varchar(11)     ; SET @SecRPH = 'RPH'                                         -- Report header
 
    DECLARE @SecLODCLM varchar(11)     ; SET @SecLODCLM = 'LODCLM'                                -- Load #ObjClm records
 
    DECLARE @SecMOJVAR varchar(11)     ; SET @SecMOJVAR = 'MOJVAR'                                -- Module object variables
    DECLARE @SecMOJPRP varchar(11)     ; SET @SecMOJPRP = 'MOJPRP'                                -- Module object properties
    DECLARE @SecMOJWHR varchar(11)     ; SET @SecMOJWHR = 'MOJWHR'                                -- Module object where
 
    DECLARE @SecBASAPC varchar(11)     ; SET @SecBASAPC = 'BASAPC'                                -- Build module:  bas_AppCons
    DECLARE @SecBASAPF varchar(11)     ; SET @SecBASAPF = 'BASAPF'                                -- Build module:  bas_AppFunc
    DECLARE @SecBASAPT varchar(11)     ; SET @SecBASAPT = 'BASAPT'                                -- Build module:  bas_AppTest
    DECLARE @SecBASAPV varchar(11)     ; SET @SecBASAPV = 'BASAPV'                                -- Build module:  bas_AppVars
 
    DECLARE @SecBASGLB varchar(11)     ; SET @SecBASGLB = 'BASGLB'                                -- Build module:  bas_Global
    DECLARE @SecBASIMX varchar(11)     ; SET @SecBASIMX = 'BASIMX'                                -- Build module:  bas_ImpExp
    DECLARE @SecBASTST varchar(11)     ; SET @SecBASTST = 'BASTST'                                -- Build module:  bas_Test01
    DECLARE @SecBASTBM varchar(11)     ; SET @SecBASTBM = 'BASTBM'                                -- Build module:  bas_TblMnt
 
    DECLARE @SecUTLASC varchar(11)     ; SET @SecUTLASC = 'UTLASC'                                -- Build module:  clsUtlASC
    DECLARE @SecUTLFMT varchar(11)     ; SET @SecUTLFMT = 'UTLFMT'                                -- Build module:  clsUtlFMT
    DECLARE @SecUTLVBG varchar(11)     ; SET @SecUTLVBG = 'UTLVBG'                                -- Build module:  clsUtlVBG
    DECLARE @SecUTLWSH varchar(11)     ; SET @SecUTLWSH = 'UTLWSH'                                -- Build module:  clsUtlWSH
    DECLARE @SecUTLWTX varchar(11)     ; SET @SecUTLWTX = 'UTLWTX'                                -- Build module:  clsUtlWTX
 
    DECLARE @SecGENGLB varchar(11)     ; SET @SecGENGLB = 'GENGLB'                                -- Build module:  vba_Global
    DECLARE @SecGENSTD varchar(11)     ; SET @SecGENSTD = 'GENSTD'                                -- Build module:  vbaGenSTD
    DECLARE @SecGENJET varchar(11)     ; SET @SecGENJET = 'GENJET'                                -- Build module:  vbaGenJET
 
    DECLARE @SecSGNFLG varchar(11)     ; SET @SecSGNFLG = 'SGNFLG'                                -- StdGEN Objects:  Flags
 
    DECLARE @SecSGXTBL varchar(11)     ; SET @SecSGXTBL = 'SGXTBL'                                -- StdGEN Execute:  Table
    DECLARE @SecSGXPRP varchar(11)     ; SET @SecSGXPRP = 'SGXPRP'                                -- StdGEN Execute:  Property
    DECLARE @SecSGXCMD varchar(11)     ; SET @SecSGXCMD = 'SGXCMD'                                -- StdGEN Execute:  Command
    DECLARE @SecSGXRPT varchar(11)     ; SET @SecSGXRPT = 'SGXRPT'                                -- StdGEN Execute:  Report
    DECLARE @SecSGXFRM varchar(11)     ; SET @SecSGXFRM = 'SGXFRM'                                -- StdGEN Execute:  Form
    DECLARE @SecSGXCTL varchar(11)     ; SET @SecSGXCTL = 'SGXCTL'                                -- StdGEN Execute:  Control
    DECLARE @SecSGXGBY varchar(11)     ; SET @SecSGXGBY = 'SGXGBY'                                -- StdGEN Execute:  GroupBy
    DECLARE @SecSGXSQL varchar(11)     ; SET @SecSGXSQL = 'SGXSQL'                                -- StdGEN Execute:  SQLCode
    DECLARE @SecSGXSBY varchar(11)     ; SET @SecSGXSBY = 'SGXSBY'                                -- StdGEN Execute:  SortBy
    DECLARE @SecSGXPTH varchar(11)     ; SET @SecSGXPTH = 'SGXPTH'                                -- StdGEN Execute:  Path
 
    DECLARE @SecGEN_IT varchar(11)     ; SET @SecGEN_IT = 'GEN_IT'                                -- Build module:  vbaGen_IT
    DECLARE @SecGENFRM varchar(11)     ; SET @SecGENFRM = 'GENFRM'                                -- Build module:  vbaGenFRM
    DECLARE @SecGENCTL varchar(11)     ; SET @SecGENCTL = 'GENCTL'                                -- Build module:  vbaGenCTL
    DECLARE @SecGENTBL varchar(11)     ; SET @SecGENTBL = 'GENTBL'                                -- Build module:  vbaGenTBL
    DECLARE @SecGENPRP varchar(11)     ; SET @SecGENPRP = 'GENPRP'                                -- Build module:  vbaGenPRP
    DECLARE @SecGENCMD varchar(11)     ; SET @SecGENCMD = 'GENCMD'                                -- Build module:  vbaGenCMD
    DECLARE @SecGENRPT varchar(11)     ; SET @SecGENRPT = 'GENRPT'                                -- Build module:  vbaGenRPT
    DECLARE @SecGENPTH varchar(11)     ; SET @SecGENPTH = 'GENPTH'                                -- Build module:  vbaGenPTH
    DECLARE @SecGENSQL varchar(11)     ; SET @SecGENSQL = 'GENSQL'                                -- Build module:  vbaGenSQL
    DECLARE @SecGENSBY varchar(11)     ; SET @SecGENSBY = 'GENSBY'                                -- Build module:  vbaGenSBY
    DECLARE @SecGENGBY varchar(11)     ; SET @SecGENGBY = 'GENGBY'                                -- Build module:  vbaGenGBY
    DECLARE @SecGENSLO varchar(11)     ; SET @SecGENSLO = 'GENSLO'                                -- Build module:  vbaGenSLO
 
    DECLARE @SecCLSAPC varchar(11)     ; SET @SecCLSAPC = 'CLSAPC'                                -- Build module:  clsAppCons
    DECLARE @SecCLSAPV varchar(11)     ; SET @SecCLSAPV = 'CLSAPV'                                -- Build module:  clsAppVals
 
    DECLARE @SecBASCMG varchar(11)     ; SET @SecBASCMG = 'BASCMG'                                -- Build module:  bas_CmgCons
    DECLARE @SecCLSCMG varchar(11)     ; SET @SecCLSCMG = 'CLSCMG'                                -- Build module:  clsCtlMgr
 
    DECLARE @SecREGTBL varchar(11)     ; SET @SecREGTBL = 'REGTBL'                                -- Build module:  clsRegTBL
    DECLARE @SecREGPRP varchar(11)     ; SET @SecREGPRP = 'REGPRP'                                -- Build module:  clsRegPRP
    DECLARE @SecREGCMD varchar(11)     ; SET @SecREGCMD = 'REGCMD'                                -- Build module:  clsRegCMD
    DECLARE @SecREGRPT varchar(11)     ; SET @SecREGRPT = 'REGRPT'                                -- Build module:  clsRegRPT
    DECLARE @SecREGPTH varchar(11)     ; SET @SecREGPTH = 'REGPTH'                                -- Build module:  clsRegPTH
    DECLARE @SecREGSRC varchar(11)     ; SET @SecREGSRC = 'REGSRC'                                -- Build module:  clsRegSRC
 
    DECLARE @SecSQLSTM varchar(11)     ; SET @SecSQLSTM = 'SQLSTM'                                -- Build module:  clsSqlSTM
    DECLARE @SecSQLOBY varchar(11)     ; SET @SecSQLOBY = 'SQLOBY'                                -- Build module:  clsSqlOBY
    DECLARE @SecRUNWHR varchar(11)     ; SET @SecRUNWHR = 'RUNWHR'                                -- Build module:  clsRunWHR
 
    DECLARE @SecRUNCMD varchar(11)     ; SET @SecRUNCMD = 'RUNCMD'                                -- Build module:  clsRunCMD
    DECLARE @SecRUNCMM varchar(11)     ; SET @SecRUNCMM = 'RUNCMM'                                -- Build module:  Run_Process_0000 (CALL cls_Method)
    DECLARE @SecRUNCMF varchar(11)     ; SET @SecRUNCMF = 'RUNCMF'                                -- Build module:  Run_Process_0000 (OPEN frm_FrmNam)
 
    DECLARE @SecRUNRPT varchar(11)     ; SET @SecRUNRPT = 'RUNRPT'                                -- Build module:  clsRunRPT
    DECLARE @SecRUNRPR varchar(11)     ; SET @SecRUNRPR = 'RUNRPR'                                -- Build module:  Run_Report_0000
    DECLARE @SecRUNRPX varchar(11)     ; SET @SecRUNRPX = 'RUNRPX'                                -- Build module:  Print_rpt_ReportName
 
    DECLARE @SecRUNUSP varchar(11)     ; SET @SecRUNUSP = 'RUNUSP'                                -- Build module:  clsRunUSP
    DECLARE @SecRUNUSR varchar(11)     ; SET @SecRUNUSR = 'RUNUSR'                                -- Build module:  Run_Process_0000 (EXEC PROC)
    DECLARE @SecRUNUSF varchar(11)     ; SET @SecRUNUSF = 'RUNUSF'                                -- Build module:  Run_Process_0000 (OPEN FORM)
 
    DECLARE @SecRUNRST varchar(11)     ; SET @SecRUNRST = 'RUNRST'                                -- Build module:  clsRunRST
    DECLARE @SecRUNSQL varchar(11)     ; SET @SecRUNSQL = 'RUNSQL'                                -- Build module:  clsRunSQL
    DECLARE @SecRUNSBY varchar(11)     ; SET @SecRUNSBY = 'RUNSBY'                                -- Build module:  clsRunSBY
    DECLARE @SecRUNGBY varchar(11)     ; SET @SecRUNGBY = 'RUNGBY'                                -- Build module:  clsRunGBY
 
    DECLARE @SecFRMCLR varchar(11)     ; SET @SecFRMCLR = 'FRMCLR'                                -- Build module:  sys_Colors
    DECLARE @SecFRMLNK varchar(11)     ; SET @SecFRMLNK = 'FRMLNK'                                -- Build module:  sys_LinkAPP
 
    DECLARE @SecRPTNAR varchar(11)     ; SET @SecRPTNAR = 'RPTNAR'                                -- Build module:  tpl_NARROW
    DECLARE @SecRPTWID varchar(11)     ; SET @SecRPTWID = 'RPTWID'                                -- Build module:  tpl_WIDE
 
    DECLARE @SecANYFRM varchar(11)     ; SET @SecANYFRM = 'ANYFRM'                                -- Build module:  frm_FrmName
    DECLARE @SecANYTAB varchar(11)     ; SET @SecANYTAB = 'ANYTAB'                                -- Build module:  frm_FrmName
    DECLARE @SecANYLST varchar(11)     ; SET @SecANYLST = 'ANYLST'                                -- Build module:  lst_FrmName
    DECLARE @SecANYPOP varchar(11)     ; SET @SecANYPOP = 'ANYPOP'                                -- Build module:  pop_FrmName
    DECLARE @SecANYSUB varchar(11)     ; SET @SecANYSUB = 'ANYSUB'                                -- Build module:  sub_FrmName
    DECLARE @SecANYBAS varchar(11)     ; SET @SecANYBAS = 'ANYBAS'                                -- Build module:  basBasName
    DECLARE @SecANYCLS varchar(11)     ; SET @SecANYCLS = 'ANYCLS'                                -- Build module:  clsClsNam
    DECLARE @SecANYRPT varchar(11)     ; SET @SecANYRPT = 'ANYRPT'                                -- Build module:  rpt_RptNam
 
    DECLARE @SecCLSTCN varchar(11)     ; SET @SecCLSTCN = 'CLSTCN'                                -- Build module:  clsTxtCon
 
    DECLARE @SecADJMRS varchar(11)     ; SET @SecADJMRS = 'ADJMRS'                                -- Object - Manual recordset
 
    DECLARE @SecADFDEC varchar(11)     ; SET @SecADFDEC = 'ADFDEC'                                -- Form - Form module declarations
    DECLARE @SecADFFOP varchar(11)     ; SET @SecADFFOP = 'ADFFOP'                                -- Form - Standard form open function
    DECLARE @SecADPFOP varchar(11)     ; SET @SecADPFOP = 'ADPFOP'                                -- Form - Popup form open functions
    DECLARE @SecADFFUN varchar(11)     ; SET @SecADFFUN = 'ADFFUN'                                -- Form - Standard form module functions
    DECLARE @SecADFSQ1 varchar(11)     ; SET @SecADFSQ1 = 'ADFSQ1'                                -- FORM - Manage SelectOn synchronization
    DECLARE @SecADFSQ2 varchar(11)     ; SET @SecADFSQ2 = 'ADFSQ2'                                -- FORM - Manage SelectOn events
 
    DECLARE @SecADECBO varchar(11)     ; SET @SecADECBO = 'ADECBO'                                -- Event - Combo Box
    DECLARE @SecADECHK varchar(11)     ; SET @SecADECHK = 'ADECHK'                                -- Event - Check Box
    DECLARE @SecADEKPS varchar(11)     ; SET @SecADEKPS = 'ADEKPS'                                -- Event - KeyPress
    DECLARE @SecADETBX varchar(11)     ; SET @SecADETBX = 'ADETBX'                                -- Event - Text Box (text)
    DECLARE @SecADETBC varchar(11)     ; SET @SecADETBC = 'ADETBC'                                -- Event - Text Box (code)
    DECLARE @SecADETBN varchar(11)     ; SET @SecADETBN = 'ADETBN'                                -- Event - Text Box (numeric)
    DECLARE @SecADETBD varchar(11)     ; SET @SecADETBD = 'ADETBD'                                -- Event - Text Box (date)
 
    DECLARE @SecADFCMD varchar(11)     ; SET @SecADFCMD = 'ADFCMD'                                -- Form - Standard form commands
    DECLARE @SecADPCMD varchar(11)     ; SET @SecADPCMD = 'ADPCMD'                                -- Form - Popup form commands
    DECLARE @SecADFPRN varchar(11)     ; SET @SecADFPRN = 'ADFPRN'                                -- Form - Print default report
    DECLARE @SecADFRPT varchar(11)     ; SET @SecADFRPT = 'ADFRPT'                                -- Form - Process default report
    DECLARE @SecADFXTD varchar(11)     ; SET @SecADFXTD = 'ADFXTD'                                -- Form - Extend object for active tax years
    DECLARE @SecADFSYN varchar(11)     ; SET @SecADFSYN = 'ADFSYN'                                -- Form - Synchronize related objects
    DECLARE @SecADFOPN varchar(11)     ; SET @SecADFOPN = 'ADFOPN'                                -- Form - Open external form
    DECLARE @SecADIVFY varchar(11)     ; SET @SecADIVFY = 'ADIVFY'                                -- Form - Verify insert process
 
    DECLARE @SecXTDXYR varchar(11)     ; SET @SecXTDXYR = 'XTDXYR'                                -- Extend Tax Year
    DECLARE @SecXTDXPD varchar(11)     ; SET @SecXTDXPD = 'XTDXPD'                                -- Extend Tax Period
    DECLARE @SecXTDXMN varchar(11)     ; SET @SecXTDXMN = 'XTDXMN'                                -- Extend Tax Month
    DECLARE @SecXTDXAY varchar(11)     ; SET @SecXTDXAY = 'XTDXAY'                                -- Extend Active Tax Year

    DECLARE @SecCLSMIT varchar(11)     ; SET @SecCLSMIT = 'CLSMIT'                                -- Build module:  clsTableName
    DECLARE @SecCLSCIN varchar(11)     ; SET @SecCLSCIN = 'CLSCIN'                                -- Build module:  clsTableName
    DECLARE @SecCLSCLP varchar(11)     ; SET @SecCLSCLP = 'CLSCLP'                                -- Build module:  clsTableName
    DECLARE @SecCLSCLR varchar(11)     ; SET @SecCLSCLR = 'CLSCLR'                                -- Build module:  clsTableName
    DECLARE @SecCLSXST varchar(11)     ; SET @SecCLSXST = 'CLSXST'                                -- Build module:  clsTableName
    DECLARE @SecCLSANW varchar(11)     ; SET @SecCLSANW = 'CLSANW'                                -- Build module:  clsTableName
    DECLARE @SecCLSUPD varchar(11)     ; SET @SecCLSUPD = 'CLSUPD'                                -- Build module:  clsTableName
    DECLARE @SecCLSDEL varchar(11)     ; SET @SecCLSDEL = 'CLSDEL'                                -- Build module:  clsTableName
    DECLARE @SecTSTCPP varchar(11)     ; SET @SecTSTCPP = 'TSTCPP'                                -- Build module:  clsTableName
 
    DECLARE @SecPOPMIT varchar(11)     ; SET @SecPOPMIT = 'POPMIT'                                -- Build module:  clsTableName
 
    DECLARE @SecLSTMIT varchar(11)     ; SET @SecLSTMIT = 'LSTMIT'                                -- Build module:  clsTableName
    ------------------------------------------------------------------------------------------------
 
 
    --##############################################################################################
 
 
    ------------------------------------------------------------------------------------------------
    -- Create header packages  (OPK)
    ------------------------------------------------------------------------------------------------
    --  = Header package template
    DECLARE @PkxHHH    varchar(100)    ; SET @PkxHHH    = ''
    ------------------------------------------------------------------------------------------------
 
 
    ------------------------------------------------------------------------------------------------
    -- Create module packages
    ------------------------------------------------------------------------------------------------
    --  = Module package template
    DECLARE @PkxMMM    varchar(100)    ; SET @PkxMMM    = ''
    ------------------------------------------------------------------------------------------------
 
 
    ------------------------------------------------------------------------------------------------
    -- Build standard packages
    ------------------------------------------------------------------------------------------------
    SET @BldLST = CASE @BldLST
        --------------------------------------------------------------------------------------------
        WHEN 'HHH'   THEN @PkxHHH+''
        --------------------------------------------------------------------------------------------
        WHEN 'MMM'   THEN @PkxMMM
        --------------------------------------------------------------------------------------------
        ELSE @BldLST
    END
    ------------------------------------------------------------------------------------------------
 
 
    ------------------------------------------------------------------------------------------------
    -- Resolve imbedded package codes
    ------------------------------------------------------------------------------------------------
    IF @BldLST LIKE '%HHH,%' SET @BldLST = REPLACE(@BldLST,'HHH,',@PkxHHH)
    ------------------------------------------------------------------------------------------------
 
 
    --##############################################################################################
    WHILE LEFT (@BldLST,LEN(@OupSep)) = @OupSep SET @BldLST = RIGHT(@BldLST,LEN(@BldLST)-LEN(@OupSep))
    WHILE RIGHT(@BldLST,LEN(@OupSep)) = @OupSep SET @BldLST = LEFT (@BldLST,LEN(@BldLST)-LEN(@OupSep))
    WHILE @BldLST LIKE "%"+@OupSep+@OupSep+"%"  SET @BldLST = REPLACE(@BldLST,@OupSep+@OupSep,@OupSep)
    ------------------------------------------------------------------------------------------------
    IF @DbgFlg = 1 OR 0=9 SELECT LUP='LUP',@BldSfx AS BldSfx,@BldCOD AS BldCOD,@BldLST AS BldLST
    ------------------------------------------------------------------------------------------------
    DECLARE @BldSqn varchar(2000); SET @BldSqn = @BldLST
    ------------------------------------------------------------------------------------------------
    WHILE LEN(@BldLST) > 0 BEGIN
    ------------------------------------------------------------------------------------------------
        SET @PrvBld = @BldCOD
        SET @POS = CHARINDEX(@OupSep,@BldLST)
        IF @POS > 0 BEGIN
            SET @BldCOD = LTRIM(RTRIM(LEFT(@BldLST,@POS-1))); SET @BldLST = LTRIM(RIGHT(@BldLST,LEN(@BldLST)-@POS-(LEN(@OupSep)-1)))
        END ELSE BEGIN
            SET @BldCOD = LTRIM(RTRIM(@BldLST)); SET @BldLST = ''
        END
        SET @POS = CHARINDEX(@CusSep,@BldCOD)
        IF @POS > 0 BEGIN
            SET @CusTyp = LTRIM(RTRIM(RIGHT(@BldCOD,LEN(@BldCOD)-@POS)))
            SET @BldCOD = LTRIM(RTRIM(LEFT(@BldCOD, @POS - 1)))
        END ELSE BEGIN
            SET @CusTyp = ''
        END
        ---------------------------------------------------------------------------------------------
        -- Extract output value
        ---------------------------------------------------------------------------------------------
        SET @BldVAL = ''; IF CHARINDEX('=',@BldCOD) > 0 BEGIN
            SET @POS    = CHARINDEX('=',@BldCOD)
            SET @BldVAL = SUBSTRING(@BldCOD,@POS+1,999)
            SET @BldCOD = LEFT(@BldCOD,@POS-1)
        END
        ---------------------------------------------------------------------------------------------
        -- Display output codes/values
        ---------------------------------------------------------------------------------------------
        IF (@DbgFlg = 1 OR 0=9) AND 9=9 BEGIN
            SELECT BldCOD=@BldCOD,BldVAL=@BldVAL,BldSfx=@BldSfx
        END
    --##############################################################################################
 
 
    ------------------------------------------------------------------------------------------------
    -- PSH = Push margin 4 spaces right
    -- PUL = Pull margin 4 spaces left
    -- LMS = Set left margin lines
    -- LM0 = Set left margin to zero
    -- LM1 = Set left margin to one
    -- LM2 = Set left margin to two
    -- RWP = Set report width = Portrait
    -- RWL = Set report width = Landscape
    ------------------------------------------------------------------------------------------------
    IF @BldCOD IN (@SecPSH,@SecPUL,@SecLMS,@SecLM0,@SecLM1,@SecLM2,@SecRWP,@SecRWL) BEGIN  -- (OPM)
    ------------------------------------------------------------------------------------------------
        SET @RptWid = CASE @BldCOD
            WHEN @SecRWP THEN @811WidPOR
            WHEN @SecRWL THEN @811WidLND
            ELSE              @RptWid
        END
        --------------------------------------------------------------------------------------------
        SET @RptHgt = CASE @BldCOD
            WHEN @SecRWP THEN @811HgtPOR
            WHEN @SecRWL THEN @811HgtLND
            ELSE              @RptHgt
        END
        --------------------------------------------------------------------------------------------
        SET @WidSLT = CASE @RptWid WHEN @811WidLND THEN 'RWL,SLT' ELSE 'SLT' END
        SET @WidDLT = CASE @RptWid WHEN @811WidLND THEN 'RWL,DLT' ELSE 'SDT' END
        SET @WidMn0 = @RptWid - 0
        SET @WidMn1 = @RptWid - 1
        SET @WidMn2 = @RptWid - 2
        SET @WidMn4 = @RptWid - 4
        --------------------------------------------------------------------------------------------
        SET @LftMrg = CASE
            WHEN @BldCOD IN (@SecPSH) THEN @LftMrg+1
            WHEN @BldCOD IN (@SecPUL) THEN @LftMrg - 1
            WHEN @BldCOD IN (@SecLM0) THEN 0
            WHEN @BldCOD IN (@SecLM1) THEN 1
            WHEN @BldCOD IN (@SecLM2) THEN 2
            ELSE @LftMrg
        END
        --------------------------------------------------------------------------------------------
        IF @LftMrg < 0 SET @LftMrg = 0
        SET @LftWid = @LftMrg * @MrgInc
        SET @LftLen = @RptWid - @LftWid
        SET @StmMrg = @LftMrg+1
        SET @StmWid = @StmMrg * @MrgInc
        SET @StmLen = @RptWid - @StmWid
        SET @M      = REPLICATE(' ',@LftWid)
        SET @T      = REPLICATE(' ',@LftWid+@MrgInc)
        --------------------------------------------------------------------------------------------
        SET @LinSgl = "'"+REPLICATE('-',@WidMn1 - @LftWid)
        SET @LinDbl = "'"+REPLICATE('=',@WidMn1 - @LftWid)
        SET @LinAst = "'"+REPLICATE('*',@WidMn1 - @LftWid)
        SET @LinPnd = "'"+REPLICATE('#',@WidMn1 - @LftWid)
        SET @LinAts = "'"+REPLICATE('@',@WidMn1 - @LftWid)
        SET @LinTld = "'"+REPLICATE('~',@WidMn1 - @LftWid)
        SET @LinBng = "'"+REPLICATE('!',@WidMn1 - @LftWid)
        SET @LinWid = LEN(@LinSgl)
        --------------------------------------------------------------------------------------------
        CONTINUE
    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    -- GHF = Adjust for page header/footer
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldCOD IN (@SecGHF) BEGIN
        SET @RptAdj = 0; IF ISNUMERIC(@BldVAL) = 1 SET @RptAdj = CAST(@BldVAL AS smallint)
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- NPG = Pad trailing lines for new page
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldCOD IN (@SecNPG) BEGIN
        SET @CNT = @RptHgt - @RptAdj                                            -- Adjust page height
        IF @LinCnt = 0 SET @LinCnt = @CNT                                       -- Adjust zero line count
        WHILE @LinCnt > @CNT BEGIN           SET @LinCnt = @LinCnt - @CNT; END  -- Reduce full pages
        WHILE @LinCnt < @CNT BEGIN PRINT ''   ; SET @LinCnt = @LinCnt+1   ; END  -- Extend to full page
        SET @LinCnt = 0                                                         -- Reset line count
        CONTINUE
    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    -- LSG = Set lines for single lines
    -- LDB = Set lines for double lines
    -- LPD = Set lines for pound  lines
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldCOD IN (@SecLSG,@SecLDB,@SecLPD) BEGIN
        SET @TX1 = CASE @BldCOD
            WHEN @SecLDB THEN @LinDbl
            WHEN @SecLPD THEN @LinPnd
            ELSE @LinSgl
        END
        SET @TX2 = CASE @BldCOD
            WHEN @SecLSG THEN @LinCmt
            ELSE ''
        END
        SET @TX3 = @TX1
        SET @HdrBeg = @TX1
        SET @HdrCmt = @TX2
        SET @HdrEnd = @TX3
        CONTINUE
    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    -- HSG = Set header for single lines
    -- HDB = Set header for double lines
    -- HPD = Set header for pound  lines
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldCOD IN (@SecHSG,@SecHDB,@SecHPD) BEGIN
        SET @TX1 = CASE @BldCOD
            WHEN @SecHDB THEN @LinDbl
            WHEN @SecHPD THEN @LinDbl
            ELSE @LinSgl
        END
        SET @TX2 = CASE @BldCOD
            WHEN @SecHSG THEN @LinCmt
            ELSE ''
        END
        SET @TX3 = CASE @BldCOD
            WHEN @SecHDB THEN @LinDbl
            WHEN @SecHPD THEN @LinPnd
            ELSE @TX1
        END
        SET @HdrBeg = @TX1
        SET @HdrCmt = @TX2
        SET @HdrEnd = @TX3
        CONTINUE
    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    -- SLN = Print single line
    -- DLN = Print double line
    -- ALN = Print asterick line
    -- PLN = Print pound line
    -- MLN = Print ampersand line
    -- TLN = Print tilde line
    /*----------------------------------------------------------------------------------------------
        --   ut_zzSQX Oup Stx Lft Spc
        EXEC ut_zzSQX SLN,'' ,1  ,0
        EXEC ut_zzSQX DLN,'' ,1  ,0
        EXEC ut_zzSQX ALN,'' ,1  ,0
        EXEC ut_zzSQX PLN,'' ,1  ,0
        EXEC ut_zzSQX MLN,'' ,1  ,0
        EXEC ut_zzSQX TLN,'' ,1  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSLN,@SecDLN,@SecALN,@SecPLN,@SecMLN,@SecTLN) BEGIN
        SET @TX1 = CASE @BldCOD
            WHEN @SecSLN THEN @LinSgl
            WHEN @SecDLN THEN @LinDbl
            WHEN @SecALN THEN @LinAst
            WHEN @SecPLN THEN @LinPnd
            WHEN @SecMLN THEN @LinAts
            WHEN @SecTLN THEN @LinTld
            ELSE              @LinSgl
        END
        IF @PrnSpc = 1 PRINT @LinSpc
        PRINT @M+@TX1
        CONTINUE
    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    -- SLT = Print single    title
    -- DLT = Print double    title
    -- ALT = Print asterick  title
    -- PLT = Print pound     title
    -- MLT = Print ampersand title
    -- TLT = Print tilde     title
    /*----------------------------------------------------------------------------------------------
        --   ut_zzSQX Oup Stx                    Lft Spc Ttl Bat Tx1         Tx2 Tx3 Trn Idn Erm
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,''                    ,1  ,2  ,1
        EXEC ut_zzSQX SLT,''                    ,1  ,2  ,2
        EXEC ut_zzSQX SLT,''                    ,1  ,2  ,3
        EXEC ut_zzSQX SLT,''                    ,1  ,2  ,4
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,1
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,2
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,3
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,4
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        --------------------------------------------------------------------------------------------
        --   ut_zzSQX Oup Stx                    Lft Spc Ttl Bat Tx1         Tx2 Tx3 Trn Idn Erm
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX DLT,''                    ,1  ,2  ,1
        EXEC ut_zzSQX DLT,''                    ,1  ,2  ,2
        EXEC ut_zzSQX DLT,''                    ,1  ,2  ,3
        EXEC ut_zzSQX DLT,''                    ,1  ,2  ,4
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,1
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,2
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,3
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,4
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        --------------------------------------------------------------------------------------------
        --   ut_zzSQX Oup Stx                    Lft Spc Ttl Bat Tx1         Tx2 Tx3 Trn Idn Erm
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,1
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,1
        EXEC ut_zzSQX ALT,'Your_message_text'   ,1  ,2  ,1
        EXEC ut_zzSQX PLT,'Your_message_text'   ,1  ,2  ,1
        EXEC ut_zzSQX MLT,'Your_message_text'   ,1  ,2  ,1
        EXEC ut_zzSQX TLT,'Your_message_text'   ,1  ,2  ,1
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,2
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,2
        EXEC ut_zzSQX ALT,'Your_message_text'   ,1  ,2  ,2
        EXEC ut_zzSQX PLT,'Your_message_text'   ,1  ,2  ,2
        EXEC ut_zzSQX MLT,'Your_message_text'   ,1  ,2  ,2
        EXEC ut_zzSQX TLT,'Your_message_text'   ,1  ,2  ,2
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,3
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,3
        EXEC ut_zzSQX ALT,'Your_message_text'   ,1  ,2  ,3
        EXEC ut_zzSQX PLT,'Your_message_text'   ,1  ,2  ,3
        EXEC ut_zzSQX MLT,'Your_message_text'   ,1  ,2  ,3
        EXEC ut_zzSQX TLT,'Your_message_text'   ,1  ,2  ,3
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,4
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,4
        EXEC ut_zzSQX ALT,'Your_message_text'   ,1  ,2  ,4
        EXEC ut_zzSQX PLT,'Your_message_text'   ,1  ,2  ,4
        EXEC ut_zzSQX MLT,'Your_message_text'   ,1  ,2  ,4
        EXEC ut_zzSQX TLT,'Your_message_text'   ,1  ,2  ,4
        --------------------------------------------------------------------------------------------
        --   ut_zzSQX Oup Stx                    Lft Spc Ttl Bat Tx1         Tx2 Tx3 Trn Idn Erm
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX ALT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX PLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX MLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        EXEC ut_zzSQX TLT,'Your_message_text'   ,1  ,2  ,1  ,0  ,'SubMessage'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX ALT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX PLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX MLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        EXEC ut_zzSQX TLT,'Your_message_text'   ,1  ,2  ,2  ,0  ,'SubMessage'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX ALT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX PLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX MLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        EXEC ut_zzSQX TLT,'Your_message_text'   ,1  ,2  ,3  ,0  ,'SubMessage'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzSQX SLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        EXEC ut_zzSQX DLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        EXEC ut_zzSQX ALT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        EXEC ut_zzSQX PLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        EXEC ut_zzSQX MLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
        EXEC ut_zzSQX TLT,'Your_message_text'   ,1  ,2  ,4  ,0  ,'SubMessage'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSLT,@SecDLT,@SecALT,@SecPLT,@SecMLT,@SecTLT) BEGIN
        SET @TXT = ''
        SET @TX1 = CASE @BldCOD
            WHEN @SecSLT THEN @LinSgl
            WHEN @SecDLT THEN @LinDbl
            WHEN @SecALT THEN @LinAst
            WHEN @SecPLT THEN @LinPnd
            WHEN @SecMLT THEN @LinAts
            WHEN @SecTLT THEN @LinTld
            ELSE              @LinSgl
        END
        SET @TX2 = CASE @BldCOD
            WHEN @SecSLT THEN @LinSgl
            WHEN @SecDLT THEN @LinDbl
            WHEN @SecALT THEN @LinAst
            WHEN @SecPLT THEN @LinPnd
            WHEN @SecMLT THEN @LinAts
            WHEN @SecTLT THEN @LinTld
            ELSE              @LinSgl
        END
        IF @PrnSpc = 1 PRINT @LinSpc
        IF @IncTtl = 1 BEGIN
            PRINT @M+@LinCmt+@InpTxt
        END ELSE IF @IncTtl = 2 BEGIN
            PRINT @M+@TX1+@N+@M+@LinCmt+@InpTxt+@N+@M+@TX2
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    END
    ------------------------------------------------------------------------------------------------
 
    --##############################################################################################


    --XGM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@XGM
 

    --##############################################################################################
 
    ------------------------------------------------------------------------------------------------
    -- Build Environment
    ------------------------------------------------------------------------------------------------
    DECLARE @BldEnvMAC char(03)         = 'MAC'                                                   -- MSAccess
    DECLARE @BldEnvLSW char(03)         = 'LSW'                                                   -- LightSwitch
    DECLARE @BldEnvPBI char(03)         = 'PBI'                                                   -- PowerBI
    DECLARE @BldEnvUNK char(03)         = 'UNK'                                                   -- Unknown
    ------------------------------------------------------------------------------------------------
    -- Build Class
    ------------------------------------------------------------------------------------------------
    DECLARE @BldClsVBA char(03)         = 'VBA'                                                   -- VisualBasic
    DECLARE @BldClsCSH char(03)         = 'CSH'                                                   -- CSharp
    DECLARE @BldClsDAX char(03)         = 'DAX'                                                   -- DAX
    ------------------------------------------------------------------------------------------------
    -- Build Prefix
    ------------------------------------------------------------------------------------------------
    DECLARE @BldPfxMAB char(03)         = 'MAB'                                                   -- MSAccess Basic
    DECLARE @BldPfxMAC char(03)         = 'MAC'                                                   -- MSAccess Class
    DECLARE @BldPfxMAF char(03)         = 'MAF'                                                   -- MSAccess Form
    DECLARE @BldPfxMAR char(03)         = 'MAR'                                                   -- MSAccess Report
    DECLARE @BldPfxMAP char(03)         = 'MAP'                                                   -- MSAccess Procedure
    ------------------------------------------------------------------------------------------------
    -- Build Category
    ------------------------------------------------------------------------------------------------
    DECLARE @BldCatBAS char(03)         = 'BAS'                                                   -- Basic
    DECLARE @BldCatCLS char(03)         = 'CLS'                                                   -- Class
    DECLARE @BldCatFRM char(03)         = 'FRM'                                                   -- Form
    DECLARE @BldCatRPT char(03)         = 'RPT'                                                   -- Report
    DECLARE @BldCatPRC char(03)         = 'PRC'                                                   -- Procedure
    DECLARE @BldCatUNK char(03)         = 'UNK'                                                   -- Unknown
    ------------------------------------------------------------------------------------------------
    -- Build Type
    ------------------------------------------------------------------------------------------------
    DECLARE @BldTypMOD char(03)         = 'MOD'                                                   -- Module
    DECLARE @BldTypTST char(03)         = 'TST'                                                   -- Test
    ------------------------------------------------------------------------------------------------
    DECLARE @BldTypFRM char(03)         = 'FRM'                                                   -- StdForm
    DECLARE @BldTypTFM char(03)         = 'TFM'                                                   -- TabForm
    DECLARE @BldTypSFM char(03)         = 'SFM'                                                   -- SubForm
    DECLARE @BldTypLST char(03)         = 'LST'                                                   -- ListForm
    DECLARE @BldTypPOP char(03)         = 'POP'                                                   -- PopupForm
    DECLARE @BldTypRVW char(03)         = 'RVW'                                                   -- ReviewForm
    ------------------------------------------------------------------------------------------------
 
 
    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- SHD = Basic Header - Class Module
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup Stx        Lft Spc Ttl Bat Tx1 Tx2 Tx3 Trn Idn Erm
        EXEC ut_zzVBX SHD,zzz_Test01,0  ,0  ,0  ,0  ,'' ,'' ,'' ,0  ,0  ,0
        EXEC ut_zzVBX BHT,zzz_Test01,0  ,0  ,0  ,0  ,'' ,'' ,'' ,0  ,0  ,0
        EXEC ut_zzVBX BHP,zzz_Test01,0  ,0  ,0  ,0  ,'' ,'' ,'' ,0  ,0  ,0
        EXEC ut_zzVBX BHL,zzz_Test01,0  ,0  ,0  ,0  ,'' ,'' ,'' ,0  ,0  ,0
        EXEC ut_zzVBX BHR,zzz_Test01,0  ,0  ,0  ,0  ,'' ,'' ,'' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    IF @BldCOD IN (@SecSHD) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @ModSrc = CASE WHEN LEN(@InpObj) > 0 THEN @InpObj ELSE 'SourceObject'                END  -- SourceObject TableName
        SET @ModTtl = CASE WHEN LEN(@StdTx1) > 0 THEN @StdTx1 ELSE ''                            END  -- ModuleTitle
        SET @ModAls = CASE WHEN LEN(@StdTx2) > 0 THEN @StdTx2 ELSE ''                            END  -- Alias
        SET @ModBld = CASE WHEN LEN(@StdTx3) > 0 THEN @StdTx3 ELSE 'ZZZABC'                      END  -- BldCOD
        --------------------------------------------------------------------------------------------
        -- Set Build Environment
        --------------------------------------------------------------------------------------------
        SET @BldENV = CASE LEFT(@ModBld,2)
           WHEN LEFT(@BldEnvMAC,2) THEN @BldEnvMAC
           WHEN LEFT(@BldEnvLSW,2) THEN @BldEnvLSW
           WHEN LEFT(@BldEnvPBI,2) THEN @BldEnvPBI
           ELSE                         @BldEnvUNK 
        END
        --------------------------------------------------------------------------------------------
        -- Set Build Class
        --------------------------------------------------------------------------------------------
        SET @BldCLS = CASE @BldENV
           WHEN @BldEnvLSW         THEN @BldClsCSH
           WHEN @BldEnvPBI         THEN @BldClsDAX
           ELSE                         @BldClsVBA 
        END
        --------------------------------------------------------------------------------------------
        -- Set Build Category
        --------------------------------------------------------------------------------------------
        SET @BldCAT = CASE SUBSTRING(@ModBld,3,1)
           WHEN LEFT(@BldCatBAS,1) THEN @BldCatBAS
           WHEN LEFT(@BldCatCLS,1) THEN CASE RIGHT(@ModBld,3) WHEN @BldTypTST THEN @BldCatBAS ELSE @BldCatCLS END
           WHEN LEFT(@BldCatFRM,1) THEN @BldCatFRM
           WHEN LEFT(@BldCatRPT,1) THEN @BldCatRPT
           WHEN LEFT(@BldCatPRC,1) THEN @BldCatPRC
           ELSE                         @BldCatUNK 
        END
        --------------------------------------------------------------------------------------------
        -- Set Build Type
        --------------------------------------------------------------------------------------------
        SET @BldTYP = RIGHT(@ModBld,3)
        --------------------------------------------------------------------------------------------
        -- Set Module Alias
        --------------------------------------------------------------------------------------------
        SET @ModAls = CASE @BldCAT
        --------------------------------------------------------------------------------------------
           WHEN @BldCatBAS THEN CASE @BldTYP WHEN @BldTypTST THEN 'test_' ELSE LOWER(@BldCAT) END
           WHEN @BldCatCLS THEN LOWER(@BldCAT)
           WHEN @BldCatRPT THEN LOWER(@BldCAT)
           WHEN @BldCatBAS THEN LOWER(@BldCAT)
           ELSE                 LOWER(@BldTYP)
        END
        --------------------------------------------------------------------------------------------
        -- Set Module Title
        --------------------------------------------------------------------------------------------
        IF LEN(@ModTtl) = 0 SET @ModTtl = CASE @BldTYP
        --------------------------------------------------------------------------------------------
           WHEN @BldTypMOD THEN 'Manage ' +@ModSrc+' Records'
           WHEN @BldTypTST THEN 'Test '   +@ModSrc+' Class'
           -----------------------------------------------------------------------------------------
           WHEN @BldTypFRM THEN 'Manage ' +@ModSrc+' Process'
           WHEN @BldTypTFM THEN 'Manage ' +@ModSrc+' Process'
           WHEN @BldTypSFM THEN 'Manage ' +@ModSrc+' Process'
           WHEN @BldTypLST THEN 'Display '+@ModSrc+' Records'
           WHEN @BldTypPOP THEN 'Modify ' +@ModSrc+' Records'
           WHEN @BldTypRVW THEN 'Review ' +@ModSrc+' Records'
           -----------------------------------------------------------------------------------------
           ELSE                 'ModuleTitle'
        --------------------------------------------------------------------------------------------
        END
        --------------------------------------------------------------------------------------------
        SET @ModObj = @ModAls+REPLACE(@ModSrc,'zzz_','')
        SET @ModNam = @ModObj
        --------------------------------------------------------------------------------------------
        PRINT "'###################################################################################################"
        PRINT "' Name:"
        PRINT "'   "+@ModNam
        PRINT "'###################################################################################################"
        PRINT "' Purpose:"
        PRINT "'   "+@ModTtl
        PRINT "'###################################################################################################"
        PRINT "' Regen:"
        PRINT "'   EXEC ut_zzVBA "+@ModBld+","+@ModSrc+",'"+@ModTtl+"',cls"
        PRINT "'###################################################################################################"
        PRINT "' Developer    Date       Action"
        PRINT "' ------------ ---------- --------------------------------------------------------------------------"
        PRINT "' "+@DvpTxt+" "+CONVERT(char(10),GETDATE(),121)+" Created the script"
        PRINT "'###################################################################################################"
        PRINT "Option Compare Database"
        PRINT "Option Explicit"
        PRINT "Option Base 0"
        PRINT "'***************************************************************************************************"
        PRINT "' Initialize module message constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModNam                  As String = """+@ModNam+""""
        PRINT "Private Const mcModTtl                  As String = """+@ModTtl+""""
        PRINT "Private Const mcModErr                  As String = mcModNam"
        PRINT "Private Const mcModMsg                  As String = mcModTtl & "" - """
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- CLSMIT = Build Class Module:  Module Items
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACMOD,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSMIT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrSQL                         As String                                                  ' SQL Text"
        PRINT "Private mstrCLF                         As String                                                  ' SQL LineFeed"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSCIN = Build Class Module:  Class Initialize
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACMOD,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSCIN) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize Module Objects"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Objects"
        PRINT "    ' Initialize Defaults"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "    ' Initialize Flags"
        PRINT "    ' Initialize Properties"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Standard Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Default Properties"
        PRINT "'###################################################################################################"
        PRINT "Private Property Get NulTXT() As String:                               NulTXT = ""Null"": End Property"
        PRINT "Private Property Get NulVAL() As Variant:                                NulVAL = Null: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' SQL Builder: Clear/Add Text"
        PRINT "'###################################################################################################"
        PRINT "Private Sub AX_Clear(): mstrSQL = """": mstrCLF = """": End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Sub AX_Print(): Debug.Print mstrSQL: End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Sub AX(ByVal strTXT As String): mstrSQL = mstrSQL & mstrCLF & strTXT: mstrCLF = vbCrLf: End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function AQ(ByVal strTXT As String): AQ = Replace(strTXT, ""'"", ""''""): End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Module Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Column Test Values"
        PRINT "'###################################################################################################"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSCLP = Build Class Module:  Column Properties
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACMOD,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSCLP) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Column Properties"
        PRINT "'###################################################################################################"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSCLR = Build Class Module:  Clear Data Values
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACMOD,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSCLR) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Custom Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' REQDAT:  Verify Required Data"
        PRINT "'###################################################################################################"
        PRINT "Public Function HasRequiredData() As Boolean"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    If mdatDate_Column IS NULL Then GoTo Exit_Procedure"
        PRINT "    If Len(mstrText_Column) = 0 Then GoTo Exit_Procedure"
        PRINT "    If mlngNumb_Column = 0 Then  GoTo Exit_Procedure"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    HasRequiredData = True"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' CLEAR:  Clear Property Variables"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Clear()"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Const pcMsgTtl = mcModNam & "".Clear"""
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSXST = Build Class Module:  Check Existence
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACMOD,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSXST) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' EXISTS:  Check to see if a designated record exists"
        PRINT "'###################################################################################################"
        PRINT "Public Function Exists( _"
        PRINT "    ByVal lngPrimarySKey As Long _"
        PRINT ") As Boolean"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Const pcMsgTtl = mcModNam & "".Exists"""
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If lngPrimarySKey = 0 The GoTo Exit_Procedure"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call AX_Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    AX ""SELECT"""
        PRINT "    AX ""    COUNT(*) As [RecCnt]"""
        PRINT "    AX ""FROM"""
        PRINT "    AX ""    [dbo_"+@InpObj+"] [obj]"""
        PRINT "    AX ""WHERE 1=1"""
        PRINT "    AX ""AND [obj].[PrimarySKey] = "" & lngPrimarySKey & """""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call AX_Print  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim dbs As Database: Set dbs = CurrentDb: Dim rst As Recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Set rst = dbs.OpenRecordset(mstrSQL): With rst"
        PRINT "        Exists = (.Fields(""RecCnt"") > 0)"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set rst = Nothing: Set dbs = Nothing"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' READ:  Read data from a designated record"
        PRINT "'###################################################################################################"
        PRINT "Public Function Read( _"
        PRINT "    ByVal lngPrimarySKey As Long _"
        PRINT ") As Boolean"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Const pcMsgTtl = mcModNam & "".Read"""
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If lngPrimarySKey = 0 The GoTo Exit_Procedure"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call AX_Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    AX ""SELECT"""
        PRINT "    AX ""    [obj].*"""
        PRINT "    AX ""FROM"""
        PRINT "    AX ""    [dbo_"+@InpObj+"] [obj]"""
        PRINT "    AX ""WHERE 1=1"""
        PRINT "    AX ""AND [obj].[PrimarySKey] = "" & lngPrimarySKey & """""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call AX_Print  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim dbs As Database: Set dbs = CurrentDb: Dim rst As Recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Set rst = dbs.OpenRecordset(mstrSQL, dbOpenForwardOnly, dbSeeChanges): With rst: Do While Not .EOF"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSANW = Build Class Module:  Add New Record
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACMOD,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSANW) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Read = True: Exit Do: Loop: End With"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set rst = Nothing: Set dbs = Nothing"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' ADDNEW:  Add a new data record"
        PRINT "'###################################################################################################"
        PRINT "Public Function AddNew() As Boolean"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Const pcMsgTtl = mcModNam & "".AddNew"""
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Cannot Create a Duplicate PrimarySKey"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Exists(mlngPrimarySKey) Then GoTo Exit_Procedure"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Verify Required Data"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Not HasRequiredData Then GoTo Exit_Procedure"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call AX_Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    AX ""INSERT INTO [dbo_"+@InpObj+"] ("""
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSUPD = Build Class Module:  Update Record
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACMOD,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSUPD) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "    AX "")"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call AX_Print  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim dbs As Database: Set dbs = CurrentDb: Dim qdf As QueryDef: Set qdf = dbs.CreateQueryDef("""")"
        PRINT "    qdf.SQL = mstrSQL: Call qdf.Execute: AddNew = True"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Read(GetMaxSKey)  ' Get calculated field values"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set qdf = Nothing: Set dbs = Nothing"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' UPDATE:  Update the current data record"
        PRINT "'###################################################################################################"
        PRINT "Public Function Update() As Boolean"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Const pcMsgTtl = mcModNam & "".Update"""
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Cannot Update a Missing PrimarySKey"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Not Exists(mlngPrimarySKey) Then GoTo Exit_Procedure"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Verify Required Data"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If mdatDate_Column IS NULL Then GoTo Exit_Procedure"
        PRINT "    If Len(mstrText_Column) = 0 Then GoTo Exit_Procedure"
        PRINT "    If mlngNumb_Column = 0 Then  GoTo Exit_Procedure"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call AX_Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    AX ""UPDATE"""
        PRINT "    AX ""    [dbo_"+@InpObj+"]"""
        PRINT "    AX ""SET"""
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSDEL = Build Class Module:  Delete Record
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACMOD,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSDEL) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "    AX ""WHERE 1=1"""
        PRINT "    AX ""AND [PrimarySKey] = "" & mlngPrimarySKey & """""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call AX_Print  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim dbs As Database: Set dbs = CurrentDb: Dim qdf As QueryDef: Set qdf = dbs.CreateQueryDef("""")"
        PRINT "    qdf.SQL = mstrSQL: Call qdf.Execute(dbSeeChanges): Update = True"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Read(mlngPrimarySKey)  ' Get calculated field changes"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set qdf = Nothing: Set dbs = Nothing"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' DELETE:  Delete the current data record"
        PRINT "'###################################################################################################"
        PRINT "Public Function Delete() As Boolean"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Const pcMsgTtl = mcModNam & "".Delete"""
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Cannot Delete a Missing PrimarySKey"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Not Exists(mlngPrimarySKey) Then GoTo Exit_Procedure"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call AX_Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    AX ""DELETE FROM"""
        PRINT "    AX ""    [dbo_"+@InpObj+"]"""
        PRINT "    AX ""WHERE 1=1"""
        PRINT "    AX ""AND [PrimarySKey] = "" & mlngPrimarySKey & """""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call AX_Print  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim dbs As Database: Set dbs = CurrentDb: Dim qdf As QueryDef: Set qdf = dbs.CreateQueryDef("""")"
        PRINT "    qdf.SQL = mstrSQL: Call qdf.Execute(dbSeeChanges):"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Not Exists(mlngPrimarySKey) Then"
        PRINT "        Call Clear: Delete = True"
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set qdf = Nothing: Set dbs = Nothing"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' MAXKEY:  Retrieve the maximum Surrogate Key (after an AddNew)"
        PRINT "'###################################################################################################"
        PRINT "Private Function GetMaxSKey() As Long"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Const pcMsgTtl = mcModNam & "".GetMaxSKey"""
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call AX_Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    AX ""SELECT"""
        PRINT "    AX ""    MAX([PrimarySKey]) AS [MaxSKey]"""
        PRINT "    AX ""FROM"""
        PRINT "    AX ""    [dbo_"+@InpObj+"] [obj]"""
        PRINT "    AX ""WHERE 1=1"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call AX_Print  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim dbs As Database: Set dbs = CurrentDb: Dim rst As Recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Set rst = dbs.OpenRecordset(mstrSQL): With rst"
        PRINT "        GetMaxSKey = Nz(.Fields(""MaxSKey""), mcNulNBR)"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set rst = Nothing: Set dbs = Nothing"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' LKPKEY:  Lookup the Surrogate Key"
        PRINT "'###################################################################################################"
        PRINT "Public Function LookupSKey( _"
        PRINT "    ByVal datDate_Column As Date, _"
        PRINT "    ByVal strText_Column As String, _"
        PRINT "    ByVal lngNumb_Column As Long _"
        PRINT ") As Long"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Const pcMsgTtl = mcModNam & "".LookupSKey"""
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call AX_Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    AX ""SELECT TOP 1"""
        PRINT "    AX ""    [PrimarySKey] AS [LkpSKey]"""
        PRINT "    AX ""FROM"""
        PRINT "    AX ""    [dbo_"+@InpObj+"] [obj]"""
        PRINT "    AX ""WHERE 1=1"""
        PRINT "    AX ""AND [obj].[Date_Column] = '"" & datDate_Column & ""'"""
        PRINT "    AX ""AND [obj].[Text_Column] = '"" & AQ(strText_Column) & ""'"""
        PRINT "    AX ""AND [obj].[Numb_Column] =  "" & lngNumb_Column & """""
        PRINT "    AX ""ORDER BY"""
        PRINT "    AX ""    [PrimarySKey]"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call AX_Print  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim dbs As Database: Set dbs = CurrentDb: Dim rst As Recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Set rst = dbs.OpenRecordset(mstrSQL): With rst"
        PRINT "        LookupSKey = Nz(.Fields(""LkpSKey""), mcNulNBR)"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set rst = Nothing: Set dbs = Nothing"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- TSTCPP = Build Class Test:  Process Procedures
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MACTST,zzz_Test01,'Manage Test01 Records',cls
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTSTCPP) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @ModNam = CASE WHEN LEN(@InpObj) > 0 THEN       @InpObj  ELSE 'TableName'            END
        SET @ModTtl = CASE WHEN LEN(@StdTx1) > 0 THEN       @StdTx1  ELSE 'ModuleTitle'          END
        SET @ModAls = CASE WHEN LEN(@StdTx2) > 0 THEN LOWER(@StdTx2) ELSE 'cls'                  END
        --------------------------------------------------------------------------------------------
        SET @ModObj = @ModAls+@ModNam
        --------------------------------------------------------------------------------------------
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Const mcModObj                  As String = """+@ModObj+""""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSepLEN                  As Integer = 40                                            ' Default Message Separator Length"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Const mcSKeyIVD                 As Long = -1                                               ' Test SurogateKey Value: Invalid"
        PRINT "Private Const mcSKeyVLD                 As Long = 1                                                ' Test SurogateKey Value: Valid"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Test_HasRequiredData(): Const pcMsgTtl As String = mcModObj & "".Test_HasRequiredData"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim cls As "+@ModObj+": Set cls = New "+@ModObj+": Dim strMSG As String: With cls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Prop_MIN(cls)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PRQ(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_RQD(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Prop_RQD(cls)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PRQ(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_RQD(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With: Call MsgBox(strMSG, vbOKOnly, pcMsgTtl)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Test_Clear(): Const pcMsgTtl As String = mcModObj & "".Test_Clear"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim cls As "+@ModObj+": Set cls = New "+@ModObj+": Dim strMSG As String: With cls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Prop_ALL(cls)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PAL(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call .Clear"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PAL(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With: Call MsgBox(strMSG, vbOKOnly, pcMsgTtl)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Test_Exists(): Const pcMsgTtl As String = mcModObj & "".Test_Exists"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim cls As "+@ModObj+": Set cls = New "+@ModObj+": Dim strMSG As String: With cls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_XST(cls, strMSG, cls.GetMaxSKey)  ' mcSKeyVLD  cls.GetMaxSKey"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_XST(cls, strMSG, mcSKeyIVD)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With: Call MsgBox(strMSG, vbOKOnly, pcMsgTtl)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Test_Read(): Const pcMsgTtl As String = mcModObj & "".Test_Read"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim cls As "+@ModObj+": Set cls = New "+@ModObj+": Dim strMSG As String: With cls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_RED(cls, strMSG, cls.GetMaxSKey)  ' mcSKeyVLD  cls.GetMaxSKey"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PAL(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_RED(cls, strMSG, mcSKeyIVD)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PAL(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With: Call MsgBox(strMSG, vbOKOnly, pcMsgTtl)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Test_AddNew(): Const pcMsgTtl As String = mcModObj & "".Test_AddNew"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim cls As "+@ModObj+": Set cls = New "+@ModObj+": Dim strMSG As String: With cls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Prop_ANW(cls)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_RQD(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_ANW(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PAL(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With: Call MsgBox(strMSG, vbOKOnly, pcMsgTtl)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Test_Update(): Const pcMsgTtl As String = mcModObj & "".Test_Update"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim cls As "+@ModObj+": Set cls = New "+@ModObj+": Dim strMSG As String: With cls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Prop_ANW(cls)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_ANW(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PUP(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Prop_UPD(cls)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_UPD(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_PUP(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With: Call MsgBox(strMSG, vbOKOnly, pcMsgTtl)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Test_Delete(): Const pcMsgTtl As String = mcModObj & "".Test_Delete"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim cls As "+@ModObj+": Set cls = New "+@ModObj+": Dim strMSG As String: With cls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Prop_ANW(cls)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_RQD(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_ANW(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_SKY(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_DEL(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_SKY(cls, strMSG)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With: Call MsgBox(strMSG, vbOKOnly, pcMsgTtl)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Test_GetMaxSKey(): Const pcMsgTtl As String = mcModObj & "".Test_GetMaxSKey"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim cls As "+@ModObj+": Set cls = New "+@ModObj+": Dim strMSG As String: With cls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "        Call Set_Mesg_MAX(cls, strMSG)"
        PRINT "        Call Set_Mesg_SEP(strMSG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With: Call MsgBox(strMSG, vbOKOnly, pcMsgTtl)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Mesg_RQD(ByRef cls As "+@ModObj+", ByRef strMSG As String): Const pcMsgTtl As String = mcModObj & "".Set_Mesg_RQD"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim strLFD As String: strLFD = IIf(Len(strMSG) > 0, vbCrLf, """"): With cls:"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        strMSG = strMSG & strLFD & ""HasRqd = |"" & .HasRequiredData & ""|"": strLFD = vbCrLf"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Mesg_XST(ByRef cls As "+@ModObj+", ByRef strMSG As String, ByVal strKEY As String): Const pcMsgTtl As String = mcModObj & "".Set_Mesg_XST"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim strLFD As String: strLFD = IIf(Len(strMSG) > 0, vbCrLf, """"): With cls:"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        strMSG = strMSG & strLFD & ""Exists ("" & strKEY & "") = |"" & .Exists(strKEY) & ""|"": strLFD = vbCrLf"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Mesg_RED(ByRef cls As "+@ModObj+", ByRef strMSG As String, ByVal strKEY As String): Const pcMsgTtl As String = mcModObj & "".Set_Mesg_RED"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim strLFD As String: strLFD = IIf(Len(strMSG) > 0, vbCrLf, """"): With cls:"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        strMSG = strMSG & strLFD & ""Read ("" & strKEY & "") = |"" & .Read(strKEY) & ""|"": strLFD = vbCrLf"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Mesg_ANW(ByRef cls As "+@ModObj+", ByRef strMSG As String): Const pcMsgTtl As String = mcModObj & "".Set_Mesg_ANW"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim strLFD As String: strLFD = IIf(Len(strMSG) > 0, vbCrLf, """"): With cls:"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        strMSG = strMSG & strLFD & ""AddNew = |"" & .AddNew & ""|"": strLFD = vbCrLf"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Mesg_UPD(ByRef cls As "+@ModObj+", ByRef strMSG As String): Const pcMsgTtl As String = mcModObj & "".Set_Mesg_UPD"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim strLFD As String: strLFD = IIf(Len(strMSG) > 0, vbCrLf, """"): With cls:"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        strMSG = strMSG & strLFD & ""Update = |"" & .Update & ""|"": strLFD = vbCrLf"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Mesg_DEL(ByRef cls As "+@ModObj+", ByRef strMSG As String): Const pcMsgTtl As String = mcModObj & "".Set_Mesg_DEL"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim strLFD As String: strLFD = IIf(Len(strMSG) > 0, vbCrLf, """"): With cls:"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        strMSG = strMSG & strLFD & ""Delete = |"" & .Delete & ""|"": strLFD = vbCrLf"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Mesg_MAX(ByRef cls As "+@ModObj+", ByRef strMSG As String): Const pcMsgTtl As String = mcModObj & "".Set_Mesg_MAX"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim strLFD As String: strLFD = IIf(Len(strMSG) > 0, vbCrLf, """"): With cls:"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        strMSG = strMSG & strLFD & ""MaxSKey = |"" & .GetMaxSKey & ""|"": strLFD = vbCrLf"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    End With"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Mesg_SEP(ByRef strMSG As String, Optional ByVal intLEN As Integer = mcSepLEN): Const pcMsgTtl As String = mcModObj & "".Set_Mesg_SEP"":"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "    Dim strLFD As String: strLFD = IIf(Len(strMSG) > 0, vbCrLf, """")"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    strMSG = strMSG & strLFD & String(intLEN, ""-""): strLFD = vbCrLf"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- POPMIT = Build Popup Form:  Module Items
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MAFPOP,zzz_Test01,'Modify Test01 Records',pop
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecPOPMIT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrSQL                         As String                                                  ' SQL Text"
        PRINT "Private mstrCLF                         As String                                                  ' SQL LineFeed"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- LSTMIT = Build List Form:  Module Items
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA MAFRVW,zzz_Test01,'Review Test01 Records',lst
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecLSTMIT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrSQL                         As String                                                  ' SQL Text"
        PRINT "Private mstrCLF                         As String                                                  ' SQL LineFeed"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    END
    ------------------------------------------------------------------------------------------------


    --##############################################################################################
    -- LEGACY FROM HERE DOWN
    --##############################################################################################


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 
 
    ------------------------------------------------------------------------------------------------
    -- JLT = Object list - Tables
    -- JLV = Object list - Views
    -- JLU = Object list - SProcs
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup Stx                    Lft Spc Ttl Bat Tx1      Tx2      Tx3     Trn Idn Erm
        EXEC ut_zzVBX JLT,'%'                   ,1  ,0  ,0  ,0  ,''      ,''      ,''      ,0  ,0  ,0
        EXEC ut_zzVBX JLV,'%'                   ,1  ,0  ,0  ,0  ,''      ,''      ,''      ,0  ,0  ,0
        EXEC ut_zzVBX JLU,'%'                   ,1  ,0  ,0  ,0  ,''      ,''      ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    IF @BldCOD IN (@SecJLT,@SecJLV,@SecJLU) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @IDX = 0; SET @SEP = CASE WHEN @IncSpc = 1 THEN "," ELSE "" END
        SET @CNT = (
            SELECT
                COUNT(*)
            FROM
                SysObjects obj
            WHERE
                obj.type = CASE @BldCOD
                    WHEN @SecJLT THEN 'U'
                    WHEN @SecJLV THEN 'V'
                    WHEN @SecJLU THEN 'P'
                    ELSE              'U'
                END
            AND obj.name NOT LIKE 'dt%'
            AND obj.name NOT LIKE 'sys%'
            AND obj.name NOT LIKE 'ut!_%' ESCAPE '!'
            AND obj.name     LIKE @InpTxt
        )
        DECLARE cur_ObjLst CURSOR LOCAL FAST_FORWARD FOR
            SELECT
                ObjNam = obj.name
            FROM
                SysObjects obj
            WHERE
                obj.type = CASE @BldCOD
                    WHEN @SecJLT THEN 'U'
                    WHEN @SecJLV THEN 'V'
                    WHEN @SecJLU THEN 'P'
                    ELSE              'U'
                END
            AND obj.name NOT LIKE 'dt%'
            AND obj.name NOT LIKE 'sys%'
            AND obj.name NOT LIKE 'ut!_%' ESCAPE '!'
            AND obj.name     LIKE @InpTxt
            ORDER BY
                obj.name
        OPEN cur_ObjLst
        WHILE 1=1 BEGIN
            FETCH NEXT FROM cur_ObjLst INTO @ObjNam
            IF @@FETCH_STATUS <> 0 BREAK
            SET @IDN = @IDN+1; SET @CMA = CASE WHEN @IDN < @CNT THEN "," ELSE @SEP END
            ----------------------------------------------------------------------------------------
            PRINT @M+@ObjNam+@CMA
            ----------------------------------------------------------------------------------------
        END
        DEALLOCATE cur_ObjLst
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- LCP = Lookup Constants: PKey
    -- LCC = Lookup Constants: Code
    -- LCN = Lookup Constants: Name
    -- LCX = Lookup Constants: CmdTxt
    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    -- LPP = Lookup Properties: PKey
    -- LPC = Lookup Properties: Code
    -- LPN = Lookup Properties: Name
    -- LPX = Lookup Properties: CmdTxt
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX LCP,zzz_TEST01,0
        EXEC ut_zzVBX LCC,zzz_TEST01,0
        EXEC ut_zzVBX LCN,zzz_TEST01,0
        EXEC ut_zzVBX LCX,zzz_TEST01,0
        EXEC ut_zzVBX LPP,zzz_TEST01,0
        EXEC ut_zzVBX LPC,zzz_TEST01,0
        EXEC ut_zzVBX LPN,zzz_TEST01,0
        EXEC ut_zzVBX LPX,zzz_TEST01,0
        --   ut_zzVBX Oup Stx                    Lft Spc Ttl Bat  BAS,VAR,SFX,VAL,COD,DSC,OBY                           Tx2 Tx3 Trn Idn Erm
        EXEC ut_zzVBX LCP,zzz_TEST01            ,0  ,0  ,0  ,0  ,'SysTyp,SysTyp,TypCod,SysTypID,SysCod,TypNam,SysTypID','' ,'' ,0  ,0  ,0
        EXEC ut_zzVBX LCP,zzz_TEST01            ,0  ,0  ,0  ,0  ,'SysTyp,SysTyx,TypCod,SysCod  ,TypCod,TypNam,SysTypID','' ,'' ,0  ,0  ,0
        EXEC ut_zzVBX LCP,zzz_TEST01            ,0  ,0  ,0  ,0  ,'SysTyp,SysTyd,TypCod,TypNam  ,TypCod,SysCod,SysTypID','' ,'' ,0  ,0  ,0
        EXEC ut_zzVBX LCP,zzz_TEST01            ,0  ,0  ,0  ,0  ,'VbaTyp,VbaPfx,VbaPfx,VbaPfx  ,VbaPfx,VbaDtp,VbaTypID','' ,'' ,0  ,0  ,0
        EXEC ut_zzVBX LCP,zzz_TEST01            ,0  ,0  ,0  ,0  ,'VbaTyp,VbaTyp,VbaPfx,VbaTypID,VbaPfx,VbaDtp,VbaTypID','' ,'' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecLCP,@SecLCC,@SecLCN,@SecLCX,@SecLPP,@SecLPC,@SecLPN,@SecLPX) BEGIN
        -- Declare column suffix constants
        DECLARE @SfxPky    varchar(10)  ; SET @SfxPky    = "ID"
        DECLARE @SfxCod    varchar(10)  ; SET @SfxCod    = "Code"
        DECLARE @SfxNam    varchar(10)  ; SET @SfxNam    = "Name"
        DECLARE @SfxDsc    varchar(10)  ; SET @SfxDsc    = "Desc"
        -- Declare default element variables
        DECLARE @TmpBas    varchar(50)  ; SET @TmpBas    = ''
        DECLARE @TmpVal    varchar(50)  ; SET @TmpVal    = ''
        DECLARE @TmpCod    varchar(50)  ; SET @TmpCod    = ''
        DECLARE @TmpDsc    varchar(200) ; SET @TmpDsc    = ''
        -- Declare declaration variables
        DECLARE @DecTxt    varchar(50)  ; SET @DecTxt    = "Private Const "
        -- Declare working element variables
        DECLARE @LkcBas    varchar(50)  ; SET @LkcBas    = ''
        DECLARE @LkcVar    varchar(50)  ; SET @LkcVar    = ''
        DECLARE @LkcSfx    varchar(50)  ; SET @LkcSfx    = ''
        DECLARE @LkcVal    varchar(50)  ; SET @LkcVal    = ''
        DECLARE @LkcCod    varchar(50)  ; SET @LkcCod    = ''
        DECLARE @LkcDsc    varchar(200) ; SET @LkcDsc    = ''
        DECLARE @LkcOby    varchar(50)  ; SET @LkcOby    = ''
        DECLARE @LkcQot    varchar(01)  ; SET @LkcQot    = ''
        DECLARE @LkcAln    varchar(10)  ; SET @LkcAln    = ''
        DECLARE @LkcVdt    varchar(30)  ; SET @LkcVdt    = ''
        DECLARE @LkcCln    varchar(10)  ; SET @LkcCln    = ''
        DECLARE @LkcCdc    varchar(30)  ; SET @LkcCdc    = ''
        DECLARE @LkcVln    varchar(10)  ; SET @LkcVln    = ''
        DECLARE @LkcDln    varchar(10)  ; SET @LkcDln    = ''
        DECLARE @LkcMln    varchar(10)  ; SET @LkcMln    = ''
        DECLARE @LkcMax    smallint     ; SET @LkcMax    = 0
        -- Set datatype length
        DECLARE @LkcDtp    varchar(30)  ; SET @LkcDtp    = ''
        -- Length tracking
        DECLARE @VarMin    smallint     ; SET @VarMin    = 22  -- Minimum variable length
        DECLARE @DecMin    smallint     ; SET @DecMin    = 35  -- Minimum declaration length
        DECLARE @ValMin    smallint     ; SET @ValMin    = 27  -- Minimum value length
        DECLARE @CspMin    smallint     ; SET @CspMin    =  5  -- Space between statement and comment
        DECLARE @StmMin    smallint     ; SET @StmMin    = @DecMin+@ValMin+@CspMin  -- Minimum statement length before comment
        -- Assign custom element values
        SET @LST = LTRIM(RTRIM(REPLACE(REPLACE(@StdTx1," ",""),@NLN,@SEP)))
        WHILE LEFT (@LST,LEN(@SEP)) = @SEP SET @LST = RIGHT(@LST,LEN(@LST)-LEN(@SEP))
        WHILE RIGHT(@LST,LEN(@SEP)) = @SEP SET @LST = LEFT (@LST,LEN(@LST)-LEN(@SEP))
        WHILE @LST LIKE "%"+@SEP+@SEP+"%"  SET @LST = REPLACE(@LST,@SEP+@SEP,@SEP)
        SET @IDN = 0
        WHILE LEN(@LST) > 0 BEGIN
            SET @POS = CHARINDEX(@SEP,@LST)
            IF @POS > 0 BEGIN
                SET @ITM = LTRIM(RTRIM(LEFT(@LST,@POS-1)))
                SET @LST = LTRIM(RIGHT(@LST,LEN(@LST)-@POS-(LEN(@SEP)-1)))
            END ELSE BEGIN
                SET @ITM = LTRIM(RTRIM(@LST))
                SET @LST = ''
            END
            SET @IDN = @IDN+1
            IF @IDN = 1 SET @LkcBas = @ITM
            IF @IDN = 2 SET @LkcVar = @ITM
            IF @IDN = 3 SET @LkcSfx = @ITM
            IF @IDN = 4 SET @LkcVal = @ITM
            IF @IDN = 5 SET @LkcCod = @ITM
            IF @IDN = 6 SET @LkcDsc = @ITM
            IF @IDN = 7 SET @LkcOby = @ITM
        END
        -- SELECT 
        --     LkcBas = @LkcBas,
        --     LkcVar = @LkcVar,
        --     LkcSfx = @LkcSfx,
        --     LkcVal = @LkcVal,
        --     LkcCod = @LkcCod,
        --     LkcDsc = @LkcDsc,
        --     LkcOby = @LkcOby
        -- Assign default element values
        SET @TblBas = CASE 
            WHEN LEN(@LkcBas) > 0     THEN @LkcBas
            ELSE                           @TblBas 
        END
        SET @TmpBAS = CASE 
            WHEN @BldCOD IN (@SecLCC) THEN LEFT(@TblBas,LEN(@TblBas)-1)+'x'
            WHEN @BldCOD IN (@SecLCN) THEN LEFT(@TblBas,LEN(@TblBas)-1)+'z'
            ELSE                           @TblBas 
        END
        SET @TmpVal = CASE 
            WHEN @BldCOD IN (@SecLCC) THEN @SfxCod 
            WHEN @BldCOD IN (@SecLCN) THEN @SfxNam 
            ELSE                           @SfxPky 
        END
        SET @TmpCod = CASE 
            WHEN @BldCOD IN (@SecLCC) THEN @SfxPky 
            WHEN @BldCOD IN (@SecLCN) THEN @SfxPky 
            ELSE                           @SfxCod 
        END
        SET @TmpDsc = CASE 
            WHEN @BldCOD IN (@SecLCC) THEN @SfxDsc 
            WHEN @BldCOD IN (@SecLCN) THEN @SfxDsc 
            ELSE                           @SfxNam 
        END
        -- Assign working element values
        SET @LkcBas = CASE WHEN LEN(@LkcBas) > 0 THEN @LkcBas ELSE @TmpBAS           END
        SET @LkcVar = CASE WHEN LEN(@LkcVar) > 0 THEN @LkcVar ELSE @TmpBAS           END
        SET @LkcSfx = CASE WHEN LEN(@LkcSfx) > 0 THEN @LkcSfx ELSE @TblBAS+@SfxCod END
        SET @LkcVal = CASE WHEN LEN(@LkcVal) > 0 THEN @LkcVal ELSE @TblBAS+@TmpVal END
        SET @LkcCod = CASE WHEN LEN(@LkcCod) > 0 THEN @LkcCod ELSE @TblBAS+@TmpCod END
        SET @LkcDsc = CASE WHEN LEN(@LkcDsc) > 0 THEN @LkcDsc ELSE @TblBAS+@TmpDsc END
        SET @LkcOby = CASE WHEN LEN(@LkcOby) > 0 THEN @LkcOby ELSE @TblBAS+@SfxPky END
        -- Resolve data types
        SET @LkcVdt = @TblNam; EXEC ut_zzTYP DTP,XXX,XXX,@LkcVal,@LkcVdt OUTPUT
        SET @LkcCdc = @TblNam; EXEC ut_zzTYP DCT,XXX,XXX,@LkcCod,@LkcCdc OUTPUT
        SET @LkcDtp = @LkcVdt;SET @LkcQot = CASE
            WHEN @LkcDtp LIKE '%char%' THEN              '"'
            WHEN @LkcDtp LIKE '%date%' THEN              '"'
            ELSE ""
        END
        -- Translate SQL => VBA formats
        EXEC ut_zzTYP VBAPFX,XXX,XXX,@LkcDtp,@VarPfx OUTPUT
        EXEC ut_zzTYP VBADTP,XXX,XXX,@LkcDtp,@LkcDtp OUTPUT
        SET @LkcVar = 'mc'+@LkcVar
        -- Resolve data lengths:  Variable
        SET @TXT    = @TblNam; EXEC ut_zzTYP XDL,XXX,XXX,@LkcSfx,@TXT OUTPUT
        SET @LkcMax = LEN(@LkcVar)+CONVERT(smallint,@TXT)
        SET @LkcMax = CASE WHEN @LkcMax < @VarMin THEN @VarMin ELSE @LkcMax END
        SET @LkcVln = CAST(@LkcMax AS varchar(5)) 
        --PRINT "@LkcVln="+@LkcVln 
        -- Resolve data lengths:  Declaration
        SET @LkcMax = LEN(@DecTxt)+CONVERT(smallint,@LkcVln)
        SET @LkcMax = CASE WHEN @LkcMax < @DecMin THEN @DecMin ELSE @LkcMax END
        SET @LkcDln = CAST(@LkcMax AS varchar(5)) 
        --PRINT "@LkcDln="+@LkcDln 
        -- Resolve data lengths:  Value
        SET @TXT    = @TblNam; EXEC ut_zzTYP XDL,XXX,XXX,@LkcVal,@TXT OUTPUT
        SET @LkcMax = CONVERT(smallint,@TXT)+(LEN(@LkcQot) * 2)
        SET @LkcMax = CASE WHEN @LkcMax < @ValMin THEN @ValMin ELSE @LkcMax END
        SET @LkcAln = CAST(@LkcMax AS varchar(5))
        --PRINT "@LkcAln="+@LkcAln 
        -- Resolve data lengths:  Statement
        SET @LkcMax = CONVERT(smallint,@LkcDln)+CONVERT(smallint,@LkcAln)+CONVERT(smallint,@CspMin)
        SET @LkcMax = CASE WHEN @LkcMax < @StmMin THEN @StmMin ELSE @LkcMax END
        SET @LkcMln = CAST(@LkcMax AS varchar(5)) 
        --PRINT "@LkcMln="+@LkcMln 
        -- Resolve data lengths:  Code for description
        SET @TXT    = @TblNam; EXEC ut_zzTYP XDL,XXX,XXX,@LkcCod,@TXT OUTPUT
        SET @LkcMax = CONVERT(smallint,@TXT)+0
        SET @LkcCln = CAST(@LkcMax AS varchar(5))
        --PRINT "@LkcCln="+@LkcCln 
        -- List Constant Declaration statements
        IF @BldCOD IN (@SecLCP,@SecLCC,@SecLCN,@SecLCX) BEGIN
            PRINT ""
            PRINT ""
            PRINT @M+@LinAst
            IF LEN(@StdTx1) > 0 OR @BldCOD IN (@SecLCX) BEGIN
            SET @ITX = ''; IF LEN(@StdTx1) = 0 SET @StdTx1 = @LkcBas+","+@LkcVar+","+@LkcSfx+","+@LkcVal+","+@LkcCod+","+@LkcDsc+","+@LkcOby
            PRINT @M+"' Initialize lookup value constants"
            PRINT @M+@LinSgl
            PRINT @M+"'            Oup "+LEFT("Stx"+@ITX,LEN(@TblNam))+" Lft Spc Ttl Bat  "+LEFT("BAS,VAR,SFX,VAL,COD,DSC,OBY"+@ITX,LEN(@StdTx1))+"  Tx2 Tx3 Trn Idn Erm"
            PRINT @M+"' ut_zzVBX LCP,"+@TblNam+",1  ,0  ,0  ,0  ,             '"+@StdTx1+"','' ,'' ,0  ,0  ,0"
            END ELSE BEGIN
            PRINT @M+"' Initialize lookup value constants - ut_zzSQL "+@BldCOD+","+@TblNam+"  -- LCP LCC LCN LCX LPP LPC LPN LPX"
            END
            PRINT @M+@LinAst
            SET @X = ''
            SET @X = @X+@B+"SELECT"
            SET @X = @X+@N+"    """+@M+"""+LEFT(LEFT("""+@DecTxt+@LkcVar+"""+UPPER("+@LkcSfx+")+REPLICATE("" "",100),"+@LkcDln+")+"
            SET @X = @X+@N+"    ' AS "+@LkcDtp+" = "+@LkcQot+"'+CAST("+@LkcVal+" AS varchar(1000))+             '"+@LkcQot+"'+REPLICATE("" "",100),"+@LkcMln+")+""' ""+"
            IF @LkcCdc = 'NBR' BEGIN
            SET @X = @X+@N+"    RIGHT(REPLICATE("" "","+@LkcCln+")+CAST("+@LkcCod+" AS varchar(10)),"+@LkcCln+")+"" - ""+"+@LkcDsc+""
            END ELSE BEGIN
            SET @X = @X+@N+"    LEFT("+@LkcCod+"+REPLICATE("" "","+@LkcCln+"),"+@LkcCln+")+"" - ""+"+@LkcDsc+""
            END

            SET @X = @X+@N+"FROM"
            SET @X = @X+@N+@MX1+@TblNam
            SET @X = @X+@N+"ORDER BY"
            SET @X = @X+@N+@MX1+@LkcOby
            EXEC (@X);  --PRINT @X
        END
        -- List Property statements
        IF @BldCOD IN (@SecLCP,@SecLCC,@SecLCN,@SecLCX,@SecLPP,@SecLPC,@SecLPN,@SecLPX) BEGIN
            PRINT ""
            PRINT ""
            PRINT @M+@LinPnd
            IF LEN(@StdTx1) > 0 OR @BldCOD IN (@SecLCX,@SecLPX) BEGIN
            SET @ITX = ''; IF LEN(@StdTx1) = 0 SET @StdTx1 = @LkcBas+","+@LkcVar+","+@LkcSfx+","+@LkcVal+","+@LkcCod+","+@LkcDsc+","+@LkcOby
            PRINT @M+"' Constants Properties"
            PRINT @M+@LinSgl
            PRINT @M+"'            Oup "+LEFT("Stx"+@ITX,LEN(@TblNam))+" Lft Spc Ttl Bat  "+LEFT("BAS,VAR,SFX,VAL,COD,DSC,OBY"+@ITX,LEN(@StdTx1))+"  Tx2 Tx3 Trn Idn Erm"
            PRINT @M+"' ut_zzVBX "+@BldCOD+","+@TblNam+",1  ,0  ,0  ,0  ,             '"+@StdTx1+"','' ,'' ,0  ,0  ,0"
            END ELSE BEGIN
            PRINT @M+"' Constants Properties - ut_zzSQL LPP,"+@TblNam+"  -- LCP LCC LCN LCX LPP LPC LPN LPX"
            END
            PRINT @M+@LinPnd
            SET @X = ''
            SET @X = @X+@B+"SELECT"
            SET @X = @X+@N+"    """+@M+"Public Property Get "+@LkcBas+"""+UPPER("+@LkcSfx+")+"
            SET @X = @X+@N+"    ""() As "+@LkcDtp+": "+@LkcBas+"""+UPPER("+@LkcSfx+")+"" = "+@LkcVar+"""+UPPER("+@LkcSfx+")+"": End Property""+"
            SET @X = @X+@N+"    "": End Property""+"""+@N+@M+@LinDbl+""""
            SET @X = @X+@N+"FROM"
            SET @X = @X+@N+@MX1+@TblNam
            SET @X = @X+@N+"ORDER BY"
            SET @X = @X+@N+@MX1+@LkcOby
            EXEC (@X);  --PRINT @X
        END
        -- List CASE statements
        IF @BldCOD IN (@SecLCP,@SecLCC,@SecLCN,@SecLCX,@SecLPP,@SecLPC,@SecLPN,@SecLPX) BEGIN
            PRINT ""
            PRINT ""
            PRINT @M+@LinSgl
            IF LEN(@StdTx1) > 0 OR @BldCOD IN (@SecLCX,@SecLPX) BEGIN
            SET @ITX = ''; IF LEN(@StdTx1) = 0 SET @StdTx1 = @LkcBas+","+@LkcVar+","+@LkcSfx+","+@LkcVal+","+@LkcCod+","+@LkcDsc+","+@LkcOby
            PRINT @M+"' Check Constant Values"
            PRINT @M+@LinSgl
            PRINT @M+"'            Oup "+LEFT("Stx"+@ITX,LEN(@TblNam))+" Lft Spc Ttl Bat  "+LEFT("BAS,VAR,SFX,VAL,COD,DSC,OBY"+@ITX,LEN(@StdTx1))+"  Tx2 Tx3 Trn Idn Erm"
            PRINT @M+"' ut_zzVBX "+@BldCOD+","+@TblNam+",1  ,0  ,0  ,0  ,             '"+@StdTx1+"','' ,'' ,0  ,0  ,0"
            END ELSE BEGIN
            PRINT @M+"' Check Constant Values - ut_zzSQL LPP,"+@TblNam+"  -- LCP LCC LCN LCX LPP LPC LPN LPX"
            END
            PRINT @M+@LinSgl
            PRINT @M+"Select Case "+@VarPfx+"VAL"
            SET @X = ''
            SET @X = @X+@B+"SELECT"
            SET @X = @X+@N+"    """+@M+"    Case "+@LkcVar+"""+UPPER("+@LkcSfx+")"
            SET @X = @X+@N+"FROM"
            SET @X = @X+@N+@MX1+@TblNam
            SET @X = @X+@N+"ORDER BY"
            SET @X = @X+@N+@MX1+@LkcOby
            EXEC (@X);  --PRINT @X
            PRINT @M+"End Select"
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    END
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- BMC = Basic  module standard comment
    -- CMC = Class  module standard comment
    -- FMC = Form   module standard comment
    -- RMC = Report module standard comment
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup Stx       Lft Spc Ttl Bat Tx1                       Tx2   Tx3      Trn Idn Erm
        EXEC ut_zzVBX BMC,basRunUsp,0  ,0  ,0  ,0  ,'Run SProc commands'     ,'run',''      ,0  ,0  ,0
        EXEC ut_zzVBX CMC,clsRunUSP,0  ,0  ,0  ,0  ,'Run SProc commands'     ,'run',''      ,0  ,0  ,0
        EXEC ut_zzVBX FMC,frmRunUsp,0  ,0  ,0  ,0  ,'Run SProc commands'     ,'run',''      ,0  ,0  ,0
        EXEC ut_zzVBX RMC,rptRunUsp,0  ,0  ,0  ,0  ,'Run SProc commands'     ,'run',''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
   IF @BldCOD IN (@SecBMC,@SecCMC,@SecFMC,@SecRMC) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @ModNam = CASE WHEN LEN(@InpObj) > 0 THEN       @InpObj  ELSE 'pfx_ModuleName'       END
        SET @ModTtl = CASE WHEN LEN(@StdTx1) > 0 THEN       @StdTx1  ELSE 'ModuleTitle'          END
        SET @ModAls = CASE WHEN LEN(@StdTx2) > 0 THEN LOWER(@StdTx2) ELSE LOWER(LEFT(@ModNam,3)) END
        SET @ModBld = CASE WHEN LEN(@StdTx3) > 0 THEN       @StdTx3  ELSE 'ZZZZZZ'               END
        SET @ModTyp = LOWER(LEFT(@ModNam,3))
        --------------------------------------------------------------------------------------------
        IF @BldCOD IN (@SecCMC) SET @ModNam = @ModAls+@ModNam
        --------------------------------------------------------------------------------------------
        -- Assign Header Name Line
        --------------------------------------------------------------------------------------------
        SET @TX1 = "' Name:"
        SET @TX2 = CONVERT(char(19),GETDATE(),120)
        SET @HdrNam = @TX1+REPLICATE(" ",100 - LEN(@TX1) - LEN(@TX2))+@TX2
        --------------------------------------------------------------------------------------------
        -- Assign Header Version Line
        --------------------------------------------------------------------------------------------
        SET @TX1 = "' Version:"
        SET @HdrVer = CASE @ModNam
            -------------------------------------------------------
            WHEN 'bas_AppCons' THEN '01.01  /  2010-03-31 00:00:00'
            WHEN 'bas_AppFunc' THEN '01.01  /  2010-03-31 00:00:00'
            WHEN 'bas_AppTest' THEN '01.01  /  2010-03-31 00:00:00'
            WHEN 'bas_AppVars' THEN '01.01  /  2010-03-31 00:00:00'
            -------------------------------------------------------
            WHEN 'bas_Global'  THEN '01.01  /  2010-03-31 00:00:00'
            WHEN 'bas_ImpExp'  THEN '01.00  /  2009-03-08 00:00:00'
            WHEN 'bas_Test01'  THEN '01.00  /  2009-03-08 00:00:00'
            WHEN 'bas_TblMnt'  THEN '01.00  /  2009-03-08 00:00:00'
            -------------------------------------------------------
            WHEN 'vba_Global'  THEN '01.00  /  2009-03-08 00:00:00'
            WHEN 'vbaGenJET'   THEN '01.01  /  2010-03-31 00:00:00'
            WHEN 'vbaGenSTD'   THEN '01.00  /  2009-03-08 00:00:00'
            -------------------------------------------------------
            WHEN 'clsUtlASC'   THEN '01.01  /  2010-03-31 00:00:00'
            WHEN 'clsUtlFMT'   THEN '01.00  /  2010-03-31 00:00:00'
            WHEN 'clsUtlVBG'   THEN '01.01  /  2010-03-31 00:00:00'
            WHEN 'clsUtlWSH'   THEN '01.00  /  2010-03-31 00:00:00'
            WHEN 'clsUtlWTX'   THEN '01.01  /  2010-03-31 00:00:00'
            -------------------------------------------------------
            WHEN 'sys_Colors'  THEN '01.00  /  2010-03-31 00:00:00'
            WHEN 'sys_LinkAPP' THEN '01.00  /  2010-03-31 00:00:00'
            -------------------------------------------------------
            WHEN 'tpl_NARROW'  THEN '01.00  /  2010-03-31 00:00:00'
            WHEN 'tpl_WIDE'    THEN '01.00  /  2010-03-31 00:00:00'
            -------------------------------------------------------
            ELSE ''
        END
        IF LEN(@HdrVer) > 0 SET @HdrVer = @TX1+REPLICATE(" ",100 - LEN(@TX1) - LEN(@HdrVer))+@HdrVer
        --------------------------------------------------------------------------------------------
        PRINT "'###################################################################################################"
        PRINT @HdrNam
        PRINT "'   "+@ModNam+""
        IF LEN(@HdrVer) > 0 BEGIN
        PRINT "'###################################################################################################"
        PRINT @HdrVer
        END
        PRINT "'###################################################################################################"
        PRINT "' Purpose:"
        PRINT "'   "+@ModTtl
        PRINT "'###################################################################################################"
        IF          @ModNam IN ('bas_AppCons') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASAPC"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_AppFunc') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASAPF,'',''"+",'"+@StdTx2+"'"                 +@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_AppTest') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASAPT"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_AppVars') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASAPV"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_Global')  BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASGLB,'',''"+",'"+@StdTx2+"'"+",'"+@StdTx3+"'"+@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_ImpExp')  BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASIMX"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_Test01')  BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASTST"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_TblMnt')  BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASTBM"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_WrtTxt')  BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASWTL"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsUtlWTL')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA CLSWTL,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('vba_Global')  BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENGLB"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenSTD')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENSTD"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenJET')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENJET"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGen_IT')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GEN_IT"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenFRM')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENFRM"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenCTL')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENCTL"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenTBL')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENTBL"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenPRP')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENPRP"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenCMD')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENCMD"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenPTH')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENPTH"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenRPT')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENRPT"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenSQL')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENSQL"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenSBY')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENSBY"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenGBY')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENGBY"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('vbaGenSLO')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA GENSLO"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsAppCons')  BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA CLSAPC,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsAppVals')  BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA CLSAPV,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('bas_CmgCons') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA BASCMG,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsCtlMgr')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA CLSCMG,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsUtlASC')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA UTLASC"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsUtlFMT')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA UTLFMT"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsUtlVBG')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA UTLVBG"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsUtlWSH')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA UTLWSH"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsUtlWTX')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA UTLWTX"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRegRPT')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA REGRPT"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRegCMD')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA REGCMD"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRegSRC')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA REGSRC"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRegTBL')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA REGTBL"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRegPRP')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA REGPRP"                                        +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsSqlSTM')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA SQLSTM,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsSqlOBY')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA SQLOBY,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRunRPT')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RUNRPT,"+@ModNam+",'"+@StdTx1+"'"
            PRINT                   "'   EXEC ut_zzVBA RUNRPR,''"
            PRINT                   "'   EXEC ut_zzVBA RUNRPX,'' "                                                                         +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRunCMD')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RUNCMD,"+@ModNam+",'"+@StdTx1+"'"
            PRINT                   "'   EXEC ut_zzVBA RUNCMM,''"
            PRINT                   "'   EXEC ut_zzVBA RUNCMF,'' "                                                                         +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRunUSP')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RUNUSP,"+@ModNam+",'"+@StdTx1+"'"
            PRINT                   "'   EXEC ut_zzVBA RUNUSR,''"
            PRINT                   "'   EXEC ut_zzVBA RUNUSF,''"
            PRINT                   "'   EXEC ut_zzVBA RUNUSX,'usp_UspNam' "                                                               +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRunRST')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RUNRST,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRunSQL')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RUNSQL,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRunSBY')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RUNSBY,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRunGBY')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RUNGBY,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsRunWHR')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RUNWHR,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('sys_Colors' ) OR @StdTx3 IN ('FRMCLR') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA FRMCLR"               +@N+@LinPnd
        END ELSE IF @ModNam IN ('sys_LinkAPP') OR @StdTx3 IN ('FRMLNK') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA FRMLNK"               +@N+@LinPnd
        END ELSE IF @ModNam IN ('tpl_NARROW' ) OR @StdTx3 IN ('RPTNAR') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RPTNAR"               +@N+@LinPnd; SET @ModTyp = 'rpt'
        END ELSE IF @ModNam IN ('tpl_WIDE'   ) OR @StdTx3 IN ('RPTWID') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA RPTWID"               +@N+@LinPnd; SET @ModTyp = 'rpt'
        END ELSE IF @ModNam IN ('frm_FrmName') OR @StdTx3 IN ('ANYFRM') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ANYFRM,"+@ModNam+",'"+@StdTx1+"'"            +@N+@LinPnd
        END ELSE IF @ModNam IN ('tab_FrmName') OR @StdTx3 IN ('ANYTAB') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ANYTAB,"+@ModNam+",'"+@StdTx1+"'"            +@N+@LinPnd
        END ELSE IF @ModNam IN ('lst_FrmName') OR @StdTx3 IN ('ANYLST') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ANYLST,"+@ModNam+",'"+@StdTx1+"'"            +@N+@LinPnd
        END ELSE IF @ModNam IN ('pop_FrmName') OR @StdTx3 IN ('ANYPOP') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ANYPOP,"+@ModNam+",'"+@StdTx1+"'"            +@N+@LinPnd
        END ELSE IF @ModNam IN ('sub_FrmName') OR @StdTx3 IN ('ANYSUB') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ANYSUB,"+@ModNam+",'"+@StdTx1+"'"            +@N+@LinPnd
        END ELSE IF @ModNam IN ('basBasName' ) OR @StdTx3 IN ('ANYBAS') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ANYBAS,"+@ModNam+",'"+@StdTx1+"'"            +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsClsNam'  ) OR @StdTx3 IN ('ANYCLS') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ANYCLS,"+@ModNam+",'"+@StdTx1+"',"+@StdTx2+""+@N+@LinPnd
        END ELSE IF @ModNam IN ('rpt_RptNam' ) OR @StdTx3 IN ('ANYRPT') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ANYRPT,"+@ModNam+",'"+@StdTx1+"'"            +@N+@LinPnd
        END ELSE IF @ModNam IN ('clsClsNam'  ) OR @StdTx3 IN ('CLSMIT') BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA CLSMIT,"+@ModNam+",'"+@StdTx1+"',"+@StdTx2+""+@N+@LinPnd
        END ELSE IF @ModNam IN ('clsTxtCon')   BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA CLSTCN,"+@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @ModNam IN ('')            BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA ,"      +@ModNam+",'"+@StdTx1+"'"              +@N+@LinPnd
        END ELSE IF @BldCOD IN (@SecCMC)       BEGIN PRINT "' Regen:"+@N+"'   EXEC ut_zzVBA "+@StdTx3+@CMA+@InpObj+@CMA+@SQT+@StdTx1+@SQT+@CMA+@StdTx2+@N+@LinPnd
        END
        IF @ModNam IN ('bas_Global') BEGIN
        PRINT "' Standard Objects:"
        PRINT "'"
        --INT "'   EXEC ut_zzVBA BASGLB,'','','"+@StdTx2+"','"+@StdTx3+"'"
        IF          @StdTx2 IN ('Data' ) BEGIN
        PRINT "'   EXEC ut_zzVBA FRMCLR"
        PRINT "'   EXEC ut_zzVBA BASIMX"
        PRINT "'   EXEC ut_zzVBA BASTBM"
        PRINT "'   EXEC ut_zzVBA UTLWTX"
        END ELSE IF @StdTx2 IN ('Basic') BEGIN
        PRINT "'   EXEC ut_zzVBA FRMCLR"
        PRINT "'   EXEC ut_zzVBA FRMLNK"
        PRINT "'   EXEC ut_zzVBA RPTNAR"
        PRINT "'   EXEC ut_zzVBA RPTWID"
        PRINT "'   EXEC ut_zzVBA BASAPC"
        PRINT "'   EXEC ut_zzVBA BASAPF"
        PRINT "'   EXEC ut_zzVBA BASAPT"
        PRINT "'   EXEC ut_zzVBA BASAPV"
        PRINT "'   EXEC ut_zzVBA BASIMX"
        PRINT "'   EXEC ut_zzVBA BASTBM"
        PRINT "'   EXEC ut_zzVBA BASTST"
        PRINT "'   --EC ut_zzVBA GENGLB"
        PRINT "'   --EC ut_zzVBA GENJET"
        PRINT "'   EXEC ut_zzVBA GENSTD"
        PRINT "'   EXEC ut_zzVBA UTLASC"
        PRINT "'   EXEC ut_zzVBA UTLFMT"
        PRINT "'   --EC ut_zzVBA UTLVBG"
        PRINT "'   EXEC ut_zzVBA UTLWSH"
        PRINT "'   EXEC ut_zzVBA UTLWTX"
        END ELSE BEGIN
        PRINT "'   EXEC ut_zzVBA FRMCLR"
        PRINT "'   EXEC ut_zzVBA FRMLNK"
        PRINT "'   EXEC ut_zzVBA RPTNAR"
        PRINT "'   EXEC ut_zzVBA RPTWID"
        PRINT "'   EXEC ut_zzVBA BASAPC"
        PRINT "'   EXEC ut_zzVBA BASAPF"
        PRINT "'   EXEC ut_zzVBA BASAPT"
        PRINT "'   EXEC ut_zzVBA BASAPV"
        PRINT "'   EXEC ut_zzVBA BASIMX"
        PRINT "'   EXEC ut_zzVBA BASTBM"
        PRINT "'   EXEC ut_zzVBA BASTST"
        PRINT "'   EXEC ut_zzVBA GENGLB"
        PRINT "'   EXEC ut_zzVBA GENJET"
        PRINT "'   EXEC ut_zzVBA GENSTD"
        PRINT "'   EXEC ut_zzVBA UTLASC"
        PRINT "'   EXEC ut_zzVBA UTLFMT"
        PRINT "'   EXEC ut_zzVBA UTLVBG"
        PRINT "'   EXEC ut_zzVBA UTLWSH"
        PRINT "'   EXEC ut_zzVBA UTLWTX"
        END
        PRINT "'"
        PRINT "'###################################################################################################"
        END ELSE IF @ModNam IN ('vbaGen_IT') BEGIN
        PRINT "' NOTES:"
        PRINT "'"
        PRINT "'   1> Standard Forms:"
        PRINT "'      sys_Colors       (import)"
        PRINT "'      sys_LinkAPP      (import)"
        PRINT "'      sys_LinkSQL      (import)"
        PRINT "'      ztp_FrmStd       (import)"
        PRINT "'      ztp_FrmTab       (import)"
        PRINT "'      ztp_Lst010       (import)"
        PRINT "'      ztp_MnuApp       (import)"
        PRINT "'      ztp_MnuCon       (import)"
        PRINT "'      ztp_PopAdd       (import)"
        PRINT "'      ztp_Sub010       (import)"
        PRINT "'      ztp_TstPop       (import)"
        PRINT "'"
        PRINT "'   2> Standard Reports:"
        PRINT "'      zpt_LABEL_Folder (import)"
        PRINT "'      zpt_LABEL_Jacket (import)"
        PRINT "'      zpt_NARROW       (import)"
        PRINT "'      zpt_WIDE         (import)"
        PRINT "'"
        PRINT "'   3> Standard Macros:"
        PRINT "'      AutoExec         (import)"
        PRINT "'"
        PRINT "'   4> Standard Modules:"
        PRINT "'      bas_AppCons      (import / ut_zzVBA BASAPC)"
        PRINT "'      bas_AppFunc      (import / ut_zzVBA BASAPF)"
        PRINT "'      bas_AppTest      (import / ut_zzVBA BASAPT)"
        PRINT "'      bas_AppVars      (import / ut_zzVBA BASAPV)"
        PRINT "'      bas_Global       (import / ut_zzVBA BASGLB)"
        PRINT "'      bas_ImpExp       (import / ut_zzVBA BASIMX)"
        PRINT "'      bas_Test01       (import / ut_zzVBA BASTST)"
        PRINT "'"
        PRINT "'   5> Generation Modules:"
        PRINT "'      vba_Global       (import / ut_zzVBA GENGLB)"
        PRINT "'      vbaGen_IT        (import / ut_zzVBA GEN_IT)"
        PRINT "'      vbaGenCMD        (import / ut_zzVBA GENCMD)"
        PRINT "'      vbaGenCTL        (import / ut_zzVBA GENCTL)"
        PRINT "'      vbaGenFRM        (import / ut_zzVBA GENFRM)"
        PRINT "'      vbaGenGBY        (import / ut_zzVBA GENGBY)"
        PRINT "'      vbaGenJET        (import / ut_zzVBA GENJET)"
        PRINT "'      vbaGenPRP        (import / ut_zzVBA GENPRP)"
        --INT "'      vbaGenPTH        (import / ut_zzVBA GENPTH)"
        PRINT "'      vbaGenRPT        (import / ut_zzVBA GENRPT)"
        PRINT "'      vbaGenSBY        (import / ut_zzVBA GENSBY)"
        --INT "'      vbaGenSLO        (import / ut_zzVBA GENSLO)"
        PRINT "'      vbaGenSQL        (import / ut_zzVBA GENSQL)"
        PRINT "'      vbaGenSTD        (import / ut_zzVBA GENSTD)"
        PRINT "'      vbaGenTBL        (import / ut_zzVBA GENTBL)"
        PRINT "'"
        PRINT "'   6> Generation Classes:"
        PRINT "'      clsGenCMD        (import / ut_zzVBA GENCMD)"
        PRINT "'      clsGenCTL        (import / ut_zzVBA GENCTL)"
        PRINT "'      clsGenFRM        (import / ut_zzVBA GENFRM)"
        PRINT "'      clsGenPRP        (import / ut_zzVBA GENPRP)"
        PRINT "'      clsGenRPT        (import / ut_zzVBA GENRPT)"
        PRINT "'      clsGenTBL        (import / ut_zzVBA GENTBL)"
        PRINT "'      clsGenTXT        (import / ut_zzVBA GENTXT)"
        PRINT "'"
        PRINT "'   7> Registration Classes:"
        PRINT "'      clsRegCMD        (import / ut_zzVBA REGCMD)"
        --INT "'      clsRegPRP        (import / ut_zzVBA REGPRP)"
        PRINT "'      clsRegRPT        (import / ut_zzVBA REGRPT)"
        PRINT "'      clsRegTBL        (import / ut_zzVBA REGTBL)"
        PRINT "'"
        PRINT "'   8> RunApp Classes:"
        PRINT "'      clsRunCMD        (import / ut_zzVBA RUNCMD)"
        PRINT "'      clsRunGBY        (import / ut_zzVBA RUNGBY)"
        PRINT "'      clsRunRPT        (import / ut_zzVBA RUNRPT)"
        PRINT "'      clsRunRST        (import / ut_zzVBA RUNRST)"
        PRINT "'      clsRunSBY        (import / ut_zzVBA RUNSBY)"
        PRINT "'      clsRunSQL        (import / ut_zzVBA RUNSQL)"
        PRINT "'      clsRunWHR        (import / ut_zzVBA RUNWHR)"
        PRINT "'"
        PRINT "'   9> Utility Classes:"
        PRINT "'      clsUtlASC        (import / ut_zzVBA UTLASC)"
        PRINT "'      clsUtlFMT        (import / ut_zzVBA UTLFMT)"
        PRINT "'      clsUtlVBG        (import / ut_zzVBA UTLVBG)"
        PRINT "'      clsUtlWSH        (import / ut_zzVBA UtlWSH)"
        PRINT "'      clsUtlWTX        (import / ut_zzVBA UTLWTX)"
        PRINT "'"
        PRINT "'###################################################################################################"
        END ELSE IF @ModNam IN ('clsUtlWTL','clsUtlWSH','clsUtlWTX','bas_WrtTxt') BEGIN
        PRINT "' NOTES:"
        PRINT "'"
        PRINT "'   1> Set a reference to Microsoft Scripting Runtime Library"
        PRINT "'"
        PRINT "'###################################################################################################"
        END ELSE IF @ModNam IN ('bas_Global') AND @StdTx3 IN ('Gen')BEGIN
        PRINT "'# NOTES:"
        PRINT "'"
        PRINT "' Set Environment:"
        PRINT "'  1> Set gcBasDrvCUR/gcBasDrvCUR constants (see immediately below)"
        PRINT "'  2> Open form sysLinkAPP and re-link tables"
        PRINT "'  3> Run bas_AppFunc.Reset_Defaults (assigns proper default ServerName references in tables)"
        PRINT "'"
        PRINT "'###################################################################################################"
        END
        PRINT "' Developer    Date       Action"
        PRINT "' ------------ ---------- --------------------------------------------------------------------------"
        PRINT "' "+@DvpTxt+" "+CONVERT(char(10),GETDATE(),121)+" Created the script"
        PRINT "'###################################################################################################"
        IF @ModTyp IN ('cls') BEGIN
        PRINT "'# Templates:"
        PRINT "'"
        --------------------------------------------------------------------------------------------
        IF @ModNam IN ('clsUtlASC') BEGIN
        PRINT "'    ' Initialize working variables"
        PRINT "'    Dim mvrnVAL As Variant"
        PRINT "'"
        END
        --------------------------------------------------------------------------------------------
        PRINT "'    ' Initialize working objects"
        PRINT "'    Dim "+@ModAls+"    As "+@ModNam 
        PRINT "'    Set "+@ModAls+" = New "+@ModNam
        PRINT "'"
        PRINT "'    ' Process working objects"
        PRINT "'    With "+@ModAls
        PRINT "'    End With"
        --------------------------------------------------------------------------------------------
        IF @ModNam IN ('clsUtlASC') BEGIN
        PRINT "'"
        PRINT "'"
        PRINT "'    '---------------------------------------------------------------------------------------------------"
        PRINT "'    Private Sub txtControl_AfterUpdate()"
        PRINT "'        Me.txtControl = Nz(Me.txtControl, gcNulTXT)"
        PRINT "'        mvrnVAL = CStr(Me.txtControl): If Not "+@ModAls+".IsLength(mvrnVAL, gcCtlNamMAX) Then Beep: Me.txtControl = mvrnVAL"
        PRINT "'    End Sub"
        PRINT "'    '---------------------------------------------------------------------------------------------------"
        PRINT "'    Private Sub txtControl_KeyPress(UtlASCii As Integer)"
        PRINT "'        If "+@ModAls+".Get_Any_Data(UtlASCii) Then Beep"
        PRINT "'    End Sub"
        PRINT "'    '---------------------------------------------------------------------------------------------------"
        PRINT "'"
        PRINT "'"
        PRINT "'    '---------------------------------------------------------------------------------------------------"
        PRINT "'    Private Sub txtControl_AfterUpdate()"
        PRINT "'        Me.txtControl = Nz(Me.txtControl, gcNulNBR)"
        PRINT "'        mvrnVAL = CDbl(Me.txtControl): If Not "+@ModAls+".InRange(mvrnVAL, gcCtlLmtMIN, gcCtlLmtMAX) Then Beep: Me.txtControl = mvrnVAL"
        PRINT "'    End Sub"
        PRINT "'    '---------------------------------------------------------------------------------------------------"
        PRINT "'    Private Sub txtControl_KeyPress(UtlASCii As Integer)"
        PRINT "'        If "+@ModAls+".Get_Decimals(UtlASCii) Then Beep"
        PRINT "'    End Sub"
        PRINT "'    '---------------------------------------------------------------------------------------------------"
        END ELSE IF @ModNam IN ('clsUtlWSH') BEGIN
        PRINT "'"
        PRINT "'"
        PRINT "'    '---------------------------------------------------------------------------------------------------"
        PRINT "'    Select Case fso.GetExtensionName(strPTH)"
        PRINT "'        Case ""lnk"""
        PRINT "'            Dim lnk As WshShortcut"
        PRINT "'            Set lnk = wss.CreateShortcut(strPTH)"
        PRINT "'            lnk.TargetPath = """"                 ' The path of the program to execute"
        PRINT "'            lnk.Arguments = """"                  ' Arguments to pass to the executable"
        PRINT "'            lnk.WorkingDirectory = """"           ' Start In    :"
        PRINT "'            lnk.Hotkey = """"                     ' Shortcut Key:"
        PRINT "'            lnk.WindowStyle = WshMaximizedFocus ' Run         :"
        PRINT "'            lnk.Description = """"                ' Comment     :"
        PRINT "'            lnk.Save                            ' Save the .lnk file"
        PRINT "'        Case ""url"""
        PRINT "'            Dim url As WshURLShortcut"
        PRINT "'            Set url = wss.CreateShortcut(strPTH)"
        PRINT "'            url.TargetPath = """"                 ' The URL of the web page"
        PRINT "'            url.Save                            ' Save the .url file"
        PRINT "'        Case Else"
        PRINT "'            Exit Sub"
        PRINT "'    End Select"
        PRINT "'    '---------------------------------------------------------------------------------------------------"
        END
        PRINT "'"
        PRINT "'###################################################################################################"
        END
        PRINT "Option Compare Database"
        PRINT "Option Explicit"
        PRINT "Option Base 0"
        IF @ModTyp NOT IN ('rpt') BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Initialize module message constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModNam                  As String = """+@ModNam+""""
        PRINT "Private Const mcModTtl                  As String = """+@ModTtl+""""
        PRINT "Private Const mcModErr                  As String = mcModNam"
        PRINT "Private Const mcModMsg                  As String = mcModTtl & "" - """
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CEV = Public class events
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX CEV
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCEV) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Public Class Events"
        PRINT "'***************************************************************************************************"
        PRINT "Public Event Error(ByVal Message As String)"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- TFL = Temporary file location constants
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TFL
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTFL) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Temporary file location constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTmpDir                  As String = ""C:\_Temp\"""
        PRINT "Private Const mcGenTmp                  As String = mcTmpDir & ""_GenTmp.txt"""
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- DCS = Declare class services
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX DCS,'rtb:clsRegTBL'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecDCS) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Class Services"
        PRINT "'***************************************************************************************************"
        SET @SEP = @CMA; SET @LST = @InpTxt; SET @ITX = @MTY
        SET @LST = LTRIM(RTRIM(REPLACE(REPLACE(@LST,@SP1,@MTY),@NLN,@SEP)))
        WHILE LEFT (@LST,LEN(@SEP)) = @SEP  SET @LST = RIGHT(@LST,LEN(@LST)-LEN(@SEP))
        WHILE RIGHT(@LST,LEN(@SEP)) = @SEP  SET @LST = LEFT (@LST,LEN(@LST)-LEN(@SEP))
        WHILE @LST LIKE @PCT+@SEP+@SEP+@PCT SET @LST = REPLACE(@LST,@SEP+@SEP,@SEP)
        WHILE LEN(@LST) > 0 BEGIN
            SET @POS = CHARINDEX(@SEP,@LST)
            IF @POS > 0 BEGIN
                SET @ITM = LTRIM(RTRIM(LEFT(@LST,@POS-1)))
                SET @LST = LTRIM(RIGHT(@LST,LEN(@LST)-@POS-(LEN(@SEP)-1)))
            END ELSE BEGIN
                SET @ITM = LTRIM(RTRIM(@LST))
                SET @LST = ''
            END
            SET @POS = CHARINDEX(":",@ITM)
            IF @POS > 0 BEGIN
                SET @TX1 = LEFT(LEFT(@ITM,@POS-1)+@ITX,27)
                SET @TX2 = SUBSTRING(@ITM,@POS+1,99)
                PRINT "Private "+@TX1+" As "+@TX2
            END
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- BTX = Basic Text Constants/Variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX BTX
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBTX) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcZRO                     As Long = 0                                                ' BTX: Empty Number"
        PRINT "Private Const mcMTY                     As String = """"                                             ' BTX: Empty String"
        PRINT "Private Const mcSPC                     As String * 1 = """"                                         ' BTX: Single Space"
        PRINT "Private Const mcDOT                     As String = "".""                                            ' BTX: Period/Dot"
        PRINT "Private Const mcCMA                     As String = "",""                                            ' BTX: Comma Constant"
        PRINT "Private Const mcDSH                     As String = ""-""                                            ' BTX: Dash"
        PRINT "Private Const mcUBR                     As String = ""_""                                            ' BTX: Underbar"
        PRINT "Private Const mcPIP                     As String = ""|""                                            ' BTX: Pipe"
        PRINT "Private Const mcBKS                     As String = ""\""                                            ' BTX: Backslash"
        PRINT "Private Const mcFWS                     As String = ""/""                                            ' BTX: Forwardslash"
        PRINT "Private Const mcSCN                     As String = "";""                                            ' BTX: Semi-Colon"
        PRINT "Private Const mcCLN                     As String = "":""                                            ' BTX: Colon"
        PRINT "Private Const mcTLD                     As String = ""~""                                            ' BTX: Tilde"
        PRINT "Private Const mcTIK                     As String = ""`""                                            ' BTX: Backtick"
        PRINT "Private Const mcSQT                     As String = ""'""                                            ' BTX: Single Quote"
        PRINT "Private Const mcDQT                     As String = """"""""                                           ' BTX: Double Quote"
        PRINT "Private Const mcCLF                     As String = vbCrLf                                         ' BTX: CarrRtn/LineFeed"
        PRINT "Private Const mcNUL                     As Variant = Null                                          ' BTX: Null Value"
        PRINT "Private Const mcYUP                     As Boolean = True                                          ' BTX: Standard True"
        PRINT "Private Const mcNOP                     As Boolean = False                                         ' BTX: Standard False"
        PRINT "Private Const mcALL                     As String = ""ALL""                                          ' BTX: Standard ALL"
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTXT                            As String                                                  ' "
        PRINT "Private mTX1                            As String                                                  ' "
        PRINT "Private mTX2                            As String                                                  ' "
        PRINT "Private mTX3                            As String                                                  ' "
        PRINT "Private mTX4                            As String                                                  ' "
        PRINT "Private mTX5                            As String                                                  ' "
        PRINT "'***************************************************************************************************"
        PRINT "Private mLEN                            As Integer                                                 ' "
        PRINT "Private mLN1                            As Integer                                                 ' "
        PRINT "Private mLN2                            As Integer                                                 ' "
        PRINT "'***************************************************************************************************"
        PRINT "Private mNBR                            As Long                                                    ' "
        PRINT "Private mNB1                            As Long                                                    ' "
        PRINT "Private mNB2                            As Long                                                    ' "
        PRINT "'***************************************************************************************************"
        PRINT "Private mBLN                            As Boolean                                                 ' "
        PRINT "Private mBL1                            As Boolean                                                 ' "
        PRINT "Private mBL2                            As Boolean                                                 ' "
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- XTX = Extended Text Constants/Variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX XTX
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecXTX) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Extended Text Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mIDX                            As Integer                                                 ' "
        PRINT "Private mCNT                            As Integer                                                 ' "
        PRINT "Private mUBD                            As Integer                                                 ' "
        PRINT "'***************************************************************************************************"
        PRINT "Private mCUR                            As String                                                  ' "
        PRINT "Private mPRV                            As String                                                  ' "
        PRINT "'***************************************************************************************************"
        PRINT "Private mPOS                            As Integer                                                 ' "
        PRINT "Private mPS1                            As Integer                                                 ' "
        PRINT "Private mPS2                            As Integer                                                 ' "
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- SQC = SQL Construction Constants/Variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX SQC
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSQC) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' SQL Construction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWHR                     As String = ""WHERE""                                        ' SQL: Operator WHERE"
        PRINT "Private Const mcFST                     As String * 4 = """"                                         ' SQL: First criteria"
        PRINT "Private Const mcAND                     As String * 4 = ""AND ""                                      ' SQL: Append criteria"
        PRINT "Private Const mcORR                     As String * 4 = ""OR  ""                                      ' SQL: Append criteria"
        PRINT "Private Const mcNON                     As String * 3 = ""0=9""                                       ' SQL: Records = None"
        PRINT "Private Const mcANY                     As String * 3 = ""1=1""                                       ' SQL: Records = All/Any"
        PRINT "Private Const mcMG0                     As String = """"                                             ' SQL: Margin: 0"
        PRINT "Private Const mcMG1                     As String * 4 = """"                                         ' SQL: Margin: 1"
        PRINT "Private Const mcMG2                     As String * 8 = """"                                         ' SQL: Margin: 2"
        PRINT "Private mXTS                            As String * 1000                                           ' SQL: Extend Space"
        PRINT "Private mSQL                            As String                                                  ' SQL: Statement Build"
        PRINT "Private mWHR                            As String                                                  ' SQL: Statement WHERE"
        PRINT "Private mAND                            As String * 4                                              ' SQL: Separater AND"
        PRINT "Private mCMA                            As String                                                  ' SQL: Separater Comma"
        PRINT "Private mSEP                            As String                                                  ' SQL: Separater Placeholder"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- SNC = Standard Null Comparison Constants/Variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX SNC
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSNC) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Standard Null Comparisons"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcNulVRN                  As Variant = Null                                          ' Null Variant (Null)"
        PRINT "Private Const mcNulBIN                  As Variant = Null                                          ' Null Variant (Null)"
        PRINT "Private mcNulTXT                        As String                                                  ' Null String  ("""")"
        PRINT "Private mcNulBLN                        As Boolean                                                 ' Null Boolean (False)"
        PRINT "Private mcNulNBR                        As Integer                                                 ' Null Number  (0)"
        PRINT "Private mcNulDAT                        As Date                                                    ' Null Date    (Null)"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- TCV = Standard Open Form/Report variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TCV
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTCV) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Text concatenation variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mX                              As String                                                  ' "
        PRINT "Private mG                              As String                                                  ' "
        PRINT "Private mR                              As String                                                  ' "
        PRINT "Private mM                              As Integer                                                 ' "
        PRINT "Private mP                              As Integer                                                 ' "
        PRINT "'***************************************************************************************************"
        PRINT "' Working Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcReplace                 As Boolean = True                                          ' "
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ORV = Standard Open Form/Report variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX ORV
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecORV) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Form/Report Management"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrOpenText                    As String                                                  ' "
        PRINT "Private mstrOpenName                    As String                                                  ' "
        PRINT "Private mintOpenView                    As Integer                                                 ' "
        PRINT "Private mstrFiltName                    As String                                                  ' "
        PRINT "Private mstrWhereTxt                    As String                                                  ' "
        PRINT "Private mintDataMode                    As Integer                                                 ' "
        PRINT "Private mintWindMode                    As Integer                                                 ' "
        PRINT "Private mstrOpenArgs                    As String                                                  ' "
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- SFC = Standard form constants
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX SFC
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSFC) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Standard form constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcReset                   As Boolean = True                                          ' "
        PRINT "Private Const mcNoReset                 As Boolean = False                                         ' "
        PRINT "Private Const mcActive                  As Boolean = True                                          ' "
        PRINT "Private Const mcInActive                As Boolean = False                                         ' "
        PRINT "Private Const mcSync                    As Boolean = True                                          ' "
        PRINT "Private Const mcNoSync                  As Boolean = False                                         ' "
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CTV = Criteria tracking variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX CTV
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCTV) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Criteria tracking variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrPKey                        As String                                                  ' "
        PRINT "Private mstrYear                        As String                                                  ' "
        CONTINUE
    --------------------------------------------------------------------------------------------
    -- SCV = Standard criteria variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX SCV
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSCV) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Standard criteria variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mlngRetVal                      As Long"
        CONTINUE
    --------------------------------------------------------------------------------------------
    -- STV = Standard criteria variables
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX STV
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSTV) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Statement construction variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMG1                     As String * 4 = """""
        PRINT "Private Const mcAND                     As String * 4 = ""AND """
        PRINT "Private Const mcRT1                     As String = vbCrLf & mcMG1"
        PRINT "Private Const mcRT2                     As String = "","" & vbCrLf & mcMG1"
        PRINT "Private Const mcWH1                     As String = ""WHERE"" & mcRT1"
        PRINT "Private Const mcOB1                     As String = ""ORDER BY"" & mcRT1"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CNC = Connection component constants
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX CNC
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCNC) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' http://databases.aspfaq.com/database/what-should-my-connection-string-look-like.html"
        PRINT "'***************************************************************************************************"
        PRINT "' Connection:  MSAccess"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMDBFile                 As String = ""GenSQL.mdb""                                           ' MSAccess file name"
        PRINT "Private Const mcMDBPath                 As String = gcPrjDir & ""DBTools\GEN\SQL\""                          ' Full path"
        PRINT "Private Const mcMDBProv                 As String = ""Provider=Microsoft.Jet.OLEDB.4.0;""                    ' Install latest MDAC"
        PRINT "Private Const mcMDBData                 As String = ""Data Source="" & mcMDBPath & mcMDBFile & "";""           ' Full mdb file path"
        PRINT "Private Const mcMDBPswd                 As String = ""User ID=admin;Password=;Persist Security Info=True;""  ' admin is the default user"
        PRINT "Private Const mcMDBConn                 As String = mcMDBProv & mcMDBData & mcMDBPswd"
        PRINT "'rivate Const mcMDBConn                 As String = ""Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Y:\Data\DEV\Projects\DBTools\GEN\SQL\GenSQL.mdb;User ID=admin;Password=;Persist Security Info=True;"""
        PRINT "'***************************************************************************************************"
        PRINT "' Connection:  SQLServer"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSQLProv                 As String = ""Provider=SQLOLEDB;""                                   ' Standard provider"
        PRINT "Private Const mcSQLData                 As String = ""Data Source=WAREDEV;""                                 ' Server or IPAddress"
        PRINT "Private Const mcSQLCtlg                 As String = ""Initial Catalog=SCRATCH;""                             ' Database Name"
        PRINT "Private Const mcSQLNtwk                 As String = ""Network=DBMSSOCN;""                                    ' Use TCP/IP, not Named Pipes"
        PRINT "Private Const mcSQLIsec                 As String = ""Integrated Security=SSPI;""                            ' Must be turned on in SQL Server"
        PRINT "Private Const mcSQLPswd                 As String = ""User ID=sa;Password=;""                                ' Must be turned on in SQL Server"
        PRINT "Private Const mcSQLConn                 As String = mcSQLProv & mcSQLData & mcSQLCtlg & mcSQLNtwk & mcSQLIsec"
        PRINT "'rivate Const mcSQLConn                 As String = ""Provider=SQLOLEDB;Data Source=WAREDEV;Initial Catalog=SCRATCH;Network=DBMSSOCN;Integrated Security=SSPI;"""
        PRINT "'rivate Const mcSQLConn                 As String = mcSQLProv & mcSQLData & mcSQLCtlg & mcSQLNtwk & mcSQLPswd"
        PRINT "'rivate Const mcSQLConn                 As String = ""Provider=SQLOLEDB;Data Source=WAREDEV;Initial Catalog=SCRATCH;Network=DBMSSOCN;User ID=sa;Password=;"""
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- PPH = Public properties header
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX PPH
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecPPH) BEGIN
        SET @TX1 = CASE WHEN LEN(@InpTxt) > 0 THEN @InpTxt ELSE 'Module Properties' END
        PRINT "'***************************************************************************************************"
        PRINT "' "+@TX1
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- FIN = Finish Initilization
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX FIN
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecFIN) BEGIN
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- DON = Done with Code
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX DON
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecDON) BEGIN
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- ICS = Initialize class services
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX ICS,'rtb:clsRegTBL,gcn:GenCon'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecICS) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Objects"
        SET @SEP = ","; SET @LST = @InpTxt; SET @ITX = ""
        SET @LST = LTRIM(RTRIM(REPLACE(REPLACE(@LST," ",""),@NLN,@SEP)))
        WHILE LEFT (@LST,LEN(@SEP)) = @SEP SET @LST = RIGHT(@LST,LEN(@LST)-LEN(@SEP))
        WHILE RIGHT(@LST,LEN(@SEP)) = @SEP SET @LST = LEFT (@LST,LEN(@LST)-LEN(@SEP))
        WHILE @LST LIKE "%"+@SEP+@SEP+"%"  SET @LST = REPLACE(@LST,@SEP+@SEP,@SEP)
        WHILE LEN(@LST) > 0 BEGIN
            SET @POS = CHARINDEX(@SEP,@LST)
            IF @POS > 0 BEGIN
                SET @ITM = LTRIM(RTRIM(LEFT(@LST,@POS-1)))
                SET @LST = LTRIM(RIGHT(@LST,LEN(@LST)-@POS-(LEN(@SEP)-1)))
            END ELSE BEGIN
                SET @ITM = LTRIM(RTRIM(@LST))
                SET @LST = ""
            END
            SET @POS = CHARINDEX(":",@ITM)
            IF @POS > 0 BEGIN
                SET @TX1 = SUBSTRING(@ITM,01,@POS-1)
                SET @TX2 = SUBSTRING(@ITM,@POS+1,99)
                PRINT "    Set "+@TX1+" = New "+@TX2
            END
        END
        PRINT "    ' Initialize Flags"
        PRINT "    ' Initialize Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- TXP = Text concatenation properties
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TXP
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTXP) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let Text(ByVal vNewVal As String): mX = vNewVal: End Property"
        PRINT "Public Property Get Text() As String: Text = mX: End Property"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- IWT = Initialize write text services
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX IWT
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecIWT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    Call AX_Clear"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    -- TXC = Text concatenation methods
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TXC
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTXC) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @FncScp = CASE WHEN @StdTx1 = "Public" THEN @StdTx1 ELSE "Private" END
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text concatenation methods"
        PRINT "'###################################################################################################"
        PRINT "' Clear the mX string and reset margin"
        PRINT "Public Sub AX_Clear(Optional pN As Integer = 0)"
        PRINT "    mX = """": mM = pN: mG = Space(mM * 4): mR = vbCrLf & mG"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Add text to mX string (includes blank line)"
        PRINT "Public Sub AX(ByVal pX As String)"
        PRINT "    mX = IIf(Len(mX) > 0, mX & mR, """") & pX"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Add text to mX string (excludes blank line)"
        PRINT "Public Sub BX(ByVal pX As String)"
        PRINT "    If Len(pX) > 0 Then mX = IIf(Len(mX) > 0, mX & mR, """") & pX"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Concatenate text to mX string with no modifications"
        PRINT "Public Sub CX(ByVal pX As String)"
        PRINT "    If Len(pX) > 0 Then mX = mX & pX"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Concatenate text to mX string with aligned comments"
        PRINT "Public Sub DX(ByVal pB As String, ByVal pL As Integer, ByVal pE As String)"
        PRINT "    pL = IIf(Len(pB) > pL, Len(pB), pL)+1"
        PRINT "    mX = IIf(Len(mX) > 0, mX & mR, """") & Left$(pB & Space(pL), pL) & ""' "" & pE"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Add multiple blank lines to mX string"
        PRINT "Public Sub LX(Optional pN As Integer = 1)"
        PRINT "    Do While pN > 0: mX = mX & vbCrLf: pN = pN - 1: Loop"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Add text to mX string as a single line"
        PRINT "Public Sub SX(ByVal pX As String)"
        PRINT "    pX = Trim$(pX)"
        PRINT "    Do While InStr(pX, ""  "") > 0: pX = Replace$(pX, ""  "", "" ""): Loop"
        PRINT "    mX = Trim$(mX) & RTrim$("" "" & pX)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Increment the margin"
        PRINT "Public Sub IM(Optional pN As Integer = 1)"
        PRINT "    mM = mM+pN: mG = Space(mM * 4): mR = vbCrLf & mG"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Decrement the margin"
        PRINT "Public Sub DM(Optional pN As Integer = 1)"
        PRINT "    mM = mM - pN: mM = IIf(mM < 0, 0, mM): mG = Space(mM * 4): mR = vbCrLf & mG"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        -- PRINT "' Prepare a directory path"
        -- PRINT @FncScp+" Function DP(ByVal strDIR As String) As String"
        -- PRINT "    Do While Right$(strDIR, 1) = ""\"": strDIR = Left$(strDIR, Len(strDIR) - 1): Loop: DP = strDIR & ""\"""
        -- PRINT "End Function"
        -- PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- TXM = Text manipulation methods
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TXM
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTXM) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @FncScp = CASE WHEN @StdTx1 = "Public" THEN @StdTx1 ELSE "Private" END
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text manipulation methods"
        PRINT "'###################################################################################################"
        PRINT @FncScp+" Sub AX_Chop(ByVal cX As String)"
        PRINT "    cX = Trim$(cX): mP = Len(cX)"
        PRINT "    If mP > 0 Then Do While Right$(mX, mP) = cX: mX = Left$(mX, Len(mX) - mP): Loop"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
       CONTINUE
    ------------------------------------------------------------------------------------------------
    -- TXW = Text write methods
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TXW
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTXW) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @FncScp = CASE WHEN @StdTx1 = "Public" THEN @StdTx1 ELSE "Private" END
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Internal Text export methods"
        PRINT "'###################################################################################################"
        PRINT "Public Sub AX_WrtTmp(Optional pX As String = vbCrLf)"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.CreateTextFile(mcGenTmp, mcReplace)"
        PRINT "    Call txs.Write(mX & pX)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_WrtPth(ByVal strPTH As String, Optional pX As String = vbCrLf)"
        PRINT "    If Len(strPTH) = 0 Then"
        PRINT "        strPTH = mcGenTmp"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.CreateTextFile(strPTH, mcReplace)"
        PRINT "    Call txs.Write(mX & pX)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' External Text export methods"
        PRINT "'###################################################################################################"
        PRINT "Public Sub TX_WrtTmp(ByVal strTXT As String)"
        PRINT "    Dim strCLF As String"
        PRINT "    If Right$(strTXT, Len(vbCrLf)) <> vbCrLf Then"
        PRINT "        strCLF = vbCrLf"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.CreateTextFile(mcGenTmp, mcReplace)"
        PRINT "    Call txs.Write(strTXT & strCLF)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub TX_WrtPth(ByVal strTXT As String, ByVal strPTH As String)"
        PRINT "    If Len(strPTH) = 0 Then"
        PRINT "        strPTH = mcGenTmp"
        PRINT "    End If"
        PRINT "    Dim strCLF As String"
        PRINT "    If Right$(strTXT, Len(vbCrLf)) <> vbCrLf Then"
        PRINT "        strCLF = vbCrLf"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.CreateTextFile(strPTH, mcReplace)"
        PRINT "    Call txs.Write(strTXT & strCLF)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- TOC = Test text output - class module format
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TOC
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTOC) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "''###################################################################################################"
        PRINT "'' Test text output - class format"
        PRINT "''###################################################################################################"
        PRINT "'Private Function TestClass() As Boolean"
        PRINT "'    Const pcMsgTtl = mcModNam & "".TestClass"""
        PRINT "'    'On Error GoTo Error_Handler"
        PRINT "'"
        PRINT "'    ' Initialize current database"
        PRINT "'    Dim dbs    As Database"
        PRINT "'    Set dbs = CurrentDb"
        PRINT "'"
        PRINT "'    ' Initialize recordset objects"
        PRINT "'    Dim rst    As Recordset"
        PRINT "'"
        PRINT "'    ' Initialize query objects"
        PRINT "'    Dim qdf    As QueryDef"
        PRINT "'    Set qdf = dbs.CreateQueryDef("""")"
        PRINT "'"
        PRINT "'    ' Initialize table objects"
        PRINT "'    Dim tdf    As TableDef"
        PRINT "'    Dim tds    As TableDefs"
        PRINT "'    Set tds = dbs.TableDefs"
        PRINT "'"
        PRINT "'    ' Initialize current project"
        PRINT "'    Dim prj As Object"
        PRINT "'    Set prj = Application.CurrentProject"
        PRINT "'"
        PRINT "'    ' Initialize access object"
        PRINT "'    Dim obj As AccessObject"
        PRINT "'"
        PRINT "'    ' Display object list"
        PRINT "'    For Each obj In prj.AllReports   ' AllReports AllForms AllModules"
        PRINT "'        Debug.Print obj.Name"
        PRINT "'    Next obj"
        PRINT "'"
        PRINT "'    ' Process a ADO recordset"
        PRINT "'    Dim rst    As ADODB.Recordset"
        PRINT "'    Set rst = New ADODB.Recordset"
        PRINT "'    Dim cnn    As ADODB.Connection"
        PRINT "'    Set cnn = CurrentProject.Connection"
        PRINT "'    With rst"
        PRINT "'        Call .Open(wtx.Text, cnn, adOpenForwardOnly, adLockReadOnly)"
        PRINT "'        Do While Not .EOF"
        PRINT "'            mvarVarNam = .Fields(0)"
        PRINT "'            .MoveNext"
        PRINT "'        Loop"
        PRINT "'    End With"
        PRINT "'"
        PRINT "'    ' Initialize text management objects"
        PRINT "'    Dim wtx    As clsUtlWTX"
        PRINT "'    Set wtx = New clsUtlWTX"
        PRINT "'"
        PRINT "'    ' Declare working variables"
        PRINT "'"
        PRINT "'    ' Define working constants"
        PRINT "'"
        PRINT "'    ' Initialize working objects"
        PRINT "'"
        PRINT "'    '***********************************************************************************************"
        PRINT "'    Call wtx.AX_Clear: With wtx"
        PRINT "'    '***********************************************************************************************"
        PRINT "'"
        PRINT "'    .AX ""Hello, world! (class)"""
        PRINT "'    .AX ""Hello,"""
        PRINT "'    .CX "" again! (class)"""
        PRINT "'"
        PRINT "'    '***********************************************************************************************"
        PRINT "'    End With: Call wtx.AX_WrtTmp"
        PRINT "'    '***********************************************************************************************"
        PRINT "'"
        PRINT "'    ' Return results"
        PRINT "'    TestClass = True"
        PRINT "'"
        PRINT "'Exit_Procedure:"
        PRINT "'    Exit Function"
        PRINT "'Error_Handler:"
        PRINT "'    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "'    Resume Exit_Procedure"
        PRINT "'End Function"
        PRINT "''==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- TOB = Test text output - base module format
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TOB
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTOB) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "''###################################################################################################"
        PRINT "'' Test text output - base module format"
        PRINT "''###################################################################################################"
        PRINT "'Private Function TestBase() As Boolean"
        PRINT "'    Const pcMsgTtl = mcModNam & "".TestBase"""
        PRINT "'    'On Error GoTo Error_Handler"
        PRINT "'"
        PRINT "'    ' Initialize current database"
        PRINT "'    Dim dbs    As Database"
        PRINT "'    Set dbs = CurrentDb"
        PRINT "'"
        PRINT "'    ' Initialize recordset objects"
        PRINT "'    Dim rst    As Recordset"
        PRINT "'"
        PRINT "'    ' Initialize query objects"
        PRINT "'    Dim qdf    As QueryDef"
        PRINT "'    Set qdf = dbs.CreateQueryDef("""")"
        PRINT "'"
        PRINT "'    ' Initialize table objects"
        PRINT "'    Dim tdf    As TableDef"
        PRINT "'    Dim tds    As TableDefs"
        PRINT "'    Set tds = dbs.TableDefs"
        PRINT "'"
        PRINT "'    ' Initialize current project"
        PRINT "'    Dim prj As Object"
        PRINT "'    Set prj = Application.CurrentProject"
        PRINT "'"
        PRINT "'    ' Initialize access object"
        PRINT "'    Dim obj As AccessObject"
        PRINT "'"
        PRINT "'    ' Display object list"
        PRINT "'    For Each obj In prj.AllReports   ' AllReports AllForms AllModules"
        PRINT "'        Debug.Print obj.Name"
        PRINT "'    Next obj"
        PRINT "'"
        PRINT "'    ' Declare working variables"
        PRINT "'"
        PRINT "'    ' Define working constants"
        PRINT "'"
        PRINT "'    ' Initialize working objects"
        PRINT "'"
        PRINT "'    '***********************************************************************************************"
        PRINT "'    Call AX_Clear"
        PRINT "'    '***********************************************************************************************"
        PRINT "'"
        PRINT "'    AX ""Hello, world!"""
        PRINT "'    AX ""Hello,"""
        PRINT "'    CX "" again!"""
        PRINT "'"
        PRINT "'    '***********************************************************************************************"
        PRINT "'    Call AX_WrtTmp"
        PRINT "'    '***********************************************************************************************"
        PRINT "'"
        PRINT "'    ' Return results"
        PRINT "'    TestBase = True"
        PRINT "'"
        PRINT "'Exit_Procedure:"
        PRINT "'    Exit Function"
        PRINT "'Error_Handler:"
        PRINT "'    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "'    Resume Exit_Procedure"
        PRINT "'End Function"
        PRINT "''==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- TRC = Translate Criteria methods
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX TRC
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecTRC) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text concatenation methods"
        PRINT "'###################################################################################################"
        PRINT "' Clear the mX string and reset margin"
        PRINT @FncScp+" Sub AX_Clear(Optional pN As Integer = 0)"
        PRINT "    mX = """": mM = pN: mG = Space(mM * 4): mR = vbCrLf & mG"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Add text to mX string (includes blank line)"
        PRINT @FncScp+" Sub AX(ByVal pX As String)"
        PRINT "    mX = IIf(Len(mX) > 0, mX & mR, """") & pX"
        PRINT "End Sub"
        PRINT "' Add text to mX string (excludes blank line)"
        PRINT @FncScp+" Sub BX(ByVal pX As String)"
        PRINT "    If Len(pX) > 0 Then mX = IIf(Len(mX) > 0, mX & mR, """") & pX"
        PRINT "End Sub"
        PRINT "' Concatenate text to mX string with no modifications"
        PRINT @FncScp+" Sub CX(ByVal pX As String)"
        PRINT "    If Len(pX) > 0 Then mX = mX & pX"
        PRINT "End Sub"
        PRINT "' Add multiple blank lines to mX string"
        PRINT @FncScp+" Sub LX(Optional pN As Integer = 1)"
        PRINT "    Do While pN > 0: mX = mX & vbCrLf: pN = pN - 1: Loop"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Increment the margin"
        PRINT @FncScp+" Sub IM(Optional pN As Integer = 1)"
        PRINT "    mM = mM+pN: mG = Space(mM * 4): mR = vbCrLf & mG"
        PRINT "End Sub"
        PRINT "' Decrement the margin"
        PRINT @FncScp+" Sub DM(Optional pN As Integer = 1)"
        PRINT "    mM = mM - pN: mM = IIf(mM < 0, 0, mM): mG = Space(mM * 4): mR = vbCrLf & mG"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Prepare a directory path"
        PRINT @FncScp+" Function AB(ByVal strDIR As String) As String"
        PRINT "    Do While Right$(strDIR, 1) = ""\"": strDIR = Left$(strDIR, Len(strDIR) - 1): Loop: AB = strDIR & ""\"""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- RPH = Report header
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX RPH
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRPH) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_Activate()"
        PRINT "'###################################################################################################"
        PRINT "    'Me.txtReportScope = gstrRepSubTitle"
        PRINT "    'Me.txtBegDate = Nz(gdatRepBegDate, ""01/01/99"")"
        PRINT "    'Me.txtEndDate = Nz(gdatRepEndDate, ""12/31/99"")"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_Open(Cancel As Integer)"
        PRINT "'###################################################################################################"
        PRINT ""
        PRINT "    ' Initialize working variables"
        PRINT "    Dim strSQL As String"
        PRINT "    Dim strWHR As String"
        PRINT "    Dim strGBY As String"
        PRINT "    Dim strHAV As String"
        PRINT "    Dim strOBY As String"
        PRINT ""
        PRINT "    ' Initialize working objects"
        PRINT "    Dim stm    As clsSqlSTM"
        PRINT "    Set stm = New clsSqlSTM"
        PRINT "    Dim whr    As clsRunWHR"
        PRINT "    Set whr = New clsRunWHR"
        PRINT ""
        PRINT "    ' Assign SQL statement"
        PRINT "    With stm"
        PRINT "        Me.RecordSource = .GetSql_SysObj(strWHR, strGBY, strHAV, strOBY)"
        PRINT "    End With"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_NoData(Cancel As Integer)"
        PRINT "'###################################################################################################"
        PRINT "    MsgBox ""There is not any data which meets the specified criteria."", _"
        PRINT "        vbInformation, Me.lblPageTitle.Caption & "" Report"""
        PRINT "    Cancel = True"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    END
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- LODCLM = Load #ObjClm records
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX LODCLM
    ----------------------------------------------------------------------------------------------*/
    IF @BldCOD IN (@SecLODCLM,@SecMOJVAR,@SecMOJPRP,@SecMOJWHR) BEGIN
    ------------------------------------------------------------------------------------------------
        IF NOT EXISTS (SELECT * FROM #ObjClm) BEGIN
            SET @SEP = @SEP; SET @LST = @InpTxt
            SET @LST = LTRIM(RTRIM(REPLACE(REPLACE(@LST," ",""),@NLN,@SEP)))
            WHILE LEFT (@LST,LEN(@SEP)) = @SEP SET @LST = RIGHT(@LST,LEN(@LST)-LEN(@SEP))
            WHILE RIGHT(@LST,LEN(@SEP)) = @SEP SET @LST = LEFT (@LST,LEN(@LST)-LEN(@SEP))
            WHILE @LST LIKE "%"+@SEP+@SEP+"%"  SET @LST = REPLACE(@LST,@SEP+@SEP,@SEP)
            WHILE LEN(@LST) > 0 BEGIN
                SET @POS = CHARINDEX(@SEP,@LST)
                IF @POS > 0 BEGIN
                    SET @ITM = LTRIM(RTRIM(LEFT(@LST,@POS-1)))
                    SET @LST = LTRIM(RIGHT(@LST,LEN(@LST)-@POS-(LEN(@SEP)-1)))
                END ELSE BEGIN
                    SET @ITM = LTRIM(RTRIM(@LST))
                    SET @LST = ""
                END
                ------------------------------------------------------------------------------------
                -- Get all object parameters
                ------------------------------------------------------------------------------------
                SET @ObjNam = @ITM
                INSERT INTO #ObjClm (
                    ObjNam,
                    ClmNam,
                    ClmDtp
                ) SELECT DISTINCT
                    ObjNam   = obj.name,
                    ClmNam   = REPLACE(clm.name,'@',''),
                    ClmDtp   = ''
                FROM
                    SysColumns  clm
                INNER JOIN
                    SysObjects  obj
                        ON obj.id = clm.id 
                WHERE 
                    obj.name = @ObjNam
                --    obj.xtype IN ('P ')  --'U ','V ','P ')
                --AND obj.name = @ObjNam
                ------------------------------------------------------------------------------------
            END
            ----------------------------------------------------------------------------------------
            -- Filter columns
            --      ut_zzVBX Oup    Stx        Lft Spc Ttl Bat Tx1      Tx2     Tx3 Trn Idn Erm
            -- EXEC ut_zzVBX MOJWHR,ref_Server,0  ,0  ,1  ,0  ,'ServerID'     ,''     ,'' ,0  ,0  ,0
            -- EXEC ut_zzVBX MOJWHR,ref_Server,0  ,0  ,0  ,0  ,'ServerID'     ,''     ,'' ,0  ,0  ,0
            ----------------------------------------------------------------------------------------
            IF LEN(@StdTx1) > 0 UPDATE #ObjClm SET DelFlg = 1
            SET @SEP = @SEP; SET @LST = @StdTx1
            SET @LST = LTRIM(RTRIM(REPLACE(REPLACE(@LST," ",""),@NLN,@SEP)))
            WHILE LEFT (@LST,LEN(@SEP)) = @SEP SET @LST = RIGHT(@LST,LEN(@LST)-LEN(@SEP))
            WHILE RIGHT(@LST,LEN(@SEP)) = @SEP SET @LST = LEFT (@LST,LEN(@LST)-LEN(@SEP))
            WHILE @LST LIKE "%"+@SEP+@SEP+"%"  SET @LST = REPLACE(@LST,@SEP+@SEP,@SEP)
            WHILE LEN(@LST) > 0 BEGIN
                SET @POS = CHARINDEX(@SEP,@LST)
                IF @POS > 0 BEGIN
                    SET @ITM = LTRIM(RTRIM(LEFT(@LST,@POS-1)))
                    SET @LST = LTRIM(RIGHT(@LST,LEN(@LST)-@POS-(LEN(@SEP)-1)))
                END ELSE BEGIN
                    SET @ITM = LTRIM(RTRIM(@LST))
                    SET @LST = ""
                END
                UPDATE #ObjClm SET DelFlg = 0 WHERE ClmNam LIKE @ITM
                ------------------------------------------------------------------------------------
            END
            DELETE FROM #ObjClm WHERE DelFlg = 1
            ----------------------------------------------------------------------------------------
            -- Assign datatype text
            ----------------------------------------------------------------------------------------
            DECLARE cur_ClmDfn CURSOR FORWARD_ONLY FOR
                SELECT DfnID, ObjNam, ClmNam, ClmDtp FROM #ObjClm
            FOR UPDATE
            OPEN cur_ClmDfn
            WHILE 1=1 BEGIN
                FETCH NEXT FROM cur_ClmDfn INTO @DfnID, @ObjNam, @ClmNam, @ClmDtp
                IF @@FETCH_STATUS <> 0 BREAK
                SET @ClmDtp = @ObjNam
                EXEC ut_zzTYP DTP,XXX,XXX,@ClmNam,@ClmDtp OUTPUT
                UPDATE #ObjClm SET ClmDtp = @ClmDtp WHERE CURRENT OF cur_ClmDfn
            END
            DEALLOCATE cur_ClmDfn
            -- Display results
            IF @DbgFlg = 1 OR 0=1 BEGIN
                SELECT DISTINCT
                    ClmNam = LEFT(dfn.ClmNam,60),
                    ClmDtp = dfn.ClmDtp
                FROM
                    #ObjClm dfn
            END
            ----------------------------------------------------------------------------------------
        END
    ------------------------------------------------------------------------------------------------
    END
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- MOJVAR = Module object variables
    -- MOJPRP = Module object properties
    -- MOJWHR = Module object where
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX MOJVAR,'
            usp_AddNew_trx_SysClm_Sync
            usp_Modify_trx_SysClm_Sync
        '
        EXEC ut_zzVBX MOJVAR,'
            trx_SysObj
            trx_SysClm
        '
    ----------------------------------------------------------------------------------------------*/
    IF @BldCOD IN (@SecMOJVAR) BEGIN
        SET @TXT = 'Object criteria variables'; IF @IncTtl = 1 PRINT @N+@LinAst+@N+@LinCmt+@TXT+@N+@LinAst
        SET @PRV = ""
        DECLARE cur_ClmDfn CURSOR FORWARD_ONLY FOR SELECT DISTINCT ObjNam,ClmNam,ClmDtp FROM #ObjClm ORDER BY ClmNam
        OPEN cur_ClmDfn; WHILE 1=1 BEGIN FETCH NEXT FROM cur_ClmDfn INTO @ObjNam,@ClmNam,@ClmDtp; IF @@FETCH_STATUS <> 0 BREAK
            IF @ClmNam <> @PRV BEGIN
                EXEC ut_zzTYP VBAPFX,XXX,XXX,@ClmDtp,@VarPfx OUTPUT
                EXEC ut_zzTYP VBADTP,XXX,XXX,@ClmDtp,@VarDtp OUTPUT
                SET @VarPfx = "vrn"; SET @VarDtp = "Variant"
                SET @VarTxt = "m"+@VarPfx+@ClmNam
                PRINT "Private "+@VarTxt+" As "+@VarDtp
            END
            SET @PRV = @ClmNam
        END; DEALLOCATE cur_ClmDfn
        CONTINUE
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldCOD IN (@SecMOJPRP) BEGIN
        SET @TXT = 'Public criteria properties'; IF @IncTtl = 1 PRINT @N+@N+@LinPnd+@N+@LinCmt+@TXT+@N+@LinPnd
        SET @PRV = ""
        DECLARE cur_ClmDfn CURSOR FORWARD_ONLY FOR SELECT DISTINCT ObjNam,ClmNam,ClmDtp FROM #ObjClm ORDER BY ClmNam
        OPEN cur_ClmDfn; WHILE 1=1 BEGIN FETCH NEXT FROM cur_ClmDfn INTO @ObjNam,@ClmNam,@ClmDtp; IF @@FETCH_STATUS <> 0 BREAK
            IF @ClmNam <> @PRV BEGIN
                EXEC ut_zzTYP VBAPFX,XXX,XXX,@ClmDtp,@VarPfx OUTPUT
                EXEC ut_zzTYP VBADTP,XXX,XXX,@ClmDtp,@VarDtp OUTPUT
                SET @VarPfx = "vrn"; SET @VarDtp = "Variant"
                SET @VarNam = "m"+@VarPfx+@ClmNam
                PRINT "Public Property Let "+@ClmNam+"(ByVal vNewVal As "+@VarDtp+"): "+@VarNam+" = vNewVal: End Property"
                PRINT "Public Property Get "+@ClmNam+"() As "+@VarDtp+": "+@ClmNam+" = "+@VarNam+": End Property"
                PRINT @LinDbl
            END
            SET @PRV = @ClmNam
        END; DEALLOCATE cur_ClmDfn
        CONTINUE
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldCOD IN (@SecMOJWHR) BEGIN
        SET @TXT = 'Assign WHERE criteria phrases'; IF @IncTtl = 1 PRINT @N+@N+@LinPnd+@N+@LinCmt+@TXT+@N+@LinPnd
        SET @PRV = ""
        DECLARE cur_ClmDfn CURSOR FORWARD_ONLY FOR SELECT DISTINCT ObjNam,ClmNam,ClmDtp FROM #ObjClm ORDER BY ClmNam
        OPEN cur_ClmDfn; WHILE 1=1 BEGIN FETCH NEXT FROM cur_ClmDfn INTO @ObjNam,@ClmNam,@ClmDtp; IF @@FETCH_STATUS <> 0 BREAK
            IF @ClmNam <> @PRV BEGIN
                EXEC ut_zzTYP VBAPFX,XXX,XXX,@ClmDtp,@VarPfx OUTPUT
                EXEC ut_zzTYP VBADTP,XXX,XXX,@ClmDtp,@VarDtp OUTPUT
                SET @VarPfx = UPPER(@VarPfx)
                PRINT "Private Sub Set_"+@ClmNam+"(Optional ByVal strTBL As String = """+@ObjNam+""")"
                PRINT "    If Not IsNull("+@ClmNam+") Then Call whr.AddItem(strTBL, """+@ClmNam+""", gcVbaTyp"+@VarPfx+", "+@ClmNam+")"
                PRINT "End Sub"
                PRINT @LinDbl
            END
            SET @PRV = @ClmNam
        END; DEALLOCATE cur_ClmDfn
        CONTINUE
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    END
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- BASAPC = Build module:  bas_AppCons
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASAPC
        EXEC ut_zzVBX BASAPC
    ----------------------------------------------------------------------------------------------*/
    IF @BldCOD IN (@SecBASAPC) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Constants"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' General Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Lookup:  lkp_TblNam"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' List Constants: Lookups"
        PRINT "'###################################################################################################"
        PRINT "Private Sub LstConLKP()"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcBAS As String = ""TblNam""                                      ' Lookup Table        :  BaseName"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcTBL As String = ""lkp_"" & pcBAS                                ' Lookup Table        :  TableName"
        PRINT "    Const pcCPX As String = ""gc"" & pcBAS                                  ' Base Prefix         :  Constant"
        PRINT "    Const pcSRT As String = pcBAS & ""Sort""                                ' SELECT ORDER BY     :  Column Name"
        PRINT "    Const pcCOD As String = pcBAS & ""Code""                                ' Constant Code       :  Column Name"
        PRINT "    Const pcVAL As String = pcBAS & ""ID""                                  ' Constant Value      :  Column Name"
        PRINT "    Const pcDSC As String = pcBAS & ""Name""                                ' Constant Description:  Column Name"
        PRINT "    Const pcTYP As String = ""Long""                                        ' Constant Datatype   :  String,Long,Integer, ..."
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim strQOT As String: strQOT = IIf(pcTYP = ""String"", """""""", """")"
        PRINT "    Dim strCOD As String"
        PRINT "    Dim strVAL As String"
        PRINT "    Dim strDSC As String"
        PRINT "    Dim dbs    As DAO.Database"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Dim rst    As DAO.Recordset"
        PRINT "    Dim wtx    As clsUtlWTX"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    Debug.Print ""'***********************************************************************************************"""
        PRINT "    Debug.Print ""' Lookup:  "" & pcTBL"
        PRINT "    Debug.Print ""'***********************************************************************************************"""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx: Call .AX_Clear"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""SELECT"""
        PRINT "    .AX ""    lkp.*"""
        PRINT "    .AX ""FROM"""
        PRINT "    .AX ""    "" & pcTBL & "" lkp"""
        PRINT "    .AX ""ORDER BY"""
        PRINT "    .AX ""    lkp."" & pcSRT"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If False Then Debug.Print wtx.Text ' True False"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set rst = dbs.OpenRecordset(wtx.Text)"
        PRINT "    With rst"
        PRINT "        If Not (.BOF And .EOF) Then .MoveFirst"
        PRINT "        Do While Not .EOF"
        PRINT "            strCOD = Replace$(.Fields(pcCOD), ""???"", ""UNK"")"
        PRINT "            strVAL = Replace$(.Fields(pcVAL), ""???"", ""UNK"")"
        PRINT "            strDSC = Replace$(.Fields(pcDSC), ""???"", ""Unknown"")"
        PRINT "            Debug.Print Left$(Left$(""Public Const "" & pcCPX & strCOD & String(25, "" ""), 35) & "" As "" & pcTYP & "" = "" & strQOT & strVAL & strQOT & String(50, "" ""), 74) & ""' "" & strDSC"
        PRINT "            .MoveNext"
        PRINT "        Loop"
        PRINT "    End With"
        PRINT "    strCOD = ""DEF"": strVAL = pcCPX & ""UNK"": strDSC = ""Default"""
        PRINT "    Debug.Print Left$(Left$(""Public Const "" & pcCPX & strCOD & String(25, "" ""), 35) & "" As "" & pcTYP & "" = "" & strVAL & String(50, "" ""), 74) & ""' "" & strDSC"
        PRINT "    '***********************************************************************************************"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' FuncName:  Description"
        PRINT "'###################################################################################################"
        PRINT "'Public Sub FuncName()"
        PRINT "'End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- BASAPF = Build module:  bas_AppFunc
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASAPF
        EXEC ut_zzVBX BASAPF
        --------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASAPF,'','','UtlWSH'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBASAPF) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As New clsUtlWTX"
        PRINT "Private wtz                         As New clsUtlWTX"
        PRINT "Private fso                         As New FileSystemObject"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Verify Machine Info"
        PRINT "'###################################################################################################"
        PRINT "Private Sub List_Machine_Info()"
        IF @StdTx2 IN ('UtlWSH') BEGIN
        PRINT "    Dim wsh    As clsUtlWSH"
        PRINT "    Set wsh = New clsUtlWSH"
        PRINT "    Debug.Print String$(100, ""*"")"
        PRINT "    Debug.Print ""Machine  ="" & wsh.Machine"
        PRINT "    Debug.Print ""Domain   ="" & wsh.Domain & "" ("" & wsh.Get_NetDomID & "")"""
        PRINT "    Debug.Print ""User     ="" & wsh.User"
        PRINT "    Debug.Print String$(100, ""*"")"
        END ELSE BEGIN
        PRINT "    Dim wsn    As WshNetwork"
        PRINT "    Set wsn = New WshNetwork"
        PRINT "    Debug.Print String$(100, ""*"")"
        PRINT "    Debug.Print ""Machine  ="" & wsn.ComputerName"
        PRINT "    Debug.Print ""Domain   ="" & wsn.UserDomain"
        PRINT "    Debug.Print ""User     ="" & wsn.UserName"
        PRINT "    Debug.Print String$(100, ""*"")"
        END
        PRINT "End Sub"
        PRINT "'###################################################################################################"
        PRINT "' List Object Generation Calls"
        PRINT "'###################################################################################################"
        PRINT "Private Sub List_Object_GenCalls()"
        PRINT "    Dim wtx    As clsUtlWTX"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    With wtx"
        PRINT "    .AX ""/*--------------------------------------------------------------------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX ""    EXEC ut_zzVBA BASGLB,'','','Data' ,'Std' """
        PRINT "    .AX ""    EXEC ut_zzVBA BASGLB,'','','Basic','Gen' """
        PRINT "    .AX ""    EXEC ut_zzVBA BASGLB,'','','Forms','Gen' """
        PRINT "    .AX ""    -------------------- -- ----- ----- -----"""
        PRINT "    .AX ""    --                      Data  Basic Forms"""
        PRINT "    .AX ""    -------------------- -- ----- ----- -----"""
        PRINT "    .AX ""    EXEC ut_zzVBA FRMCLR --   x     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA FRMLNK --   x     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA RPTNAR --   -     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA RPTWID --   -     x     x  """
        PRINT "    .AX ""    -------------------- -- ----- ----- -----"""
        PRINT "    .AX ""    EXEC ut_zzVBA BASAPC --   -     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA BASAPF --   -     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA BASAPT --   -     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA BASAPV --   -     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA BASIMX --   x     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA BASTBM --   x     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA BASTST --   -     x     x  """
        PRINT "    .AX ""    -------------------- -- ----- ----- -----"""
        PRINT "    .AX ""    EXEC ut_zzVBA GENGLB --   -     -     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA GENJET --   -     -     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA GENSTD --   -     x     x  """
        PRINT "    .AX ""    -------------------- -- ----- ----- -----"""
        PRINT "    .AX ""    EXEC ut_zzVBA UTLASC --   -     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA UTLFMT --   -     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA UTLVBG --   -     -     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA UTLWSH --   -     x     x  """
        PRINT "    .AX ""    EXEC ut_zzVBA UTLWTX --   x     x     x  """
        PRINT "    .AX ""    -------------------- -- ----- ----- -----"""
        PRINT "    .AX ""    --                      Data  Basic Forms"""
        PRINT "    .AX ""    -------------------- -- ----- ----- -----"""
        PRINT "    .AX """""
        PRINT "    .AX ""    EXEC ut_zzVBA ANYFRM,tpl_FrmStd ,'Form___Description'"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    EXEC ut_zzVBA ANYTAB,tab_FrmName,'Form___Description'"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    EXEC ut_zzVBA ANYLST,lst_FrmName,'Form___Description'"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    EXEC ut_zzVBA ANYPOP,pop_FrmName,'Form___Description'"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    EXEC ut_zzVBA ANYSUB,sub_FrmName,'Form___Description'"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    EXEC ut_zzVBA ANYBAS,basBasName ,'Module_Description'"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    EXEC ut_zzVBA ANYCLS,clsClsNam ,'Class__Description'"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    EXEC ut_zzVBA ANYRPT,rpt_RptNam ,'Report_Description'"""
        PRINT "    .AX """""
        PRINT "    .AX ""    -----------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""--------------------------------------------------------------------------------------------------*/"""
        PRINT "    End With"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' FuncName:  Description"
        PRINT "'###################################################################################################"
        PRINT "'Public Sub FuncName()"
        PRINT "'End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- BASAPT = Build module:  bas_AppTest
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASAPT
        EXEC ut_zzVBX BASAPT
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBASAPT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Standard Lines"
        PRINT "'***************************************************************************************************"
        PRINT "Private mcLinSGL                    As String                             '"
        PRINT "Private mcLinDBL                    As String                             '"
        PRINT "Private mcLinPND                    As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As clsUtlWTX                          '"
        PRINT "Private wtz                         As clsUtlWTX                          '"
        PRINT "Private fso                         As FileSystemObject                   '"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Init_ALL"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Init_ALL()"
        PRINT "    '------------------------"
        PRINT "    ' Initialize objects"
        PRINT "    '------------------------"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    '------------------------"
        PRINT "    ' Initialize values"
        PRINT "    '------------------------"
        PRINT "    mcLinSGL = String$(100, ""-"")"
        PRINT "    mcLinDBL = String$(100, ""="")"
        PRINT "    mcLinPND = String$(100, ""#"")"
        PRINT "    '------------------------"
        PRINT "    gXTS = gcMTY"
        PRINT "    gAND = gcMTY"
        PRINT "    '------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Test Functions  (Run vbaGenSTD.List_Test)"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' FuncName:  Description"
        PRINT "'###################################################################################################"
        PRINT "'Public Sub FuncName()"
        PRINT "'End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- BASAPV = Build module:  bas_AppVars
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASAPV
        EXEC ut_zzVBX BASAPV
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBASAPV) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As clsUtlWTX                          '"
        PRINT "Private wtz                         As clsUtlWTX                          '"
        PRINT "Private fso                         As FileSystemObject                   '"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Variables"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Description Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' FuncName:  Description"
        PRINT "'###################################################################################################"
        PRINT "'Public Sub FuncName()"
        PRINT "'End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- BASGLB = Build module:  bas_Global
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASGLB
        --------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASGLB,'','','Data'
        EXEC ut_zzVBA BASGLB,'','','Basic'
        EXEC ut_zzVBA BASGLB,'','','Forms'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASGLB,'','','Data' ,'Gen'
        EXEC ut_zzVBA BASGLB,'','','Basic','Gen'
        EXEC ut_zzVBA BASGLB,'','','Forms','Gen'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBASGLB) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @TX1 = CASE LEN(@StdTx3) WHEN 0 THEN 'ZZZ' ELSE @StdTx3 END
        SET @TX1 = UPPER(LEFT(@TX1,1))+LOWER(SUBSTRING(@TX1,2,2))
        PRINT "'***************************************************************************************************"
        PRINT "' File location constants"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcTmpDir               As String = ""C:\_Temp\"""
        PRINT "'***************************************************************************************************"
        IF @StdTx3 IN ('Gen') BEGIN
        PRINT "Private Const gcSqlDrvDBS           As String = ""E:\"""
        PRINT "Private Const gcSqlDrvWKS           As String = ""G:\"""
        PRINT "Private Const gcSqlDrvFED           As String = ""G:\"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const gcFedDrvDBS           As String = ""Q:\"""
        PRINT "Private Const gcFedDrvWKS           As String = ""Q:\"""
        PRINT "Private Const gcFedDrvFED           As String = ""Q:\"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const gcBasDrvDBS           As String = ""E:\"""
        PRINT "Private Const gcBasDrvWKS           As String = ""Y:\"""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "Private Const gcBasDrvFED           As String = gcFedDrvFED  ' gcFedDrvDBS gcFedDrvWKS gcFedDrvFED"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "Private Const gcBasSubSTD           As String = ""Data\DEV\Projects\"""
        PRINT "Private Const gcBasSubFED           As String = ""Projects\"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const gcAppSubDEV           As String = ""DBTools\SQL_Apps\MDB\"""
        PRINT "Private Const gcAppSubFED           As String = ""Projects\StdGEN\Apps\MDB\"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const gcBasDirDBS           As String = gcBasDrvDBS & gcBasSubSTD"
        PRINT "Private Const gcBasDirWKS           As String = gcBasDrvWKS & gcBasSubSTD"
        PRINT "Private Const gcBasDirFED           As String = gcBasDrvFED & gcBasSubFED"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const gcAppDirDBS           As String = gcBasDirDBS & gcAppSubDEV"
        PRINT "Private Const gcAppDirWKS           As String = gcBasDirWKS & gcAppSubDEV"
        PRINT "Private Const gcAppDirFED           As String = gcBasDrvFED & gcAppSubFED"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const gcMdbPthCUR           As String = """""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "Public Const gcSqlDrvCUR            As String = gcSqlDrvFED  ' gcSqlDrvDBS gcSqlDrvWKS gcSqlDrvFED"
        PRINT "Public Const gcBasDrvCUR            As String = gcBasDrvFED  ' gcBasDrvDBS gcBasDrvWKS gcBasDrvFED"
        PRINT "Public Const gcBasDirCUR            As String = gcBasDirFED  ' gcBasDirDBS gcBasDirWKS gcBasDirFED"
        PRINT "Public Const gcAppDirCUR            As String = gcAppDirFED  ' gcAppDirDBS gcAppDirWKS gcAppDirFED"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "Public Const gcMdbPthDAT            As String = gcAppDirFED  ' gcAppDirDBS gcAppDirWKS gcAppDirFED gcMdbPthCUR"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "Public Const gcCpyDrvFED            As String = gcBasDrvFED"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcVmfDirFIL            As String = ""\\VMFiles\\"""
        PRINT "Public Const gcVmfDirUTL            As String = ""\\VMUtils\\"""
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcVmfUtlCUS            As String = gcVmfDirUTL & ""_VMFiles_Cust_DIR.cmd"""
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcBasDrv               As String = gcBasDrvCUR"
        PRINT "Public Const gcBasDir               As String = gcBasDirCUR"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcAppDrv               As String = gcBasDrvCUR"
        PRINT "Public Const gcAppDir               As String = gcAppDirCUR"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcMdbDir               As String = gcAppDir"
        PRINT "Public Const gcImxDir               As String = gcMdbDir & ""_ImEx\"""
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcMdbPFX               As String = ""Gen""                     ' Application MDB Prefix (Zzz)"
        PRINT "Public Const gcMdbAPP               As String = gcMdbPFX & ""Apps""         ' Application MDB Name   (ZzzApps)"
        PRINT "Public Const gcMdbDAT               As String = gcMdbPFX & ""Data""         ' DataStorage MDB Name   (ZzzData)"
        PRINT "Public Const gcMdbTST               As String = gcMdbPFX & ""Test""         ' TestStorage MDB Name   (ZzzTest)"
        PRINT "Public Const gcMdbRQS               As String = gcMdbPFX & ""RQS""          ' "
        PRINT "Public Const gcMdbSQL               As String = gcMdbPFX & ""SQL""          ' "
        --------------------------------------------------------------------------------------------
        END ELSE BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "Public Const gcPrjDrv               As String = ""E:\"""
        PRINT "Public Const gcPrjSub               As String = ""Data\DEV\Projects\"""
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcAppSub               As String = ""ZzzZzz\""                 ' Application SubDir"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcMdbPFX               As String = ""Zzz""                     ' Application MDB Prefix (Zzz)"
        PRINT "Public Const gcMdbAPP               As String = gcMdbPFX & ""Apps""         ' Application MDB Name   (ZzzApps)"
        PRINT "Public Const gcMdbDAT               As String = gcMdbPFX & ""Data""         ' DataStorage MDB Name   (ZzzData)"
        PRINT "Public Const gcMdbTST               As String = gcMdbPFX & ""Test""         ' TestStorage MDB Name   (ZzzTest)"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcPrjDir               As String = gcPrjDrv & gcPrjSub       ' Project Directory"
        PRINT "Public Const gcBasDrv               As String = gcPrjDrv                  ' Base Drive"
        PRINT "Public Const gcBasDir               As String = gcPrjDir                  ' Base Directory"
        PRINT "Public Const gcAppDir               As String = gcPrjDir & gcAppSub       ' Application Directory"
        PRINT "Public Const gcMdbDir               As String = gcAppDir & ""MDB\""         ' MDB Directory"
        PRINT "Public Const gcImxDir               As String = gcMdbDir & ""_ImEx\""       ' Import/Export Directory"
        END
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Boolean Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcYUP                  As Boolean = True                     ' BTX: Standard True"
        PRINT "Public Const gcNOP                  As Boolean = False                    ' BTX: Standard False"
        PRINT "Public Const gcALL                  As String = ""ALL""                     ' BTX: Standard ALL"
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcZRO                  As Long = 0                           ' BTX: Empty Number"
        PRINT "Public Const gcMTY                  As String = """"                        ' BTX: Empty String"
        PRINT "Public Const gcSPC                  As String = "" ""                       ' BTX: Single Space"
        PRINT "Public Const gcDOT                  As String = "".""                       ' BTX: Period/Dot"
        PRINT "Public Const gcCMA                  As String = "",""                       ' BTX: Comma Constant"
        PRINT "Public Const gcDSH                  As String = ""-""                       ' BTX: Dash"
        PRINT "Public Const gcUBR                  As String = ""_""                       ' BTX: Underbar"
        PRINT "Public Const gcPIP                  As String = ""|""                       ' BTX: Pipe"
        PRINT "Public Const gcBKS                  As String = ""\""                       ' BTX: Backslash"
        PRINT "Public Const gcFWS                  As String = ""/""                       ' BTX: Forwardslash"
        PRINT "Public Const gcSCN                  As String = "";""                       ' BTX: Semi-Colon"
        PRINT "Public Const gcCLN                  As String = "":""                       ' BTX: Colon"
        PRINT "Public Const gcTLD                  As String = ""~""                       ' BTX: Tilde"
        PRINT "Public Const gcTIK                  As String = ""`""                       ' BTX: Backtick"
        PRINT "Public Const gcSQT                  As String = ""'""                       ' BTX: Single Quote"
        PRINT "Public Const gcDQT                  As String = """"""""                      ' BTX: Double Quote"
        PRINT "Public Const gcAST                  As String = ""*""                       ' BTX: Asterick"
        --------------------------------------------------------------------------------------------
        IF @StdTx2 IN ('Data') BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' General Text Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Public gXTS                         As String * 1000                      ' SQL: Extend Space"
        PRINT "Public gSQL                         As String                             ' SQL: Statement Build"
        PRINT "Public gWHR                         As String                             ' SQL: Statement WHERE"
        PRINT "Public gAND                         As String * 4                         ' SQL: Separater AND"
        PRINT "Public gCMA                         As String                             ' SQL: Separater Comma"
        PRINT "Public gSEP                         As String                             ' SQL: Separater Placeholder"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Value Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcCLF                  As String = vbCrLf                    ' BTX: CarrRtn/LineFeed"
        PRINT "Public Const gcNUL                  As Variant = Null                     ' BTX: Null Value"
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Public gTXT                         As String                             '"
        PRINT "Public gTX1                         As String                             '"
        PRINT "Public gTX2                         As String                             '"
        PRINT "Public gTX3                         As String                             '"
        PRINT "Public gTX4                         As String                             '"
        PRINT "Public gTX5                         As String                             '"
        PRINT "Public gTX6                         As String                             '"
        PRINT "Public gTX7                         As String                             '"
        PRINT "Public gTX8                         As String                             '"
        PRINT "Public gTX9                         As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Public gLEN                         As Integer                            '"
        PRINT "Public gLN1                         As Integer                            '"
        PRINT "Public gLN2                         As Integer                            '"
        PRINT "Public gLN3                         As Integer                            '"
        PRINT "Public gLN4                         As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "Public gNBR                         As Long                               '"
        PRINT "Public gNB1                         As Long                               '"
        PRINT "Public gNB2                         As Long                               '"
        PRINT "'***************************************************************************************************"
        PRINT "Public gBLN                         As Boolean                            '"
        PRINT "Public gBL1                         As Boolean                            '"
        PRINT "Public gBL2                         As Boolean                            '"
        PRINT "'***************************************************************************************************"
        PRINT "' Extended Text Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Public gIDX                         As Integer                            '"
        PRINT "Public gCNT                         As Integer                            '"
        PRINT "Public gUBD                         As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "Public gCUR                         As String                             '"
        PRINT "Public gPRV                         As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Public gCMT                         As String                             '"
        PRINT "Public gOBJ                         As String                             '"
        PRINT "Public gLST                         As String                             '"
        PRINT "Public gITM                         As String                             '"
        PRINT "Public gVAL                         As String                             '"
        PRINT "Public gLFT                         As String                             '"
        PRINT "Public gMID                         As String                             '"
        PRINT "Public gRGT                         As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Public gPOS                         As Integer                            '"
        PRINT "Public gPS1                         As Integer                            '"
        PRINT "Public gPS2                         As Integer                            '"
        PRINT "Public gPS3                         As Integer                            '"
        PRINT "Public gPS4                         As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Margin Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcLM0                  As Integer = 0                        ' BTX: Margin 0"
        PRINT "Public Const gcLM1                  As Integer = 1                        ' BTX: Margin 1"
        PRINT "Public Const gcLM2                  As Integer = 2                        ' BTX: Margin 2"
        PRINT "Public Const gcLM3                  As Integer = 3                        ' BTX: Margin 3"
        PRINT "'***************************************************************************************************"
        PRINT "' SQL Construction"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcWHR                  As String = ""WHERE""                   ' SQL: Operator WHERE"
        PRINT "Public Const gcFST                  As String = ""    ""                    ' SQL: First criteria"
        PRINT "Public Const gcAND                  As String = ""AND ""                    ' SQL: Append criteria"
        PRINT "Public Const gcORR                  As String = ""OR  ""                    ' SQL: Append criteria"
        PRINT "Public Const gcNON                  As String = ""0=9""                     ' SQL: Records = None"
        PRINT "Public Const gcANY                  As String = ""1=1""                     ' SQL: Records = All/Any"
        PRINT "Public Const gcMG0                  As String = """"                        ' SQL: Margin: 0"
        PRINT "Public Const gcMG1                  As String = ""    ""                    ' SQL: Margin: 1"
        PRINT "Public Const gcMG2                  As String = ""        ""                ' SQL: Margin: 2"
        PRINT "Public Const gcMG3                  As String = ""            ""            ' SQL: Margin: 3"
        PRINT "Public gXTS                         As String * 1000                      ' SQL: Extend Space"
        PRINT "Public gSQL                         As String                             ' SQL: Statement Build"
        PRINT "Public gWHR                         As String                             ' SQL: Statement WHERE"
        PRINT "Public gAND                         As String * 4                         ' SQL: Separater AND"
        PRINT "Public gCMA                         As String                             ' SQL: Separater Comma"
        PRINT "Public gSEP                         As String                             ' SQL: Separater Placeholder"
        PRINT "'***************************************************************************************************"
        PRINT "' Standard list delimiters"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcDLM                  As String = ""|""                       ' Separate items"
        PRINT "Public Const gcDLG                  As String = ""~""                       ' Separate groups"
        PRINT "Public Const gcDLX                  As String = ""`""                       ' Separate lines"
        PRINT "Public Const gcDLB                  As String = "",""                       ' Separate build elements"
        PRINT "'***************************************************************************************************"
        PRINT "' Default Identity Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcNulID                As Variant = Null                     '"
        PRINT "Public Const gcMtyID                As Long = 0                           ' Empty Identity"
        PRINT "Public Const gcUnkID                As Long = 1                           ' Unknown Identity"
        PRINT "Public Const gcAnyID                As Long = 1000                        ' Any Identity"
        PRINT "Public Const gcNonID                As Long = 1000                        ' None Identity"
        PRINT "Public Const gcPrdID                As Long = 1001                        ' Production Identity"
        PRINT "'***************************************************************************************************"
        PRINT "' Standard Null Comparisons"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcNulVRN               As Variant = Null                     ' Null Variant (Null)"
        PRINT "Public gcNulTXT                     As String                             ' Null String  ("""")"
        PRINT "Public gcNulBLN                     As Boolean                            ' Null Boolean (False)"
        PRINT "Public gcNulNBR                     As Integer                            ' Null Number  (0)"
        PRINT "Public gcNulDAT                     As Date                               ' Null Date    (Null)"
        PRINT "'***************************************************************************************************"
        PRINT "' Standard timer variables"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcTmrWRK               As String = "". . .""                   ' Timer: Working text"
        PRINT "Public Const gcTmrDSP               As String = ""nn:ss""                   ' Timer: Display format"
        PRINT "Public Const gcTmrDEF               As String = ""hh:nn:ss""                ' Timer: Default format"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public gdatBegTim                   As Date                               ' Timer: Begin Time"
        PRINT "Public gdatIncTim                   As Date                               ' Timer: Increment Time"
        PRINT "Public gdatCurTim                   As Date                               ' Timer: Current Time"
        PRINT "Public gdatEndTim                   As Date                               ' Timer: End Time"
        PRINT "Public gdatElpTim                   As Date                               ' Timer: Elapsed time"
        PRINT "Public glngElpSec                   As Long                               ' Timer: Elapsed seconds"
        PRINT "'***************************************************************************************************"
        PRINT "' Color schemes"
        PRINT "'***************************************************************************************************"
        PRINT "' Color schemes:  Basic"
        PRINT "Public Const gcColorsFRM            As Long = -2147483633                 '"
        PRINT "Public Const gcColorsWHT            As Long = 16777215                    '"
        PRINT "Public Const gcColorsBLK            As Long = 0                           '"
        PRINT "' Color schemes:  Grey"
        PRINT "Public Const gcColorsGY1            As Long = 12632256                    '"
        PRINT "Public Const gcColorsGY2            As Long = 10658466                    '"
        PRINT "Public Const gcColorsGY3            As Long = 8289918                     '"
        PRINT "Public Const gcColorsGY4            As Long = 6908265                     '"
        PRINT "Public Const gcColorsGY5            As Long = 5855577                     '"
        PRINT "Public Const gcColorsGY6            As Long = 4737096                     '"
        PRINT "' Color schemes:  Blue"
        PRINT "Public Const gcColorsBL1            As Long = 16744448                    '"
        PRINT "Public Const gcColorsBL2            As Long = 12615680                    '"
        PRINT "Public Const gcColorsBL3            As Long = 16711680                    '"
        PRINT "Public Const gcColorsBL4            As Long = 10485760                    '"
        PRINT "Public Const gcColorsBL5            As Long = 8388608                     '"
        PRINT "Public Const gcColorsBL6            As Long = 7405568                     '"
        PRINT "' Color schemes:  Acqua"
        PRINT "Public Const gcColorsAQ1            As Long = 11503937                    '"
        PRINT "Public Const gcColorsAQ2            As Long = 9860408                     '"
        PRINT "Public Const gcColorsAQ3            As Long = 8742962                     '"
        PRINT "Public Const gcColorsAQ4            As Long = 7165481                     '"
        PRINT "Public Const gcColorsAQ5            As Long = 6573862                     '"
        PRINT "Public Const gcColorsAQ6            As Long = 5587744                     '"
        PRINT "' Color schemes:  Green"
        PRINT "Public Const gcColorsGN1            As Long = 5481984                     '"
        PRINT "Public Const gcColorsGN2            As Long = 4821760                     '"
        PRINT "Public Const gcColorsGN3            As Long = 4293120                     '"
        PRINT "Public Const gcColorsGN4            As Long = 3698944                     '"
        PRINT "Public Const gcColorsGN5            As Long = 3302400                     '"
        PRINT "Public Const gcColorsGN6            As Long = 2708224                     '"
        PRINT "Public Const gcColorsGN7            As Long = 13056                       '"
        PRINT "' Color schemes:  Brown"
        PRINT "Public Const gcColorsBR1            As Long = 26574                       '"
        PRINT "Public Const gcColorsBR2            As Long = 24251                       '"
        PRINT "Public Const gcColorsBR3            As Long = 21672                       '"
        PRINT "Public Const gcColorsBR4            As Long = 18577                       '"
        PRINT "Public Const gcColorsBR5            As Long = 15737                       '"
        PRINT "Public Const gcColorsBR6            As Long = 12642                       '"
        PRINT "' Color schemes:  Red"
        PRINT "Public Const gcColorsRD1            As Long = 210                         '"
        PRINT "Public Const gcColorsRD2            As Long = 183                         '"
        PRINT "Public Const gcColorsRD3            As Long = 159                         '"
        PRINT "Public Const gcColorsRD4            As Long = 140                         '"
        PRINT "Public Const gcColorsRD5            As Long = 128                         '"
        PRINT "Public Const gcColorsRD6            As Long = 108                         '"
        PRINT "' Color schemes:  Maroon"
        PRINT "Public Const gcColorsMR1            As Long = 7340255                     '"
        PRINT "Public Const gcColorsMR2            As Long = 6488262                     '"
        PRINT "Public Const gcColorsMR3            As Long = 5832883                     '"
        PRINT "Public Const gcColorsMR4            As Long = 5243039                     '"
        PRINT "Public Const gcColorsMR5            As Long = 4587660                     '"
        PRINT "Public Const gcColorsMR6            As Long = 4128893                     '"
        PRINT "' Color schemes:  Lavender"
        PRINT "Public Const gcColorsLV1            As Long = 14745825                    '"
        PRINT "Public Const gcColorsLV2            As Long = 12976326                    '"
        PRINT "Public Const gcColorsLV3            As Long = 11403438                    '"
        PRINT "Public Const gcColorsLV4            As Long = 9896087                     '"
        PRINT "Public Const gcColorsLV5            As Long = 8913032                     '"
        PRINT "Public Const gcColorsLV6            As Long = 7667829                     '"
        PRINT "' Color schemes:  Standard"
        PRINT "Public Const gcColorsBLN            As Long = gcColorsLV4                 '"
        PRINT "Public Const gcColorsNUM            As Long = gcColorsGN4                 '"
        PRINT "Public Const gcColorsDAT            As Long = gcColorsRD4                 '"
        PRINT "Public Const gcColorsTXT            As Long = gcColorsBL4                 '"
        PRINT "'***************************************************************************************************"
        PRINT "' Font weight"
        PRINT "'***************************************************************************************************"
        PRINT "' Color schemes:  Basic"
        PRINT "Public Const gcFontWgtTHN           As Long = 100                         ' Thin"
        PRINT "Public Const gcFontWgtXLT           As Long = 200                         ' Extra Light"
        PRINT "Public Const gcFontWgtLIT           As Long = 300                         ' Light"
        PRINT "Public Const gcFontWgtNML           As Long = 400                         ' Normal"
        PRINT "Public Const gcFontWgtMED           As Long = 500                         ' Medium"
        PRINT "Public Const gcFontWgtSBD           As Long = 600                         ' Semi-bold"
        PRINT "Public Const gcFontWgtBLD           As Long = 700                         ' Bold"
        PRINT "Public Const gcFontWgtXBD           As Long = 800                         ' Extra Bold"
        PRINT "Public Const gcFontWgtHVY           As Long = 900                         ' Heavy"
        PRINT "'***************************************************************************************************"
        PRINT "' Connection Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcMDBProv              As String = ""Provider=Microsoft.Jet.OLEDB.4.0;"""
        PRINT "Public Const gcMDBUser              As String = ""User ID=admin;Password=;Persist Security Info=True;"""
        PRINT "Public Const gcMDBData              As String = """+@TX1+"Data""                 ' Data MDB name"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Global Objects  (Comment out if necessary but do NOT delete)"
        PRINT "'***************************************************************************************************"
        IF @StdTx2 IN ('Forms') BEGIN
        PRINT "Public RunRST                       As New clsRunRST                      ' Run: Recordset"
        PRINT "Public RunSQL                       As New clsRunSQL                      ' Run: SQL Statement"
        END ELSE BEGIN
        PRINT "'ublic RunRST                       As New clsRunRST                      ' Run: Recordset"
        PRINT "'ublic RunSQL                       As New clsRunSQL                      ' Run: SQL Statement"
        END
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' FuncName:  Description"
        PRINT "'###################################################################################################"
        PRINT "'Public Sub FuncName()"
        PRINT "'End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Timer Utilities"
        PRINT "'###################################################################################################"
        PRINT "' Beg_Timer:"
        PRINT "'    Initialize process timer values; Optional debug display"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call Beg_Timer(""Process_Description"", mcXclDBG)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Beg_Timer(Optional ByVal strDSC As String, Optional ByVal blnDBG As Boolean = True)"
        PRINT "    gdatBegTim = Time"
        PRINT "    gdatIncTim = gdatBegTim"
        PRINT "    If blnDBG Then"
        PRINT "        strDSC = Left$(""Start Timer: "" & strDSC & String$(50, "" ""), 50)"
        PRINT "        Debug.Print String$(100, ""="")"
        PRINT "        Debug.Print strDSC & ""    "" & Format$(gdatBegTim, ""hh:nn:ss"")"
        PRINT "        Debug.Print String$(100, ""-"")"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Inc_Timer:"
        PRINT "'    Increment process timer values; Optional debug display"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call Inc_Timer(""Process_Description"", mcXclDBG)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Inc_Timer(Optional ByVal strDSC As String, Optional ByVal blnDBG As Boolean = True)"
        PRINT "    gdatCurTim = Time"
        PRINT "    glngElpSec = DateDiff(""s"", gdatIncTim, gdatCurTim)"
        PRINT "    gdatIncTim = gdatCurTim"
        PRINT "    If blnDBG Then"
        PRINT "        strDSC = Left$(""Curr  Timer: "" & strDSC & String$(50, "" ""), 50)"
        PRINT "        Debug.Print String$(100, ""-"")"
        PRINT "        Debug.Print strDSC & ""    "" & Format$(gdatCurTim, ""hh:nn:ss"") & "" Elapsed Seconds: "" & glngElpSec"
        PRINT "        Debug.Print String$(100, ""-"")"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' End_Timer:"
        PRINT "'    Terminate process timer values; Optional debug display"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call End_Timer(""Process_Description"", mcXclDBG)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub End_Timer(Optional ByVal strDSC As String, Optional ByVal blnDBG As Boolean = True)"
        PRINT "    gdatEndTim = Time"
        PRINT "    glngElpSec = DateDiff(""s"", gdatBegTim, gdatEndTim)"
        PRINT "    gdatElpTim = DateAdd(""s"", glngElpSec, 0)"
        PRINT "    If blnDBG Then"
        PRINT "        strDSC = Left$(""Stop  Timer: "" & strDSC & String$(50, "" ""), 50)"
        PRINT "        Debug.Print String$(100, ""-"")"
        PRINT "        Debug.Print strDSC & ""    "" & Format$(gdatEndTim, ""hh:nn:ss"") & ""   Total Seconds: "" & glngElpSec"
        PRINT "        Debug.Print String$(100, ""="")"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Get_BegTim:"
        PRINT "'    Retrieve the Begin Time value"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call Get_BegTim(""nn:ss"")"
        PRINT "'==================================================================================================="
        PRINT "Public Function Get_BegTim(Optional ByVal strFMT As String) As String"
        PRINT "    If Len(strFMT) = 0 Then strFMT = ""hh:nn:ss"""
        PRINT "    Get_BegTim = Format$(gdatBegTim, strFMT)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get_EndTim:"
        PRINT "'    Retrieve the End Time value"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call Get_EndTim(""nn:ss"")"
        PRINT "'==================================================================================================="
        PRINT "Public Function Get_EndTim(Optional ByVal strFMT As String) As String"
        PRINT "    If Len(strFMT) = 0 Then strFMT = ""hh:nn:ss"""
        PRINT "    Get_EndTim = Format$(gdatEndTim, strFMT)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get_ElpTim:"
        PRINT "'    Retrieve the Elapsed Time value"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call Get_ElpTim(""nn:ss"")"
        PRINT "'==================================================================================================="
        PRINT "Public Function Get_ElpTim(Optional ByVal strFMT As String) As String"
        PRINT "    If Len(strFMT) = 0 Then strFMT = ""hh:nn:ss"""
        PRINT "    Get_ElpTim = Format$(gdatElpTim, strFMT)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' PauseFor:"
        PRINT "'    Pauses for nn.nn seconds; accepts decimal values (datatype=single)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call PauseFor(1.25)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub PauseFor(ByVal sglSeconds As Single)"
        PRINT "    Dim sglStart As Single"
        PRINT "    sglStart = Timer ' Set start time"
        PRINT "    Do While Timer < sglStart+sglSeconds"
        PRINT "        DoEvents"
        PRINT "    Loop"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' DB Connections"
        PRINT "'###################################################################################################"
        PRINT "' GetDataMDB:"
        PRINT "'    Returns a connection string for the Data MDB file"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call GetDataMDB()"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetDataMDB(Optional ByVal strMDB As String = gcMDBData) As String"
        PRINT "    Dim strPTH As String"
        IF @StdTx3 IN ('Gen') BEGIN
        PRINT "    Select Case gcMdbPthDAT"
        PRINT "        Case gcAppDirDBS: strPTH = gcAppDirDBS"
        PRINT "        Case gcAppDirWKS: strPTH = gcAppDirWKS"
        PRINT "        Case gcAppDirFED: strPTH = gcAppDirFED"
        PRINT "        Case Else:        strPTH = CurrentProject.Path & ""\"""
        PRINT "    End Select"
        END ELSE BEGIN
        PRINT "    strPTH = CurrentProject.Path"
        END
        PRINT "    GetDataMDB = gcMDBProv & ""Data Source="" & strPTH & strMDB & "".mdb;"" & gcMDBUser"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' GetConnSQL:"
        PRINT "'    Returns a SQL Server connection object"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call GetConnSQL(""SERVER"", ""DBName"")"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetConnSQL(ByVal strSRV As String, ByVal strDBS As String) As ADODB.Connection"
        PRINT "    ' Initialize connection objects"
        PRINT "    Dim cnn    As ADODB.Connection"
        PRINT "    Set cnn = New ADODB.Connection"
        PRINT "    cnn.ConnectionString = Application.CurrentProject.Connection.ConnectionString"
        PRINT "    cnn.Properties(""Data Source"").Value = strSRV"
        PRINT "    cnn.Properties(""Initial Catalog"").Value = strDBS"
        PRINT "    cnn.Open"
        PRINT "    Set GetConnSQL = cnn"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' TestConnSQL:"
        PRINT "'    Test a SQL Server connection; Assign server/dbname internally so this can dbe called directly"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call TestConnSQL()"
        PRINT "'==================================================================================================="
        PRINT "Public Sub TestConnSQL()"
        PRINT "    Const pcMsgTtl = mcModNam & "".TestConn"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize recordset objects"
        PRINT "    Dim rstSRC    As ADODB.Recordset"
        PRINT ""
        PRINT "    ' Initialize connection objects"
        PRINT "    Dim cnnSRC    As ADODB.Connection"
        PRINT "    Set cnnSRC = GetConnSQL(""SERVER"", ""DBName"")"
        PRINT ""
        PRINT "    ' Initialize command objects"
        PRINT "    Dim cmd    As ADODB.Command"
        PRINT "    Set cmd = New ADODB.Command"
        PRINT ""
        PRINT "    ' Assign command property values"
        PRINT "    cmd.CommandText = ""SELECT TOP 10 name FROM SysObjects WHERE name LIKE '%' AND type = 'U' ORDER BY name"""
        PRINT "    cmd.CommandType = adCmdText"
        PRINT ""
        PRINT "    ' Execute the command"
        PRINT "    Set cmd.ActiveConnection = cnnSRC"
        PRINT "    Set rstSRC = cmd.Execute"
        PRINT "    With rstSRC"
        PRINT "        Do While Not .EOF"
        PRINT "            Debug.Print .Fields(0)"
        PRINT "            .MoveNext"
        PRINT "        Loop"
        PRINT "    End With"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' ListConnProp:"
        PRINT "'    List the current connection properties"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call ListConnProp()"
        PRINT "'==================================================================================================="
        PRINT "Public Sub ListConnProp()"
        PRINT "    ' Initialize connection objects"
        PRINT "    Dim cnn    As ADODB.Connection"
        PRINT "    Set cnn = New ADODB.Connection"
        PRINT "    Set cnn = Application.CurrentProject.Connection"
        PRINT "    Debug.Print Application.CurrentProject.Connection.ConnectionString"
        PRINT "    Dim prp As ADODB.Property"
        PRINT "    For Each prp In cnn.Properties"
        PRINT "        Debug.Print ""    cnn.Properties("""""" & prp.Name & """""").Value = """""" & prp.Value & """""""""
        PRINT "    Next"
        PRINT "    'cnn.Provider = ""MSDataShape.1"""
        PRINT "    'cnn.Properties(""Persist Security Info"").Value = ""False"""
        PRINT "    'cnn.Properties(""Integrated Security"").Value = ""SSPI"""
        PRINT "    'cnn.Properties(""Data Provider"").Value = ""SQLOLEDB.1"""""""
        PRINT "    'cnn.Properties(""Data Source"").Value = ""PAT2AGF"""
        PRINT "    'cnn.Properties(""Initial Catalog"").Value = ""FrontEnd""  ' DBReview"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' String Management"
        PRINT "'###################################################################################################"
        PRINT "' PackData:"
        PRINT "'    Pack the data into a delimited string"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call PackData(""Item1|Item2|Item3"", ""|"")"
        PRINT "'==================================================================================================="
        PRINT "Public Function PackData(ByVal vrnLST As Variant, Optional ByVal strDLM As String = gcDLM) As String"
        PRINT "    PackData = CStr(Join(vrnLST, strDLM))"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' OpenData:"
        PRINT "'    Unpack the data from the delimited string"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    vrnLST = OpenData(strPackedString, ""|"")"
        PRINT "'==================================================================================================="
        PRINT "Public Function OpenData(ByVal strREC As String, Optional ByVal strDLM As String = gcDLM) As Variant"
        PRINT "    OpenData = Split(strREC, strDLM)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CamelCase:"
        PRINT "'   > This function formats text in Camel case"
        PRINT "'   > Hump size can be assigns the length of the hump   (3=AaaBbb; 4=AaaaBbbb; etc)"
        PRINT "'   > Text size can be assigns the length of the text (6=AaaBbb; 9=AaaBbbCcc; etc)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    strTXT = CamelCase(""AnyText"", 3)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Debug.Print ""D="" & CamelCase(""anytxtfmt"")"
        PRINT "'    Debug.Print ""1="" & CamelCase(""anytxtfmt"", 1)"
        PRINT "'    Debug.Print ""2="" & CamelCase(""anytxtfmt"", 2)"
        PRINT "'    Debug.Print ""3="" & CamelCase(""anytxtfmt"", 3)"
        PRINT "'    Debug.Print ""4="" & CamelCase(""anytxtfmt"", 4)"
        PRINT "'    Debug.Print ""5="" & CamelCase(""anytxtfmt"", 5)"
        PRINT "'    Debug.Print ""6="" & CamelCase(""anytxtfmt"", 6)"
        PRINT "'    Debug.Print ""7="" & CamelCase(""anytxtfmt"", 7)"
        PRINT "'    Debug.Print ""8="" & CamelCase(""anytxtfmt"", 8)"
        PRINT "'    Debug.Print ""9="" & CamelCase(""anytxtfmt"", 9)"
        PRINT "'    Debug.Print ""0="" & CamelCase(""anytxtfmt"", 20)"
        PRINT "'==================================================================================================="
        PRINT "Public Function CamelCase( _"
        PRINT "    ByVal Text As String, _"
        PRINT "    Optional ByVal HumpSize As Integer = 3, _"
        PRINT "    Optional ByVal TextSize As Integer = 0 _"
        PRINT ") As String"
        PRINT "    Dim strTXT As String:  strTXT = Text"
        PRINT "    Dim intHMP As Integer: intHMP = IIf(HumpSize < 2, 2, HumpSize)"
        PRINT "    Dim intTXT As Integer: intTXT = TextSize"
        PRINT "    Dim strPFX As String"
        PRINT "    Dim strRTN As String"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If intTXT > 0 Then"
        PRINT "        If intTXT < intHMP Then intTXT = intHMP"
        PRINT "        intTXT = (intTXT \ intHMP) * intHMP"
        PRINT "        strTXT = Left$(strTXT & String(intTXT, ""Z""), intTXT)"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Do While Len(strTXT) > 0"
        PRINT "        strPFX = Left$(strTXT, intHMP)"
        PRINT "        strTXT = Right$(strTXT, Len(strTXT) - Len(strPFX))"
        PRINT "        strPFX = UCase$(Mid$(strPFX, 1, 1)) & LCase$(Mid$(strPFX, 2, intHMP))"
        PRINT "        strRTN = strRTN & strPFX"
        PRINT "    Loop"
        PRINT "    CamelCase = strRTN"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Filtex:"
        PRINT "'     This function searches a string array for elements that exactly match the search string"
        PRINT "'     This augments the standard Filter function which performs a LIKE match instead of exact match"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call Filtex(vrnLST, strITM, mcIclFLT, vbDatabaseCompare)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Compare:"
        PRINT "'        vbBinaryCompare"
        PRINT "'        vbDatabaseCompare"
        PRINT "'        vbTextCompare"
        PRINT "'==================================================================================================="
        PRINT "Public Function Filtex( _"
        PRINT "    SourceArray As Variant, _"
        PRINT "    Match As String, _"
        PRINT "    Optional Include As Boolean = True, _"
        PRINT "    Optional Compare As VbCompareMethod = vbBinaryCompare _"
        PRINT ") As Variant()"
        PRINT ""
        PRINT "    Dim vrnFLT   As Variant: vrnFLT = Array()"
        PRINT "    Dim vrnICL   As Variant: vrnICL = Array()"
        PRINT "    Dim vrnXCL   As Variant: vrnXCL = Array()"
        PRINT "    Dim intUBD   As Integer"
        PRINT "    Dim intLBD   As Integer"
        PRINT "    Dim intIDX   As Integer"
        PRINT "    Dim intCNT   As Integer"
        PRINT "    Dim intCHK   As Integer"
        PRINT "    Dim blnEXS   As Boolean"
        PRINT ""
        PRINT "    ' Filter array for search string (returns all LIKE matches; shortens candidate list)"
        PRINT "    vrnFLT = Filter(SourceArray, Match, True, Compare)"
        PRINT ""
        PRINT "    ' Build the Include List from exact matches"
        PRINT "    intCNT = -1"
        PRINT "    intLBD = LBound(vrnFLT)"
        PRINT "    intUBD = UBound(vrnFLT)"
        PRINT "    If intUBD >= 0 Then"
        PRINT "        ReDim vrnICL(intUBD)"
        PRINT "        For intIDX = intLBD To intUBD"
        PRINT "            If vrnFLT(intIDX) = Match Then"
        PRINT "                intCNT = intCNT+1: vrnICL(intCNT) = Match"
        PRINT "            End If"
        PRINT "        Next"
        PRINT "        If intCNT >= 0 Then"
        PRINT "            ReDim Preserve vrnICL(intCNT)"
        PRINT "        Else"
        PRINT "            vrnICL = Array()"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Return the Include List (all exact matching items)"
        PRINT "    If Include Then"
        PRINT "        Filtex = vrnICL: Exit Function"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Build the Exclude List (all non matching items)"
        PRINT "    intCNT = -1"
        PRINT "    intLBD = LBound(SourceArray)"
        PRINT "    intUBD = UBound(SourceArray)"
        PRINT "    If intUBD >= 0 Then"
        PRINT "        ReDim vrnXCL(intUBD)"
        PRINT "        For intIDX = intLBD To intUBD"
        PRINT "            blnEXS = False"
        PRINT "            For intCHK = LBound(vrnICL) To UBound(vrnICL)"
        PRINT "                If SourceArray(intIDX) = vrnICL(intCHK) Then"
        PRINT "                    blnEXS = True: Exit For"
        PRINT "                End If"
        PRINT "            Next"
        PRINT "            If Not blnEXS Then"
        PRINT "                intCNT = intCNT+1: vrnXCL(intCNT) = SourceArray(intIDX)"
        PRINT "            End If"
        PRINT "        Next intIDX"
        PRINT "        If intCNT >= 0 Then"
        PRINT "            ReDim Preserve vrnXCL(intCNT)"
        PRINT "        Else"
        PRINT "            vrnXCL = Array()"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Return the Exclude List (all non matching items)"
        PRINT "    Filtex = vrnXCL"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' UniqList:"
        PRINT "'     This function processes an input delimited list and returns a unique delimited list"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    Call UniqList(List, Delimiter)"
        PRINT "'==================================================================================================="
        PRINT "Public Function UniqList(ByVal List As String, Optional ByVal Delimiter As String = "","") As String"
        PRINT "    Dim strLST   As String:  strLST = List"
        PRINT "    Dim strDLM   As String:  strDLM = Delimiter"
        PRINT "    Dim strELM() As String:  strELM = Split(strLST, strDLM)"
        PRINT "    Dim intCNT   As Integer: intCNT = UBound(strELM)"
        PRINT "    Dim intIDX   As Integer"
        PRINT "    Dim strRTN   As String"
        PRINT "    Dim strITM   As String"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For intIDX = 0 To intCNT"
        PRINT "        strITM = strELM(intIDX)"
        PRINT "        If InStr(strRTN & strDLM, strDLM & strITM & strDLM) = 0 Then"
        PRINT "            strRTN = strRTN & strDLM & strITM"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    UniqList = Mid$(strRTN, 2, 9999)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        END
        CONTINUE
   ------------------------------------------------------------------------------------------------
    -- BASIMX = Build module:  bas_ImpExp
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASIMX
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBASIMX) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "'  EXPORT *** EXPORT *** EXPORT *** EXPORT *** EXPORT *** EXPORT *** EXPORT *** EXPORT *** EXPORT"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Run_Export_Data()  ' tbl_TblNam"
        PRINT "    Const pcNAM As String = ""tbl_TblNam"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Export_Item(pcNAM)   ' pcNAM gcALL"
        PRINT "End Sub"
        PRINT "'###################################################################################################"
        PRINT "'  IMPORT *** IMPORT *** IMPORT *** IMPORT *** IMPORT *** IMPORT *** IMPORT *** IMPORT *** IMPORT"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Run_Import_Data()  ' tbl_TblNam"
        PRINT "    Const pcNAM As String = ""tbl_TblNam"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Import_Item(pcNAM)   ' pcNAM gcALL"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "'  export *** export *** export *** export *** export *** export *** export *** export *** export"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Export_Item(ByVal strOBJ As String)"
        PRINT "End Sub"
        PRINT "'###################################################################################################"
        PRINT "'  import *** import *** import *** import *** import *** import *** import *** import *** import"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Import_Item(ByVal strOBJ As String)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Import/Export Definitions"
        PRINT "'###################################################################################################"
        PRINT "Private Sub List_TBL()"
        PRINT "    Const pcMsgTtl = mcModNam & "".List_TBL"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    Dim blnSTD As Boolean"
        PRINT "    Dim intIDX As Integer"
        PRINT "    Dim strDIR As String"
        PRINT "    Dim strPFX As String"
        PRINT "    Dim strPRV As String"
        PRINT "    Dim dbs As DAO.Database"
        PRINT "    Dim tdf As DAO.TableDef"
        PRINT "    Set dbs = CurrentDb()"
        PRINT "    Dim wtx    As clsUtlWTX"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    With wtx: Call .AX_Reset(0, .StdWidPOR, .StdHgtPOR, False, .EnvFmtVBA)"
        PRINT "        For intIDX = 1 To 2"
        PRINT "            Call .PL(.CmtPND)"
        PRINT "            Select Case intIDX"
        PRINT "                Case 1: strDIR = ""Export"""
        PRINT "                Case 2: strDIR = ""Import"""
        PRINT "            End Select"
        PRINT "            .AX LCase(Replace(""'  @ *** @ *** @ *** @ *** @ *** @ *** @ *** @ *** @"", ""@"", strDIR))"
        PRINT "            Call .PL(.CmtPND)"
        PRINT "            .AX ""Private Sub "" & strDIR & ""_Item(ByVal strOBJ As String)"""
        PRINT "            .IM"
        PRINT "            .AX ""Dim strNAM As String"""
        PRINT "            strPRV = """": For Each tdf In dbs.TableDefs"
        PRINT "                strPFX = Left$(tdf.Name, 4)"
        PRINT "                blnSTD = (Left$(tdf.Name, 1) <> ""~"" And strPFX <> ""MSys"" And strPFX <> ""zzz_"")"
        PRINT "                If blnSTD Then"
        PRINT "                    If strPFX <> strPRV Then .PL (.CmtSGL)"
        PRINT "                    .AX ""strNAM = """""" & tdf.Name & """""": If strOBJ = strNAM Or strOBJ = gcALL Then Call "" & strDIR & ""_Data(strNAM)"""
        PRINT "                    strPRV = strPFX"
        PRINT "                End If"
        PRINT "            Next"
        PRINT "            .DM"
        PRINT "            .AX ""End Sub"""
        PRINT "        Next"
        PRINT "        Call .PL(.CmtDBL)"
        PRINT "        Call .AX_WrtTmp"
        PRINT "    End With"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Import_Data(ByVal strTBL As String)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Import_Data"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strXLS As String: strXLS = strTBL & "".xls"""
        PRINT "    Dim strPTH As String"
        PRINT "    Dim strSQL As String"
        PRINT "    Const pHasFldNam As Boolean = True"
        PRINT ""
        PRINT "    ' Initialize current database"
        PRINT "    Dim dbs    As Database"
        PRINT "    Set dbs = CurrentDb"
        PRINT ""
        PRINT "    ' Initialize query objects"
        PRINT "    Dim qdf    As QueryDef"
        PRINT "    Set qdf = dbs.CreateQueryDef("""")"
        PRINT ""
        PRINT "    ' Initialize query objects"
        PRINT "    strSQL = ""DELETE FROM "" & strTBL"
        PRINT "    qdf.SQL = strSQL"
        PRINT "    qdf.Execute"
        PRINT ""
        PRINT "    ' Import table"
        PRINT "    strPTH = gcImxDir & strXLS"
        PRINT "    DoCmd.TransferSpreadsheet acImport, acSpreadsheetTypeExcel9, strTBL, strPTH, pHasFldNam"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Export_Data(ByVal strTBL As String)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Export_Data"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strXLS As String: strXLS = strTBL & "".xls"""
        PRINT "    Dim strPTH As String"
        PRINT ""
        PRINT "    ' Export table"
        PRINT "    strPTH = gcImxDir & strXLS"
        PRINT "    DoCmd.TransferSpreadsheet acExport, acSpreadsheetTypeExcel9, strTBL, strPTH"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- BASTST = Build module:  bas_Test01
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASTST
        EXEC ut_zzVBX BASTST
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBASTST) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Standard Lines"
        PRINT "'***************************************************************************************************"
        PRINT "Private mcLinSGL                    As String                             '"
        PRINT "Private mcLinDBL                    As String                             '"
        PRINT "Private mcLinPND                    As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As clsUtlWTX                          '"
        PRINT "Private wtz                         As clsUtlWTX                          '"
        PRINT "Private fso                         As FileSystemObject                   '"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Test Code"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Run_Test()"
        PRINT "    'Call Test01"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' List Test Code"
        PRINT "'###################################################################################################"
        PRINT "Public Sub List_Test()"
        PRINT "    Const pcSTD As String = ""STD"""
        PRINT "    Const pcVBA As String = ""VBA"""
        PRINT "    Const pcDAO As String = ""DAO"""
        PRINT "    Const pcADO As String = ""ADO"""
        PRINT "    '************************************************************"
        PRINT "    Dim intBEG As Integer: intBEG = 1"
        PRINT "    Dim strTYP As String:  strTYP = pcSTD"
        PRINT "    '************************************************************"
        PRINT "    Dim intEND As Integer: intEND = 0"
        PRINT "    '------------------------------------------------------------"
        PRINT "    Dim intINC As Integer: intINC = 10"
        PRINT "    Dim intRNG As Integer: intRNG = 9"
        PRINT "    '------------------------------------------------------------"
        PRINT "    Dim blnCLR As Boolean: blnCLR = True  ' True False"
        PRINT "    '------------------------------------------------------------"
        PRINT "    If strTYP = pcSTD Or gcNOP Then Call List_Test_STD(intBEG, intEND, blnCLR): intBEG = intBEG+intINC: intEND = intBEG+intRNG: blnCLR = False"
        PRINT "    If strTYP = pcVBA Or gcNOP Then Call List_Test_VBA(intBEG, intEND, blnCLR): intBEG = intBEG+intINC: intEND = intBEG+intRNG: blnCLR = False"
        PRINT "    If strTYP = pcDAO Or gcNOP Then Call List_Test_DAO(intBEG, intEND, blnCLR): intBEG = intBEG+intINC: intEND = intBEG+intRNG: blnCLR = False"
        PRINT "    If strTYP = pcADO Or gcNOP Then Call List_Test_ADO(intBEG, intEND, blnCLR): intBEG = intBEG+intINC: intEND = intBEG+intRNG: blnCLR = False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Init_ALL"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Init_ALL()"
        PRINT "    '------------------------"
        PRINT "    ' Initialize objects"
        PRINT "    '------------------------"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    '------------------------"
        PRINT "    ' Initialize values"
        PRINT "    '------------------------"
        PRINT "    mcLinSGL = String$(100, ""-"")"
        PRINT "    mcLinDBL = String$(100, ""="")"
        PRINT "    mcLinPND = String$(100, ""#"")"
        PRINT "    '------------------------"
        PRINT "    gXTS = gcMTY"
        PRINT "    gAND = gcMTY"
        PRINT "    '------------------------"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- BASTBM = Build module:  bas_TblMnt
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASTBM,bas_TblMnt,'Table Maintenance'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBASTBM) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mblnConfirm           As Boolean = True    ' Display confirmation dialog"
        PRINT "Private Const mblnByPass            As Boolean = False   ' Bypass  confirmation dialog"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'####################################################################################################"
        PRINT "' Clear Tables"
        PRINT "'####################################################################################################"
        PRINT "Private Sub ClearTables()"
        PRINT ""
        PRINT "    'Call ClearTable(""pfx_TblNam"", mblnByPass)"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'####################################################################################################"
        PRINT "' List Table Calls"
        PRINT "'####################################################################################################"
        PRINT "Private Sub WriteList()"
        PRINT "    ' Initialize working objects"
        PRINT "    Dim dbs    As Database"
        PRINT "    Dim tds    As TableDefs"
        PRINT "    Dim tdf    As TableDef"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Set tds = dbs.TableDefs"
        PRINT "    For Each tdf In tds"
        PRINT "        Select Case Left$(tdf.Name, 3)"
        PRINT "            Case ""App"""
        PRINT "            Case ""MSy"""
        PRINT "            Case ""Sys"""
        PRINT "            Case ""~TM"""
        PRINT "            Case Else"
        PRINT "                Debug.Print ""    'Call ClearTable("""""" & tdf.Name & """""", mblnConfirm)"""
        PRINT "        End Select"
        PRINT "    Next"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'####################################################################################################"
        PRINT "' Rebuild Tables"
        PRINT "'####################################################################################################"
        PRINT "Public Function ClearTable( _"
        PRINT "    ByVal strTarget As String, _"
        PRINT "    Optional ByVal blnConfirm As Boolean = True _"
        PRINT ") As Boolean"
        PRINT "    ' Initialize working objects"
        PRINT "    Dim strSQL As String"
        PRINT "    Dim lngCnt As Long"
        PRINT "    Dim dbs    As Database"
        PRINT "    Dim tds    As TableDefs"
        PRINT "    Dim tdf    As TableDef"
        PRINT "    Dim rst    As Recordset"
        PRINT "    Dim qdf    As QueryDef"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Set qdf = dbs.CreateQueryDef("""")"
        PRINT "    Set tds = dbs.TableDefs"
        PRINT "    ' Initialize working variables"
        PRINT "    Dim blnHasSrc As Boolean"
        PRINT "    Dim blnHasTrg As Boolean"
        PRINT "    Dim strSource As String"
        PRINT "    Dim strDBPath As String"
        PRINT "    strSource = strTarget & ""_XX"""
        PRINT "    strDBPath = CurrentProject.FullName"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Confirm the deletion"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnConfirm Then"
        PRINT "        strSQL = ""SELECT Count(*) AS RecCnt FROM "" & strTarget"
        PRINT "        Set rst = dbs.OpenRecordset(strSQL)"
        PRINT "        With rst"
        PRINT "            lngCnt = !RecCnt"
        PRINT "            If lngCnt > 0 Then"
        PRINT "                If MsgBox( _"
        PRINT "                    ""Clearing the "" & vbCrLf & vbCrLf & ""    "" & _"
        PRINT "                    strTarget & vbCrLf & vbCrLf & ""table which has "" & _"
        PRINT "                    vbCrLf & vbCrLf & ""    "" & lngCnt & vbCrLf & vbCrLf & ""records"", _"
        PRINT "                    vbExclamation+vbOKCancel, ""Table Maintenance"" _"
        PRINT "                ) = vbCancel Then"
        PRINT "                    Exit Function"
        PRINT "                End If"
        PRINT "            End If"
        PRINT "        End With"
        PRINT "        Set rst = Nothing"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Check to see if the target table exists"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each tdf In tds"
        PRINT "        If tdf.Name = strTarget Then"
        PRINT "            blnHasTrg = True"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    If Not blnHasTrg Then Exit Function"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Check to see if the source table exists"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each tdf In tds"
        PRINT "        If tdf.Name = strSource Then"
        PRINT "            blnHasSrc = True"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    If Not blnHasSrc Then"
        PRINT "        DoCmd.TransferDatabase acImport, ""Microsoft Access"", _"
        PRINT "            strDBPath, acTable, strTarget, strSource, True"
        PRINT "        tds.Refresh"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Make sure the source table got created"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each tdf In tds"
        PRINT "        If tdf.Name = strSource Then"
        PRINT "            blnHasSrc = True"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    If Not blnHasSrc Then Exit Function"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Delete the current target table"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each tdf In tds"
        PRINT "        If tdf.Name = strTarget Then"
        PRINT "            tds.Delete strTarget"
        PRINT "            tds.Refresh"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Move the new table into place"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each tdf In tds"
        PRINT "        If tdf.Name = strSource Then"
        PRINT "            DoCmd.Rename strTarget, acTable, strSource"
        PRINT "            tds.Refresh"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- UTLASC = Build module:  clsUtlASC
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA UTLASC,clsUtlASC,'Manage KeyAscii Assignments',kys
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecUTLASC) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Length of text value"
        PRINT "'###################################################################################################"
        PRINT "Public Function IsLength(ByRef vrnVAL As Variant, ByVal intLEN As Integer) As Boolean"
        PRINT "    IsLength = (Len(vrnVAL) <= intLEN)"
        PRINT "    vrnVAL = Left$(vrnVAL, intLEN)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Range of Numeric values"
        PRINT "'###################################################################################################"
        PRINT "Public Function InRange(ByRef vrnVAL As Variant, ByVal vrnMIN As Variant, ByVal vrnMAX As Variant) As Boolean"
        PRINT "    InRange = (vrnVAL >= vrnMIN And vrnVAL <= vrnMAX)"
        PRINT "    If vrnVAL < vrnMIN Then vrnVAL = vrnMIN"
        PRINT "    If vrnVAL > vrnMAX Then vrnVAL = vrnMAX"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  UpperCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Disregard characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Any/MixedCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Any_Mixed(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 33        ' Bang         (!)"
        PRINT "        Case 34        ' DoubleQuote  ("")"
        PRINT "        Case 35        ' Pound        (#)"
        PRINT "        Case 36        ' Dollar       ($)"
        PRINT "        Case 37        ' Percent      (%)"
        PRINT "        Case 38        ' Ampersand    (&)"
        PRINT "        Case 39        ' SingleQuote  (')"
        PRINT "        Case 40        ' OpenParen    (()"
        PRINT "        Case 41        ' CloseParen   ())"
        PRINT "        Case 42        ' Star         (*)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 44        ' Comma        (,)"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 58        ' Colon        (:)"
        PRINT "        Case 59        ' SemiColon    (;)"
        PRINT "        Case 60        ' GreaterThan  (<)"
        PRINT "        Case 61        ' Equals       (=)"
        PRINT "        Case 62        ' LessThan     (>)"
        PRINT "        Case 63        ' Question     (?)"
        PRINT "        Case 64        ' Each         (@)"
        PRINT "        Case 91        ' OpenBracket  ([)"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 93        ' CloseBracket (])"
        PRINT "        Case 94        ' Caret        (^)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        Case 96        ' BackTick     (`)"
        PRINT "        Case 123       ' OpenBrace    ({)"
        PRINT "        Case 124       ' Pipe         (|)"
        PRINT "        Case 125       ' CloseBrace   (})"
        PRINT "        Case 126       ' Tilde        (~)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Any_Mixed = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Any/UpperCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Any_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 33        ' Bang         (!)"
        PRINT "        Case 34        ' DoubleQuote  ("")"
        PRINT "        Case 35        ' Pound        (#)"
        PRINT "        Case 36        ' Dollar       ($)"
        PRINT "        Case 37        ' Percent      (%)"
        PRINT "        Case 38        ' Ampersand    (&)"
        PRINT "        Case 39        ' SingleQuote  (')"
        PRINT "        Case 40        ' OpenParen    (()"
        PRINT "        Case 41        ' CloseParen   ())"
        PRINT "        Case 42        ' Star         (*)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 44        ' Comma        (,)"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 58        ' Colon        (:)"
        PRINT "        Case 59        ' SemiColon    (;)"
        PRINT "        Case 60        ' GreaterThan  (<)"
        PRINT "        Case 61        ' Equals       (=)"
        PRINT "        Case 62        ' LessThan     (>)"
        PRINT "        Case 63        ' Question     (?)"
        PRINT "        Case 64        ' Each         (@)"
        PRINT "        Case 91        ' OpenBracket  ([)"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 93        ' CloseBracket (])"
        PRINT "        Case 94        ' Caret        (^)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        Case 96        ' BackTick     (`)"
        PRINT "        Case 123       ' OpenBrace    ({)"
        PRINT "        Case 124       ' Pipe         (|)"
        PRINT "        Case 125       ' CloseBrace   (})"
        PRINT "        Case 126       ' Tilde        (~)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Any_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Data/MixedCase (no quotes or comas)"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Data_Mixed(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 33        ' Bang         (!)"
        PRINT "        Case 35        ' Pound        (#)"
        PRINT "        Case 36        ' Dollar       ($)"
        PRINT "        Case 37        ' Percent      (%)"
        PRINT "        Case 38        ' Ampersand    (&)"
        PRINT "        Case 40        ' OpenParen    (()"
        PRINT "        Case 41        ' CloseParen   ())"
        PRINT "        Case 42        ' Star         (*)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 58        ' Colon        (:)"
        PRINT "        Case 59        ' SemiColon    (;)"
        PRINT "        Case 60        ' GreaterThan  (<)"
        PRINT "        Case 61        ' Equals       (=)"
        PRINT "        Case 62        ' LessThan     (>)"
        PRINT "        Case 63        ' Question     (?)"
        PRINT "        Case 64        ' Each         (@)"
        PRINT "        Case 91        ' OpenBracket  ([)"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 93        ' CloseBracket (])"
        PRINT "        Case 94        ' Caret        (^)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        Case 96        ' BackTick     (`)"
        PRINT "        Case 123       ' OpenBrace    ({)"
        PRINT "        Case 124       ' Pipe         (|)"
        PRINT "        Case 125       ' CloseBrace   (})"
        PRINT "        Case 126       ' Tilde        (~)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Data_Mixed = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Data/UpperCase (no quotes or comas)"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Data_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 33        ' Bang         (!)"
        PRINT "        Case 35        ' Pound        (#)"
        PRINT "        Case 36        ' Dollar       ($)"
        PRINT "        Case 37        ' Percent      (%)"
        PRINT "        Case 38        ' Ampersand    (&)"
        PRINT "        Case 40        ' OpenParen    (()"
        PRINT "        Case 41        ' CloseParen   ())"
        PRINT "        Case 42        ' Star         (*)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 58        ' Colon        (:)"
        PRINT "        Case 59        ' SemiColon    (;)"
        PRINT "        Case 60        ' GreaterThan  (<)"
        PRINT "        Case 61        ' Equals       (=)"
        PRINT "        Case 62        ' LessThan     (>)"
        PRINT "        Case 63        ' Question     (?)"
        PRINT "        Case 64        ' Each         (@)"
        PRINT "        Case 91        ' OpenBracket  ([)"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 93        ' CloseBracket (])"
        PRINT "        Case 94        ' Caret        (^)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        Case 96        ' BackTick     (`)"
        PRINT "        Case 123       ' OpenBrace    ({)"
        PRINT "        Case 124       ' Pipe         (|)"
        PRINT "        Case 125       ' CloseBrace   (})"
        PRINT "        Case 126       ' Tilde        (~)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Data_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Text/MixedCase (no quotes or comas)"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Text_Mixed(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 40        ' OpenParen    (()"
        PRINT "        Case 41        ' CloseParen   ())"
        PRINT "        Case 42        ' Star         (*)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 58        ' Colon        (:)"
        PRINT "        Case 59        ' SemiColon    (;)"
        PRINT "        Case 60        ' GreaterThan  (<)"
        PRINT "        Case 61        ' Equals       (=)"
        PRINT "        Case 62        ' LessThan     (>)"
        PRINT "        Case 63        ' Question     (?)"
        PRINT "        Case 64        ' Each         (@)"
        PRINT "        Case 91        ' OpenBracket  ([)"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 93        ' CloseBracket (])"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        Case 123       ' OpenBrace    ({)"
        PRINT "        Case 124       ' Pipe         (|)"
        PRINT "        Case 125       ' CloseBrace   (})"
        PRINT "        Case 126       ' Tilde        (~)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Text_Mixed = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Text/UpperCase (no quotes or comas)"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Text_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 40        ' OpenParen    (()"
        PRINT "        Case 41        ' CloseParen   ())"
        PRINT "        Case 42        ' Star         (*)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 58        ' Colon        (:)"
        PRINT "        Case 59        ' SemiColon    (;)"
        PRINT "        Case 60        ' GreaterThan  (<)"
        PRINT "        Case 61        ' Equals       (=)"
        PRINT "        Case 62        ' LessThan     (>)"
        PRINT "        Case 63        ' Question     (?)"
        PRINT "        Case 64        ' Each         (@)"
        PRINT "        Case 91        ' OpenBracket  ([)"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 93        ' CloseBracket (])"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        Case 123       ' OpenBrace    ({)"
        PRINT "        Case 124       ' Pipe         (|)"
        PRINT "        Case 125       ' CloseBrace   (})"
        PRINT "        Case 126       ' Tilde        (~)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Text_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Basic/MixedCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Basic_Mixed(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Basic_Mixed = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Basic/UpperCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Basic_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Basic_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Alpha-Numeric-Dash/MixedCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_AlphaNumDash_Mixed(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_AlphaNumDash_Mixed = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Alpha-Numeric-Dash/UpperCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_AlphaNumDash_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_AlphaNumDash_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Alpha-Numeric/MixedCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_AlphaNum_Mixed(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_AlphaNum_Mixed = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Alpha-Numeric/UpperCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_AlphaNum_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_AlphaNum_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Alpha/UpperCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Alpha_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Alpha_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Alpha-Numeric/Only"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Numeric_Only(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Numeric_Only = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  FileName/MixedCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_FileName_Mixed(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_FileName_Mixed = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  FileName/UpperCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_FileName_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_FileName_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  ModuleName/UpperCase"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_ModuleName_Upper(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 36        ' Dollar       ($)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_ModuleName_Upper = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Digits Only"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Digits(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Digits = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Integers Only"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Integers(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Integers = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  Decimals Only"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_Decimals(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 45        ' Minus        (-)"
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_Decimals = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Pattern:  IN (NumberList)"
        PRINT "'###################################################################################################"
        PRINT "Public Function Get_InList_Digits(ByRef UtlASCii As Integer) As Boolean"
        PRINT ""
        PRINT "    ' Only allow digits and comma characters"
        PRINT "    Dim blnBEEP As Boolean"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (BkSPC)"
        PRINT "        Case 9         ' Backtab      (BkTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 13        ' Enter        (ENTER)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 44        ' Comma        (,)"
        PRINT "        '-------------------------------------"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        '-------------------------------------"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0: blnBEEP = True: GoTo Exit_Procedure"
        PRINT "    End Select"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Get_InList_Digits = blnBEEP"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- UTLFMT = Build module:  clsUtlFMT
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA UTLFMT,clsUtlFMT,'Provide Standard Formatting',fmt
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecUTLFMT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' DateTime Property Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mdatAsnDat                  As Date                  ' Current date"
        PRINT "Private mdatAsnTim                  As Date                  ' Current time"
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Constants/Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMTY                 As String = """""
        PRINT "Private Const mcSPC                 As String = "" """
        PRINT "Private Const mcDOT                 As String = ""."""
        PRINT "Private Const mcCMA                 As String = "","""
        PRINT "Private Const mcDSH                 As String = ""-"""
        PRINT "Private Const mcUBR                 As String = ""_"""
        PRINT "Private Const mcPIP                 As String = ""|"""
        PRINT "Private Const mcBKS                 As String = ""\"""
        PRINT "Private Const mcFWS                 As String = ""/"""
        PRINT "Private Const mcSCN                 As String = "";"""
        PRINT "Private Const mcCLN                 As String = "":"""
        PRINT "Private Const mcTLD                 As String = ""~"""
        PRINT "Private Const mcTIK                 As String = ""`"""
        PRINT "Private Const mcSQT                 As String = ""'"""
        PRINT "Private Const mcDQT                 As String = """""""""
        PRINT "Private Const mcCLF                 As String = vbCrLf"
        PRINT "Private Const mcZRO                 As Integer = 0"
        PRINT "'***************************************************************************************************"
        PRINT "Private mXTS                        As String * 1000"
        PRINT "Private mSQL                        As String"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTXT                        As String"
        PRINT "Private mTX1                        As String"
        PRINT "Private mTX2                        As String"
        PRINT "Private mTX3                        As String"
        PRINT "Private mTX4                        As String"
        PRINT "Private mTX5                        As String"
        PRINT "Private mTX6                        As String"
        PRINT "Private mTX7                        As String"
        PRINT "Private mTX8                        As String"
        PRINT "Private mTX9                        As String"
        PRINT "'***************************************************************************************************"
        PRINT "Private mLEN                        As Integer"
        PRINT "Private mLN1                        As Integer"
        PRINT "Private mLN2                        As Integer"
        PRINT "Private mLN3                        As Integer"
        PRINT "Private mLN4                        As Integer"
        PRINT "'***************************************************************************************************"
        PRINT "Private mNBR                        As Long"
        PRINT "Private mNB1                        As Long"
        PRINT "Private mNB2                        As Long"
        PRINT "'***************************************************************************************************"
        PRINT "Private mBLN                        As Boolean"
        PRINT "Private mBL1                        As Boolean"
        PRINT "Private mBL2                        As Boolean"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Constants"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Null Value Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrNulTXT                  As String                             ' Standard Null: String"
        PRINT "Private mblnNulBLN                  As Boolean                            ' Standard Null: Boolean"
        PRINT "Private mintNulNUM                  As Integer                            ' Standard Null: Integer"
        PRINT "Private mdatNulDAT                  As Date                               ' Standard Null: Date"
        PRINT "Private mvrnNulVRN                  As Variant                            ' Standard Null: Variant"
        PRINT "'***************************************************************************************************"
        PRINT "' Delimiter Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDlmXTS              As String = """"                        ' Delimiter: Empty"
        PRINT "Private Const mcDlmSPC              As String = "" ""                       ' Delimiter: Space"
        PRINT "Private Const mcDlmDOT              As String = "".""                       ' Delimiter: Period"
        PRINT "Private Const mcDlmCMA              As String = "",""                       ' Delimiter: Comma"
        PRINT "Private Const mcDlmDSH              As String = ""-""                       ' Delimiter: Dash"
        PRINT "Private Const mcDlmUBR              As String = ""_""                       ' Delimiter: UnderBar"
        PRINT "Private Const mcDlmVBR              As String = ""|""                       ' Delimiter: Pipe"
        PRINT "Private Const mcDlmBKS              As String = ""\""                       ' Delimiter: BackSlash"
        PRINT "Private Const mcDlmFWS              As String = ""/""                       ' Delimiter: ForwardSlash"
        PRINT "Private Const mcDlmSCN              As String = "";""                       ' Delimiter: SemiColon"
        PRINT "Private Const mcDlmCLN              As String = "":""                       ' Delimiter: Colon"
        PRINT "Private Const mcDlmTLD              As String = ""~""                       ' Delimiter: Tilde"
        PRINT "Private Const mcDlmTIK              As String = ""`""                       ' Delimiter: Tick"
        PRINT "Private Const mcDlmSQT              As String = ""'""                       ' Delimiter: SingleQuote"
        PRINT "Private Const mcDlmDQT              As String = """"""""                      ' Delimiter: DoubleQuote"
        PRINT "Private Const mcDlmCLF              As String = vbCrLf                    ' Delimiter: {CR}{LF}"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDlmDLM              As String = mcDlmVBR                  ' Delimiter: Items"
        PRINT "Private Const mcDlmDLG              As String = mcDlmTLD                  ' Delimiter: Groups"
        PRINT "Private Const mcDlmDLX              As String = mcDlmTIK                  ' Delimiter: Lines"
        PRINT "Private Const mcDlmDLB              As String = mcDlmCMA                  ' Delimiter: Build elements"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDlmDFN              As String = mcDlmSCN                  ' Delimiter: ListBox column items"
        PRINT "Private Const mcDlmADD              As String = mcDlmVBR                  ' Delimiter: ClmAdd  column items"
        PRINT "Private Const mcDlmSRC              As String = mcDlmCLN                  ' Delimiter: Source  column items"
        PRINT "Private Const mcDlmLST              As String = mcDlmCMA                  ' Delimiter: List    column items"
        PRINT "'***************************************************************************************************"
        PRINT "' Connection Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMdbAPP              As String = gcMdbAPP"
        PRINT "Private Const mcMdbDAT              As String = gcMdbDAT"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMDBProv             As String = ""Provider=Microsoft.Jet.OLEDB.4.0;"""
        PRINT "Private Const mcMDBUser             As String = ""User ID=admin;Password=;Persist Security Info=True;"""
        PRINT "'***************************************************************************************************"
        PRINT "' Date Format"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatFmtSTD           As String = ""STD""                     ' Date Format: Standard"
        PRINT "Private Const mcDatFmtTMS           As String = ""TMS""                     ' Date Format: Time-Min/Sec"
        PRINT "Private Const mcDatFmtDUR           As String = ""DUR""                     ' Date Format: Duration"
        PRINT "'***************************************************************************************************"
        PRINT "' Date Formatting Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatFmtDEF           As String = ""ZZZ""                     ' Format: MM/DD/YYYY"
        PRINT "Private Const mcDatFmtMDY           As String = ""MDY""                     ' Format: MM-DD-YYYY"
        PRINT "Private Const mcDatFmtMDC           As String = ""MDC""                     ' Format: MM-DD-YY"
        PRINT "Private Const mcDatFmtYMD           As String = ""YMD""                     ' Format: YYYY-MM-DD"
        PRINT "Private Const mcDatFmtCMD           As String = ""CMD""                     ' Format: YY-MM-DD"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatTxtMDY           As String = ""MM-DD-YYYY"""
        PRINT "Private Const mcDatTxtMDC           As String = ""MM-DD-YY"""
        PRINT "Private Const mcDatTxtYMD           As String = ""YYYY-MM-DD"""
        PRINT "Private Const mcDatTxtCMD           As String = ""YY-MM-DD"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatMtyMDY           As String = ""00-00-0000"""
        PRINT "Private Const mcDatMtyYMD           As String = ""0000-00-00"""
        PRINT "'***************************************************************************************************"
        PRINT "' Time Formatting Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTimFmtDEF           As String = ""ZZZ""                     ' Format: hh:mm"
        PRINT "Private Const mcTimFmtHZZ           As String = ""HZZ""                     ' Format: hh"
        PRINT "Private Const mcTimFmtHMZ           As String = ""HMZ""                     ' Format: hh:mm"
        PRINT "Private Const mcTimFmtHMS           As String = ""HMS""                     ' Format: hh:mm:ss"
        PRINT "Private Const mcTimFmtZMS           As String = ""ZMS""                     ' Format: mm:ss"
        PRINT "Private Const mcTimFmtZZS           As String = ""ZZS""                     ' Format: ss"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTimTxtHZZ           As String = ""hh"""
        PRINT "Private Const mcTimTxtHMZ           As String = ""hh:nn"""
        PRINT "Private Const mcTimTxtHMS           As String = ""hh:nn:ss"""
        PRINT "Private Const mcTimTxtZMS           As String = ""nn:ss"""
        PRINT "Private Const mcTimTxtZZS           As String = ""ss"""
        PRINT "'***************************************************************************************************"
        PRINT "' Date/Time Formatting Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDtmFmtY2H           As String = ""Y2H"""
        PRINT "Private Const mcDtmFmtY2M           As String = ""Y2M"""
        PRINT "Private Const mcDtmFmtY2S           As String = ""Y2S"""
        PRINT "Private Const mcDtmFmtC2H           As String = ""C2H"""
        PRINT "Private Const mcDtmFmtC2M           As String = ""C2M"""
        PRINT "Private Const mcDtmFmtC2S           As String = ""C2S"""
        PRINT "Private Const mcDtmFmtM2H           As String = ""M2H"""
        PRINT "Private Const mcDtmFmtM2M           As String = ""M2M"""
        PRINT "Private Const mcDtmFmtM2S           As String = ""M2S"""
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Initialize Modules"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Objects"
        PRINT "    ' Initialize Defaults"
        PRINT "    Call Class_Defaults"
        PRINT "    ' Initialize Variables"
        PRINT "    mXTS = """""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "    ' Initialize Flags"
        PRINT "    ' Initialize Properties"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Module Properties"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' DateTime Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let AsnDat(ByVal vNewVal As Date):                mdatAsnDat = vNewVal: End Property"
        PRINT "Public Property Get AsnDat() As Date:                              AsnDat = mdatAsnDat: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let AsnTim(ByVal vNewVal As Date):                mdatAsnTim = vNewVal: End Property"
        PRINT "Public Property Get AsnTim() As Date:                              AsnTim = mdatAsnTim: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Properties"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Null Value Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get NulTxt() As String:                            NulTxt = mstrNulTXT: End Property"
        PRINT "Public Property Get NulBLN() As Boolean:                           NulBLN = mblnNulBLN: End Property"
        PRINT "Public Property Get NulNUM() As Integer:                           NulNUM = mintNulNUM: End Property"
        PRINT "Public Property Get NulDAT() As Date:                              NulDAT = mdatNulDAT: End Property"
        PRINT "Public Property Get NulVRN() As Variant:                           NulVRN = mvrnNulVRN: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Delimiter Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DlmXTS() As String:                              DlmXTS = mcDlmXTS: End Property"
        PRINT "Public Property Get DlmSPC() As String:                              DlmSPC = mcDlmSPC: End Property"
        PRINT "Public Property Get DlmDOT() As String:                              DlmDOT = mcDlmDOT: End Property"
        PRINT "Public Property Get DlmCMA() As String:                              DlmCMA = mcDlmCMA: End Property"
        PRINT "Public Property Get DlmDSH() As String:                              DlmDSH = mcDlmDSH: End Property"
        PRINT "Public Property Get DlmUBR() As String:                              DlmUBR = mcDlmUBR: End Property"
        PRINT "Public Property Get DlmVBR() As String:                              DlmVBR = mcDlmVBR: End Property"
        PRINT "Public Property Get DlmBKS() As String:                              DlmBKS = mcDlmBKS: End Property"
        PRINT "Public Property Get DlmFWS() As String:                              DlmFWS = mcDlmFWS: End Property"
        PRINT "Public Property Get DlmSCN() As String:                              DlmSCN = mcDlmSCN: End Property"
        PRINT "Public Property Get DlmCLN() As String:                              DlmCLN = mcDlmCLN: End Property"
        PRINT "Public Property Get DlmTLD() As String:                              DlmTLD = mcDlmTLD: End Property"
        PRINT "Public Property Get DlmTIK() As String:                              DlmTIK = mcDlmTIK: End Property"
        PRINT "Public Property Get DlmSQT() As String:                              DlmSQT = mcDlmSQT: End Property"
        PRINT "Public Property Get DlmDQT() As String:                              DlmDQT = mcDlmDQT: End Property"
        PRINT "Public Property Get DlmCLF() As String:                              DlmCLF = mcDlmCLF: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DlmDLM() As String:                              DlmDLM = mcDlmDLM: End Property"
        PRINT "Public Property Get DlmDLG() As String:                              DlmDLG = mcDlmDLG: End Property"
        PRINT "Public Property Get DlmDLX() As String:                              DlmDLX = mcDlmDLX: End Property"
        PRINT "Public Property Get DlmDLB() As String:                              DlmDLB = mcDlmDLB: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DlmDFN() As String:                              DlmDFN = mcDlmDFN: End Property"
        PRINT "Public Property Get DlmADD() As String:                              DlmADD = mcDlmADD: End Property"
        PRINT "Public Property Get DlmSRC() As String:                              DlmSRC = mcDlmSRC: End Property"
        PRINT "Public Property Get DlmLST() As String:                              DlmLST = mcDlmLST: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Date Format"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DatFmtSTD() As String:                     DatFmtSTD = mcDatFmtSTD: End Property"
        PRINT "Public Property Get DatFmtTMS() As String:                     DatFmtTMS = mcDatFmtTMS: End Property"
        PRINT "Public Property Get DatFmtDUR() As String:                     DatFmtDUR = mcDatFmtDUR: End Property"
        PRINT "'###################################################################################################"
        PRINT "' Date Formatting Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DatFmtDEF() As String:                     DatFmtDEF = mcDatFmtDEF: End Property"
        PRINT "Public Property Get DatFmtMDY() As String:                     DatFmtMDY = mcDatFmtMDY: End Property"
        PRINT "Public Property Get DatFmtMDC() As String:                     DatFmtMDC = mcDatFmtMDC: End Property"
        PRINT "Public Property Get DatFmtYMD() As String:                     DatFmtYMD = mcDatFmtYMD: End Property"
        PRINT "Public Property Get DatFmtCMD() As String:                     DatFmtCMD = mcDatFmtCMD: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DatTxtMDY() As String:                     DatTxtMDY = mcDatTxtMDY: End Property"
        PRINT "Public Property Get DatTxtMDC() As String:                     DatTxtMDC = mcDatTxtMDC: End Property"
        PRINT "Public Property Get DatTxtYMD() As String:                     DatTxtYMD = mcDatTxtYMD: End Property"
        PRINT "Public Property Get DatTxtCMD() As String:                     DatTxtCMD = mcDatTxtCMD: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DatMtyMDY() As String:                     DatMtyMDY = mcDatMtyMDY: End Property"
        PRINT "Public Property Get DatMtyYMD() As String:                     DatMtyYMD = mcDatMtyYMD: End Property"
        PRINT "'###################################################################################################"
        PRINT "' Time Formatting Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get TimFmtDEF() As String:                     TimFmtDEF = mcTimFmtDEF: End Property"
        PRINT "Public Property Get TimFmtHZZ() As String:                     TimFmtHZZ = mcTimFmtHZZ: End Property"
        PRINT "Public Property Get TimFmtHMZ() As String:                     TimFmtHMZ = mcTimFmtHMZ: End Property"
        PRINT "Public Property Get TimFmtHMS() As String:                     TimFmtHMS = mcTimFmtHMS: End Property"
        PRINT "Public Property Get TimFmtZMS() As String:                     TimFmtZMS = mcTimFmtZMS: End Property"
        PRINT "Public Property Get TimFmtZZS() As String:                     TimFmtZZS = mcTimFmtZZS: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get TimTxtHZZ() As String:                     TimTxtHZZ = mcTimTxtHZZ: End Property"
        PRINT "Public Property Get TimTxtHMZ() As String:                     TimTxtHMZ = mcTimTxtHMZ: End Property"
        PRINT "Public Property Get TimTxtHMS() As String:                     TimTxtHMS = mcTimTxtHMS: End Property"
        PRINT "Public Property Get TimTxtZMS() As String:                     TimTxtZMS = mcTimTxtZMS: End Property"
        PRINT "Public Property Get TimTxtZZS() As String:                     TimTxtZZS = mcTimTxtZZS: End Property"
        PRINT "'###################################################################################################"
        PRINT "' Date/Time Formatting Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DtmFmtY2H() As String:                     DtmFmtY2H = mcDtmFmtY2H: End Property"
        PRINT "Public Property Get DtmFmtY2M() As String:                     DtmFmtY2M = mcDtmFmtY2M: End Property"
        PRINT "Public Property Get DtmFmtY2S() As String:                     DtmFmtY2S = mcDtmFmtY2S: End Property"
        PRINT "Public Property Get DtmFmtC2H() As String:                     DtmFmtC2H = mcDtmFmtC2H: End Property"
        PRINT "Public Property Get DtmFmtC2M() As String:                     DtmFmtC2M = mcDtmFmtC2M: End Property"
        PRINT "Public Property Get DtmFmtC2S() As String:                     DtmFmtC2S = mcDtmFmtC2S: End Property"
        PRINT "Public Property Get DtmFmtM2H() As String:                     DtmFmtM2H = mcDtmFmtM2H: End Property"
        PRINT "Public Property Get DtmFmtM2M() As String:                     DtmFmtM2M = mcDtmFmtM2M: End Property"
        PRINT "Public Property Get DtmFmtM2S() As String:                     DtmFmtM2S = mcDtmFmtM2S: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Connection Strings"
        PRINT "'###################################################################################################"
        PRINT "Public Function GetConnMDB(Optional ByVal strMDB As String = gcMdbDAT) As String"
        PRINT "    GetConnMDB = mcMDBProv & ""Data Source="" & CurrentProject.Path & ""\"" & strMDB & "".mdb;"" & mcMDBUser"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Get Formatted Date"
        PRINT "'###################################################################################################"
        PRINT "Public Function FmtDat( _"
        PRINT "    Optional ByVal strFMT As String, _"
        PRINT "    Optional ByVal datDAT As Date _"
        PRINT ") As String"
        PRINT "    If Len(strFMT) = 0 Then strFMT = mcDatFmtYMD"
        PRINT "    If datDAT = NulDAT Then datDAT = AsnDat"
        PRINT "    If datDAT = NulDAT Then datDAT = Date"
        PRINT "    Select Case strFMT"
        PRINT "        Case mcDatFmtDEF: FmtDat = Format$(datDAT, mcDatTxtMDY)"
        PRINT "        Case mcDatFmtMDY: FmtDat = Format$(datDAT, mcDatTxtMDY)"
        PRINT "        Case mcDatFmtMDC: FmtDat = Format$(datDAT, mcDatTxtMDC)"
        PRINT "        Case mcDatFmtYMD: FmtDat = Format$(datDAT, mcDatTxtYMD)"
        PRINT "        Case mcDatFmtCMD: FmtDat = Format$(datDAT, mcDatTxtCMD)"
        PRINT "        Case Else:        FmtDat = Format$(datDAT, strFMT)"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'###################################################################################################"
        PRINT "' Get Formatted Time"
        PRINT "'###################################################################################################"
        PRINT "Public Function FmtTim( _"
        PRINT "    Optional ByVal strFMT As String, _"
        PRINT "    Optional ByVal datTIM As Date _"
        PRINT ") As String"
        PRINT "    If Len(strFMT) = 0 Then strFMT = mcTimTxtHMS"
        PRINT "    If datTIM = NulDAT Then datTIM = AsnTim"
        PRINT "    If datTIM = NulDAT Then datTIM = Time"
        PRINT "    Select Case strFMT"
        PRINT "        Case mcTimFmtDEF: FmtTim = Format$(datTIM, mcTimTxtHMS)"
        PRINT "        Case mcTimFmtHZZ: FmtTim = Format$(datTIM, mcTimTxtHZZ)"
        PRINT "        Case mcTimFmtHMZ: FmtTim = Format$(datTIM, mcTimTxtHMZ)"
        PRINT "        Case mcTimFmtHMS: FmtTim = Format$(datTIM, mcTimTxtHMS)"
        PRINT "        Case mcTimFmtZMS: FmtTim = Format$(datTIM, mcTimTxtZMS)"
        PRINT "        Case mcTimFmtZZS: FmtTim = Format$(datTIM, mcTimTxtZZS)"
        PRINT "        Case Else:        FmtTim = Format$(datTIM, strFMT)"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'###################################################################################################"
        PRINT "' Get Formatted Date & Time"
        PRINT "'###################################################################################################"
        PRINT "Public Function FmtDtm( _"
        PRINT "    Optional ByVal strFMT As String, _"
        PRINT "    Optional ByVal datDAT As Date, _"
        PRINT "    Optional ByVal datTIM As Date, _"
        PRINT "    Optional ByVal intSPC As Integer = 1 _"
        PRINT ") As String"
        PRINT "    If Len(strFMT) = 0 Then strFMT = mcDtmFmtY2S"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If datDAT = NulDAT Then datDAT = AsnDat"
        PRINT "    If datDAT = NulDAT Then datDAT = Date"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If datTIM = NulDAT Then datTIM = AsnTim"
        PRINT "    If datTIM = NulDAT Then datTIM = Time"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim strSPC As String: strSPC = String(IIf(intSPC < 1, 1, intSPC), mcSPC)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Select Case strFMT"
        PRINT "        Case mcDtmFmtY2H: FmtDtm = Format$(datDAT, mcDatTxtYMD) & strSPC & Format$(datTIM, mcTimTxtHZZ)"
        PRINT "        Case mcDtmFmtY2M: FmtDtm = Format$(datDAT, mcDatTxtYMD) & strSPC & Format$(datTIM, mcTimTxtHMZ)"
        PRINT "        Case mcDtmFmtY2S: FmtDtm = Format$(datDAT, mcDatTxtYMD) & strSPC & Format$(datTIM, mcTimTxtHMS)"
        PRINT "        Case mcDtmFmtC2H: FmtDtm = Format$(datDAT, mcDatTxtCMD) & strSPC & Format$(datTIM, mcTimTxtHZZ)"
        PRINT "        Case mcDtmFmtC2M: FmtDtm = Format$(datDAT, mcDatTxtCMD) & strSPC & Format$(datTIM, mcTimTxtHMZ)"
        PRINT "        Case mcDtmFmtC2S: FmtDtm = Format$(datDAT, mcDatTxtCMD) & strSPC & Format$(datTIM, mcTimTxtHMS)"
        PRINT "        Case mcDtmFmtM2H: FmtDtm = Format$(datDAT, mcDatTxtMDY) & strSPC & Format$(datTIM, mcTimTxtHZZ)"
        PRINT "        Case mcDtmFmtM2M: FmtDtm = Format$(datDAT, mcDatTxtMDY) & strSPC & Format$(datTIM, mcTimTxtHMZ)"
        PRINT "        Case mcDtmFmtM2S: FmtDtm = Format$(datDAT, mcDatTxtMDY) & strSPC & Format$(datTIM, mcTimTxtHMS)"
        PRINT "        Case Else:        FmtDtm = Format$(datDAT, mcDatTxtYMD) & strSPC & Format$(datTIM, mcTimTxtHMS)"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'###################################################################################################"
        PRINT "' Get Current Date/Time"
        PRINT "'###################################################################################################"
        PRINT "Public Function CurDat( _"
        PRINT "    Optional ByVal strFMT As String _"
        PRINT ") As String"
        PRINT "    CurDat = FmtDat(strFMT,Date)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Public Function CurTim( _"
        PRINT "    Optional ByVal strFMT As String _"
        PRINT ") As String"
        PRINT "    CurTim = FmtTim(strFMT,Time)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Public Function CurDtm( _"
        PRINT "    Optional ByVal strFMT As String _"
        PRINT ") As String"
        PRINT "    CurDtm = FmtDtm(strFMT,Date,Time)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- UTLVBG = Build module:  clsUtlVBG
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA UTLVBG
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecUTLVBG) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcZRO                 As Long = 0                           ' BTX: Empty Number"
        PRINT "Private Const mcMTY                 As String = """"                        ' BTX: Empty String"
        PRINT "Private Const mcSPC                 As String = "" ""                       ' BTX: Single Space"
        PRINT "Private Const mcDOT                 As String = "".""                       ' BTX: Period/Dot"
        PRINT "Private Const mcCMA                 As String = "",""                       ' BTX: Comma Constant"
        PRINT "Private Const mcDSH                 As String = ""-""                       ' BTX: Dash"
        PRINT "Private Const mcUBR                 As String = ""_""                       ' BTX: Underbar"
        PRINT "Private Const mcPIP                 As String = ""|""                       ' BTX: Pipe"
        PRINT "Private Const mcBKS                 As String = ""\\""                       ' BTX: Backslash"
        PRINT "Private Const mcFWS                 As String = ""/""                       ' BTX: Forwardslash"
        PRINT "Private Const mcSCN                 As String = "";""                       ' BTX: Semi-Colon"
        PRINT "Private Const mcCLN                 As String = "":""                       ' BTX: Colon"
        PRINT "Private Const mcTLD                 As String = ""~""                       ' BTX: Tilde"
        PRINT "Private Const mcTIK                 As String = ""`""                       ' BTX: Backtick"
        PRINT "Private Const mcSQT                 As String = ""'""                       ' BTX: Single Quote"
        PRINT "Private Const mcDQT                 As String = """"""""                      ' BTX: Double Quote"
        PRINT "Private Const mcCLF                 As String = vbCrLf                    ' BTX: CarrRtn/LineFeed"
        PRINT "Private Const mcNUL                 As Variant = Null                     ' BTX: Null Value"
        PRINT "Private Const mcYUP                 As Boolean = True                     ' BTX: Standard True"
        PRINT "Private Const mcNOP                 As Boolean = False                    ' BTX: Standard False"
        PRINT "Private Const mcALL                 As String = ""ALL""                     ' BTX: Standard ALL"
        PRINT "'***************************************************************************************************"
        PRINT "' SQL Construction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWHR                 As String = ""WHERE""                   ' SQL: Operator WHERE"
        PRINT "Private Const mcFST                 As String = ""    ""                    ' SQL: First criteria"
        PRINT "Private Const mcAND                 As String = ""AND ""                    ' SQL: Append criteria"
        PRINT "Private Const mcORR                 As String = ""OR  ""                    ' SQL: Append criteria"
        PRINT "Private Const mcNON                 As String = ""0=9""                     ' SQL: Records = None"
        PRINT "Private Const mcANY                 As String = ""1=1""                     ' SQL: Records = All/Any"
        PRINT "Private Const mcMG0                 As String = """"                        ' SQL: Margin: 0"
        PRINT "Private Const mcMG1                 As String = ""    ""                    ' SQL: Margin: 1"
        PRINT "Private Const mcMG2                 As String = ""        ""                ' SQL: Margin: 2"
        PRINT "Private mXTS                        As String * 1000                      ' SQL: Extend Space"
        PRINT "Private mSQL                        As String                             ' SQL: Statement Build"
        PRINT "Private mWHR                        As String                             ' SQL: Statement WHERE"
        PRINT "Private mAND                        As String * 4                         ' SQL: Separater AND"
        PRINT "Private mCMA                        As String                             ' SQL: Separater Comma"
        PRINT "Private mSEP                        As String                             ' SQL: Separater Placeholder"
        PRINT "'***************************************************************************************************"
        PRINT "' STD: Null Comparisons"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcNulVRN              As Variant = Null                     ' Null Value: Actual"
        PRINT "Private mcNulTXT                    As String                             ' Null Value: Text"
        PRINT "Private mcNulBLN                    As Boolean                            ' Null Value: Boolean"
        PRINT "Private mcNulNBR                    As Integer                            ' Null Value: Numeric"
        PRINT "Private mcNulDAT                    As Date                               ' Null Value: Date"
        PRINT "'***************************************************************************************************"
        PRINT "' STD: Statement Scope"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcStmScpPUB           As String = ""PUB""                     ' Scope: Public"
        PRINT "Private Const mcStmScpPRV           As String = ""PRV""                     ' Scope: Private"
        PRINT "'***************************************************************************************************"
        PRINT "' STD: Line Lengths"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcLinLenPOR           As Integer = 100                      ' 08.5 x 11.0 Protrait"
        PRINT "Private Const mcLinLenLND           As Integer = 149                      ' 08.5 x 11.0 Landscape"
        PRINT "'***************************************************************************************************"
        PRINT "' VAR: Standard Sizes"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDecSizMOD           As Integer = 35                       ' Declaration Size: Module"
        PRINT "Private Const mcDecSizFNC           As Integer = 25                       ' Declaration Size: Function"
        PRINT "Private Const mcDecSizPRM           As Integer = 20                       ' Declaration Size: Parameter"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVarSizMOD           As Integer = 27                       ' Variable Size: Module"
        PRINT "Private Const mcVarSizFNC           As Integer = 20                       ' Variable Size: Function"
        PRINT "Private Const mcVarSizPRM           As Integer = 15                       ' Variable Size: Parameter"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDtpSizMOD           As Integer = 35                       ' Datatype Size: Module"
        PRINT "Private Const mcDtpSizFNC           As Integer = 20                       ' Datatype Size: Function"
        PRINT "Private Const mcDtpSizPRM           As Integer = 15                       ' Datatype Size: Parameter"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmtSizMOD           As Integer = 74                       ' Comment margin (75 - 1)"
        PRINT "Private Const mcCmtSizFNC           As Integer = 62                       ' Comment margin (63 - 1)"
        PRINT "'***************************************************************************************************"
        PRINT "' VAR: Variable Level"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVarLvlUNK           As String = ""x""                       ' Level Prefix: Unknown"
        PRINT "Private Const mcVarLvlGLB           As String = ""g""                       ' Level Prefix: Global"
        PRINT "Private Const mcVarLvlMOD           As String = ""m""                       ' Level Prefix: Module"
        PRINT "Private Const mcVarLvlFNC           As String = ""p""                       ' Level Prefix: Function"
        PRINT "Private Const mcVarLvlNON           As String = """"                        ' Level Prefix: None"
        PRINT "'***************************************************************************************************"
        PRINT "' VAR: Variable DAO Types"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDaoTypUNK           As Integer = 0                          ' DAO Type: Unknown"
        PRINT "Private Const mcDaoTypBLN           As Integer = dbBoolean                  ' DAO Type: Boolean"
        PRINT "Private Const mcDaoTypBYT           As Integer = dbByte                     ' DAO Type: Byte"
        PRINT "Private Const mcDaoTypINT           As Integer = dbInteger                  ' DAO Type: Integer"
        PRINT "Private Const mcDaoTypLBG           As Integer = dbLong                     ' DAO Type: Long"
        PRINT "Private Const mcDaoTypCUR           As Integer = dbCurrency                 ' DAO Type: Currency"
        PRINT "Private Const mcDaoTypSGL           As Integer = dbSingle                   ' DAO Type: Single"
        PRINT "Private Const mcDaoTypDBL           As Integer = dbDouble                   ' DAO Type: Double"
        PRINT "Private Const mcDaoTypDAT           As Integer = dbDate                     ' DAO Type: Date"
        PRINT "Private Const mcDaoTypTIM           As Integer = dbTime                     ' DAO Type: Time"
        PRINT "Private Const mcDaoTypCHR           As Integer = dbChar                     ' DAO Type: String"
        PRINT "Private Const mcDaoTypTXT           As Integer = dbText                     ' DAO Type: Text"
        PRINT "'rivate Const mcDaoTypVRN           As Integer = db???                      ' DAO Type: Variant"
        PRINT "'rivate Const mcDaoTypOBJ           As Integer = db???                      ' DAO Type: Object"
        PRINT "Private Const mcDaoTypMEM           As Integer = dbMemo                     ' DAO Type: Memo"
        PRINT "'rivate Const mcDaoTypENM           As Integer = db???                      ' DAO Type: EnumConstant"
        PRINT "'rivate Const mcDaoTypRST           As Integer = db???                      ' DAO Type: RecordSet"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Const mcDaoTypBIG           As Integer = dbBigInt                   ' DAO Type: DAO Specific"
        PRINT "Private Const mcDaoTypNUM           As Integer = dbNumeric                  ' DAO Type: DAO Specific"
        PRINT "Private Const mcDaoTypDEC           As Integer = dbDecimal                  ' DAO Type: DAO Specific"
        PRINT "Private Const mcDaoTypFLT           As Integer = dbFloat                    ' DAO Type: DAO Specific"
        PRINT "Private Const mcDaoTypBIN           As Integer = dbBinary                   ' DAO Type: DAO Specific"
        PRINT "Private Const mcDaoTypVBN           As Integer = dbVarBinary                ' DAO Type: DAO Specific"
        PRINT "Private Const mcDaoTypLBN           As Integer = dbLongBinary               ' DAO Type: DAO Specific"
        PRINT "Private Const mcDaoTypGID           As Integer = dbGUID                     ' DAO Type: DAO Specific"
        PRINT "Private Const mcDaoTypSTM           As Integer = dbTimeStamp                ' DAO Type: DAO Specific"
        PRINT "'***************************************************************************************************"
        PRINT "' VAR: Variable Prefixes"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVarPfxUNK           As String = ""???""                     ' Datatype Prefix: Unknown"
        PRINT "Private Const mcVarPfxBLN           As String = ""bln""                     ' Datatype Prefix: Boolean"
        PRINT "Private Const mcVarPfxBYT           As String = ""byt""                     ' Datatype Prefix: Byte"
        PRINT "Private Const mcVarPfxINT           As String = ""int""                     ' Datatype Prefix: Integer"
        PRINT "Private Const mcVarPfxLNG           As String = ""lng""                     ' Datatype Prefix: Long"
        PRINT "Private Const mcVarPfxCUR           As String = ""cur""                     ' Datatype Prefix: Currency"
        PRINT "Private Const mcVarPfxSGL           As String = ""sgl""                     ' Datatype Prefix: Single"
        PRINT "Private Const mcVarPfxDBL           As String = ""dbl""                     ' Datatype Prefix: Double"
        PRINT "Private Const mcVarPfxDAT           As String = ""dat""                     ' Datatype Prefix: Date"
        PRINT "Private Const mcVarPfxTIM           As String = ""tim""                     ' Datatype Prefix: Time"
        PRINT "Private Const mcVarPfxSTR           As String = ""str""                     ' Datatype Prefix: String"
        PRINT "Private Const mcVarPfxTXT           As String = ""str""                     ' Datatype Prefix: Text"
        PRINT "Private Const mcVarPfxVRN           As String = ""vrn""                     ' Datatype Prefix: Variant"
        PRINT "Private Const mcVarPfxOBJ           As String = ""ole""                     ' Datatype Prefix: Object"
        PRINT "Private Const mcVarPfxMEM           As String = ""mem""                     ' Datatype Prefix: Memo"
        PRINT "Private Const mcVarPfxENM           As String = ""enm""                     ' Datatype Prefix: EnumConstant"
        PRINT "Private Const mcVarPfxRST           As String = ""rst""                     ' Datatype Prefix: RecordSet"
        PRINT "'***************************************************************************************************"
        PRINT "' VAR: Variable Types"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVarTypUNK           As String = ""Unknown""                 ' Datatype Name: Unknown"
        PRINT "Private Const mcVarTypBLN           As String = ""Boolean""                 ' Datatype Name: Boolean"
        PRINT "Private Const mcVarTypBYT           As String = ""Byte""                    ' Datatype Name: Byte"
        PRINT "Private Const mcVarTypINT           As String = ""Integer""                 ' Datatype Name: Integer"
        PRINT "Private Const mcVarTypLNG           As String = ""Long""                    ' Datatype Name: Long"
        PRINT "Private Const mcVarTypCUR           As String = ""Currency""                ' Datatype Name: Currency"
        PRINT "Private Const mcVarTypSGL           As String = ""Single""                  ' Datatype Name: Single"
        PRINT "Private Const mcVarTypDBL           As String = ""Double""                  ' Datatype Name: Double"
        PRINT "Private Const mcVarTypDAT           As String = ""Date""                    ' Datatype Name: Date"
        PRINT "Private Const mcVarTypTIM           As String = ""Date""                    ' Datatype Name: Time"
        PRINT "Private Const mcVarTypSTR           As String = ""String""                  ' Datatype Name: String"
        PRINT "Private Const mcVarTypTXT           As String = ""String""                  ' Datatype Name: Text"
        PRINT "Private Const mcVarTypVRN           As String = ""Variant""                 ' Datatype Name: Variant"
        PRINT "Private Const mcVarTypOBJ           As String = ""Variant""                 ' Datatype Name: Object"
        PRINT "Private Const mcVarTypMEM           As String = ""String""                  ' Datatype Name: Memo"
        PRINT "Private Const mcVarTypENM           As String = ""EnumConstant""            ' Datatype Name: EnumConstant"
        PRINT "Private Const mcVarTypRST           As String = ""RecordSet""               ' Datatype Name: RecordSet"
        PRINT "'***************************************************************************************************"
        PRINT "' DCT: Data Catagory Flags"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatCatUNK           As String = ""???""                     ' Data Category: Unknown"
        PRINT "Private Const mcDatCatBLN           As String = ""BLN""                     ' Data Category: Boolean"
        PRINT "Private Const mcDatCatNBR           As String = ""NBR""                     ' Data Category: Numeric"
        PRINT "Private Const mcDatCatDAT           As String = ""DAT""                     ' Data Category: Date/Time"
        PRINT "Private Const mcDatCatCHR           As String = ""CHR""                     ' Data Category: Character"
        PRINT "Private Const mcDatCatTXT           As String = ""TXT""                     ' Data Category: Text"
        PRINT "Private Const mcDatCatGID           As String = ""GID""                     ' Data Category: UniqueIdent"
        PRINT "Private Const mcDatCatROV           As String = ""ROV""                     ' Data Category: RowVersion"
        PRINT "Private Const mcDatCatBNY           As String = ""BNY""                     ' Data Category: Binary"
        PRINT "Private Const mcDatCatVRN           As String = ""VRN""                     ' Data Category: Variant"
        PRINT "'***************************************************************************************************"
        PRINT "' DCT: Data Values"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatValUNK           As String = ""???""                     ' Data Value: Unknown"
        PRINT "Private Const mcDatValBLN           As String = ""False""                   ' Data Value: Boolean"
        PRINT "Private Const mcDatValNBR           As String = ""0""                       ' Data Value: Numeric"
        PRINT "Private Const mcDatValDAT           As String = ""Null""                    ' Data Value: Date/Time"
        PRINT "Private Const mcDatValCHR           As String = """"""""""""                    ' Data Value: Character"
        PRINT "Private Const mcDatValTXT           As String = """"""""""""                    ' Data Value: Text"
        PRINT "Private Const mcDatValGID           As String = ""Null""                    ' Data Value: UniqueIdent"
        PRINT "Private Const mcDatValROV           As String = ""Null""                    ' Data Value: RowVersion"
        PRINT "Private Const mcDatValBNY           As String = ""Null""                    ' Data Value: Binary"
        PRINT "Private Const mcDatValVRN           As String = ""Null""                    ' Data Value: Variant"
        PRINT "'***************************************************************************************************"
        PRINT "' DCT: Data Single Quotes"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatSqtUNK           As String = mcMTY                     ' Data Quote: Unknown"
        PRINT "Private Const mcDatSqtBLN           As String = mcMTY                     ' Data Quote: Boolean"
        PRINT "Private Const mcDatSqtNBR           As String = mcMTY                     ' Data Quote: Numeric"
        PRINT "Private Const mcDatSqtDAT           As String = mcSQT                     ' Data Quote: Date/Time"
        PRINT "Private Const mcDatSqtCHR           As String = mcSQT                     ' Data Quote: Character"
        PRINT "Private Const mcDatSqtTXT           As String = mcSQT                     ' Data Quote: Text"
        PRINT "Private Const mcDatSqtGID           As String = mcSQT                     ' Data Quote: UniqueIdent"
        PRINT "Private Const mcDatSqtROV           As String = mcSQT                     ' Data Quote: RowVersion"
        PRINT "Private Const mcDatSqtBNY           As String = mcSQT                     ' Data Quote: Binary"
        PRINT "Private Const mcDatSqtVRN           As String = mcSQT                     ' Data Quote: Variant"
        PRINT "'***************************************************************************************************"
        PRINT "' DCT: Data Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatConUNK           As String = ""mc???""                   ' Data Const: Unknown"
        PRINT "Private Const mcDatConBLN           As String = ""mcNOP""                   ' Data Const: Boolean"
        PRINT "Private Const mcDatConNBR           As String = ""mcZRO""                   ' Data Const: Numeric"
        PRINT "Private Const mcDatConDAT           As String = ""mcNUL""                   ' Data Const: Date/Time"
        PRINT "Private Const mcDatConCHR           As String = ""mcMTY""                   ' Data Const: Character"
        PRINT "Private Const mcDatConTXT           As String = ""mcMTY""                   ' Data Const: Text"
        PRINT "Private Const mcDatConGID           As String = ""mcNUL""                   ' Data Const: UniqueIdent"
        PRINT "Private Const mcDatConROV           As String = ""mcNUL""                   ' Data Const: RowVersion"
        PRINT "Private Const mcDatConBNY           As String = ""mcNUL""                   ' Data Const: Binary"
        PRINT "Private Const mcDatConVRN           As String = ""mcNUL""                   ' Data Const: Variant"
        PRINT "'***************************************************************************************************"
        PRINT "' CTL: MSAccess Control Type Number"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlTypUNK           As Integer = 0"
        PRINT "Private Const mcCtlTypOBJ           As Integer = acBoundObjectFrame"
        PRINT "Private Const mcCtlTypCHK           As Integer = acCheckBox"
        PRINT "Private Const mcCtlTypCBO           As Integer = acComboBox"
        PRINT "Private Const mcCtlTypCMD           As Integer = acCommandButton"
        PRINT "Private Const mcCtlTypCUS           As Integer = acCustomControl"
        PRINT "Private Const mcCtlTypIMG           As Integer = acImage"
        PRINT "Private Const mcCtlTypLBL           As Integer = acLabel"
        PRINT "Private Const mcCtlTypLIN           As Integer = acLine"
        PRINT "Private Const mcCtlTypLST           As Integer = acListBox"
        PRINT "Private Const mcCtlTypFRA           As Integer = acObjectFrame"
        PRINT "Private Const mcCtlTypOPT           As Integer = acOptionButton"
        PRINT "Private Const mcCtlTypGRP           As Integer = acOptionGroup"
        PRINT "Private Const mcCtlTypPAG           As Integer = acPage"
        PRINT "Private Const mcCtlTypBRK           As Integer = acPageBreak"
        PRINT "Private Const mcCtlTypBOX           As Integer = acRectangle"
        PRINT "Private Const mcCtlTypSFM           As Integer = acSubform"
        PRINT "Private Const mcCtlTypTAB           As Integer = acTabCtl"
        PRINT "Private Const mcCtlTypTXT           As Integer = acTextBox"
        PRINT "Private Const mcCtlTypTGL           As Integer = acToggleButton"
        PRINT "'***************************************************************************************************"
        PRINT "' CTL: MSAccess Control Type Text"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlTyxUNK           As String = ""UnknownControlType"""
        PRINT "Private Const mcCtlTyxOBJ           As String = ""acBoundObjectFrame"""
        PRINT "Private Const mcCtlTyxCHK           As String = ""acCheckBox"""
        PRINT "Private Const mcCtlTyxCBO           As String = ""acComboBox"""
        PRINT "Private Const mcCtlTyxCMD           As String = ""acCommandButton"""
        PRINT "Private Const mcCtlTyxCUS           As String = ""acCustomControl"""
        PRINT "Private Const mcCtlTyxIMG           As String = ""acImage"""
        PRINT "Private Const mcCtlTyxLBL           As String = ""acLabel"""
        PRINT "Private Const mcCtlTyxLIN           As String = ""acLine"""
        PRINT "Private Const mcCtlTyxLST           As String = ""acListBox"""
        PRINT "Private Const mcCtlTyxFRA           As String = ""acObjectFrame"""
        PRINT "Private Const mcCtlTyxOPT           As String = ""acOptionButton"""
        PRINT "Private Const mcCtlTyxGRP           As String = ""acOptionGroup"""
        PRINT "Private Const mcCtlTyxPAG           As String = ""acPage"""
        PRINT "Private Const mcCtlTyxBRK           As String = ""acPageBreak"""
        PRINT "Private Const mcCtlTyxBOX           As String = ""acRectangle"""
        PRINT "Private Const mcCtlTyxSFM           As String = ""acSubform"""
        PRINT "Private Const mcCtlTyxTAB           As String = ""acTabCtl"""
        PRINT "Private Const mcCtlTyxTXT           As String = ""acTextBox"""
        PRINT "Private Const mcCtlTyxTGL           As String = ""acToggleButton"""
        PRINT "'***************************************************************************************************"
        PRINT "' CTL: Standard Control Prefix"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlPfxUNK           As String = ""???"""
        PRINT "Private Const mcCtlPfxOBJ           As String = ""obj"""
        PRINT "Private Const mcCtlPfxCHK           As String = ""chk"""
        PRINT "Private Const mcCtlPfxCBO           As String = ""cbo"""
        PRINT "Private Const mcCtlPfxCMD           As String = ""cmd"""
        PRINT "Private Const mcCtlPfxCUS           As String = ""cus"""
        PRINT "Private Const mcCtlPfxIMG           As String = ""img"""
        PRINT "Private Const mcCtlPfxLBL           As String = ""lbl"""
        PRINT "Private Const mcCtlPfxLIN           As String = ""lin"""
        PRINT "Private Const mcCtlPfxLST           As String = ""lst"""
        PRINT "Private Const mcCtlPfxFRA           As String = ""fra"""
        PRINT "Private Const mcCtlPfxOPT           As String = ""opt"""
        PRINT "Private Const mcCtlPfxGRP           As String = ""grp"""
        PRINT "Private Const mcCtlPfxPAG           As String = ""pag"""
        PRINT "Private Const mcCtlPfxBRK           As String = ""brk"""
        PRINT "Private Const mcCtlPfxBOX           As String = ""box"""
        PRINT "Private Const mcCtlPfxSFM           As String = ""sfm"""
        PRINT "Private Const mcCtlPfxTAB           As String = ""tab"""
        PRINT "Private Const mcCtlPfxTXT           As String = ""txt"""
        PRINT "Private Const mcCtlPfxTGL           As String = ""tgl"""
        PRINT "'***************************************************************************************************"
        PRINT "' CTL: Standard Names/Mechanisms"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatCtl              As String = ""Data"""
        PRINT "Private Const mcIfoCtl              As String = ""Info"""
        PRINT "Private Const mcNoMech              As String = """""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmMch              As String = ""FrmMch"""
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Const mcSbyCtl              As String = ""SrtBy"""
        PRINT "Private Const mcSbyCmd              As String = ""cmdSrtBy"""
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Const mcGbyCtl              As String = ""GrpBy"""
        PRINT "Private Const mcGbyTgl              As String = ""tglGrpBy"""
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Const mcSlnCtl              As String = ""SelOn"""
        PRINT "Private Const mcSlnTxt              As String = ""txtSelOn"""
        PRINT "Private Const mcSlnCbo              As String = ""cboSelOn"""
        PRINT "Private Const mcSlnChk              As String = ""chkSelOn"""
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private Const mcFndCtl              As String = ""FndOn"""
        PRINT "Private Const mcFndTxt              As String = ""txtFndOn"""
        PRINT "Private Const mcFndCbo              As String = ""cboFndOn"""
        PRINT "Private Const mcFndChk              As String = ""chkFndOn"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmSfm              As String = ""FrmSfm"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmSup              As String = ""FrmSup"""
        PRINT "Private Const mcFrmHcr              As String = ""cmdHideCursor"""
        PRINT "Private Const mcFrmTt1              As String = ""lblTitle01"""
        PRINT "Private Const mcFrmTt2              As String = ""lblTitle02"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmCmd              As String = ""FrmCmd"""
        PRINT "Private Const mcFrmRfh              As String = ""cmdRefreshForm"""
        PRINT "Private Const mcFrmAdn              As String = ""cmdAddNewRecord"""
        PRINT "Private Const mcFrmSav              As String = ""cmdSaveRecord"""
        PRINT "Private Const mcFrmUnd              As String = ""cmdUndoRecord"""
        PRINT "Private Const mcFrmDel              As String = ""cmdDeleteRecord"""
        PRINT "Private Const mcFrmCls              As String = ""cmdCloseForm"""
        PRINT "Private Const mcFrmQit              As String = ""cmdQuit"""
        PRINT "Private Const mcFrmAcp              As String = ""cmdAccept"""
        PRINT "Private Const mcFrmCan              As String = ""cmdCancel"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMngSQL              As String = ""MngSQL"""
        PRINT "Private Const mcFndSQL              As String = ""tglFndSQL"""
        PRINT "Private Const mcRunSQL              As String = ""tglRunSQL"""
        PRINT "Private Const mcExcSQL              As String = ""cmdRunSQL"""
        PRINT "Private Const mcClrSQL              As String = ""tglClrSQL"""
        PRINT "Private Const mcWrtSQL              As String = ""tglWrtSQL"""
        PRINT "Private Const mcCntSQL              As String = ""txtCntSQL"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmdMch              As String = ""CmdMch"""
        PRINT "Private Const mcCmdLst              As String = ""cboCmdLst"""
        PRINT "Private Const mcCmdRun              As String = ""tglRunCmd"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptMch              As String = ""RptMch"""
        PRINT "Private Const mcRptLst              As String = ""cboRptLst"""
        PRINT "Private Const mcRptPrn              As String = ""tglPrnRpt"""
        PRINT "Private Const mcRptPrv              As String = ""tglPrvRpt"""
        PRINT "'***************************************************************************************************"
        PRINT "' RGN: Regen Codes"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRgnTblVBA           As String = ""VBATBL"""
        PRINT "Private Const mcRgnTblGEN           As String = ""GENTBL"""
        PRINT "Private Const mcRgnTblREG           As String = ""REGTBL"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRgnCmdVBA           As String = ""VBACMD"""
        PRINT "Private Const mcRgnCmdGEN           As String = ""GENCMD"""
        PRINT "Private Const mcRgnCmdREG           As String = ""REGCMD"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRgnRptVBA           As String = ""VBARPT"""
        PRINT "Private Const mcRgnRptGEN           As String = ""GENRPT"""
        PRINT "Private Const mcRgnRptREG           As String = ""REGRPT"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize Module Objects"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Objects"
        PRINT "    ' Initialize Defaults"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "    mXTS = """""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' STD: Null Comparisons"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get NulVRN() As Variant:                             NulVRN = mcNulVRN: End Property"
        PRINT "Public Property Get NulTxt() As String:                              NulTxt = mcNulTXT: End Property"
        PRINT "Public Property Get NulBLN() As Boolean:                             NulBLN = mcNulBLN: End Property"
        PRINT "Public Property Get NulNBR() As Integer:                             NulNBR = mcNulNBR: End Property"
        PRINT "Public Property Get NulDAT() As Date:                                NulDAT = mcNulDAT: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' STD: Statement Scope"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get StmScpPUB() As Integer:                    StmScpPUB = mcStmScpPUB: End Property"
        PRINT "Public Property Get StmScpPRV() As Integer:                    StmScpPRV = mcStmScpPRV: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' STD: Line Lengths"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get LinLenPOR() As Integer:                    LinLenPOR = mcLinLenPOR: End Property"
        PRINT "Public Property Get LinLenLND() As Integer:                    LinLenLND = mcLinLenLND: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VAR: Standard Sizes"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DecSizMOD() As Integer:                    DecSizMOD = mcDecSizMOD: End Property"
        PRINT "Public Property Get DecSizFNC() As Integer:                    DecSizFNC = mcDecSizFNC: End Property"
        PRINT "Public Property Get DecSizPRM() As Integer:                    DecSizPRM = mcDecSizPRM: End Property"
        PRINT "Public Property Get VarSizMOD() As Integer:                    VarSizMOD = mcVarSizMOD: End Property"
        PRINT "Public Property Get VarSizFNC() As Integer:                    VarSizFNC = mcVarSizFNC: End Property"
        PRINT "Public Property Get VarSizPRM() As Integer:                    VarSizPRM = mcVarSizPRM: End Property"
        PRINT "Public Property Get DtpSizMOD() As Integer:                    DtpSizMOD = mcDtpSizMOD: End Property"
        PRINT "Public Property Get DtpSizFNC() As Integer:                    DtpSizFNC = mcDtpSizFNC: End Property"
        PRINT "Public Property Get DtpSizPRM() As Integer:                    DtpSizPRM = mcDtpSizPRM: End Property"
        PRINT "Public Property Get CmtSizMOD() As Integer:                    CmtSizMOD = mcCmtSizMOD: End Property"
        PRINT "Public Property Get CmtSizFNC() As Integer:                    CmtSizFNC = mcCmtSizFNC: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VAR: Variable Scope"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VarLvlUNK() As String:                     VarLvlUNK = mcVarLvlUNK: End Property"
        PRINT "Public Property Get VarLvlGLB() As String:                     VarLvlGLB = mcVarLvlGLB: End Property"
        PRINT "Public Property Get VarLvlMOD() As String:                     VarLvlMOD = mcVarLvlMOD: End Property"
        PRINT "Public Property Get VarLvlFNC() As String:                     VarLvlFNC = mcVarLvlFNC: End Property"
        PRINT "Public Property Get VarLvlNON() As String:                     VarLvlNON = mcVarLvlNON: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VAR: Variable DAO Types"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DaoTypUNK() As Integer:                    DaoTypUNK = mcDaoTypUNK: End Property"
        PRINT "Public Property Get DaoTypBLN() As Integer:                    DaoTypBLN = mcDaoTypBLN: End Property"
        PRINT "Public Property Get DaoTypBYT() As Integer:                    DaoTypBYT = mcDaoTypBYT: End Property"
        PRINT "Public Property Get DaoTypINT() As Integer:                    DaoTypINT = mcDaoTypINT: End Property"
        PRINT "Public Property Get DaoTypLBG() As Integer:                    DaoTypLBG = mcDaoTypLBG: End Property"
        PRINT "Public Property Get DaoTypCUR() As Integer:                    DaoTypCUR = mcDaoTypCUR: End Property"
        PRINT "Public Property Get DaoTypSGL() As Integer:                    DaoTypSGL = mcDaoTypSGL: End Property"
        PRINT "Public Property Get DaoTypDBL() As Integer:                    DaoTypDBL = mcDaoTypDBL: End Property"
        PRINT "Public Property Get DaoTypDAT() As Integer:                    DaoTypDAT = mcDaoTypDAT: End Property"
        PRINT "Public Property Get DaoTypTIM() As Integer:                    DaoTypTIM = mcDaoTypTIM: End Property"
        PRINT "Public Property Get DaoTypCHR() As Integer:                    DaoTypCHR = mcDaoTypCHR: End Property"
        PRINT "Public Property Get DaoTypTXT() As Integer:                    DaoTypTXT = mcDaoTypTXT: End Property"
        PRINT "'ublic Property Get DaoTypVRN() As Integer:                    DaoTypVRN = mcDaoTypVRN: End Property"
        PRINT "'ublic Property Get DaoTypOBJ() As Integer:                    DaoTypOBJ = mcDaoTypOBJ: End Property"
        PRINT "Public Property Get DaoTypMEM() As Integer:                    DaoTypMEM = mcDaoTypMEM: End Property"
        PRINT "'ublic Property Get DaoTypENM() As Integer:                    DaoTypENM = mcDaoTypENM: End Property"
        PRINT "'ublic Property Get DaoTypRST() As Integer:                    DaoTypRST = mcDaoTypRST: End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get DaoTypBIG() As Integer:                    DaoTypBIG = mcDaoTypBIG: End Property"
        PRINT "Public Property Get DaoTypNUM() As Integer:                    DaoTypNUM = mcDaoTypNUM: End Property"
        PRINT "Public Property Get DaoTypDEC() As Integer:                    DaoTypDEC = mcDaoTypDEC: End Property"
        PRINT "Public Property Get DaoTypFLT() As Integer:                    DaoTypFLT = mcDaoTypFLT: End Property"
        PRINT "Public Property Get DaoTypBIN() As Integer:                    DaoTypBIN = mcDaoTypBIN: End Property"
        PRINT "Public Property Get DaoTypVBN() As Integer:                    DaoTypVBN = mcDaoTypVBN: End Property"
        PRINT "Public Property Get DaoTypLBN() As Integer:                    DaoTypLBN = mcDaoTypLBN: End Property"
        PRINT "Public Property Get DaoTypGID() As Integer:                    DaoTypGID = mcDaoTypGID: End Property"
        PRINT "Public Property Get DaoTypSTM() As Integer:                    DaoTypSTM = mcDaoTypSTM: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VAR: Variable Prefixes"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VarPfxUNK() As String:                     VarPfxUNK = mcVarPfxUNK: End Property"
        PRINT "Public Property Get VarPfxBLN() As String:                     VarPfxBLN = mcVarPfxBLN: End Property"
        PRINT "Public Property Get VarPfxBYT() As String:                     VarPfxBYT = mcVarPfxBYT: End Property"
        PRINT "Public Property Get VarPfxINT() As String:                     VarPfxINT = mcVarPfxINT: End Property"
        PRINT "Public Property Get VarPfxLNG() As String:                     VarPfxLNG = mcVarPfxLNG: End Property"
        PRINT "Public Property Get VarPfxCUR() As String:                     VarPfxCUR = mcVarPfxCUR: End Property"
        PRINT "Public Property Get VarPfxSGL() As String:                     VarPfxSGL = mcVarPfxSGL: End Property"
        PRINT "Public Property Get VarPfxDBL() As String:                     VarPfxDBL = mcVarPfxDBL: End Property"
        PRINT "Public Property Get VarPfxDAT() As String:                     VarPfxDAT = mcVarPfxDAT: End Property"
        PRINT "Public Property Get VarPfxTIM() As String:                     VarPfxTIM = mcVarPfxTIM: End Property"
        PRINT "Public Property Get VarPfxSTR() As String:                     VarPfxSTR = mcVarPfxSTR: End Property"
        PRINT "Public Property Get VarPfxTXT() As String:                     VarPfxTXT = mcVarPfxTXT: End Property"
        PRINT "Public Property Get VarPfxVRN() As String:                     VarPfxVRN = mcVarPfxVRN: End Property"
        PRINT "Public Property Get VarPfxOBJ() As String:                     VarPfxOBJ = mcVarPfxOBJ: End Property"
        PRINT "Public Property Get VarPfxMEM() As String:                     VarPfxMEM = mcVarPfxMEM: End Property"
        PRINT "Public Property Get VarPfxENM() As String:                     VarPfxENM = mcVarPfxENM: End Property"
        PRINT "Public Property Get VarPfxRST() As String:                     VarPfxRST = mcVarPfxRST: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VAR: Variable Types"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VarTypUNK() As String:                     VarTypUNK = mcVarTypUNK: End Property"
        PRINT "Public Property Get VarTypBLN() As String:                     VarTypBLN = mcVarTypBLN: End Property"
        PRINT "Public Property Get VarTypBYT() As String:                     VarTypBYT = mcVarTypBYT: End Property"
        PRINT "Public Property Get VarTypINT() As String:                     VarTypINT = mcVarTypINT: End Property"
        PRINT "Public Property Get VarTypLNG() As String:                     VarTypLNG = mcVarTypLNG: End Property"
        PRINT "Public Property Get VarTypCUR() As String:                     VarTypCUR = mcVarTypCUR: End Property"
        PRINT "Public Property Get VarTypSGL() As String:                     VarTypSGL = mcVarTypSGL: End Property"
        PRINT "Public Property Get VarTypDBL() As String:                     VarTypDBL = mcVarTypDBL: End Property"
        PRINT "Public Property Get VarTypDAT() As String:                     VarTypDAT = mcVarTypDAT: End Property"
        PRINT "Public Property Get VarTypTIM() As String:                     VarTypTIM = mcVarTypTIM: End Property"
        PRINT "Public Property Get VarTypSTR() As String:                     VarTypSTR = mcVarTypSTR: End Property"
        PRINT "Public Property Get VarTypTXT() As String:                     VarTypTXT = mcVarTypTXT: End Property"
        PRINT "Public Property Get VarTypVRN() As String:                     VarTypVRN = mcVarTypVRN: End Property"
        PRINT "Public Property Get VarTypOBJ() As String:                     VarTypOBJ = mcVarTypOBJ: End Property"
        PRINT "Public Property Get VarTypMEM() As String:                     VarTypMEM = mcVarTypMEM: End Property"
        PRINT "Public Property Get VarTypENM() As String:                     VarTypENM = mcVarTypENM: End Property"
        PRINT "Public Property Get VarTypRST() As String:                     VarTypRST = mcVarTypRST: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' DCT: Data Catagory Flags"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DatCatUNK() As String:                     DatCatUNK = mcDatCatUNK: End Property"
        PRINT "Public Property Get DatCatBLN() As String:                     DatCatBLN = mcDatCatBLN: End Property"
        PRINT "Public Property Get DatCatNBR() As String:                     DatCatNBR = mcDatCatNBR: End Property"
        PRINT "Public Property Get DatCatDAT() As String:                     DatCatDAT = mcDatCatDAT: End Property"
        PRINT "Public Property Get DatCatCHR() As String:                     DatCatCHR = mcDatCatCHR: End Property"
        PRINT "Public Property Get DatCatTXT() As String:                     DatCatTXT = mcDatCatTXT: End Property"
        PRINT "Public Property Get DatCatGID() As String:                     DatCatGID = mcDatCatGID: End Property"
        PRINT "Public Property Get DatCatROV() As String:                     DatCatROV = mcDatCatROV: End Property"
        PRINT "Public Property Get DatCatBNY() As String:                     DatCatBNY = mcDatCatBNY: End Property"
        PRINT "Public Property Get DatCatVRN() As String:                     DatCatVRN = mcDatCatVRN: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' DCT: Data Values"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DatValUNK() As String:                     DatValUNK = mcDatValUNK: End Property"
        PRINT "Public Property Get DatValBLN() As String:                     DatValBLN = mcDatValBLN: End Property"
        PRINT "Public Property Get DatValNBR() As String:                     DatValNBR = mcDatValNBR: End Property"
        PRINT "Public Property Get DatValDAT() As String:                     DatValDAT = mcDatValDAT: End Property"
        PRINT "Public Property Get DatValCHR() As String:                     DatValCHR = mcDatValCHR: End Property"
        PRINT "Public Property Get DatValTXT() As String:                     DatValTXT = mcDatValTXT: End Property"
        PRINT "Public Property Get DatValGID() As String:                     DatValGID = mcDatValGID: End Property"
        PRINT "Public Property Get DatValROV() As String:                     DatValROV = mcDatValROV: End Property"
        PRINT "Public Property Get DatValBNY() As String:                     DatValBNY = mcDatValBNY: End Property"
        PRINT "Public Property Get DatValVRN() As String:                     DatValVRN = mcDatValVRN: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' DCT: Data Single Quotes"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DatSqtUNK() As String:                     DatSqtUNK = mcDatSqtUNK: End Property"
        PRINT "Public Property Get DatSqtBLN() As String:                     DatSqtBLN = mcDatSqtBLN: End Property"
        PRINT "Public Property Get DatSqtNBR() As String:                     DatSqtNBR = mcDatSqtNBR: End Property"
        PRINT "Public Property Get DatSqtDAT() As String:                     DatSqtDAT = mcDatSqtDAT: End Property"
        PRINT "Public Property Get DatSqtCHR() As String:                     DatSqtCHR = mcDatSqtCHR: End Property"
        PRINT "Public Property Get DatSqtTXT() As String:                     DatSqtTXT = mcDatSqtTXT: End Property"
        PRINT "Public Property Get DatSqtGID() As String:                     DatSqtGID = mcDatSqtGID: End Property"
        PRINT "Public Property Get DatSqtROV() As String:                     DatSqtROV = mcDatSqtROV: End Property"
        PRINT "Public Property Get DatSqtBNY() As String:                     DatSqtBNY = mcDatSqtBNY: End Property"
        PRINT "Public Property Get DatSqtVRN() As String:                     DatSqtVRN = mcDatSqtVRN: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' DCT: Data Constants"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DatConUNK() As String:                     DatConUNK = mcDatConUNK: End Property"
        PRINT "Public Property Get DatConBLN() As String:                     DatConBLN = mcDatConBLN: End Property"
        PRINT "Public Property Get DatConNBR() As String:                     DatConNBR = mcDatConNBR: End Property"
        PRINT "Public Property Get DatConDAT() As String:                     DatConDAT = mcDatConDAT: End Property"
        PRINT "Public Property Get DatConCHR() As String:                     DatConCHR = mcDatConCHR: End Property"
        PRINT "Public Property Get DatConTXT() As String:                     DatConTXT = mcDatConTXT: End Property"
        PRINT "Public Property Get DatConGID() As String:                     DatConGID = mcDatConGID: End Property"
        PRINT "Public Property Get DatConROV() As String:                     DatConROV = mcDatConROV: End Property"
        PRINT "Public Property Get DatConBNY() As String:                     DatConBNY = mcDatConBNY: End Property"
        PRINT "Public Property Get DatConVRN() As String:                     DatConVRN = mcDatConVRN: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' CTL: MSAccess Control Type Number"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get CtlTypUNK() As Integer:                    CtlTypUNK = mcCtlTypUNK: End Property"
        PRINT "Public Property Get CtlTypOBJ() As Integer:                    CtlTypOBJ = mcCtlTypOBJ: End Property"
        PRINT "Public Property Get CtlTypCHK() As Integer:                    CtlTypCHK = mcCtlTypCHK: End Property"
        PRINT "Public Property Get CtlTypCBO() As Integer:                    CtlTypCBO = mcCtlTypCBO: End Property"
        PRINT "Public Property Get CtlTypCMD() As Integer:                    CtlTypCMD = mcCtlTypCMD: End Property"
        PRINT "Public Property Get CtlTypCUS() As Integer:                    CtlTypCUS = mcCtlTypCUS: End Property"
        PRINT "Public Property Get CtlTypIMG() As Integer:                    CtlTypIMG = mcCtlTypIMG: End Property"
        PRINT "Public Property Get CtlTypLBL() As Integer:                    CtlTypLBL = mcCtlTypLBL: End Property"
        PRINT "Public Property Get CtlTypLIN() As Integer:                    CtlTypLIN = mcCtlTypLIN: End Property"
        PRINT "Public Property Get CtlTypLST() As Integer:                    CtlTypLST = mcCtlTypLST: End Property"
        PRINT "Public Property Get CtlTypFRA() As Integer:                    CtlTypFRA = mcCtlTypFRA: End Property"
        PRINT "Public Property Get CtlTypOPT() As Integer:                    CtlTypOPT = mcCtlTypOPT: End Property"
        PRINT "Public Property Get CtlTypGRP() As Integer:                    CtlTypGRP = mcCtlTypGRP: End Property"
        PRINT "Public Property Get CtlTypPAG() As Integer:                    CtlTypPAG = mcCtlTypPAG: End Property"
        PRINT "Public Property Get CtlTypBRK() As Integer:                    CtlTypBRK = mcCtlTypBRK: End Property"
        PRINT "Public Property Get CtlTypBOX() As Integer:                    CtlTypBOX = mcCtlTypBOX: End Property"
        PRINT "Public Property Get CtlTypSFM() As Integer:                    CtlTypSFM = mcCtlTypSFM: End Property"
        PRINT "Public Property Get CtlTypTAB() As Integer:                    CtlTypTAB = mcCtlTypTAB: End Property"
        PRINT "Public Property Get CtlTypTXT() As Integer:                    CtlTypTXT = mcCtlTypTXT: End Property"
        PRINT "Public Property Get CtlTypTGL() As Integer:                    CtlTypTGL = mcCtlTypTGL: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' CTL: MSAccess Control Type Text"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get CtlTyxUNK() As Integer:                    CtlTyxUNK = mcCtlTyxUNK: End Property"
        PRINT "Public Property Get CtlTyxOBJ() As Integer:                    CtlTyxOBJ = mcCtlTyxOBJ: End Property"
        PRINT "Public Property Get CtlTyxCHK() As Integer:                    CtlTyxCHK = mcCtlTyxCHK: End Property"
        PRINT "Public Property Get CtlTyxCBO() As Integer:                    CtlTyxCBO = mcCtlTyxCBO: End Property"
        PRINT "Public Property Get CtlTyxCMD() As Integer:                    CtlTyxCMD = mcCtlTyxCMD: End Property"
        PRINT "Public Property Get CtlTyxCUS() As Integer:                    CtlTyxCUS = mcCtlTyxCUS: End Property"
        PRINT "Public Property Get CtlTyxIMG() As Integer:                    CtlTyxIMG = mcCtlTyxIMG: End Property"
        PRINT "Public Property Get CtlTyxLBL() As Integer:                    CtlTyxLBL = mcCtlTyxLBL: End Property"
        PRINT "Public Property Get CtlTyxLIN() As Integer:                    CtlTyxLIN = mcCtlTyxLIN: End Property"
        PRINT "Public Property Get CtlTyxLST() As Integer:                    CtlTyxLST = mcCtlTyxLST: End Property"
        PRINT "Public Property Get CtlTyxFRA() As Integer:                    CtlTyxFRA = mcCtlTyxFRA: End Property"
        PRINT "Public Property Get CtlTyxOPT() As Integer:                    CtlTyxOPT = mcCtlTyxOPT: End Property"
        PRINT "Public Property Get CtlTyxGRP() As Integer:                    CtlTyxGRP = mcCtlTyxGRP: End Property"
        PRINT "Public Property Get CtlTyxPAG() As Integer:                    CtlTyxPAG = mcCtlTyxPAG: End Property"
        PRINT "Public Property Get CtlTyxBRK() As Integer:                    CtlTyxBRK = mcCtlTyxBRK: End Property"
        PRINT "Public Property Get CtlTyxBOX() As Integer:                    CtlTyxBOX = mcCtlTyxBOX: End Property"
        PRINT "Public Property Get CtlTyxSFM() As Integer:                    CtlTyxSFM = mcCtlTyxSFM: End Property"
        PRINT "Public Property Get CtlTyxTAB() As Integer:                    CtlTyxTAB = mcCtlTyxTAB: End Property"
        PRINT "Public Property Get CtlTyxTXT() As Integer:                    CtlTyxTXT = mcCtlTyxTXT: End Property"
        PRINT "Public Property Get CtlTyxTGL() As Integer:                    CtlTyxTGL = mcCtlTyxTGL: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' CTL: Standard Control Prefix"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get CtlPfxUNK() As String:                     CtlPfxUNK = mcCtlPfxUNK: End Property"
        PRINT "Public Property Get CtlPfxOBJ() As String:                     CtlPfxOBJ = mcCtlPfxOBJ: End Property"
        PRINT "Public Property Get CtlPfxCHK() As String:                     CtlPfxCHK = mcCtlPfxCHK: End Property"
        PRINT "Public Property Get CtlPfxCBO() As String:                     CtlPfxCBO = mcCtlPfxCBO: End Property"
        PRINT "Public Property Get CtlPfxCMD() As String:                     CtlPfxCMD = mcCtlPfxCMD: End Property"
        PRINT "Public Property Get CtlPfxCUS() As String:                     CtlPfxCUS = mcCtlPfxCUS: End Property"
        PRINT "Public Property Get CtlPfxIMG() As String:                     CtlPfxIMG = mcCtlPfxIMG: End Property"
        PRINT "Public Property Get CtlPfxLBL() As String:                     CtlPfxLBL = mcCtlPfxLBL: End Property"
        PRINT "Public Property Get CtlPfxLIN() As String:                     CtlPfxLIN = mcCtlPfxLIN: End Property"
        PRINT "Public Property Get CtlPfxLST() As String:                     CtlPfxLST = mcCtlPfxLST: End Property"
        PRINT "Public Property Get CtlPfxFRA() As String:                     CtlPfxFRA = mcCtlPfxFRA: End Property"
        PRINT "Public Property Get CtlPfxOPT() As String:                     CtlPfxOPT = mcCtlPfxOPT: End Property"
        PRINT "Public Property Get CtlPfxGRP() As String:                     CtlPfxGRP = mcCtlPfxGRP: End Property"
        PRINT "Public Property Get CtlPfxPAG() As String:                     CtlPfxPAG = mcCtlPfxPAG: End Property"
        PRINT "Public Property Get CtlPfxBRK() As String:                     CtlPfxBRK = mcCtlPfxBRK: End Property"
        PRINT "Public Property Get CtlPfxBOX() As String:                     CtlPfxBOX = mcCtlPfxBOX: End Property"
        PRINT "Public Property Get CtlPfxSFM() As String:                     CtlPfxSFM = mcCtlPfxSFM: End Property"
        PRINT "Public Property Get CtlPfxTAB() As String:                     CtlPfxTAB = mcCtlPfxTAB: End Property"
        PRINT "Public Property Get CtlPfxTXT() As String:                     CtlPfxTXT = mcCtlPfxTXT: End Property"
        PRINT "Public Property Get CtlPfxTGL() As String:                     CtlPfxTGL = mcCtlPfxTGL: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' CTL: Standard Names/Mechanisms"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DatCtl() As String:                              DatCtl = mcDatCtl: End Property"
        PRINT "Public Property Get IfoCtl() As String:                              IfoCtl = mcIfoCtl: End Property"
        PRINT "Public Property Get NoMech() As String:                              NoMech = mcNoMech: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get FrmMch() As String:                              FrmMch = mcFrmMch: End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get SbyCtl() As String:                              SbyCtl = mcSbyCtl: End Property"
        PRINT "Public Property Get SbyCmd() As String:                              SbyCmd = mcSbyCmd: End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get GbyCtl() As String:                              GbyCtl = mcGbyCtl: End Property"
        PRINT "Public Property Get GbyTgl() As String:                              GbyTgl = mcGbyTgl: End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get SlnCtl() As String:                              SlnCtl = mcSlnCtl: End Property"
        PRINT "Public Property Get SlnTxt() As String:                              SlnTxt = mcSlnTxt: End Property"
        PRINT "Public Property Get SlnCbo() As String:                              SlnCbo = mcSlnCbo: End Property"
        PRINT "Public Property Get SlnChk() As String:                              SlnChk = mcSlnChk: End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get FndCtl() As String:                              FndCtl = mcFndCtl: End Property"
        PRINT "Public Property Get FndTxt() As String:                              FndTxt = mcFndTxt: End Property"
        PRINT "Public Property Get FndCbo() As String:                              FndCbo = mcFndCbo: End Property"
        PRINT "Public Property Get FndChk() As String:                              FndChk = mcFndChk: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get FrmSfm() As String:                              FrmSfm = mcFrmSfm: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get FrmSup() As String:                              FrmSup = mcFrmSup: End Property"
        PRINT "Public Property Get FrmHcr() As String:                              FrmHcr = mcFrmHcr: End Property"
        PRINT "Public Property Get FrmTt1() As String:                              FrmTt1 = mcFrmTt1: End Property"
        PRINT "Public Property Get FrmTt2() As String:                              FrmTt2 = mcFrmTt2: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get FrmCmd() As String:                              FrmCmd = mcFrmCmd: End Property"
        PRINT "Public Property Get FrmRfh() As String:                              FrmRfh = mcFrmRfh: End Property"
        PRINT "Public Property Get FrmAdn() As String:                              FrmAdn = mcFrmAdn: End Property"
        PRINT "Public Property Get FrmSav() As String:                              FrmSav = mcFrmSav: End Property"
        PRINT "Public Property Get FrmUnd() As String:                              FrmUnd = mcFrmUnd: End Property"
        PRINT "Public Property Get FrmDel() As String:                              FrmDel = mcFrmDel: End Property"
        PRINT "Public Property Get FrmCls() As String:                              FrmCls = mcFrmCls: End Property"
        PRINT "Public Property Get FrmQit() As String:                              FrmQit = mcFrmQit: End Property"
        PRINT "Public Property Get FrmAcp() As String:                              FrmAcp = mcFrmAcp: End Property"
        PRINT "Public Property Get FrmCan() As String:                              FrmCan = mcFrmCan: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get MngSQL() As String:                              MngSQL = mcMngSQL: End Property"
        PRINT "Public Property Get FndSQL() As String:                              FndSQL = mcFndSQL: End Property"
        PRINT "Public Property Get RunSQL() As String:                              RunSQL = mcRunSQL: End Property"
        PRINT "Public Property Get ExcSQL() As String:                              ExcSQL = mcExcSQL: End Property"
        PRINT "Public Property Get ClrSQL() As String:                              ClrSQL = mcClrSQL: End Property"
        PRINT "Public Property Get WrtSQL() As String:                              WrtSQL = mcWrtSQL: End Property"
        PRINT "Public Property Get CntSQL() As String:                              CntSQL = mcCntSQL: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get CmdMch() As String:                              CmdMch = mcCmdMch: End Property"
        PRINT "Public Property Get CmdLst() As String:                              CmdLst = mcCmdLst: End Property"
        PRINT "Public Property Get CmdRun() As String:                              CmdRun = mcCmdRun: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get RptMch() As String:                              RptMch = mcRptMch: End Property"
        PRINT "Public Property Get RptLst() As String:                              RptLst = mcRptLst: End Property"
        PRINT "Public Property Get RptPrn() As String:                              RptPrn = mcRptPrn: End Property"
        PRINT "Public Property Get RptPrv() As String:                              RptPrv = mcRptPrv: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Type Conversions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' RGN: Regen Codes"
        PRINT "'***************************************************************************************************"
        PRINT "Public Property Get RgnTblVBA() As String:                     RgnTblVBA = mcRgnTblVBA: End Property"
        PRINT "Public Property Get RgnTblREG() As String:                     RgnTblREG = mcRgnTblREG: End Property"
        PRINT "Public Property Get RgnTblGEN() As String:                     RgnTblGEN = mcRgnTblGEN: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get RgnCmdVBA() As String:                     RgnCmdVBA = mcRgnCmdVBA: End Property"
        PRINT "Public Property Get RgnCmdREG() As String:                     RgnCmdREG = mcRgnCmdREG: End Property"
        PRINT "Public Property Get RgnCmdGEN() As String:                     RgnCmdGEN = mcRgnCmdGEN: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get RgnRptVBA() As String:                     RgnRptVBA = mcRgnRptVBA: End Property"
        PRINT "Public Property Get RgnRptREG() As String:                     RgnRptREG = mcRgnRptREG: End Property"
        PRINT "Public Property Get RgnRptGEN() As String:                     RgnRptGEN = mcRgnRptGEN: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' DAO Type Conversions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' DaoTypVPX:  DAO Data Type Number to Variable prefix"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function DaoTypVPX( _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    Optional ByVal strDEF As String = mcDaoTypUNK _"
        PRINT ") As String"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcDaoTypBIG:                 DaoTypVPX = mcVarPfxINT"
        PRINT "        Case mcDaoTypBIN:                 DaoTypVPX = mcVarPfxVRN"
        PRINT "        Case mcDaoTypBLN:                 DaoTypVPX = mcVarPfxBLN"
        PRINT "        Case mcDaoTypBYT:                 DaoTypVPX = mcVarPfxSTR"
        PRINT "        Case mcDaoTypCHR:                 DaoTypVPX = mcVarPfxSTR"
        PRINT "        Case mcDaoTypCUR:                 DaoTypVPX = mcVarPfxCUR"
        PRINT "        Case mcDaoTypDAT:                 DaoTypVPX = mcVarPfxDAT"
        PRINT "        Case mcDaoTypDEC:                 DaoTypVPX = mcVarPfxDBL"
        PRINT "        Case mcDaoTypDBL:                 DaoTypVPX = mcVarPfxDBL"
        PRINT "        Case mcDaoTypFLT:                 DaoTypVPX = mcVarPfxDBL"
        PRINT "        Case mcDaoTypGID:                 DaoTypVPX = mcVarPfxVRN"
        PRINT "        Case mcDaoTypINT:                 DaoTypVPX = mcVarPfxINT"
        PRINT "        Case mcDaoTypLBG:                 DaoTypVPX = mcVarPfxLNG"
        PRINT "        Case mcDaoTypLBN:                 DaoTypVPX = mcVarPfxVRN"
        PRINT "        Case mcDaoTypMEM:                 DaoTypVPX = mcVarPfxSTR"
        PRINT "        Case mcDaoTypNUM:                 DaoTypVPX = mcVarPfxDBL"
        PRINT "        Case mcDaoTypSGL:                 DaoTypVPX = mcVarPfxSGL"
        PRINT "        Case mcDaoTypTXT:                 DaoTypVPX = mcVarPfxSTR"
        PRINT "        Case mcDaoTypTIM:                 DaoTypVPX = mcVarPfxDAT"
        PRINT "        Case mcDaoTypSTM:                 DaoTypVPX = mcVarPfxVRN"
        PRINT "        Case mcDaoTypVBN:                 DaoTypVPX = mcVarPfxVRN"
        PRINT "        Case Else:                        DaoTypVPX = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Data Category Conversions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' DatCatCOD:  Data Category code to Data Category code (strips code and validates)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function DatCatCOD( _"
        PRINT "    ByVal strCOD As String, _"
        PRINT "    Optional ByVal strDEF As String = mcDatCatUNK _"
        PRINT ") As String"
        PRINT "    Select Case UCase$(Left$(strCOD, 3))"
        PRINT "        Case mcDatCatBLN:                 DatCatCOD = mcDatCatBLN"
        PRINT "        Case mcDatCatNBR:                 DatCatCOD = mcDatCatNBR"
        PRINT "        Case mcDatCatDAT:                 DatCatCOD = mcDatCatDAT"
        PRINT "        Case mcDatCatCHR:                 DatCatCOD = mcDatCatCHR"
        PRINT "        Case mcDatCatTXT:                 DatCatCOD = mcDatCatTXT"
        PRINT "        Case mcDatCatGID:                 DatCatCOD = mcDatCatGID"
        PRINT "        Case mcDatCatROV:                 DatCatCOD = mcDatCatROV"
        PRINT "        Case mcDatCatBNY:                 DatCatCOD = mcDatCatBNY"
        PRINT "        Case mcDatCatVRN:                 DatCatCOD = mcDatCatVRN"
        PRINT "        Case Else:                        DatCatCOD = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Variable Type Conversions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' VarPfxCPX:  Variable prefix[/name] to control prefix"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarPfxCPX( _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    Optional ByVal strNAM As String, _"
        PRINT "    Optional ByVal strDEF As String = mcCtlPfxUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strPFX, 3))"
        PRINT "        Case mcVarPfxBLN:                 VarPfxCPX = mcCtlPfxCHK"
        PRINT "        Case mcVarPfxINT:                 VarPfxCPX = mcCtlPfxTXT"
        PRINT "        Case mcVarPfxLNG:                 VarPfxCPX = mcCtlPfxTXT"
        PRINT "        Case mcVarPfxCUR:                 VarPfxCPX = mcCtlPfxTXT"
        PRINT "        Case mcVarPfxSGL:                 VarPfxCPX = mcCtlPfxTXT"
        PRINT "        Case mcVarPfxDBL:                 VarPfxCPX = mcCtlPfxTXT"
        PRINT "        Case mcVarPfxSTR:                 VarPfxCPX = mcCtlPfxTXT"
        PRINT "        Case mcVarPfxDAT:                 VarPfxCPX = mcCtlPfxTXT"
        PRINT "        Case mcVarPfxVRN:                 VarPfxCPX = mcCtlPfxTXT"
        PRINT "        Case Else:                        VarPfxCPX = strDEF"
        PRINT "    End Select"
        PRINT "    ' Check standard name abbreviations"
        PRINT "    If (Left$(strPFX, 3) = mcVarPfxLNG And Right$(strNAM, 2) = ""ID"") Then VarPfxCPX = mcCtlPfxCBO"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarPfxVPX:  Variable prefix to Variable prefix (strips prefix and validates)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarPfxVPX( _"
        PRINT "    ByVal strTXT As String, _"
        PRINT "    Optional ByVal strDEF As String = mcVarPfxUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strTXT, 3))"
        PRINT "        Case mcVarPfxBLN:                 VarPfxVPX = mcVarPfxBLN"
        PRINT "        Case mcVarPfxINT:                 VarPfxVPX = mcVarPfxINT"
        PRINT "        Case mcVarPfxLNG:                 VarPfxVPX = mcVarPfxLNG"
        PRINT "        Case mcVarPfxCUR:                 VarPfxVPX = mcVarPfxCUR"
        PRINT "        Case mcVarPfxSGL:                 VarPfxVPX = mcVarPfxSGL"
        PRINT "        Case mcVarPfxDBL:                 VarPfxVPX = mcVarPfxDBL"
        PRINT "        Case mcVarPfxSTR:                 VarPfxVPX = mcVarPfxSTR"
        PRINT "        Case mcVarPfxDAT:                 VarPfxVPX = mcVarPfxDAT"
        PRINT "        Case mcVarPfxVRN:                 VarPfxVPX = mcVarPfxVRN"
        PRINT "        Case Else:                        VarPfxVPX = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarPfxTYP:  Variable prefix to MSAccess variable type"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarPfxTYP( _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    Optional ByVal strDEF As String = mcVarTypUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(strPFX)"
        PRINT "        Case mcVarPfxBLN:                 VarPfxTYP = mcVarTypBLN"
        PRINT "        Case mcVarPfxINT:                 VarPfxTYP = mcVarTypINT"
        PRINT "        Case mcVarPfxLNG:                 VarPfxTYP = mcVarTypLNG"
        PRINT "        Case mcVarPfxCUR:                 VarPfxTYP = mcVarTypCUR"
        PRINT "        Case mcVarPfxSGL:                 VarPfxTYP = mcVarTypSGL"
        PRINT "        Case mcVarPfxDBL:                 VarPfxTYP = mcVarTypDBL"
        PRINT "        Case mcVarPfxSTR:                 VarPfxTYP = mcVarTypSTR"
        PRINT "        Case mcVarPfxDAT:                 VarPfxTYP = mcVarTypDAT"
        PRINT "        Case mcVarPfxVRN:                 VarPfxTYP = mcVarTypVRN"
        PRINT "        Case Else:                        VarPfxTYP = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarPfxDCT:  Variable prefix to data category"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    strVarDCT = vbg.VarPfxDCT(Mid$(strObjVAR, 2, 3))"
        PRINT "'    Select Case vbg.VarPfxDCT(Mid$(strObjVAR, 2, 3))"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarPfxDCT( _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    Optional ByVal strDEF As String = mcDatCatUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strPFX, 3))"
        PRINT "        Case mcVarPfxBLN:                 VarPfxDCT = mcDatCatBLN"
        PRINT "        Case mcVarPfxINT:                 VarPfxDCT = mcDatCatNBR"
        PRINT "        Case mcVarPfxLNG:                 VarPfxDCT = mcDatCatNBR"
        PRINT "        Case mcVarPfxCUR:                 VarPfxDCT = mcDatCatNBR"
        PRINT "        Case mcVarPfxSGL:                 VarPfxDCT = mcDatCatNBR"
        PRINT "        Case mcVarPfxDBL:                 VarPfxDCT = mcDatCatNBR"
        PRINT "        Case mcVarPfxSTR:                 VarPfxDCT = mcDatCatTXT"
        PRINT "        Case mcVarPfxDAT:                 VarPfxDCT = mcDatCatDAT"
        PRINT "        Case mcVarPfxVRN:                 VarPfxDCT = mcDatCatVRN"
        PRINT "        Case Else:                        VarPfxDCT = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarPfxDVL:  Variable prefix to data value"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    strVarDCT = vbg.VarPfxDVL(Mid$(strObjVAR, 2, 3))"
        PRINT "'    Select Case vbg.VarPfxDVL(Mid$(strObjVAR, 2, 3))"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarPfxDVL( _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    Optional ByVal strDEF As String = mcDatValUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strPFX, 3))"
        PRINT "        Case mcVarPfxBLN:                 VarPfxDVL = mcDatValBLN"
        PRINT "        Case mcVarPfxINT:                 VarPfxDVL = mcDatValNBR"
        PRINT "        Case mcVarPfxLNG:                 VarPfxDVL = mcDatValNBR"
        PRINT "        Case mcVarPfxCUR:                 VarPfxDVL = mcDatValNBR"
        PRINT "        Case mcVarPfxSGL:                 VarPfxDVL = mcDatValNBR"
        PRINT "        Case mcVarPfxDBL:                 VarPfxDVL = mcDatValNBR"
        PRINT "        Case mcVarPfxSTR:                 VarPfxDVL = mcDatValTXT"
        PRINT "        Case mcVarPfxDAT:                 VarPfxDVL = mcDatValDAT"
        PRINT "        Case mcVarPfxVRN:                 VarPfxDVL = mcDatValVRN"
        PRINT "        Case Else:                        VarPfxDVL = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarPfxDSQ:  Variable prefix to data value"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    strVarDCT = vbg.VarPfxDSQ(Mid$(strObjVAR, 2, 3))"
        PRINT "'    Select Case vbg.VarPfxDSQ(Mid$(strObjVAR, 2, 3))"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarPfxDSQ( _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    Optional ByVal strDEF As String = mcDatSqtUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strPFX, 3))"
        PRINT "        Case mcVarPfxBLN:                 VarPfxDSQ = mcDatSqtBLN"
        PRINT "        Case mcVarPfxINT:                 VarPfxDSQ = mcDatSqtNBR"
        PRINT "        Case mcVarPfxLNG:                 VarPfxDSQ = mcDatSqtNBR"
        PRINT "        Case mcVarPfxCUR:                 VarPfxDSQ = mcDatSqtNBR"
        PRINT "        Case mcVarPfxSGL:                 VarPfxDSQ = mcDatSqtNBR"
        PRINT "        Case mcVarPfxDBL:                 VarPfxDSQ = mcDatSqtNBR"
        PRINT "        Case mcVarPfxSTR:                 VarPfxDSQ = mcDatSqtTXT"
        PRINT "        Case mcVarPfxDAT:                 VarPfxDSQ = mcDatSqtDAT"
        PRINT "        Case mcVarPfxVRN:                 VarPfxDSQ = mcDatSqtVRN"
        PRINT "        Case Else:                        VarPfxDSQ = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarPfxDCN:  Variable prefix to data constant"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    strVarDCT = vbg.VarPfxDCN(Mid$(strObjVAR, 2, 3))"
        PRINT "'    Select Case vbg.VarPfxDCN(Mid$(strObjVAR, 2, 3))"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarPfxDCN( _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    Optional ByVal strDEF As String = mcDatConUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strPFX, 3))"
        PRINT "        Case mcVarPfxBLN:                 VarPfxDCN = mcDatConBLN"
        PRINT "        Case mcVarPfxINT:                 VarPfxDCN = mcDatConNBR"
        PRINT "        Case mcVarPfxLNG:                 VarPfxDCN = mcDatConNBR"
        PRINT "        Case mcVarPfxCUR:                 VarPfxDCN = mcDatConNBR"
        PRINT "        Case mcVarPfxSGL:                 VarPfxDCN = mcDatConNBR"
        PRINT "        Case mcVarPfxDBL:                 VarPfxDCN = mcDatConNBR"
        PRINT "        Case mcVarPfxSTR:                 VarPfxDCN = mcDatConTXT"
        PRINT "        Case mcVarPfxDAT:                 VarPfxDCN = mcDatConDAT"
        PRINT "        Case mcVarPfxVRN:                 VarPfxDCN = mcDatConVRN"
        PRINT "        Case Else:                        VarPfxDCN = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarSfxVPX:  Variable suffix to Variable prefix (evaluates variable name)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarSfxVPX( _"
        PRINT "    ByVal strTXT As String, _"
        PRINT "    Optional ByVal strDEF As String = mcVarPfxSTR _"
        PRINT ") As String"
        PRINT "    If Right$(strTXT, 2) = ""ID"" Then"
        PRINT "        VarSfxVPX = mcVarPfxLNG"
        PRINT "    ElseIf Right$(strTXT, 4) = ""Date"" Then"
        PRINT "        VarSfxVPX = mcVarPfxDAT"
        PRINT "    Else"
        PRINT "        Select Case Right$(strTXT, 3)"
        PRINT "            '----------------------------------------------------"
        PRINT "            Case ""Idn"":                   VarSfxVPX = mcVarPfxLNG"
        PRINT "            Case ""Cnt"":                   VarSfxVPX = mcVarPfxLNG"
        PRINT "            Case ""Nbr"":                   VarSfxVPX = mcVarPfxLNG"
        PRINT "            Case ""Sqn"":                   VarSfxVPX = mcVarPfxLNG"
        PRINT "            Case ""Qty"":                   VarSfxVPX = mcVarPfxLNG"
        PRINT "            '----------------------------------------------------"
        PRINT "            Case ""Srt"":                   VarSfxVPX = mcVarPfxINT"
        PRINT "            '----------------------------------------------------"
        PRINT "            Case ""Amt"":                   VarSfxVPX = mcVarPfxCUR"
        PRINT "            '----------------------------------------------------"
        PRINT "            Case ""Pct"":                   VarSfxVPX = mcVarPfxSGL"
        PRINT "            '----------------------------------------------------"
        PRINT "            Case ""Flg"":                   VarSfxVPX = mcVarPfxBLN"
        PRINT "            '----------------------------------------------------"
        PRINT "            Case ""Dat"":                   VarSfxVPX = mcVarPfxDAT"
        PRINT "            '----------------------------------------------------"
        PRINT "            Case Else:                    VarSfxVPX = strDEF"
        PRINT "        End Select"
        PRINT "    End If"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Control Type Conversions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' CtlTypCPX:  MSAccess control type number to control prefix"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    strCtlPFX = vbg.CtlTypCPX(CInt(.Fields(mcObjIdxTYP)))"
        PRINT "'==================================================================================================="
        PRINT "Public Function CtlTypCPX( _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    Optional ByVal strDEF As String = mcCtlPfxUNK _"
        PRINT ") As String"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcCtlTypBOX:                 CtlTypCPX = mcCtlPfxBOX"
        PRINT "        Case mcCtlTypCHK:                 CtlTypCPX = mcCtlPfxCHK"
        PRINT "        Case mcCtlTypCBO:                 CtlTypCPX = mcCtlPfxCBO"
        PRINT "        Case mcCtlTypCMD:                 CtlTypCPX = mcCtlPfxCMD"
        PRINT "        Case mcCtlTypFRA:                 CtlTypCPX = mcCtlPfxFRA"
        PRINT "        Case mcCtlTypGRP:                 CtlTypCPX = mcCtlPfxGRP"
        PRINT "        Case mcCtlTypIMG:                 CtlTypCPX = mcCtlPfxIMG"
        PRINT "        Case mcCtlTypLBL:                 CtlTypCPX = mcCtlPfxLBL"
        PRINT "        Case mcCtlTypLIN:                 CtlTypCPX = mcCtlPfxLIN"
        PRINT "        Case mcCtlTypLST:                 CtlTypCPX = mcCtlPfxLST"
        PRINT "        Case mcCtlTypOBJ:                 CtlTypCPX = mcCtlPfxOBJ"
        PRINT "        Case mcCtlTypOPT:                 CtlTypCPX = mcCtlPfxOPT"
        PRINT "        Case mcCtlTypSFM:                 CtlTypCPX = mcCtlPfxSFM"
        PRINT "        Case mcCtlTypTAB:                 CtlTypCPX = mcCtlPfxTAB"
        PRINT "        Case mcCtlTypTGL:                 CtlTypCPX = mcCtlPfxTGL"
        PRINT "        Case mcCtlTypTXT:                 CtlTypCPX = mcCtlPfxTXT"
        PRINT "        Case Else:                        CtlTypCPX = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CtlTypTYP:  Control type number to Control type number (validates)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function CtlTypTYP( _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    Optional ByVal strDEF As String = mcCtlTypUNK _"
        PRINT ") As String"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcCtlTypBOX:                 CtlTypTYP = mcCtlTypBOX"
        PRINT "        Case mcCtlTypCHK:                 CtlTypTYP = mcCtlTypCHK"
        PRINT "        Case mcCtlTypCBO:                 CtlTypTYP = mcCtlTypCBO"
        PRINT "        Case mcCtlTypCMD:                 CtlTypTYP = mcCtlTypCMD"
        PRINT "        Case mcCtlTypFRA:                 CtlTypTYP = mcCtlTypFRA"
        PRINT "        Case mcCtlTypGRP:                 CtlTypTYP = mcCtlTypGRP"
        PRINT "        Case mcCtlTypIMG:                 CtlTypTYP = mcCtlTypIMG"
        PRINT "        Case mcCtlTypLBL:                 CtlTypTYP = mcCtlTypLBL"
        PRINT "        Case mcCtlTypLIN:                 CtlTypTYP = mcCtlTypLIN"
        PRINT "        Case mcCtlTypLST:                 CtlTypTYP = mcCtlTypLST"
        PRINT "        Case mcCtlTypOBJ:                 CtlTypTYP = mcCtlTypOBJ"
        PRINT "        Case mcCtlTypOPT:                 CtlTypTYP = mcCtlTypOPT"
        PRINT "        Case mcCtlTypSFM:                 CtlTypTYP = mcCtlTypSFM"
        PRINT "        Case mcCtlTypTAB:                 CtlTypTYP = mcCtlTypTAB"
        PRINT "        Case mcCtlTypTGL:                 CtlTypTYP = mcCtlTypTGL"
        PRINT "        Case mcCtlTypTXT:                 CtlTypTYP = mcCtlTypTXT"
        PRINT "        Case Else:                        CtlTypTYP = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CtlTypTYX:  Control type number to Control type text (translates)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function CtlTypTYX( _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    Optional ByVal strDEF As String = mcCtlTyxUNK _"
        PRINT ") As String"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcCtlTypBOX:                 CtlTypTYX = mcCtlTyxBOX"
        PRINT "        Case mcCtlTypCHK:                 CtlTypTYX = mcCtlTyxCHK"
        PRINT "        Case mcCtlTypCBO:                 CtlTypTYX = mcCtlTyxCBO"
        PRINT "        Case mcCtlTypCMD:                 CtlTypTYX = mcCtlTyxCMD"
        PRINT "        Case mcCtlTypFRA:                 CtlTypTYX = mcCtlTyxFRA"
        PRINT "        Case mcCtlTypGRP:                 CtlTypTYX = mcCtlTyxGRP"
        PRINT "        Case mcCtlTypIMG:                 CtlTypTYX = mcCtlTyxIMG"
        PRINT "        Case mcCtlTypLBL:                 CtlTypTYX = mcCtlTyxLBL"
        PRINT "        Case mcCtlTypLIN:                 CtlTypTYX = mcCtlTyxLIN"
        PRINT "        Case mcCtlTypLST:                 CtlTypTYX = mcCtlTyxLST"
        PRINT "        Case mcCtlTypOBJ:                 CtlTypTYX = mcCtlTyxOBJ"
        PRINT "        Case mcCtlTypOPT:                 CtlTypTYX = mcCtlTyxOPT"
        PRINT "        Case mcCtlTypSFM:                 CtlTypTYX = mcCtlTyxSFM"
        PRINT "        Case mcCtlTypTAB:                 CtlTypTYX = mcCtlTyxTAB"
        PRINT "        Case mcCtlTypTGL:                 CtlTypTYX = mcCtlTyxTGL"
        PRINT "        Case mcCtlTypTXT:                 CtlTypTYX = mcCtlTyxTXT"
        PRINT "        Case Else:                        CtlTypTYX = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CtlTypDCT:  Control type number to data category"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function CtlTypDCT( _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    Optional ByVal strDEF As String = mcDatCatUNK _"
        PRINT ") As String"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcCtlTypCHK:                 CtlTypDCT = mcDatCatBLN"
        PRINT "        Case mcCtlTypCBO:                 CtlTypDCT = mcDatCatNBR"
        PRINT "        Case mcCtlTypFRA:                 CtlTypDCT = mcDatCatNBR"
        PRINT "        Case mcCtlTypGRP:                 CtlTypDCT = mcDatCatNBR"
        PRINT "        Case mcCtlTypLST:                 CtlTypDCT = mcDatCatNBR"
        PRINT "        Case mcCtlTypOPT:                 CtlTypDCT = mcDatCatNBR"
        PRINT "        Case mcCtlTypTAB:                 CtlTypDCT = mcDatCatNBR"
        PRINT "        Case mcCtlTypTGL:                 CtlTypDCT = mcDatCatBLN"
        PRINT "        Case mcCtlTypTXT:                 CtlTypDCT = mcDatCatTXT"
        PRINT "        Case Else:                        CtlTypDCT = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CtlTypVPX:  MSAccess control type to variable prefix"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    strVarPFX = vbg.CtlTypVPX(CInt(.Fields(mcObjIdxTYP)), .Fields(mcObjIdxBAS))"
        PRINT "'==================================================================================================="
        PRINT "Public Function CtlTypVPX( _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    Optional ByVal strNAM As String, _"
        PRINT "    Optional ByVal strDEF As String = mcVarPfxUNK _"
        PRINT ") As String"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcCtlTypCHK:                 CtlTypVPX = mcVarPfxBLN"
        PRINT "        Case mcCtlTypCBO:                 CtlTypVPX = mcVarPfxLNG"
        PRINT "        Case mcCtlTypFRA:                 CtlTypVPX = mcVarPfxINT"
        PRINT "        Case mcCtlTypGRP:                 CtlTypVPX = mcVarPfxINT"
        PRINT "        Case mcCtlTypLST:                 CtlTypVPX = mcVarPfxLNG"
        PRINT "        Case mcCtlTypOPT:                 CtlTypVPX = mcVarPfxINT"
        PRINT "        Case mcCtlTypTAB:                 CtlTypVPX = mcVarPfxINT"
        PRINT "        Case mcCtlTypTGL:                 CtlTypVPX = mcVarPfxBLN"
        PRINT "        Case mcCtlTypTXT:                 CtlTypVPX = mcVarPfxTXT"
        PRINT "        Case Else:                        CtlTypVPX = strDEF"
        PRINT "    End Select"
        PRINT "    ' Check standard name abbreviations"
        PRINT "    CtlTypVPX = VarSfxVPX(strNAM, CtlTypVPX)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CtlPfxCPX:  Control prefix to Control prefix (strips prefix and validates)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function CtlPfxCPX( _"
        PRINT "    ByVal strTXT As String, _"
        PRINT "    Optional ByVal strDEF As String = mcCtlPfxUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strTXT, 3))"
        PRINT "        Case mcCtlPfxBOX:                 CtlPfxCPX = mcCtlPfxBOX"
        PRINT "        Case mcCtlPfxCHK:                 CtlPfxCPX = mcCtlPfxCHK"
        PRINT "        Case mcCtlPfxCBO:                 CtlPfxCPX = mcCtlPfxCBO"
        PRINT "        Case mcCtlPfxCMD:                 CtlPfxCPX = mcCtlPfxCMD"
        PRINT "        Case mcCtlPfxFRA:                 CtlPfxCPX = mcCtlPfxFRA"
        PRINT "        Case mcCtlPfxGRP:                 CtlPfxCPX = mcCtlPfxGRP"
        PRINT "        Case mcCtlPfxIMG:                 CtlPfxCPX = mcCtlPfxIMG"
        PRINT "        Case mcCtlPfxLBL:                 CtlPfxCPX = mcCtlPfxLBL"
        PRINT "        Case mcCtlPfxLIN:                 CtlPfxCPX = mcCtlPfxLIN"
        PRINT "        Case mcCtlPfxLST:                 CtlPfxCPX = mcCtlPfxLST"
        PRINT "        Case mcCtlPfxOBJ:                 CtlPfxCPX = mcCtlPfxOBJ"
        PRINT "        Case mcCtlPfxOPT:                 CtlPfxCPX = mcCtlPfxOPT"
        PRINT "        Case mcCtlPfxSFM:                 CtlPfxCPX = mcCtlPfxSFM"
        PRINT "        Case mcCtlPfxTAB:                 CtlPfxCPX = mcCtlPfxTAB"
        PRINT "        Case mcCtlPfxTGL:                 CtlPfxCPX = mcCtlPfxTGL"
        PRINT "        Case mcCtlPfxTXT:                 CtlPfxCPX = mcCtlPfxTXT"
        PRINT "        Case Else:                        CtlPfxCPX = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CtlPfxTYP:  Control prefix to MSAccess control type"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    strCtlPFX = vbg.CtlPfxTYP(CInt(.Fields(mcObjIdxNAM)))"
        PRINT "'==================================================================================================="
        PRINT "Public Function CtlPfxTYP( _"
        PRINT "    ByVal strTXT As String, _"
        PRINT "    Optional ByVal strDEF As String = mcCtlTypUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strTXT, 3))"
        PRINT "        Case mcCtlPfxBOX:                 CtlPfxTYP = mcCtlTypBOX"
        PRINT "        Case mcCtlPfxCHK:                 CtlPfxTYP = mcCtlTypCHK"
        PRINT "        Case mcCtlPfxCBO:                 CtlPfxTYP = mcCtlTypCBO"
        PRINT "        Case mcCtlPfxCMD:                 CtlPfxTYP = mcCtlTypCMD"
        PRINT "        Case mcCtlPfxFRA:                 CtlPfxTYP = mcCtlTypFRA"
        PRINT "        Case mcCtlPfxGRP:                 CtlPfxTYP = mcCtlTypGRP"
        PRINT "        Case mcCtlPfxIMG:                 CtlPfxTYP = mcCtlTypIMG"
        PRINT "        Case mcCtlPfxLBL:                 CtlPfxTYP = mcCtlTypLBL"
        PRINT "        Case mcCtlPfxLIN:                 CtlPfxTYP = mcCtlTypLIN"
        PRINT "        Case mcCtlPfxLST:                 CtlPfxTYP = mcCtlTypLST"
        PRINT "        Case mcCtlPfxOBJ:                 CtlPfxTYP = mcCtlTypOBJ"
        PRINT "        Case mcCtlPfxOPT:                 CtlPfxTYP = mcCtlTypOPT"
        PRINT "        Case mcCtlPfxSFM:                 CtlPfxTYP = mcCtlTypSFM"
        PRINT "        Case mcCtlPfxTAB:                 CtlPfxTYP = mcCtlTypTAB"
        PRINT "        Case mcCtlPfxTGL:                 CtlPfxTYP = mcCtlTypTGL"
        PRINT "        Case mcCtlPfxTXT:                 CtlPfxTYP = mcCtlTypTXT"
        PRINT "        Case Else:                        CtlPfxTYP = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CtlPfxDCT:  Control prefix to data category"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'==================================================================================================="
        PRINT "Public Function CtlPfxDCT( _"
        PRINT "    ByVal strTXT As String, _"
        PRINT "    Optional ByVal strDEF As String = mcDatCatUNK _"
        PRINT ") As String"
        PRINT "    Select Case LCase$(Left$(strTXT, 3))"
        PRINT "        Case mcCtlPfxCHK:                 CtlPfxDCT = mcDatCatBLN"
        PRINT "        Case mcCtlPfxCBO:                 CtlPfxDCT = mcDatCatNBR"
        PRINT "        Case mcCtlPfxFRA:                 CtlPfxDCT = mcDatCatNBR"
        PRINT "        Case mcCtlPfxGRP:                 CtlPfxDCT = mcDatCatNBR"
        PRINT "        Case mcCtlPfxLST:                 CtlPfxDCT = mcDatCatNBR"
        PRINT "        Case mcCtlPfxOPT:                 CtlPfxDCT = mcDatCatNBR"
        PRINT "        Case mcCtlPfxTAB:                 CtlPfxDCT = mcDatCatNBR"
        PRINT "        Case mcCtlPfxTGL:                 CtlPfxDCT = mcDatCatBLN"
        PRINT "        Case mcCtlPfxTXT:                 CtlPfxDCT = mcDatCatTXT"
        PRINT "        Case Else:                        CtlPfxDCT = strDEF"
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Debug Formats"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' Debug: Header"
        PRINT "'==================================================================================================="
        PRINT "Public Function DbgHdr( _"
        PRINT "    ByVal strTTL As String, _"
        PRINT "    Optional ByVal strCMT As String, _"
        PRINT "    Optional ByVal blnRST As Boolean, _"
        PRINT "    Optional ByVal strLIN As String, _"
        PRINT "    Optional ByVal intWID As Integer _"
        PRINT ") As String"
        PRINT "    Static strDAT As String"
        PRINT "    Static strTIM As String"
        PRINT "    Dim strDTM    As String"
        PRINT "    Dim strLFT    As String"
        PRINT "    Dim strRGT    As String"
        PRINT "    If blnRST Or Len(strDAT) = 0 Then"
        PRINT "        strDAT = Format$(Date, ""yyyy-mm-dd"")"
        PRINT "        strTIM = Format$(Time, ""hh:mm:ss"")"
        PRINT "    End If"
        PRINT "    strDTM = Trim$(strDAT & "" "" & strTIM): If Len(strDTM) > 0 Then strDTM = strDTM & "" """
        PRINT "    strTTL = Trim$(strTTL): If Len(strTTL) > 0 Then strTTL = strTTL & "" """
        PRINT "    strLIN = Trim$(strLIN): If Len(strLIN) = 0 Then strLIN = ""="""
        PRINT "    strLFT = strLIN & strLIN & "" """
        PRINT "    strRGT = "" "" & strLIN"
        PRINT "    If intWID <= 0 Then intWID = mcLinLenPOR"
        PRINT "    DbgHdr = Left$(strLFT & strTTL & strDTM & Trim$(strCMT & strRGT) & String$(intWID, strLIN), intWID)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Debug: Title"
        PRINT "'==================================================================================================="
        PRINT "Public Function DbgTtl( _"
        PRINT "    ByVal strTTL As String, _"
        PRINT "    Optional ByVal strCMT As String, _"
        PRINT "    Optional ByVal strLIN As String, _"
        PRINT "    Optional ByVal intWID As Integer _"
        PRINT ") As String"
        PRINT "    Dim strLFT    As String"
        PRINT "    Dim strRGT    As String"
        PRINT "    strTTL = Trim$(strTTL): If Len(strTTL) > 0 Then strTTL = strTTL & "" """
        PRINT "    strLIN = Trim$(strLIN): If Len(strLIN) = 0 Then strLIN = ""-"""
        PRINT "    strLFT = strLIN & strLIN & "" """
        PRINT "    strRGT = "" "" & strLIN"
        PRINT "    If intWID <= 0 Then intWID = mcLinLenPOR"
        PRINT "    DbgTtl = Left$(strLFT & strTTL & Trim$(strCMT & strRGT) & String$(intWID, strLIN), intWID)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Debug: Comment"
        PRINT "'==================================================================================================="
        PRINT "Public Function DbgCmt( _"
        PRINT "    ByVal strFRM As String, _"
        PRINT "    ByVal strLVL As String, _"
        PRINT "    ByVal strFNC As String _"
        PRINT ") As String"
        PRINT "    strFRM = Trim$(strFRM): If Len(strFRM) > 0 Then DbgCmt = DbgCmt & strFRM & "" - """
        PRINT "    strLVL = Trim$(strLVL): If Len(strLVL) > 0 Then DbgCmt = DbgCmt & strLVL & ""_Debug - """
        PRINT "    strFNC = Trim$(strFNC): If Len(strFNC) > 0 Then DbgCmt = DbgCmt & strFNC"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Formatting Properties"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' IsIdent:  Is this an identity column"
        PRINT "'==================================================================================================="
        PRINT "Public Function IsIdent( _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    ByVal strNAM As String _"
        PRINT ") As Boolean"
        PRINT "    IsIdent = ((strPFX = mcVarPfxLNG Or strPFX = mcDatCatNBR) And Right$(strNAM, 2) = ""ID"")"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CleanCMD:  Cleanup the Command Name"
        PRINT "'==================================================================================================="
        PRINT "Public Function CleanCMD( _"
        PRINT "    ByVal strNAM As String _"
        PRINT ") As String"
        PRINT "    CleanCMD = Replace$(strNAM, _"
        PRINT "        ""-"", ""_"")"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' CleanRPT:  Cleanup the Report Name"
        PRINT "'==================================================================================================="
        PRINT "Public Function CleanRPT( _"
        PRINT "    ByVal strNAM As String _"
        PRINT ") As String"
        PRINT "    CleanRPT = Replace$(strNAM, _"
        PRINT "        ""-"", ""_"")"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Variable Declarations"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' VarDecPub:  Public Variable declaration"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarDecPub( _"
        PRINT "    ByVal strLVL As String, _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    Optional ByVal strCMT As String, _"
        PRINT "    Optional ByVal intMRG As Integer = 0 _"
        PRINT ") As String"
        PRINT "    Dim strVAR As String:  strVAR = Trim$(LCase$(strLVL & VarPfxVPX(strPFX))) & Trim$(strNAM)"
        PRINT "    Dim strTYP As String:  strTYP = VarPfxTYP(strPFX)"
        PRINT "    Dim intLEN As Integer: intLEN = Len(strVAR)"
        PRINT "    Dim intLFT As Integer: intLFT = IIf(intLEN <= mcDecSizMOD, mcDecSizMOD, intLEN)"
        PRINT "    Dim intRGT As Integer: intRGT = IIf(intLEN <= mcDtpSizMOD, mcDtpSizMOD, mcDtpSizMOD+mcVarSizMOD - intLFT - (intMRG * 4))"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    VarDecPub = Left$(IIf(intMRG > 0, Space(intMRG), """") & Left$(""Public "" & strVAR & mXTS, intLFT) & "" As "" & Left$(strTYP & mXTS, intRGT), mcCmtSizMOD) & ""' "" & strCMT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarDecPrv:  Private Variable declaration"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarDecPrv( _"
        PRINT "    ByVal strLVL As String, _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    Optional ByVal strCMT As String, _"
        PRINT "    Optional ByVal intMRG As Integer = 0 _"
        PRINT ") As String"
        PRINT "    Dim strVAR As String:  strVAR = Trim$(LCase$(strLVL & VarPfxVPX(strPFX))) & Trim$(strNAM)"
        PRINT "    Dim strTYP As String:  strTYP = VarPfxTYP(strPFX)"
        PRINT "    Dim intLEN As Integer: intLEN = Len(strVAR)"
        PRINT "    Dim intLFT As Integer: intLFT = IIf(intLEN <= mcDecSizMOD, mcDecSizMOD, intLEN)"
        PRINT "    Dim intRGT As Integer: intRGT = IIf(intLEN <= mcDtpSizMOD, mcDtpSizMOD, mcDtpSizMOD+mcVarSizMOD - intLFT - (intMRG * 4))"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    VarDecPrv = Left$(IIf(intMRG > 0, Space(intMRG), """") & Left$(""Private "" & strVAR & mXTS, intLFT) & "" As "" & Left$(strTYP & mXTS, intRGT), mcCmtSizMOD) & ""' "" & strCMT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarDecDim:  Function Variable declaration"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarDecDim( _"
        PRINT "    ByVal strLVL As String, _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    Optional ByVal strCMT As String, _"
        PRINT "    Optional ByVal intMRG As Integer = 1 _"
        PRINT ") As String"
        PRINT "    intMRG = intMRG * 4"
        PRINT "    Dim strVAR As String:  strVAR = Trim$(LCase$(strLVL & VarPfxVPX(strPFX))) & Trim$(strNAM)"
        PRINT "    Dim strTYP As String:  strTYP = VarPfxTYP(strPFX)"
        PRINT "    Dim intLEN As Integer: intLEN = Len(strVAR)"
        PRINT "    Dim intLFT As Integer: intLFT = IIf(intLEN <= mcDecSizFNC, mcDecSizFNC, intLEN)"
        PRINT "    Dim intRGT As Integer: intRGT = IIf(intLEN <= mcDtpSizFNC, mcDtpSizFNC, mcDtpSizFNC+mcVarSizFNC - intLFT - intMRG)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    VarDecDim = Left$(IIf(intMRG > 0, Space(intMRG), """") & Left$(""Dim "" & strVAR & mXTS, intLFT) & "" As "" & Left$(strTYP & mXTS, intRGT), mcCmtSizFNC) & ""' "" & strCMT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' VarDecPrm:  Function Variable declaration"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarDecPrm( _"
        PRINT "    ByVal strLVL As String, _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    Optional ByVal strCMT As String, _"
        PRINT "    Optional ByVal strCMA As String, _"
        PRINT "    Optional ByVal blnOPT As Boolean, _"
        PRINT "    Optional ByVal intMRG As Integer = 1 _"
        PRINT ") As String"
        PRINT "    intMRG = intMRG * 4"
        PRINT "    Const pcOPT As String = ""Optional """
        PRINT "    Dim strVAR  As String:  strVAR = Trim$(LCase$(strLVL & VarPfxVPX(strPFX))) & Trim$(strNAM)"
        PRINT "    Dim strTYP  As String:  strTYP = VarPfxTYP(strPFX)"
        PRINT "    Dim intOPT  As Integer: intOPT = IIf(blnOPT, Len(pcOPT), 0)"
        PRINT "    Dim intLEN  As Integer: intLEN = intOPT+Len(strVAR)"
        PRINT "    Dim intSIZ  As Integer: intSIZ = intOPT+mcDecSizPRM"
        PRINT "    Dim intLFT  As Integer: intLFT = IIf(intLEN <= intSIZ, intSIZ, intLEN)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    VarDecPrm = Space(intMRG) & Left$(IIf(blnOPT, pcOPT, """") & ""ByVal "" & strVAR & mXTS, intLFT) & "" As "" & strTYP & strCMA & "" _"""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Variable Statements"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' VarIntVal:  Variable initialization"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarIntVal( _"
        PRINT "    ByVal strLVL As String, _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    Optional ByVal strVAL As String, _"
        PRINT "    Optional ByVal strCMT As String _"
        PRINT ") As String"
        PRINT "    Dim strVAR As String:  strVAR = Trim$(LCase$(strLVL & VarPfxVPX(strPFX))) & Trim$(strNAM)"
        PRINT "    VarIntVal = Left$(""    "" & strVAR & "" = "" & IIf(Len(strVAL) > 0, strVAL, VarPfxDVL(strPFX, ""Null"")) & mXTS, mcCmtSizMOD) & ""' "" & strCMT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Public Function VarIntCon( _"
        PRINT "    ByVal strLVL As String, _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    Optional ByVal strVAL As String, _"
        PRINT "    Optional ByVal strCMT As String _"
        PRINT ") As String"
        PRINT "    Dim strVAR As String:  strVAR = Trim$(LCase$(strLVL & VarPfxVPX(strPFX))) & Trim$(strNAM)"
        PRINT "    VarIntCon = Left$(""    "" & strVAR & "" = "" & IIf(Len(strVAL) > 0, strVAL, VarPfxDCN(strPFX, ""mcNUL"")) & mXTS, mcCmtSizMOD) & ""' "" & strCMT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Property Statements"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' PrpPubStd:  Property LET/GET standard statement"
        PRINT "'==================================================================================================="
        PRINT "Public Function PrpPubStd( _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    ByVal strTYP As String, _"
        PRINT "    ByVal strVAR As String, _"
        PRINT "    Optional ByVal strLET As String, _"
        PRINT "    Optional ByVal strGET As String, _"
        PRINT "    Optional ByVal strSTM As String, _"
        PRINT "    Optional ByVal blnSEP As Boolean = True _"
        PRINT ") As String"
        PRINT "    PrpPubStd = PrpStmStd(strNAM,strTYP,strVAR,strLET,strGET,strSTM,blnSEP,mcStmScpPUB)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Public Function PrpPrvStd( _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    ByVal strTYP As String, _"
        PRINT "    ByVal strVAR As String, _"
        PRINT "    Optional ByVal strLET As String, _"
        PRINT "    Optional ByVal strGET As String, _"
        PRINT "    Optional ByVal strSTM As String, _"
        PRINT "    Optional ByVal blnSEP As Boolean = True _"
        PRINT ") As String"
        PRINT "    PrpPrvStd = PrpStmStd(strNAM,strTYP,strVAR,strLET,strGET,strSTM,blnSEP,mcStmScpPRV)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function PrpStmStd( _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    ByVal strTYP As String, _"
        PRINT "    ByVal strVAR As String, _"
        PRINT "    Optional ByVal strLET As String, _"
        PRINT "    Optional ByVal strGET As String, _"
        PRINT "    Optional ByVal strSTM As String, _"
        PRINT "    Optional ByVal blnSEP As Boolean, _"
        PRINT "    Optional ByVal strSCP As String _"
        PRINT ") As String"
        PRINT "    If Len(strLET) = 0 Then strLET = ""vNewVal"""
        PRINT "    If Len(strGET) = 0 Then strGET = strVAR"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim blnLET As Boolean: blnLET = True"
        PRINT "    Dim blnGET As Boolean: blnGET = True"
        PRINT "    Select Case strSTM"
        PRINT "        Case ""LET"": blnGET = False"
        PRINT "        Case ""GET"": blnLET = False"
        PRINT "    End Select"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Select Case strSCP"
        PRINT "        Case mcStmScpPRV: strSCP = ""Private"""
        PRINT "        Case Else:        strSCP = ""Public"""
        PRINT "    End Select"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim strSEP As String:  Dim strTXT As String"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim strPX1 As String:  strPX1 = strSCP & "" Property Let "" & strNAM & ""(ByVal vNewVal As "" & strTYP & ""): """
        PRINT "    Dim strPX2 As String:  strPX2 = strVAR & "" = "" & strLET & "": End Property"""
        PRINT "    Dim strPX3 As String:  strPX3 = strSCP & "" Property Get "" & strNAM & ""() As "" & strTYP & "": """
        PRINT "    Dim strPX4 As String:  strPX4 = strNAM & "" = "" & strGET & "": End Property"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim intLN1 As Integer: intLN1 = Len(strPX1)"
        PRINT "    Dim intLN2 As Integer: intLN2 = Len(strPX2)"
        PRINT "    Dim intLN3 As Integer: intLN3 = Len(strPX3)"
        PRINT "    Dim intLN4 As Integer: intLN4 = Len(strPX4)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim intCK1 As Integer: intCK1 = Len(strPX1 & strPX2)"
        PRINT "    Dim intCK2 As Integer: intCK2 = Len(strPX3 & strPX4)"
        PRINT "    Dim intLEN As Integer: intLEN = IIf(intCK1 < intCK2, intCK2, intCK1)"
        PRINT "    If intLEN < mcLinLenPOR Then intLEN = mcLinLenPOR"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    intLN2 = intLEN - intLN1"
        PRINT "    intLN4 = intLEN - intLN3"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnLET Then"
        PRINT "        strTXT = strTXT & strSEP & Left$(strPX1 & mXTS, intLN1) & Right$(mXTS & strPX2, intLN2): strSEP = vbCrLf"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnGET Then"
        PRINT "        strTXT = strTXT & strSEP & Left$(strPX3 & mXTS, intLN3) & Right$(mXTS & strPX4, intLN4): strSEP = vbCrLf"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnSEP Then"
        PRINT "        strTXT = strTXT & strSEP & ""'"" & String(mcLinLenPOR - 1, ""=""): strSEP = vbCrLf"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    PrpStmStd = strTXT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Variable Statements"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' SbySfxHDR:  Private SrtBy/GrpBy declaration"
        PRINT "'==================================================================================================="
        PRINT "Public Function SbySfxHDR( _"
        PRINT "    ByVal strSFX As String, _"
        PRINT "    ByVal strFMT As String, _"
        PRINT "    Optional ByVal strCMT As String _"
        PRINT ") As String"
        PRINT "    Select Case strFMT"
        PRINT "        Case ""FRM"": SbySfxHDR = Left$(""Private Const mcHdr"" & strSFX & mXTS, mcDecSizMOD) & "" As "" & Left$(""String = """""" & strSFX & """""""" & mXTS, mcDecSizMOD) & ""' "" & strCMT"
        PRINT "        Case ""SQL"": SbySfxHDR = ""    Const pcHdr"" & strSFX & "" As String = """""" & strSFX & """""""""
        PRINT "    End Select"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Statements:  RunCMD/RPT"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' RunObjSpw:  Set property WHERE string"
        PRINT "'==================================================================================================="
        PRINT "Public Function RunObjSpw( _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    ByVal strTBL As String, _"
        PRINT "    ByVal strCLM As String, _"
        PRINT "    ByVal strTYP As String _"
        PRINT ") As String"
        PRINT "    Dim strSEP As String: Dim strTXT As String: strTYP = UCase$(VarPfxVPX(strTYP))"
        PRINT "    Dim strVRN As String: strVRN = ""mvrn"" & strNAM"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    strTXT = strTXT & strSEP & ""Private Sub Set_"" & strNAM & ""(Optional ByVal strTBL As String = """""" & strTBL & """""")"": strSEP = vbCrLf"
        PRINT "    strTXT = strTXT & strSEP & ""    If Not IsNull("" & strVRN & "") Then Call whr.AddItem(strTBL, """""" & strCLM & """""", mcVbaTyp"" & strTYP & "", "" & strVRN & "")"""
        PRINT "    strTXT = strTXT & strSEP & ""End Sub"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    RunObjSpw = strTXT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Statements:  RunSQL/RST"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' VBA_Var2Whr:  Assign WHERE criteria"
        PRINT "'==================================================================================================="
        PRINT "Public Function VBA_Var2Whr( _"
        PRINT "    ByVal strTYP As String, _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    ByVal strVAR As String _"
        PRINT ") As String"
        PRINT "    Dim strSEP As String: Dim strTXT As String: strTYP = UCase$(strTYP)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Select Case VarPfxDCT(strTYP)"
        PRINT "        Case ""TXT"""
        PRINT "            strTXT = strTXT & strSEP & ""    If Len("" & strVAR & "") > 0 Then"": strSEP = vbCrLf"
        PRINT "            strTXT = strTXT & strSEP & ""        If strWHR = mcWHR Then"""
        PRINT "            strTXT = strTXT & strSEP & ""            .AX strWHR: strWHR = mcMTY"""
        PRINT "            strTXT = strTXT & strSEP & ""        End If"""
        PRINT "            strTXT = strTXT & strSEP & ""        .AX strAND & """"zzz."" & strNAM & "" = '"""" & "" & strVAR & "" & """"'"""""""
        PRINT "            strTXT = strTXT & strSEP & ""        strAND = mcAND"""
        PRINT "            strTXT = strTXT & strSEP & ""    End If"""
        PRINT "            strTXT = strTXT & strSEP & ""    '"" & String$(95, ""-"")"
        PRINT "        Case Else"
        PRINT "            strTXT = strTXT & strSEP & ""    If "" & strVAR & "" > 0 Then"": strSEP = vbCrLf"
        PRINT "            strTXT = strTXT & strSEP & ""        If strWHR = mcWHR Then"""
        PRINT "            strTXT = strTXT & strSEP & ""            .AX strWHR: strWHR = mcMTY"""
        PRINT "            strTXT = strTXT & strSEP & ""        End If"""
        PRINT "            strTXT = strTXT & strSEP & ""        .AX strAND & """"zzz."" & strNAM & "" = """" & "" & strVAR & "" & """""""""""
        PRINT "            strTXT = strTXT & strSEP & ""        strAND = mcAND"""
        PRINT "            strTXT = strTXT & strSEP & ""    End If"""
        PRINT "            strTXT = strTXT & strSEP & ""    '"" & String$(95, ""-"")"
        PRINT "    End Select"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    VBA_Var2Whr = strTXT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Statements:  Developer Comments"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' DevCmtHdr:  Assign WHERE criteria"
        PRINT "'==================================================================================================="
        PRINT "Public Sub DevCmtHdr( _"
        PRINT "    strObjNam As String, _"
        PRINT "    strObjDsc As String, _"
        PRINT "    strRgnCod As String, _"
        PRINT "    strDevNam As String, _"
        PRINT "    strObjAls As String, _"
        PRINT "    wtx As clsUtlWTX _"
        PRINT "): Const pcMsgTtl = mcModNam & "".DevCmtHdr"""
        PRINT "    If Len(strDevNam) = 0 Then strDevNam = ""SCowden"""
        PRINT "    strDevNam = Left$(strDevNam & String$(12, "" ""), 12)"
        PRINT "    strObjAls = LCase$(Left$(Trim$(strObjAls), 3))"
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Name:"" & String$(74, "" "") & Format$(Date, ""YYYY-MM-DD"") & "" "" & Format$(Time, ""hh:mm:ss"")"
        PRINT "        .AX ""'   "" & strObjNam"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Purpose:"""
        PRINT "        .AX ""'   "" & strObjDsc"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        If Len(strRgnCod) > 0 Then"
        PRINT "        .AX ""' Regen:"""
        PRINT "        .AX ""'   EXEC ut_zzVBA "" & UCase$(strRgnCod) & "","" & strObjNam & IIf(Len(strObjDsc) > 0, "","""""" & strObjDsc & """""""", """")"
        PRINT "        If strRgnCod = ""RUNRPT"" Then"
        PRINT "        .AX ""'   EXEC ut_zzVBA RUNRPR,''"""
        PRINT "        .AX ""'   EXEC ut_zzVBA RUNRPX,''"""
        PRINT "        End If"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        End If"
        PRINT "        .AX ""' Developer    Date     Action"""
        PRINT "        .AX ""' ------------ -------- ----------------------------------------------------------------------------"""
        PRINT "        .AX ""' "" & strDevNam & "" "" & Format$(Date, ""mm/dd/yy"") & "" Created the script"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        If Len(strObjAls) > 0 Then"
        PRINT "        .AX ""'# Templates:"""
        PRINT "        .AX ""'"""
        PRINT "        .AX ""'    ' Initialize working objects"""
        PRINT "        .AX ""'    Dim "" & strObjAls & ""    As "" & strObjNam"
        PRINT "        .AX ""'    Set "" & strObjAls & "" = New "" & strObjNam"
        PRINT "        .AX ""'"""
        PRINT "        .AX ""'    ' Process working objects"""
        PRINT "        .AX ""'    With "" & strObjAls"
        PRINT "        .AX ""'    End With"""
        PRINT "        .AX ""'"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        End If"
        PRINT "        .AX ""Option Compare Database"""
        PRINT "        .AX ""Option Explicit"""
        PRINT "        .AX ""Option Base 0"""
        PRINT "        .AX ""'***************************************************************************************************"""
        PRINT "        .AX ""' Initialize module message constants"""
        PRINT "        .AX ""'***************************************************************************************************"""
        PRINT "        .AX ""Private Const mcModNam              As String = """""" & strObjNam & """""""""
        PRINT "        .AX ""Private Const mcModTtl              As String = """""" & strObjDsc & """""""""
        PRINT "        .AX ""Private Const mcModErr              As String = mcModNam"""
        PRINT "        .AX ""Private Const mcModMsg              As String = mcModTtl & """" - """""""
        PRINT "        Select Case Left$(strObjNam, 3)"
        PRINT "            Case ""cls"", ""frm"", ""lst"", ""sfm"", ""tfm"", ""pop"", ""sub"", ""mnu"", ""tpl"""
        PRINT "        .AX ""'***************************************************************************************************"""
        PRINT "        .AX ""' Public Class Events"""
        PRINT "        .AX ""'***************************************************************************************************"""
        PRINT "        .AX ""Public Event Error(ByVal Message As String)"""
        PRINT "        End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- UTLWSH = Build module:  clsUtlWSH
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA UTLWSH,clsUtlWSH,'WinScriptHost Functions',wsh
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecUTLWSH) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Constants/Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMTY                 As String = """""
        PRINT "Private Const mcSPC                 As String = "" """
        PRINT "Private Const mcDOT                 As String = ""."""
        PRINT "Private Const mcCMA                 As String = "","""
        PRINT "Private Const mcDSH                 As String = ""-"""
        PRINT "Private Const mcUBR                 As String = ""_"""
        PRINT "Private Const mcPIP                 As String = ""|"""
        PRINT "Private Const mcBKS                 As String = ""\\"""
        PRINT "Private Const mcFWS                 As String = ""/"""
        PRINT "Private Const mcSCN                 As String = "";"""
        PRINT "Private Const mcCLN                 As String = "":"""
        PRINT "Private Const mcTLD                 As String = ""~"""
        PRINT "Private Const mcTIK                 As String = ""`"""
        PRINT "Private Const mcSQT                 As String = ""'"""
        PRINT "Private Const mcDQT                 As String = """""""""
        PRINT "Private Const mcCLF                 As String = vbCrLf"
        PRINT "Private Const mcZRO                 As Integer = 0"
        PRINT "'***************************************************************************************************"
        PRINT "Private mXTS                        As String * 1000"
        PRINT "Private mSQL                        As String"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTXT                        As String"
        PRINT "Private mTX1                        As String"
        PRINT "Private mTX2                        As String"
        PRINT "Private mTX3                        As String"
        PRINT "Private mTX4                        As String"
        PRINT "Private mTX5                        As String"
        PRINT "Private mTX6                        As String"
        PRINT "Private mTX7                        As String"
        PRINT "Private mTX8                        As String"
        PRINT "Private mTX9                        As String"
        PRINT "'***************************************************************************************************"
        PRINT "Private mLEN                        As Integer"
        PRINT "Private mLN1                        As Integer"
        PRINT "Private mLN2                        As Integer"
        PRINT "Private mLN3                        As Integer"
        PRINT "Private mLN4                        As Integer"
        PRINT "'***************************************************************************************************"
        PRINT "Private mNBR                        As Long"
        PRINT "Private mNB1                        As Long"
        PRINT "Private mNB2                        As Long"
        PRINT "'***************************************************************************************************"
        PRINT "Private mBLN                        As Boolean"
        PRINT "Private mBL1                        As Boolean"
        PRINT "Private mBL2                        As Boolean"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private fmt                         As clsUtlFMT"
        PRINT "Private wtx                         As clsUtlWTX"
        PRINT "'***************************************************************************************************"
        PRINT "Private wsn                         As WshNetwork"
        PRINT "Private wss                         As WshShell"
        PRINT "'***************************************************************************************************"
        PRINT "Private fso                         As FileSystemObject"
        PRINT "Private fld                         As Folder"
        PRINT "Private fil                         As File"
        PRINT "Private txs                         As TextStream"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIclMOV              As Boolean = True                     ' Include:  Move"
        PRINT "Private Const mcXclMOV              As Boolean = False                    ' Exclude:  Move"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIclRCN              As Boolean = True                     ' Include:  Recon"
        PRINT "Private Const mcXclRCN              As Boolean = False                    ' Exclude:  Recon"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcStdIdnUNK           As Long = 1                           ' Std Identity: Unknown"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpLenMAX           As Integer = 259                      ' Property Length: TargetPath"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrDirFIL                  As String                             ' Directory path"
        PRINT "Private mvrnLstFIL()                As Variant                            ' List of file names"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize Module Objects"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Utility Objects"
        PRINT "    Set fmt = New clsUtlFMT"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    ' Initialize Windows Objects"
        PRINT "    Set wsn = New WshNetwork"
        PRINT "    Set wss = New WshShell"
        PRINT "    ' Initialize File System Objects"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    ' Initialize Defaults"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "    mXTS = """""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Default Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get Machine() As String:                    Machine = wsn.ComputerName: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get Domain() As String:                        Domain = wsn.UserDomain: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get User() As String:                              User = wsn.UserName: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' General File/Folder functions"
        PRINT "'###################################################################################################"
        PRINT "Public Function FolderMissing(ByVal strPTH As String) As Boolean"
        PRINT "    FolderMissing = (Not fso.FolderExists(strPTH))"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- UTLWTX = Build module:  clsUtlWTX
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA UTLWTX,clsUtlWTX,'Manage Text Output',wtx
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecUTLWTX) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Temporary file location constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTmpDir              As String = gcTmpDir                  ' gcTmpDir ""C:\_Temp\"""
        PRINT "Private Const mcGenTmp              As String = mcTmpDir & ""_GenTmp.txt""  ' Text Output File"
        PRINT "'***************************************************************************************************"
        PRINT "' Environment Format Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcEnvFmtSQL           As String = ""SQL""                     ' Environment Format: SQL Server"
        PRINT "Private Const mcEnvFmtVBA           As String = ""VBA""                     ' Environment Format: Visual Basic Applications"
        PRINT "Private Const mcEnvFmtCUR           As String = mcEnvFmtSQL               ' Current Environment"
        PRINT "'***************************************************************************************************"
        PRINT "' Text Constants/Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMTY                 As String = """"                        ' Empty String"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTX1                        As String                             ' Working Text"
        PRINT "Private mLN1                        As Integer                            ' Working Length"
        PRINT "Private mLN2                        As Integer                            ' Working Length"
        PRINT "Private mLN3                        As Integer                            ' Working Length"
        PRINT "Private mLN4                        As Integer                            ' Working Length"
        PRINT "Private mLN5                        As Integer                            ' Working Length"
        PRINT "'***************************************************************************************************"
        PRINT "' Write to Current File Options"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRepl                As Boolean = True                     ' Replace current file"
        PRINT "Private Const mcKeep                As Boolean = False                    ' Keep    current file"
        PRINT "'***************************************************************************************************"
        PRINT "' Text Concatenation"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrTXT                     As String                             ' Text accumulator"
        PRINT "Private mstrFTM                     As String                             ' Field Terminator (current)"
        PRINT "Private mstrFTP                     As String                             ' Field Terminator (previous)"
        PRINT "Private mstrRTM                     As String                             ' Row   Terminator (current)"
        PRINT "Private mstrRTP                     As String                             ' Row   Terminator (previous)"
        PRINT "Private mstrRTN                     As String                             ' Carriage return"
        PRINT "Private mstrLMG                     As String                             ' Left margin space"
        PRINT "Private mintLMG                     As Integer                            ' Left margin value"
        PRINT "Private mintLSP                     As Integer                            ' Left spaces value"
        PRINT "'***************************************************************************************************"
        PRINT "' Field/Row Terminators"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTrmNON              As String = """"                        ' Fld/Row Term: None        ()"
        PRINT "Private Const mcTrmCMA              As String = "",""                       ' Fld/Row Term: Comma       (,)"
        PRINT "Private Const mcTrmSCN              As String = "";""                       ' Fld/Row Term: Semicolon   (;)"
        PRINT "Private Const mcTrmVBR              As String = ""|""                       ' Fld/Row Term: VerticalBar (|)"
        PRINT "Private Const mcTrmTLD              As String = ""~""                       ' Fld/Row Term: Tilde       (~)"
        PRINT "Private Const mcTrmTIK              As String = ""`""                       ' Fld/Row Term: BackTick    (`)"
        PRINT "Private Const mcTrmBKS              As String = ""\\""                      ' Fld/Row Term: BackSlash   (b)"
        PRINT "Private Const mcTrmTAB              As String = vbTab                     ' Fld/Row Term: Tab         (t)"
        PRINT "Private Const mcTrmCLF              As String = vbCrLf                    ' Fld/Row Term: CrtLineFeed (c)"
        PRINT "Private Const mcTrmNUL              As String = vbNullChar                ' Fld/Row Term: NullTerm    (u) vbNullChar vbNullString"
        PRINT "Private Const mcTrmLFD              As String = vbLf                      ' Fld/Row Term: LineFeed    (n)"
        PRINT "Private Const mcTrmCRT              As String = vbCr                      ' Fld/Row Term: CarriageRtn (r)"
        PRINT "Private Const mcTrmFLD              As String = ""${F}""                    ' Fld/Row Term: FieldText   (f)"
        PRINT "Private Const mcTrmROW              As String = ""${R}""                    ' Fld/Row Term: RowText     (w)"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFtmDEF              As String = mcTrmVBR                  ' Fld/Row Term: Fld Default"
        PRINT "Private Const mcRtmDEF              As String = mcTrmCLF                  ' Fld/Row Term: Row Default"
        PRINT "'***************************************************************************************************"
        PRINT "' Line Numbering Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcLinNbrSHW           As Boolean = True                     ' Line Numbering: Show"
        PRINT "Private Const mcLinNbrHID           As Boolean = False                    ' Line Numbering: Hide"
        PRINT "'***************************************************************************************************"
        PRINT "' Debug Header Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDbgHdrNEW           As Boolean = True                     ' Debug Header: New Set (reset date/time)"
        PRINT "Private Const mcDbgHdrCUR           As Boolean = False                    ' Debug Header: Current (same  date/time)"
        PRINT "'***************************************************************************************************"
        PRINT "' Text Format Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMrgInc              As Integer = 4                        ' Margin Increment"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcStdWidPOR           As Integer = 100                      ' 08.5 x 11.0 Protrait"
        PRINT "Private Const mcStdHgtPOR           As Integer = 94                       ' 08.5 x 11.0 Protrait"
        PRINT "Private Const mcStdWidLND           As Integer = 149                      ' 08.5 x 11.0 Landscape"
        PRINT "Private Const mcStdHgtLND           As Integer = 62                       ' 08.5 x 11.0 Landscape (Adjusted for PageNo)"
        PRINT "'***************************************************************************************************"
        PRINT "' Line Formatting Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcLinFmtLIN           As String = ""Lin""                     ' LinFmt: Standard Line"
        PRINT "Private Const mcLinFmtCMT           As String = ""Cmt""                     ' LinFmt: Comment line"
        PRINT "Private Const mcLinFmtSEP           As String = ""Sep""                     ' LinFmt: Separator line"
        PRINT "Private Const mcLinFmtBEG           As String = ""Beg""                     ' LinFmt: Begin comment line"
        PRINT "Private Const mcLinFmtEND           As String = ""End""                     ' LinFmt: End comment line"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcLinTypSGL           As String = ""Sgl""                     ' LinFmt: Single    (-)"
        PRINT "Private Const mcLinTypDBL           As String = ""Dbl""                     ' LinFmt: Double    (=)"
        PRINT "Private Const mcLinTypAST           As String = ""Ast""                     ' LinFmt: Asterick  (*)"
        PRINT "Private Const mcLinTypPND           As String = ""Pnd""                     ' LinFmt: Pound     (#)"
        PRINT "Private Const mcLinTypAMP           As String = ""Amp""                     ' LinFmt: Ampersand (@)"
        PRINT "Private Const mcLinTypDOL           As String = ""Dol""                     ' LinFmt: Dollar    ($)"
        PRINT "Private Const mcLinTypTLD           As String = ""Tld""                     ' LinFmt: Tilde     (~)"
        PRINT "Private Const mcLinTypBNG           As String = ""Bng""                     ' LinFmt: Bang      (!)"
        PRINT "Private Const mcLinTypBKS           As String = ""Bks""                     ' LinFmt: BackSlash (\)"
        PRINT "Private Const mcLinTypFWS           As String = ""Fws""                     ' LinFmt: FowdSlash (/)"
        PRINT "'***************************************************************************************************"
        PRINT "' Separator Line Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSpcMTY              As Integer = -1                       ' StdLin: Empty     ()"
        PRINT "Private Const mcFmtMTY              As String = ""LinMty""                  ' StdLin: Empty     ()"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcLinSGL              As String = ""LinSgl""                  ' StdLin: Single    (-)"
        PRINT "Private Const mcLinDBL              As String = ""LinDbl""                  ' StdLin: Double    (=)"
        PRINT "Private Const mcLinAST              As String = ""LinAst""                  ' StdLin: Asterick  (*)"
        PRINT "Private Const mcLinPND              As String = ""LinPnd""                  ' StdLin: Pound     (#)"
        PRINT "Private Const mcLinAMP              As String = ""LinAmp""                  ' StdLin: Ampersand (@)"
        PRINT "Private Const mcLinDOL              As String = ""LinDol""                  ' StdLin: Dollar    ($)"
        PRINT "Private Const mcLinTLD              As String = ""LinTld""                  ' StdLin: Tilde     (~)"
        PRINT "Private Const mcLinBNG              As String = ""LinBng""                  ' StdLin: Bang      (!)"
        PRINT "Private Const mcLinBKS              As String = ""LinBks""                  ' StdLin: BackSlash (\)"
        PRINT "Private Const mcLinFWS              As String = ""LinFws""                  ' StdLin: FowdSlash (/)"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmtSGL              As String = ""CmtSgl""                  ' CmtLin: Single    (-)"
        PRINT "Private Const mcCmtDBL              As String = ""CmtDbl""                  ' CmtLin: Double    (=)"
        PRINT "Private Const mcCmtAST              As String = ""CmtAst""                  ' CmtLin: Asterick  (*)"
        PRINT "Private Const mcCmtPND              As String = ""CmtPnd""                  ' CmtLin: Pound     (#)"
        PRINT "Private Const mcCmtAMP              As String = ""CmtAmp""                  ' CmtLin: Ampersand (@)"
        PRINT "Private Const mcCmtDOL              As String = ""CmtDol""                  ' CmtLin: Dollar    ($)"
        PRINT "Private Const mcCmtTLD              As String = ""CmtTld""                  ' CmtLin: Tilde     (~)"
        PRINT "Private Const mcCmtBNG              As String = ""CmtBng""                  ' CmtLin: Bang      (!)"
        PRINT "Private Const mcCmtBKS              As String = ""CmtBks""                  ' CmtLin: BackSlash (\)"
        PRINT "Private Const mcCmtFWS              As String = ""CmtFws""                  ' CmtLin: FowdSlash (/)"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcBegSGL              As String = ""BegSgl""                  ' BegSep: Single    (-)"
        PRINT "Private Const mcBegDBL              As String = ""BegDbl""                  ' BegSep: Double    (=)"
        PRINT "Private Const mcBegAST              As String = ""BegAst""                  ' BegSep: Asterick  (*)"
        PRINT "Private Const mcBegPND              As String = ""BegPnd""                  ' BegSep: Pound     (#)"
        PRINT "Private Const mcBegAMP              As String = ""BegAmp""                  ' BegSep: Ampersand (@)"
        PRINT "Private Const mcBegDOL              As String = ""BegDol""                  ' BegSep: Dollar    ($)"
        PRINT "Private Const mcBegTLD              As String = ""BegTld""                  ' BegSep: Tilde     (~)"
        PRINT "Private Const mcBegBNG              As String = ""BegBng""                  ' BegSep: Bang      (!)"
        PRINT "Private Const mcBegBKS              As String = ""BegBks""                  ' BegSep: BackSlash (\)"
        PRINT "Private Const mcBegFWS              As String = ""BegFws""                  ' BegSep: FowdSlash (/)"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSepSGL              As String = ""SepSgl""                  ' SepLin: Single    (-)"
        PRINT "Private Const mcSepDBL              As String = ""SepDbl""                  ' SepLin: Double    (=)"
        PRINT "Private Const mcSepAST              As String = ""SepAst""                  ' SepLin: Asterick  (*)"
        PRINT "Private Const mcSepPND              As String = ""SepPnd""                  ' SepLin: Pound     (#)"
        PRINT "Private Const mcSepAMP              As String = ""SepAmp""                  ' SepLin: Ampersand (@)"
        PRINT "Private Const mcSepDOL              As String = ""SepDol""                  ' SepLin: Dollar    ($)"
        PRINT "Private Const mcSepTLD              As String = ""SepTld""                  ' SepLin: Tilde     (~)"
        PRINT "Private Const mcSepBNG              As String = ""SepBng""                  ' SepLin: Bang      (!)"
        PRINT "Private Const mcSepBKS              As String = ""SepBks""                  ' SepLin: BackSlash (\)"
        PRINT "Private Const mcSepFWS              As String = ""SepFws""                  ' SepLin: FowdSlash (/)"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcEndSGL              As String = ""EndSgl""                  ' EndSep: Single    (-)"
        PRINT "Private Const mcEndDBL              As String = ""EndDbl""                  ' EndSep: Double    (=)"
        PRINT "Private Const mcEndAST              As String = ""EndAst""                  ' EndSep: Asterick  (*)"
        PRINT "Private Const mcEndPND              As String = ""EndPnd""                  ' EndSep: Pound     (#)"
        PRINT "Private Const mcEndAMP              As String = ""EndAmp""                  ' EndSep: Ampersand (@)"
        PRINT "Private Const mcEndDOL              As String = ""EndDol""                  ' EndSep: Dollar    ($)"
        PRINT "Private Const mcEndTLD              As String = ""EndTld""                  ' EndSep: Tilde     (~)"
        PRINT "Private Const mcEndBNG              As String = ""EndBng""                  ' EndSep: Bang      (!)"
        PRINT "Private Const mcEndBKS              As String = ""EndBks""                  ' EndSep: BackSlash (\)"
        PRINT "Private Const mcEndFWS              As String = ""EndFws""                  ' EndSep: FowdSlash (/)"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMtyTXT              As String = """"                        ' Text: Emty text"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmtSQL              As String = ""--""                      ' Text: Begin comment"
        PRINT "Private Const mcBegSQL              As String = ""/*""                      ' Text: Begin separator"
        PRINT "Private Const mcEndSQL              As String = ""*/""                      ' Text: End separator"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmtVBA              As String = ""'""                       ' Text: Begin comment"
        PRINT "Private Const mcBegVBA              As String = ""'""                       ' Text: Begin separator"
        PRINT "Private Const mcEndVBA              As String = """"                        ' Text: End separator"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTxtSGL              As String = ""-""                       ' Text: Single    (-)"
        PRINT "Private Const mcTxtDBL              As String = ""=""                       ' Text: Double    (=)"
        PRINT "Private Const mcTxtAST              As String = ""*""                       ' Text: Asterick  (*)"
        PRINT "Private Const mcTxtPND              As String = ""#""                       ' Text: Pound     (#)"
        PRINT "Private Const mcTxtAMP              As String = ""@""                       ' Text: Ampersand (@)"
        PRINT "Private Const mcTxtDOL              As String = ""$""                       ' Text: Dollar    ($)"
        PRINT "Private Const mcTxtTLD              As String = ""~""                       ' Text: Tilde     (~)"
        PRINT "Private Const mcTxtBNG              As String = ""!""                       ' Text: Bang      (!)"
        PRINT "Private Const mcTxtBKS              As String = ""\""                       ' Text: BackSlash (\)"
        PRINT "Private Const mcTxtFWS              As String = ""/""                       ' Text: FowdSlash (/)"
        PRINT "'***************************************************************************************************"
        PRINT "' Separator Line Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrLinSGL                  As String                             ' Line: Single    (-)"
        PRINT "Private mstrLinDBL                  As String                             ' Line: Double    (=)"
        PRINT "Private mstrLinAST                  As String                             ' Line: Asterick  (*)"
        PRINT "Private mstrLinPND                  As String                             ' Line: Pound     (#)"
        PRINT "Private mstrLinAMP                  As String                             ' Line: Ampersand (@)"
        PRINT "Private mstrLinDOL                  As String                             ' Line: Dollar    ($)"
        PRINT "Private mstrLinTLD                  As String                             ' Line: Tilde     (~)"
        PRINT "Private mstrLinBNG                  As String                             ' Line: Bang      (!)"
        PRINT "Private mstrLinBKS                  As String                             ' Line: BackSlash (\)"
        PRINT "Private mstrLinFWS                  As String                             ' Line: FowdSlash (/)"
        PRINT "Private mstrLinCMT                  As String                             ' Line: Comment"
        PRINT "'***************************************************************************************************"
        PRINT "' Text Format Properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrEnvFmt                  As String                             ' Environment"
        PRINT "Private mintLinWid                  As Integer                            ' Line width"
        PRINT "Private mintPagHgt                  As Integer                            ' Page height"
        PRINT "Private mintLinCnt                  As Integer                            ' Line count"
        PRINT "Private mintPagCnt                  As Integer                            ' Page count"
        PRINT "Private mblnShwNbr                  As Boolean                            ' Show line count number"
        PRINT "'***************************************************************************************************"
        PRINT "' Header Line Properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private mintHdrSPC                  As Integer                            ' Current Header Value: Spaces"
        PRINT "Private mstrHdrFMT                  As String                             ' Current Header Value: Line Format"
        PRINT "Private mstrHdrTYP                  As String                             ' Current Header Value: Line Type"
        PRINT "Private mstrHdrDFN                  As String                             ' Current Header Value: Line Definition"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrMtyTxt                  As String                             ' Line: Begin comment"
        PRINT "Private mstrBegCmt                  As String                             ' Line: Begin comment"
        PRINT "Private mstrBegSep                  As String                             ' Line: Begin separator"
        PRINT "Private mstrEndSep                  As String                             ' Line: End separator"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrLIN                     As String                             ' Build: Line body"
        PRINT "Private mstrBEG                     As String                             ' Build: Start of line"
        PRINT "Private mstrEND                     As String                             ' Build: End of line"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    Call AX_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Line_Init(Optional ByVal strEnvFmt As String = mcEnvFmtCUR)"
        PRINT "    mstrEnvFmt = strEnvFmt"
        PRINT "    mstrBegCmt = IIf(mstrEnvFmt = mcEnvFmtVBA, mcCmtVBA, mcCmtSQL)"
        PRINT "    mstrBegSep = IIf(mstrEnvFmt = mcEnvFmtVBA, mcBegVBA, mcBegSQL)"
        PRINT "    mstrEndSep = IIf(mstrEnvFmt = mcEnvFmtVBA, mcEndVBA, mcEndSQL)"
        PRINT "    mstrLinCMT = IIf(mstrEnvFmt = mcEnvFmtVBA, mcCmtVBA, mcCmtSQL) & "" """
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mstrLinSGL = String$(mintLinWid, mcTxtSGL)"
        PRINT "    mstrLinDBL = String$(mintLinWid, mcTxtDBL)"
        PRINT "    mstrLinAST = String$(mintLinWid, mcTxtAST)"
        PRINT "    mstrLinPND = String$(mintLinWid, mcTxtPND)"
        PRINT "    mstrLinAMP = String$(mintLinWid, mcTxtAMP)"
        PRINT "    mstrLinDOL = String$(mintLinWid, mcTxtDOL)"
        PRINT "    mstrLinTLD = String$(mintLinWid, mcTxtTLD)"
        PRINT "    mstrLinBNG = String$(mintLinWid, mcTxtBNG)"
        PRINT "    mstrLinBKS = String$(mintLinWid, mcTxtBKS)"
        PRINT "    mstrLinFWS = String$(mintLinWid, mcTxtFWS)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Header_Init"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Header_Init(Optional ByVal intHdrSpc As Integer = mcSpcMTY, Optional ByVal strHdrFmt As String = mcFmtMTY)"
        PRINT "    ' Set the header space count"
        PRINT "    If intHdrSpc = mcSpcMTY Then"
        PRINT "        intHdrSpc = IIf(mintHdrSPC > mcSpcMTY, mintHdrSPC, 2)"
        PRINT "    End If"
        PRINT "    mintHdrSPC = intHdrSpc"
        PRINT "    ' Set the header format code"
        PRINT "    If strHdrFmt = mcFmtMTY Then"
        PRINT "        strHdrFmt = IIf(Len(mstrHdrDFN) > 0, mstrHdrDFN, mcBegDBL)"
        PRINT "    End If"
        PRINT "    Select Case strHdrFmt"
        PRINT "        Case mcLinSGL: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypSGL: mstrHdrDFN = mcLinSGL"
        PRINT "        Case mcLinDBL: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypDBL: mstrHdrDFN = mcLinDBL"
        PRINT "        Case mcLinAST: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypAST: mstrHdrDFN = mcLinAST"
        PRINT "        Case mcLinPND: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypPND: mstrHdrDFN = mcLinPND"
        PRINT "        Case mcLinAMP: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypAMP: mstrHdrDFN = mcLinAMP"
        PRINT "        Case mcLinDOL: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypDOL: mstrHdrDFN = mcLinDOL"
        PRINT "        Case mcLinTLD: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypTLD: mstrHdrDFN = mcLinTLD"
        PRINT "        Case mcLinBNG: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypBNG: mstrHdrDFN = mcLinBNG"
        PRINT "        Case mcLinBKS: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypBKS: mstrHdrDFN = mcLinBKS"
        PRINT "        Case mcLinFWS: mstrHdrFMT = mcLinFmtLIN: mstrHdrTYP = mcLinTypFWS: mstrHdrDFN = mcLinFWS"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case mcBegSGL: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypSGL: mstrHdrDFN = mcBegSGL"
        PRINT "        Case mcBegDBL: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypDBL: mstrHdrDFN = mcBegDBL"
        PRINT "        Case mcBegAST: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypAST: mstrHdrDFN = mcBegAST"
        PRINT "        Case mcBegPND: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypPND: mstrHdrDFN = mcBegPND"
        PRINT "        Case mcBegAMP: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypAMP: mstrHdrDFN = mcBegAMP"
        PRINT "        Case mcBegDOL: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypDOL: mstrHdrDFN = mcBegDOL"
        PRINT "        Case mcBegTLD: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypTLD: mstrHdrDFN = mcBegTLD"
        PRINT "        Case mcBegBNG: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypBNG: mstrHdrDFN = mcBegBNG"
        PRINT "        Case mcBegBKS: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypBKS: mstrHdrDFN = mcBegBKS"
        PRINT "        Case mcBegFWS: mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypFWS: mstrHdrDFN = mcBegFWS"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case Else:     mstrHdrFMT = mcLinFmtBEG: mstrHdrTYP = mcLinTypDBL: mstrHdrDFN = mcBegDBL"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Line_Format(ByVal strLinDfn As String)"
        PRINT "    Select Case Left$(strLinDfn, 3)  ' Line Format"
        PRINT "        Case mcLinFmtCMT: mstrBEG = mstrBegCmt: mstrEND = mstrMtyTxt"
        PRINT "        Case mcLinFmtBEG: mstrBEG = mstrBegSep: mstrEND = mstrMtyTxt"
        PRINT "        Case mcLinFmtSEP: mstrBEG = mstrBegSep: mstrEND = mstrEndSep"
        PRINT "        Case mcLinFmtEND: mstrBEG = mstrMtyTxt: mstrEND = mstrEndSep"
        PRINT "        Case Else:        mstrBEG = mstrMtyTxt: mstrEND = mstrMtyTxt"
        PRINT "    End Select"
        PRINT "    Select Case Right$(strLinDfn, 3) ' Line Type"
        PRINT "        Case mcLinTypDBL: mstrLIN = mstrLinDBL"
        PRINT "        Case mcLinTypAST: mstrLIN = mstrLinAST"
        PRINT "        Case mcLinTypPND: mstrLIN = mstrLinPND"
        PRINT "        Case mcLinTypAMP: mstrLIN = mstrLinAMP"
        PRINT "        Case mcLinTypDOL: mstrLIN = mstrLinDOL"
        PRINT "        Case mcLinTypTLD: mstrLIN = mstrLinTLD"
        PRINT "        Case mcLinTypBNG: mstrLIN = mstrLinBNG"
        PRINT "        Case mcLinTypBKS: mstrLIN = mstrLinBKS"
        PRINT "        Case mcLinTypFWS: mstrLIN = mstrLinFWS"
        PRINT "        Case Else:        mstrLIN = mstrLinSGL"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Field/Row Terminators"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get TrmNON() As String:                              TrmNON = mcTrmNON: End Property"
        PRINT "Public Property Get TrmCMA() As String:                              TrmCMA = mcTrmCMA: End Property"
        PRINT "Public Property Get TrmSCN() As String:                              TrmSCN = mcTrmSCN: End Property"
        PRINT "Public Property Get TrmVBR() As String:                              TrmVBR = mcTrmVBR: End Property"
        PRINT "Public Property Get TrmTLD() As String:                              TrmTLD = mcTrmTLD: End Property"
        PRINT "Public Property Get TrmTIK() As String:                              TrmTIK = mcTrmTIK: End Property"
        PRINT "Public Property Get TrmBKS() As String:                              TrmBKS = mcTrmBKS: End Property"
        PRINT "Public Property Get TrmTAB() As String:                              TrmTAB = mcTrmTAB: End Property"
        PRINT "Public Property Get TrmCLF() As String:                              TrmCLF = mcTrmCLF: End Property"
        PRINT "Public Property Get TrmNUL() As String:                              TrmNUL = mcTrmNUL: End Property"
        PRINT "Public Property Get TrmLFD() As String:                              TrmLFD = mcTrmLFD: End Property"
        PRINT "Public Property Get TrmCRT() As String:                              TrmCRT = mcTrmCRT: End Property"
        PRINT "Public Property Get TrmFLD() As String:                              TrmFLD = mcTrmFLD: End Property"
        PRINT "Public Property Get TrmROW() As String:                              TrmROW = mcTrmROW: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get FtmDEF() As String:                              FtmDEF = mcFtmDEF: End Property"
        PRINT "Public Property Get RtmDEF() As String:                              RtmDEF = mcRtmDEF: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Environment Format Constants"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get EnvFmtSQL() As String:                     EnvFmtSQL = mcEnvFmtSQL: End Property"
        PRINT "Public Property Get EnvFmtVBA() As String:                     EnvFmtVBA = mcEnvFmtVBA: End Property"
        PRINT "Public Property Get EnvFmtCUR() As String:                     EnvFmtCUR = mcEnvFmtCUR: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Line Numbering Constants"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get LinNbrSHW() As Boolean:                    LinNbrSHW = mcLinNbrSHW: End Property"
        PRINT "Public Property Get LinNbrHID() As Boolean:                    LinNbrHID = mcLinNbrHID: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Debug Header Constants"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DbgHdrNEW() As Boolean:                    DbgHdrNEW = mcDbgHdrNEW: End Property"
        PRINT "Public Property Get DbgHdrCUR() As Boolean:                    DbgHdrCUR = mcDbgHdrCUR: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text Format Constants"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get StdWidPOR() As Integer:                    StdWidPOR = mcStdWidPOR: End Property"
        PRINT "Public Property Get StdHgtPOR() As Integer:                    StdHgtPOR = mcStdHgtPOR: End Property"
        PRINT "Public Property Get StdWidLND() As Integer:                    StdWidLND = mcStdWidLND: End Property"
        PRINT "Public Property Get StdHgtLND() As Integer:                    StdHgtLND = mcStdHgtLND: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text Format Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let EnvFmt(ByVal vNewVal As String)"
        PRINT "    mstrEnvFmt = vNewVal"
        PRINT "    Call Line_Init(mstrEnvFmt)"
        PRINT "End Property"
        PRINT "Public Property Get EnvFmt() As String:                            EnvFmt = mstrEnvFmt: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get MrgInc() As Integer:                             MrgInc = mcMrgInc: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let LinWid(ByVal vNewVal As Integer)"
        PRINT "    mintLinWid = vNewVal"
        PRINT "    Call Line_Init(mstrEnvFmt)"
        PRINT "End Property"
        PRINT "Public Property Get LinWid() As Integer:                           LinWid = mintLinWid: End Property"
        PRINT "Public Property Get MrgWid() As Integer:               MrgWid = mintLinWid - (mintLSP): End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let PagHgt(ByVal vNewVal As Integer):             mintPagHgt = vNewVal: End Property"
        PRINT "Public Property Get PagHgt() As Integer:                           PagHgt = mintPagHgt: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let LinCnt(ByVal vNewVal As Integer):             mintLinCnt = vNewVal: End Property"
        PRINT "Public Property Get LinCnt() As Integer:                           LinCnt = mintLinCnt: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let PagCnt(ByVal vNewVal As Integer):             mintPagCnt = vNewVal: End Property"
        PRINT "Public Property Get PagCnt() As Integer:                           PagCnt = mintPagCnt: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get LinNbr() As String:     LinNbr = Format$(mintLinCnt, ""0000"") & ""|"": End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get LftMrg() As Integer:                              LftMrg = mintLMG: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get LftSpc() As Integer:                              LftSpc = mintLSP: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get TxtCnt() As Integer:   TxtCnt = UBound(Split(mstrTXT, mstrRTM))+1: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let Text(ByVal vNewVal As Variant):                  mstrTXT = vNewVal: End Property"
        PRINT "Public Property Get Text() As Variant:                                  Text = mstrTXT: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Header Line Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get HdrSPC() As Integer:                           HdrSPC = mintHdrSPC: End Property"
        PRINT "Public Property Get HdrFMT() As String:                            HdrFMT = mstrHdrFMT: End Property"
        PRINT "Public Property Get HdrTYP() As String:                            HdrTYP = mstrHdrTYP: End Property"
        PRINT "Public Property Get HdrDFN() As String:                            HdrDFN = mstrHdrDFN: End Property"
        PRINT "Public Property Get HdrZRO() As Integer:                                    HdrZRO = 0: End Property"
        PRINT "Public Property Get HdrONE() As Integer:                                    HdrONE = 1: End Property"
        PRINT "Public Property Get HdrTWO() As Integer:                                    HdrTWO = 2: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get HdrOPN() As String"
        PRINT "    Select Case mstrHdrDFN"
        PRINT "        Case mcLinSGL: HdrOPN = GL(mcLinSGL)"
        PRINT "        Case mcLinDBL: HdrOPN = GL(mcLinDBL)"
        PRINT "        Case mcLinAST: HdrOPN = GL(mcLinAST)"
        PRINT "        Case mcLinPND: HdrOPN = GL(mcLinPND)"
        PRINT "        Case mcLinAMP: HdrOPN = GL(mcLinAMP)"
        PRINT "        Case mcLinDOL: HdrOPN = GL(mcLinDOL)"
        PRINT "        Case mcLinTLD: HdrOPN = GL(mcLinTLD)"
        PRINT "        Case mcLinBNG: HdrOPN = GL(mcLinBNG)"
        PRINT "        Case mcLinBKS: HdrOPN = GL(mcLinBKS)"
        PRINT "        Case mcLinFWS: HdrOPN = GL(mcLinFWS)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case mcBegSGL: HdrOPN = GL(mcBegSGL)"
        PRINT "        Case mcBegDBL: HdrOPN = GL(mcBegDBL)"
        PRINT "        Case mcBegAST: HdrOPN = GL(mcBegAST)"
        PRINT "        Case mcBegPND: HdrOPN = GL(mcBegPND)"
        PRINT "        Case mcBegAMP: HdrOPN = GL(mcBegAMP)"
        PRINT "        Case mcBegDOL: HdrOPN = GL(mcBegDOL)"
        PRINT "        Case mcBegTLD: HdrOPN = GL(mcBegTLD)"
        PRINT "        Case mcBegBNG: HdrOPN = GL(mcBegBNG)"
        PRINT "        Case mcBegBKS: HdrOPN = GL(mcBegBKS)"
        PRINT "        Case mcBegFWS: HdrOPN = GL(mcBegFWS)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case Else:     HdrOPN = GL(mcBegDBL)"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get HdrCMT() As String"
        PRINT "    Select Case mstrHdrDFN"
        PRINT "        Case mcLinSGL: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinDBL: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinAST: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinPND: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinAMP: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinDOL: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinTLD: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinBNG: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinBKS: HdrCMT = mstrLinCMT"
        PRINT "        Case mcLinFWS: HdrCMT = mstrLinCMT"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case mcBegSGL: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegDBL: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegAST: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegPND: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegAMP: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegDOL: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegTLD: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegBNG: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegBKS: HdrCMT = mcMtyTXT"
        PRINT "        Case mcBegFWS: HdrCMT = mcMtyTXT"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case Else:     HdrCMT = mcMtyTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get HdrCLS() As String"
        PRINT "    Select Case mstrHdrDFN"
        PRINT "        Case mcLinSGL: HdrCLS = XL(mcLinSGL)"
        PRINT "        Case mcLinDBL: HdrCLS = XL(mcLinDBL)"
        PRINT "        Case mcLinAST: HdrCLS = XL(mcLinAST)"
        PRINT "        Case mcLinPND: HdrCLS = XL(mcLinPND)"
        PRINT "        Case mcLinAMP: HdrCLS = XL(mcLinAMP)"
        PRINT "        Case mcLinDOL: HdrCLS = XL(mcLinDOL)"
        PRINT "        Case mcLinTLD: HdrCLS = XL(mcLinTLD)"
        PRINT "        Case mcLinBNG: HdrCLS = XL(mcLinBNG)"
        PRINT "        Case mcLinBKS: HdrCLS = XL(mcLinBKS)"
        PRINT "        Case mcLinFWS: HdrCLS = XL(mcLinFWS)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case mcBegSGL: HdrCLS = XL(mcEndSGL)"
        PRINT "        Case mcBegDBL: HdrCLS = XL(mcEndDBL)"
        PRINT "        Case mcBegAST: HdrCLS = XL(mcEndAST)"
        PRINT "        Case mcBegPND: HdrCLS = XL(mcEndPND)"
        PRINT "        Case mcBegAMP: HdrCLS = XL(mcEndAMP)"
        PRINT "        Case mcBegDOL: HdrCLS = XL(mcEndDOL)"
        PRINT "        Case mcBegTLD: HdrCLS = XL(mcEndTLD)"
        PRINT "        Case mcBegBNG: HdrCLS = XL(mcEndBNG)"
        PRINT "        Case mcBegBKS: HdrCLS = XL(mcEndBKS)"
        PRINT "        Case mcBegFWS: HdrCLS = XL(mcEndFWS)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case Else:     HdrCLS = XL(mcEndDBL)"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get HdrLIN() As String"
        PRINT "    Select Case mstrHdrTYP"
        PRINT "        Case mcLinTypSGL: HdrLIN = XL(mcLinSGL)"
        PRINT "        Case mcLinTypDBL: HdrLIN = XL(mcLinDBL)"
        PRINT "        Case mcLinTypAST: HdrLIN = XL(mcLinAST)"
        PRINT "        Case mcLinTypPND: HdrLIN = XL(mcLinPND)"
        PRINT "        Case mcLinTypAMP: HdrLIN = XL(mcLinAMP)"
        PRINT "        Case mcLinTypDOL: HdrLIN = XL(mcLinDOL)"
        PRINT "        Case mcLinTypTLD: HdrLIN = XL(mcLinTLD)"
        PRINT "        Case mcLinTypBNG: HdrLIN = XL(mcLinBNG)"
        PRINT "        Case mcLinTypBKS: HdrLIN = XL(mcLinBKS)"
        PRINT "        Case mcLinTypFWS: HdrLIN = XL(mcLinFWS)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case Else:        HdrLIN = XL(mcLinDBL)"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get HdrBEG() As String"
        PRINT "    Select Case mstrHdrTYP"
        PRINT "        Case mcLinTypSGL: HdrBEG = XL(mcBegSGL)"
        PRINT "        Case mcLinTypDBL: HdrBEG = XL(mcBegDBL)"
        PRINT "        Case mcLinTypAST: HdrBEG = XL(mcBegAST)"
        PRINT "        Case mcLinTypPND: HdrBEG = XL(mcBegPND)"
        PRINT "        Case mcLinTypAMP: HdrBEG = XL(mcBegAMP)"
        PRINT "        Case mcLinTypDOL: HdrBEG = XL(mcBegDOL)"
        PRINT "        Case mcLinTypTLD: HdrBEG = XL(mcBegTLD)"
        PRINT "        Case mcLinTypBNG: HdrBEG = XL(mcBegBNG)"
        PRINT "        Case mcLinTypBKS: HdrBEG = XL(mcBegBKS)"
        PRINT "        Case mcLinTypFWS: HdrBEG = XL(mcBegFWS)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case Else:        HdrBEG = XL(mcBegDBL)"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get HdrEND() As String"
        PRINT "    Select Case mstrHdrTYP"
        PRINT "        Case mcLinTypSGL: HdrEND = XL(mcEndSGL)"
        PRINT "        Case mcLinTypDBL: HdrEND = XL(mcEndDBL)"
        PRINT "        Case mcLinTypAST: HdrEND = XL(mcEndAST)"
        PRINT "        Case mcLinTypPND: HdrEND = XL(mcEndPND)"
        PRINT "        Case mcLinTypAMP: HdrEND = XL(mcEndAMP)"
        PRINT "        Case mcLinTypDOL: HdrEND = XL(mcEndDOL)"
        PRINT "        Case mcLinTypTLD: HdrEND = XL(mcEndTLD)"
        PRINT "        Case mcLinTypBNG: HdrEND = XL(mcEndBNG)"
        PRINT "        Case mcLinTypBKS: HdrEND = XL(mcEndBKS)"
        PRINT "        Case mcLinTypFWS: HdrEND = XL(mcEndFWS)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case Else:        HdrEND = XL(mcEndDBL)"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Separator Line Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get SpcMTY() As Integer:                             SpcMTY = mcSpcMTY: End Property"
        PRINT "Public Property Get FmtMTY() As String:                              FmtMTY = mcFmtMTY: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get MtyCMT() As String:                              MtyCMT = mcMtyTXT: End Property"
        PRINT "Public Property Get LinCMT() As String:                            LinCMT = mstrLinCMT: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get TypDEF() As String:                                 TypDEF = mcMTY: End Property"
        PRINT "Public Property Get TypSGL() As String:                           TypSGL = mcLinTypSGL: End Property"
        PRINT "Public Property Get TypDBL() As String:                           TypDBL = mcLinTypDBL: End Property"
        PRINT "Public Property Get TypAST() As String:                           TypAST = mcLinTypAST: End Property"
        PRINT "Public Property Get TypPND() As String:                           TypPND = mcLinTypPND: End Property"
        PRINT "Public Property Get TypAMP() As String:                           TypAMP = mcLinTypAMP: End Property"
        PRINT "Public Property Get TypDOL() As String:                           TypDOL = mcLinTypDOL: End Property"
        PRINT "Public Property Get TypTLD() As String:                           TypTLD = mcLinTypTLD: End Property"
        PRINT "Public Property Get TypBNG() As String:                           TypBNG = mcLinTypBNG: End Property"
        PRINT "Public Property Get TypBKS() As String:                           TypBKS = mcLinTypBKS: End Property"
        PRINT "Public Property Get TypFWS() As String:                           TypFWS = mcLinTypFWS: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get LinSGL() As String:                              LinSGL = mcLinSGL: End Property"
        PRINT "Public Property Get LinDBL() As String:                              LinDBL = mcLinDBL: End Property"
        PRINT "Public Property Get LinAST() As String:                              LinAST = mcLinAST: End Property"
        PRINT "Public Property Get LinPND() As String:                              LinPND = mcLinPND: End Property"
        PRINT "Public Property Get LinAMP() As String:                              LinAMP = mcLinAMP: End Property"
        PRINT "Public Property Get LinDOL() As String:                              LinDOL = mcLinDOL: End Property"
        PRINT "Public Property Get LinTLD() As String:                              LinTLD = mcLinTLD: End Property"
        PRINT "Public Property Get LinBNG() As String:                              LinBNG = mcLinBNG: End Property"
        PRINT "Public Property Get LinBKS() As String:                              LinBKS = mcLinBKS: End Property"
        PRINT "Public Property Get LinFWS() As String:                              LinFWS = mcLinFWS: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get CmtSGL() As String:                              CmtSGL = mcCmtSGL: End Property"
        PRINT "Public Property Get CmtDBL() As String:                              CmtDBL = mcCmtDBL: End Property"
        PRINT "Public Property Get CmtAST() As String:                              CmtAST = mcCmtAST: End Property"
        PRINT "Public Property Get CmtPND() As String:                              CmtPND = mcCmtPND: End Property"
        PRINT "Public Property Get CmtAMP() As String:                              CmtAMP = mcCmtAMP: End Property"
        PRINT "Public Property Get CmtDOL() As String:                              CmtDOL = mcCmtDOL: End Property"
        PRINT "Public Property Get CmtTLD() As String:                              CmtTLD = mcCmtTLD: End Property"
        PRINT "Public Property Get CmtBNG() As String:                              CmtBNG = mcCmtBNG: End Property"
        PRINT "Public Property Get CmtBKS() As String:                              CmtBKS = mcCmtBKS: End Property"
        PRINT "Public Property Get CmtFWS() As String:                              CmtFWS = mcCmtFWS: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get BegSGL() As String:                              BegSGL = mcBegSGL: End Property"
        PRINT "Public Property Get BegDBL() As String:                              BegDBL = mcBegDBL: End Property"
        PRINT "Public Property Get BegAST() As String:                              BegAST = mcBegAST: End Property"
        PRINT "Public Property Get BegPND() As String:                              BegPND = mcBegPND: End Property"
        PRINT "Public Property Get BegAMP() As String:                              BegAMP = mcBegAMP: End Property"
        PRINT "Public Property Get BegDOL() As String:                              BegDOL = mcBegDOL: End Property"
        PRINT "Public Property Get BegTLD() As String:                              BegTLD = mcBegTLD: End Property"
        PRINT "Public Property Get BegBNG() As String:                              BegBNG = mcBegBNG: End Property"
        PRINT "Public Property Get BegBKS() As String:                              BegBKS = mcBegBKS: End Property"
        PRINT "Public Property Get BegFWS() As String:                              BegFWS = mcBegFWS: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get SepSGL() As String:                              SepSGL = mcSepSGL: End Property"
        PRINT "Public Property Get SepDBL() As String:                              SepDBL = mcSepDBL: End Property"
        PRINT "Public Property Get SepAST() As String:                              SepAST = mcSepAST: End Property"
        PRINT "Public Property Get SepPND() As String:                              SepPND = mcSepPND: End Property"
        PRINT "Public Property Get SepAMP() As String:                              SepAMP = mcSepAMP: End Property"
        PRINT "Public Property Get SepDOL() As String:                              SepDOL = mcSepDOL: End Property"
        PRINT "Public Property Get SepTLD() As String:                              SepTLD = mcSepTLD: End Property"
        PRINT "Public Property Get SepBNG() As String:                              SepBNG = mcSepBNG: End Property"
        PRINT "Public Property Get SepBKS() As String:                              SepBKS = mcSepBKS: End Property"
        PRINT "Public Property Get SepFWS() As String:                              SepFWS = mcSepFWS: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get EndSGL() As String:                              EndSGL = mcEndSGL: End Property"
        PRINT "Public Property Get EndDBL() As String:                              EndDBL = mcEndDBL: End Property"
        PRINT "Public Property Get EndAST() As String:                              EndAST = mcEndAST: End Property"
        PRINT "Public Property Get EndPND() As String:                              EndPND = mcEndPND: End Property"
        PRINT "Public Property Get EndAMP() As String:                              EndAMP = mcEndAMP: End Property"
        PRINT "Public Property Get EndDOL() As String:                              EndDOL = mcEndDOL: End Property"
        PRINT "Public Property Get EndTLD() As String:                              EndTLD = mcEndTLD: End Property"
        PRINT "Public Property Get EndBNG() As String:                              EndBNG = mcEndBNG: End Property"
        PRINT "Public Property Get EndBKS() As String:                              EndBKS = mcEndBKS: End Property"
        PRINT "Public Property Get EndFWS() As String:                              EndFWS = mcEndFWS: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text concatenation methods"
        PRINT "'###################################################################################################"
        PRINT "' Reset the mstrTXT string, margin, report dimensions and environment format"
        PRINT "'     Call wtx.AX_Reset(1, wtx.StdWidPOR, wtx.StdHgtPOR, False, wtx.EnvFmtSQL)"
        PRINT "'     Call wtx.AX_Reset(1, wtx.StdWidPOR, wtx.StdHgtPOR, False, wtx.EnvFmtVBA)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_Reset( _"
        PRINT "    Optional ByVal intLftMrg As Integer = 0, _"
        PRINT "    Optional ByVal intLinWid As Integer = mcStdWidPOR, _"
        PRINT "    Optional ByVal intPagHgt As Integer = mcStdHgtPOR, _"
        PRINT "    Optional ByVal blnShwNbr As Boolean = False, _"
        PRINT "    Optional ByVal strEnvFmt As String = mcEnvFmtCUR _"
        PRINT ")"
        PRINT "    mstrTXT = """""
        PRINT "    mstrFTM = mcFtmDEF"
        PRINT "    mstrRTM = mcRtmDEF"
        PRINT "    mintLMG = intLftMrg"
        PRINT "    mintLSP = (mintLMG * mcMrgInc)"
        PRINT "    mstrLMG = Space(mintLSP)"
        PRINT "    mstrRTN = mstrRTM & mstrLMG"
        PRINT "    mintLinWid = intLinWid"
        PRINT "    mintPagHgt = intPagHgt"
        PRINT "    mblnShwNbr = blnShwNbr"
        PRINT "    mintLinCnt = 0"
        PRINT "    Call Line_Init(strEnvFmt)"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Initialize Header spaces/format"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AX_Header(ByVal intHdrSpc As Integer, ByVal strHdrFmt As String)"
        PRINT "    Call Header_Init(intHdrSpc, strHdrFmt)"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Clear the mstrTXT string and reset margin"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AX_Clear(Optional ByVal intLftMrg As Integer = 0)"
        PRINT "    mstrTXT = """""
        PRINT "    mintLMG = intLftMrg"
        PRINT "    mintLSP = (mintLMG * mcMrgInc)"
        PRINT "    mstrLMG = Space(mintLSP)"
        PRINT "    mstrRTN = mstrRTM & mstrLMG"
        PRINT "    mintLinCnt = 0"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Set line width"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_LinWid(Optional ByVal intLinWid As Integer = mcStdWidPOR)"
        PRINT "   LinWid = intLinWid"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Set page height"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AX_PagHgt(Optional ByVal intPagHgt As Integer = mcStdHgtPOR)"
        PRINT "   PagHgt = intPagHgt"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Show line count number"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AX_ShwNbr(Optional ByVal blnShwNbr As Boolean = False)"
        PRINT "    mblnShwNbr = blnShwNbr"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Set Fld/Row Terminators"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_SetFtm(Optional ByVal strFtmTrm As String = mcFtmDEF)"
        PRINT "    mstrFTP = mstrFTM: mstrFTM = strFtmTrm"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AX_RstFtm()"
        PRINT "    mstrFTM = mstrFTP"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_SetRtm(Optional ByVal strRowTrm As String = mcRtmDEF)"
        PRINT "    mstrRTP = mstrRTM: mstrRTM = strRowTrm"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AX_RstRtm()"
        PRINT "    mstrRTM = mstrRTP"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Add text to mstrTXT string (includes current blank line; excludes initial blank lines)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX(ByVal strNewTxt As String)"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mstrLMG) & LinNbr & strNewTxt"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mstrLMG) & strNewTxt"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Same as AX with 0 left margin"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AZ(ByVal strNewTxt As String)"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mcTrmCLF, mcMTY) & LinNbr & strNewTxt"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mcTrmCLF, mcMTY) & strNewTxt"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Add text to mstrTXT string (see AX; evaluate line count)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AC(ByVal strNewTxt As String)"
        PRINT "    Dim strLST() As String"
        PRINT "    Dim intIDX   As Integer"
        PRINT "    Dim intUBD   As Integer"
        PRINT "    strLST = Split(strNewTxt, mstrRTM): intUBD = UBound(strLST)"
        PRINT "    For intIDX = 0 To intUBD"
        PRINT "        If mblnShwNbr Then"
        PRINT "            Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mstrLMG) & LinNbr & strLST(intIDX)"
        PRINT "        Else"
        PRINT "            Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mstrLMG) & strLST(intIDX)"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "End Sub"
        PRINT "'Public Sub AC(ByVal strNewTxt As String)"
        PRINT "'    If mblnShwNbr Then"
        PRINT "'        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mstrLMG) & LinNbr & strNewTxt"
        PRINT "'    Else"
        PRINT "'        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mstrLMG) & strNewTxt"
        PRINT "'    End If"
        PRINT "'    Call IX(strNewTxt, 0)"
        PRINT "'End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Add text to mstrTXT string (see AX; includes line comment)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AM(ByVal strNewTxt As String)"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & LinNbr & mstrLinCMT & strNewTxt"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & mstrLinCMT & strNewTxt"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Add text to mstrTXT string (see AX; truncates line to current line width)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AW(ByVal strNewTxt As String)"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & LinNbr & Left$(strNewTxt, mintLinWid)"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & Left$(strNewTxt, mintLinWid)"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Add text to mstrTXT string (see AX; includes header lines based on AX_header settings)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AH(ByVal strNewTxt As String)"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & LinNbr & Left$(strNewTxt, mintLinWid)"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & Left$(strNewTxt, mintLinWid)"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Add multiple blank lines to mstrTXT string"
        PRINT "'==================================================================================================="
        PRINT "Public Sub LX(Optional ByVal intLinCnt As Integer = 1)"
        PRINT "    Dim strRTN As String: If Len(mstrTXT) > 0 Then strRTN = mstrRTM"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Do While intLinCnt > 0: Call IC: mstrTXT = mstrTXT & strRTN & LinNbr: strRTN = mstrRTM: intLinCnt = intLinCnt - 1: Loop"
        PRINT "    Else"
        PRINT "        Do While intLinCnt > 0: Call IC: mstrTXT = mstrTXT & strRTN: strRTN = mstrRTM: intLinCnt = intLinCnt - 1: Loop"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Add text to mstrTXT string (excludes current blank line)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub BX(ByVal strNewTxt As String)"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: If Len(strNewTxt) > 0 Then mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & LinNbr & strNewTxt"
        PRINT "    Else"
        PRINT "        Call IC: If Len(strNewTxt) > 0 Then mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & strNewTxt"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "Public Sub BC(ByVal strNewTxt As String)"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: If Len(strNewTxt) > 0 Then mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & LinNbr & mstrLinCMT & strNewTxt"
        PRINT "    Else"
        PRINT "        Call IC: If Len(strNewTxt) > 0 Then mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & mstrLinCMT & strNewTxt"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Concatenate text to mstrTXT string with no modifications"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub CX(ByVal strNewTxt As String)"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) = 0 And Len(strNewTxt) = 0, """", mstrTXT) & LinNbr & IIf(Len(strNewTxt) = 0, mstrRTN, strNewTxt)"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) = 0 And Len(strNewTxt) = 0, """", mstrTXT) & IIf(Len(strNewTxt) = 0, mstrRTN, strNewTxt)"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Concatenate text to mstrTXT string with aligned comments"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub DX(ByVal strStmTxt As String, ByVal intStmLen As Integer, ByVal strCmtTxt As String)"
        PRINT "    intStmLen = IIf(Len(strStmTxt) > intStmLen, Len(strStmTxt), intStmLen)+1"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & LinNbr & Left$(strStmTxt & Space(intStmLen), intStmLen) & ""' "" & strCmtTxt"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & Left$(strStmTxt & Space(intStmLen), intStmLen) & ""' "" & strCmtTxt"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Concatenate text to mstrTXT string with justified statements"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub JX(ByVal strLftTxt As String, Optional ByVal strMidTxt As String, Optional ByVal strRgtTxt As String, Optional ByVal intWID As Integer = -1)"
        PRINT "    strLftTxt = Trim$(strLftTxt): mLN1 = Len(strLftTxt)"
        PRINT "    strMidTxt = Trim$(strMidTxt): mLN2 = Len(strMidTxt)"
        PRINT "    strRgtTxt = Trim$(strRgtTxt): mLN3 = Len(strRgtTxt)"
        PRINT "    If intWID < 0 Then intWID = MrgWid"
        PRINT "    mLN4 = intWID - mLN1 - mLN2 - mLN3"
        PRINT "    mLN5 = (mLN4 \ 2)"
        PRINT "    mLN4 = mLN4 - mLN5"
        PRINT "    If mLN4 < 0 Then mLN4 = 0"
        PRINT "    If mLN5 < 0 Then mLN5 = 0"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mstrLMG) & LinNbr & strLftTxt & Space(mLN4) & strMidTxt & Space(mLN5) & strRgtTxt"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mstrLMG) & strLftTxt & Space(mLN4) & strMidTxt & Space(mLN5) & strRgtTxt"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Add text to mstrTXT string as a single line"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub SX(ByVal strNewTxt As String)"
        PRINT "    strNewTxt = Trim$(strNewTxt)"
        PRINT "    Do While InStr(strNewTxt, ""  "") > 0: strNewTxt = Replace$(strNewTxt, ""  "", "" ""): Loop"
        PRINT "    mstrTXT = Trim$(mstrTXT) & RTrim$("" "" & strNewTxt)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Print specified line (as line)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub PL(ByVal strLinDfn As String, Optional ByVal intLftMrg As Integer = 0)"
        PRINT "    If intLftMrg > 0 Then Call IM(intLftMrg)"
        PRINT "    Call Line_Format(strLinDfn)"
        PRINT "    mTX1 = Left$(mstrLMG & mstrBEG & mstrLIN, mintLinWid - Len(mstrEND)) & mstrEND"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTM, mcMTY) & LinNbr & mTX1"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTM, mcMTY) & mTX1"
        PRINT "    End If"
        PRINT "    If intLftMrg > 0 Then Call DM(intLftMrg)"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Append specified line (as line)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub AL(ByVal strNewTxt As String, ByVal strLinDfn As String)"
        PRINT "    Call Line_Format(strLinDfn)"
        PRINT "    mTX1 = Left$(mstrLMG & strNewTxt & mstrLIN, mintLinWid - Len(mstrEND)) & mstrEND"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & LinNbr & mTX1"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & mstrRTN, mcMTY) & mTX1"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Get specified line (as line)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Function GL(ByVal strLinDfn As String) As String"
        PRINT "    Call Line_Format(strLinDfn)"
        PRINT "    GL = Left$(mstrLMG & mstrBEG & mstrLIN, mintLinWid - Len(mstrEND)) & mstrEND"
        PRINT "End Function"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Get specified line (as text)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Function XL(ByVal strLinDfn As String) As String"
        PRINT "    Call Line_Format(strLinDfn)"
        PRINT "    XL = Left$(mstrBEG & mstrLIN, MrgWid - Len(mstrEND)) & mstrEND"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Append Debug Header"
        PRINT "'==================================================================================================="
        PRINT "Public Function DBX( _"
        PRINT "    ByVal strTtlTxt As String, _"
        PRINT "    Optional ByVal strCmtTxt As String, _"
        PRINT "    Optional ByVal blnRstDtm As Boolean, _"
        PRINT "    Optional ByVal strLinDfn As String, _"
        PRINT "    Optional ByVal intLinWid As Integer _"
        PRINT ") As String"
        PRINT "    If intLinWid <= 0 Then intLinWid = mcStdWidPOR                      ' mcStdWidPOR MrgWid"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Len(strLinDfn) = 0 Then strLinDfn = mcLinDBL: Call Line_Format(strLinDfn)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Static strDAT As String"
        PRINT "    Static strTIM As String"
        PRINT "    Dim strDTM    As String"
        PRINT "    Dim strTTL    As String"
        PRINT "    Dim strCMT    As String"
        PRINT "    Dim strLFT    As String"
        PRINT "    Dim strRGT    As String"
        PRINT "    If blnRstDtm Or Len(strDAT) = 0 Then"
        PRINT "        strDAT = Format$(Date, ""yyyy-mm-dd"")"
        PRINT "        strTIM = Format$(Time, ""hh:mm:ss"")"
        PRINT "    End If"
        PRINT "    strDTM = Trim$(strDAT & "" "" & strTIM): If Len(strDTM) > 0 Then strDTM = strDTM & "" """
        PRINT "    strTTL = Trim$(strTtlTxt):             If Len(strTTL) > 0 Then strTTL = strTTL & "" """
        PRINT "    strCMT = Trim$(strCmtTxt):             If Len(strCMT) > 0 Then strCMT = strCMT & "" """
        PRINT "    strLFT = Left$(mstrLIN, 2) & "" "": strRGT = "" "" & mstrLIN"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    DBX = Left$(strLFT & strTTL & strDTM & strCMT & mstrLIN, intLinWid)"
        PRINT "End Function"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub DBH( _"
        PRINT "    ByVal strTtlTxt As String, _"
        PRINT "    Optional ByVal strCmtTxt As String, _"
        PRINT "    Optional ByVal blnRstDtm As Boolean, _"
        PRINT "    Optional ByVal strLinDfn As String, _"
        PRINT "    Optional ByVal intLinWid As Integer _"
        PRINT ")"
        PRINT "    mTX1 = DBX(strTtlTxt, strCmtTxt, blnRstDtm, strLinDfn, intLinWid)"
        PRINT "    Dim strRTN As String: If Len(mstrTXT) > 0 Then strRTN = mcTrmCLF    ' mcTrmCLF    mstrRTM"
        PRINT "    If mblnShwNbr Then"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & strRTN, mcMTY) & LinNbr & mTX1"
        PRINT "    Else"
        PRINT "        Call IC: mstrTXT = IIf(Len(mstrTXT) > 0, mstrTXT & strRTN, mcMTY) & mTX1"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Set header space"
        PRINT "'==================================================================================================="
        PRINT "Public Sub SS(ByVal intHdrSpc As Integer)"
        PRINT "    Call Header_Init(intHdrSpc, mcFmtMTY)"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Set header format"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub SF(ByVal strHdrFmt As String)"
        PRINT "    Call Header_Init(mcSpcMTY, strHdrFmt)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Increment left margin"
        PRINT "'==================================================================================================="
        PRINT "Public Sub IM(Optional ByVal intIncMrg As Integer = 1)  ' x4 = Tabs"
        PRINT "    mintLMG = mintLMG+intIncMrg: mintLMG = IIf(mintLMG < 0, 0, mintLMG): mintLSP = (mintLMG * mcMrgInc): mstrLMG = Space(mintLSP): mstrRTN = mstrRTM & mstrLMG"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub IP(Optional ByVal intIncSpc As Integer = 1)  ' x1 = Spaces"
        PRINT "    mintLSP = mintLSP+intIncSpc: mintLSP = IIf(mintLSP < 0, 0, mintLSP): mstrLMG = Space(mintLSP): mstrRTN = mstrRTM & mstrLMG"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Decrement left margin"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub DM(Optional ByVal intIncMrg As Integer = 1)  ' x4 = Tabs"
        PRINT "    mintLMG = mintLMG - intIncMrg: mintLMG = IIf(mintLMG < 0, 0, mintLMG): mintLSP = (mintLMG * mcMrgInc): mstrLMG = Space(mintLSP): mstrRTN = mstrRTM & mstrLMG"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub DP(Optional ByVal intIncSpc As Integer = 1)  ' x1 = Spaces"
        PRINT "    mintLSP = mintLSP - intIncSpc: mintLSP = IIf(mintLSP < 0, 0, mintLSP): mstrLMG = Space(mintLSP): mstrRTN = mstrRTM & mstrLMG"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Set left margin"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub SM(ByVal intSetMrg As Integer)  ' x4 = Tabs"
        PRINT "    mintLMG = intSetMrg: mintLMG = IIf(mintLMG < 0, 0, mintLMG): mintLSP = (mintLMG * mcMrgInc): mstrLMG = Space(mintLSP): mstrRTN = mstrRTM & mstrLMG"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub SP(ByVal intSetSpc As Integer)  ' x1 = Spaces"
        PRINT "    mintLSP = intSetSpc: mintLSP = IIf(mintLSP < 0, 0, mintLSP): mstrLMG = Space(mintLSP): mstrRTN = mstrRTM & mstrLMG"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Reset line count for current Text"
        PRINT "'==================================================================================================="
        PRINT "Public Sub RC()"
        PRINT "    mintLinCnt = UBound(Split(mstrTXT, mstrRTM))+1"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Set line count (specify number)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub SC(Optional ByVal intLinCnt As Integer = 0)"
        PRINT "    mintLinCnt = intLinCnt"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Increment line count (specify number)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub IC(Optional ByVal intIncCnt As Integer = 1)"
        PRINT "    mintLinCnt = mintLinCnt+intIncCnt"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Increment line count (evaluate text)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub IX(ByVal strCntTxt As String, Optional ByVal intAddCnt = 1)"
        PRINT "    mintLinCnt = mintLinCnt+UBound(Split(strCntTxt, mstrRTM))+intAddCnt"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Decrement line count (specify number)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Sub DC(Optional ByVal intIncCnt As Integer = 1)"
        PRINT "    mintLinCnt = mintLinCnt - intIncCnt"
        PRINT "End Sub"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Get line count from text"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Function GC(Optional ByVal strCntTxt As String) As Long"
        PRINT "    If Len(strCntTxt) > 0 Then"
        PRINT "        GC = UBound(Split(strCntTxt, mstrRTM))+1"
        PRINT "    Else"
        PRINT "        GC = UBound(Split(mstrTXT, mstrRTM))+1"
        PRINT "    End If"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Extend lines to New Page"
        PRINT "'==================================================================================================="
        PRINT "Public Sub NP(Optional ByVal blnShwNbr As Boolean)"
        PRINT "    If mblnShwNbr Or blnShwNbr Then"
        PRINT "        Do While mintLinCnt Mod mintPagHgt <> 0: mintLinCnt = mintLinCnt+1: mstrTXT = mstrTXT & mstrRTM & LinNbr: Loop"
        PRINT "    Else"
        PRINT "        Do While mintLinCnt Mod mintPagHgt <> 0: mintLinCnt = mintLinCnt+1: mstrTXT = mstrTXT & mstrRTM: Loop"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text manipulation methods"
        PRINT "'###################################################################################################"
        PRINT "Public Sub AX_Chop(ByVal strChpChr As String)"
        PRINT "    Dim intPOS As Integer"
        PRINT "    strChpChr = Trim$(strChpChr): intPOS = Len(strChpChr)"
        PRINT "    If intPOS > 0 Then Do While Right$(mstrTXT, intPOS) = strChpChr: mstrTXT = Left$(mstrTXT, Len(mstrTXT) - intPOS): Loop"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function SepTxt(strCMT As String, Optional strSEP As String = ""@"", Optional intWID As Integer = 100) As String"
        PRINT "    Dim strDAT As String: strDAT = Format$(Date, ""yyyy-mm-dd"")"
        PRINT "    Dim strTIM As String: strTIM = Format$(Time, ""hh:nn:ss"")"
        PRINT "    Dim strDTM As String: strDTM = strDAT & "" "" & strTIM"
        PRINT "    SepTxt = Left$(Trim$(String$(10, strSEP) & "" "" & strCMT) & "" ("" & strDTM & "") "" & String$(intWID, strSEP), intWID)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Write SQL export methods"
        PRINT "'###################################################################################################"
        PRINT "Public Sub AX_WrtSql(Optional blnCLR As Boolean = False, Optional strSepCmt As String, Optional strFilTxt As String = mcTrmCLF)"
        PRINT "    If blnCLR Then"
        PRINT "        Call AX_WrtTmp(strSepCmt, strFilTxt)"
        PRINT "    Else"
        PRINT "        Call AX_ApdTmp(strSepCmt, strFilTxt)"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Internal Text export methods"
        PRINT "'###################################################################################################"
        PRINT "' Write to standard temp file (mcGenTmp)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_WrtTmp(Optional strSepCmt As String, Optional ByVal strFilTxt As String = mcTrmCLF)"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.CreateTextFile(mcGenTmp, mcRepl)"
        PRINT "    If Len(strSepCmt) > 0 Then"
        PRINT "    Call txs.WriteLine(SepTxt(strSepCmt))"
        PRINT "    End If"
        PRINT "    Call txs.Write(mstrTXT & strFilTxt)"
        PRINT "    Call txs.Close"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Write to path unconditionally (overwrite)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_WrtPth(ByVal strFilPth As String, Optional strSepCmt As String, Optional ByVal strFilTxt As String = mcTrmCLF)"
        PRINT "    If Len(strFilPth) = 0 Then"
        PRINT "        strFilPth = mcGenTmp"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.CreateTextFile(strFilPth, mcRepl)"
        PRINT "    If Len(strSepCmt) > 0 Then"
        PRINT "    Call txs.WriteLine(SepTxt(strSepCmt))"
        PRINT "    End If"
        PRINT "    Call txs.Write(mstrTXT & strFilTxt)"
        PRINT "    Call txs.Close"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Write to path conditionally (keep old)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_WrtNew(ByVal strFilPth As String, Optional strSepCmt As String, Optional ByVal strFilTxt As String = mcTrmCLF)"
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    If Len(strFilPth) = 0 Then"
        PRINT "        strFilPth = mcGenTmp"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.CreateTextFile(strFilPth, mcKeep)"
        PRINT "    If Len(strSepCmt) > 0 Then"
        PRINT "        Call txs.WriteLine(SepTxt(strSepCmt))"
        PRINT "    End If"
        PRINT "    Call txs.Write(mstrTXT & strFilTxt)"
        PRINT "    Call txs.Close"
        PRINT "Error_Handler:"
        PRINT "    Exit Sub"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' blnCusFlg = True"
        PRINT "'   => Write to path conditionally (keep old)"
        PRINT "'   => Write to alternative path unconditionally (overwrite)"
        PRINT "' blnCusFlg = False"
        PRINT "'   => Write to path unconditionally (overwrite)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_WrtChk(ByVal strFilPth As String, ByVal blnCusFlg As Boolean, ByVal strOldDir As String, ByVal strNewDir As String, Optional ByVal blnWrtFlg As Boolean = True)"
        PRINT "    If blnCusFlg Then"
        PRINT "        Call AX_WrtNew(strFilPth)"
        PRINT "        If blnWrtFlg Then"
        PRINT "            If Len(strOldDir) > 0 And Len(strNewDir) > 0 Then"
        PRINT "                Do While Left$(strOldDir, 1) = ""\"": strOldDir = Right$(strOldDir, Len(strOldDir) - 1): Loop"
        PRINT "                Do While Right$(strOldDir, 1) = ""\"": strOldDir = Left$(strOldDir, Len(strOldDir) - 1): Loop"
        PRINT "                strOldDir = ""\"" & strOldDir & ""\"""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Do While Left$(strNewDir, 1) = ""\"": strNewDir = Right$(strNewDir, Len(strNewDir) - 1): Loop"
        PRINT "                Do While Right$(strNewDir, 1) = ""\"": strNewDir = Left$(strNewDir, Len(strNewDir) - 1): Loop"
        PRINT "                strNewDir = ""\"" & strNewDir & ""\"""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                strFilPth = Replace$(strFilPth, strOldDir, strNewDir)"
        PRINT "                Call AX_WrtPth(strFilPth)"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    Else"
        PRINT "        Call AX_WrtPth(strFilPth)"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Append Text export methods"
        PRINT "'###################################################################################################"
        PRINT "Public Sub AX_ApdTmp(Optional strSepCmt As String, Optional ByVal strFilTxt As String = mcTrmCLF)"
        PRINT "    If Right$(strFilTxt, Len(vbCrLf)) <> vbCrLf Then"
        PRINT "        strFilTxt = strFilTxt & vbCrLf"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.OpenTextFile(mcGenTmp, ForAppending, False, 0)"
        PRINT "    If Len(strSepCmt) > 0 Then"
        PRINT "    Call txs.WriteLine(SepTxt(strSepCmt))"
        PRINT "    End If"
        PRINT "    Call txs.Write(mstrTXT & strFilTxt)"
        PRINT "    Call txs.Close"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_ApdPth(ByVal strFilPth As String, Optional strSepCmt As String, Optional ByVal strFilTxt As String = mcTrmCLF)"
        PRINT "    If Len(strFilPth) = 0 Then"
        PRINT "        strFilPth = mcGenTmp"
        PRINT "    End If"
        PRINT "    If Right$(strFilTxt, Len(vbCrLf)) <> vbCrLf Then"
        PRINT "        strFilTxt = strFilTxt & vbCrLf"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.OpenTextFile(strFilPth, ForAppending, False, 0)"
        PRINT "    If Len(strSepCmt) > 0 Then"
        PRINT "    Call txs.WriteLine(SepTxt(strSepCmt))"
        PRINT "    End If"
        PRINT "    Call txs.Write(mstrTXT & strFilTxt)"
        PRINT "    Call txs.Close"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' External Text export methods"
        PRINT "'###################################################################################################"
        PRINT "' Write to temp unconditionally (overwrite)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub TX_WrtTmp(Optional ByVal strFilTxt As String, Optional ByVal strSepCmt As String)"
        PRINT "    Dim strCLF As String"
        PRINT "    If Right$(strFilTxt, Len(mstrRTM)) <> mstrRTM Then"
        PRINT "        strCLF = mstrRTM"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    If Len(strSepCmt) > 0 Then"
        PRINT "    Call txs.WriteLine(SepTxt(strSepCmt))"
        PRINT "    End If"
        PRINT "    Set txs = fso.CreateTextFile(mcGenTmp, mcRepl)"
        PRINT "    Call txs.Write(strFilTxt & strCLF)"
        PRINT "    Call txs.Close"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Write to path unconditionally (overwrite)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub TX_WrtPth(ByVal strFilPth As String, Optional ByVal strFilTxt As String, Optional strSepCmt As String)"
        PRINT "    If Len(strFilPth) = 0 Then"
        PRINT "        strFilPth = mcGenTmp"
        PRINT "    End If"
        PRINT "    Dim strCLF As String"
        PRINT "    If Right$(strFilTxt, Len(mstrRTM)) <> mstrRTM Then"
        PRINT "        strCLF = mstrRTM"
        PRINT "    End If"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Dim txs    As TextStream"
        PRINT "    Set txs = fso.CreateTextFile(strFilPth, mcRepl)"
        PRINT "    If Len(strSepCmt) > 0 Then"
        PRINT "    Call txs.WriteLine(SepTxt(strSepCmt))"
        PRINT "    End If"
        PRINT "    Call txs.Write(strFilTxt & strCLF)"
        PRINT "    Call txs.Close"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Internal Text copy methods"
        PRINT "'###################################################################################################"
        PRINT "' Copy to path unconditionally (overwrite)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_CpyPth(ByVal strSrcPth As String, ByVal strTrgPth As String)"
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    If Len(strSrcPth) = 0 Then Exit Sub"
        PRINT "    If Len(strTrgPth) = 0 Then strTrgPth = mcGenTmp"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    If fso.FileExists(strSrcPth) Then"
        PRINT "        Call fso.CopyFile(strSrcPth, strTrgPth, mcRepl)"
        PRINT "    End If"
        PRINT "Error_Handler:"
        PRINT "    Exit Sub"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Copy to path conditionally (keep old)"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AX_CpyNew(ByVal strSrcPth As String, ByVal strTrgPth As String)"
        PRINT "    On Error GoTo Error_Handler"
        PRINT "    If Len(strSrcPth) = 0 Then Exit Sub"
        PRINT "    If Len(strTrgPth) = 0 Then strTrgPth = mcGenTmp"
        PRINT "    Dim fso    As FileSystemObject"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    If fso.FileExists(strSrcPth) Then"
        PRINT "        Call fso.CopyFile(strSrcPth, strTrgPth, mcKeep)"
        PRINT "    End If"
        PRINT "Error_Handler:"
        PRINT "    Exit Sub"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- GENGLB = Build module:  vba_Global
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENGLB
        EXEC ut_zzVBX GENGLB
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENGLB) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVarSizDEC           As Integer = 35                       ' Varible Declaration length"
        PRINT "Private Const mcVarSizVAR           As Integer = 27                       ' Varible VarName length"
        PRINT "Private Const mcVarSizTYP           As Integer = 35                       ' Varible DataType length"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcSlnFmtSTR            As Boolean = True                     ' SelOn: Format as strings True False"
        --INT "'***************************************************************************************************"
        --INT "' Corrupt MDAC:  http://www.macropool.com/en/download/mdac_xp_sp2.html"
        --INT "'***************************************************************************************************"
        --INT "Public Const gcHasBadMDAC           As Boolean = False                    ' Is the MDAC corrupted?  True False"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Standard Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Application Functions"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' FuncName:  Description"
        PRINT "'###################################################################################################"
        PRINT "'Public Sub FuncName()"
        PRINT "'End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENSTD = Build module:  vbaGenSTD
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENSTD
        EXEC ut_zzVBX GENSTD
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENSTD) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As New clsUtlWTX"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' List Test Code"
        PRINT "'###################################################################################################"
        PRINT "Public Sub List_Test()"
        PRINT "    Const pcSTD As String = ""STD"""
        PRINT "    Const pcVBA As String = ""VBA"""
        PRINT "    Const pcDAO As String = ""DAO"""
        PRINT "    Const pcADO As String = ""ADO"""
        PRINT "    '************************************************************"
        PRINT "    Dim intBEG As Integer: intBEG = 1"
        PRINT "    Dim strTYP As String:  strTYP = pcSTD"
        PRINT "    '************************************************************"
        PRINT "    Dim intEND As Integer: intEND = 0"
        PRINT "    '------------------------------------------------------------"
        PRINT "    Dim intINC As Integer: intINC = 10"
        PRINT "    Dim intRNG As Integer: intRNG = 9"
        PRINT "    '------------------------------------------------------------"
        PRINT "    Dim blnCLR As Boolean: blnCLR = True  ' True False"
        PRINT "    '------------------------------------------------------------"
        PRINT "    If strTYP = pcSTD Or gcNOP Then Call List_Test_STD(intBEG, intEND, blnCLR): intBEG = intBEG+intINC: intEND = intBEG+intRNG: blnCLR = False"
        PRINT "    If strTYP = pcVBA Or gcNOP Then Call List_Test_VBA(intBEG, intEND, blnCLR): intBEG = intBEG+intINC: intEND = intBEG+intRNG: blnCLR = False"
        PRINT "    If strTYP = pcDAO Or gcNOP Then Call List_Test_DAO(intBEG, intEND, blnCLR): intBEG = intBEG+intINC: intEND = intBEG+intRNG: blnCLR = False"
        PRINT "    If strTYP = pcADO Or gcNOP Then Call List_Test_ADO(intBEG, intEND, blnCLR): intBEG = intBEG+intINC: intEND = intBEG+intRNG: blnCLR = False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' TEST_STD:  List Test Modules"
        PRINT "'###################################################################################################"
        PRINT "Public Sub List_Test_STD(Optional ByVal intBEG As Integer = 1, Optional ByVal intEND As Integer = 10, Optional ByVal blnCLR As Boolean = True)"
        PRINT "    If intEND < intBEG Then intEND = intBEG+9"
        PRINT "    Dim lngIDX As Integer: Dim strIDX As String"
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx: If blnCLR Then Call .AX_Clear"
        PRINT "    '***********************************************************************************************"
        PRINT "    For lngIDX = intBEG To intEND"
        PRINT "        strIDX = Format$(lngIDX, ""00"")"
        PRINT "        .LX (2)"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Test Code "" & strIDX & ""  (STD)"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""Public Sub Test"" & strIDX & ""(): Call Init_ALL"""
        PRINT "        .AX ""    Const pcMsgTtl = mcModNam & """".Test"" & strIDX & """""""""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize working constants"""
        PRINT "        .AX ""    Const pCMA   As String = """","""""""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Declare working variables"""
        PRINT "        .AX ""    Dim strSQL   As String"""
        PRINT "        .AX ""    Dim intIDX   As Integer"""
        PRINT "        .AX ""    Dim intCNT   As Integer"""
        PRINT "        .AX ""    Dim vrnLST() As Variant"""
        PRINT "        .AX ""    Dim vrnITM   As Variant"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize working class"""
        PRINT "        .AX ""    Dim cls    As Application"""
        PRINT "        .AX ""    Set cls = New Application"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Process the working class"""
        PRINT "        .AX ""    wtx.AX_Clear"""
        PRINT "        .AX ""    With cls"""
        PRINT "        .AX ""        wtx.AX """"APP: """" & .Name"""
        PRINT "        .AX ""        wtx.PL wtx.LinDBL"""
        PRINT "        .AX ""    End With"""
        PRINT "        .AX ""    wtx.AX_WrtTmp"""
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "    Next"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' TEST_VBA:  List Test Modules"
        PRINT "'###################################################################################################"
        PRINT "Public Sub List_Test_VBA(Optional ByVal intBEG As Integer = 1, Optional ByVal intEND As Integer = 10, Optional ByVal blnCLR As Boolean = True)"
        PRINT "    If intEND < intBEG Then intEND = intBEG+9"
        PRINT "    Dim lngIDX As Integer: Dim strIDX As String"
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx: If blnCLR Then Call .AX_Clear"
        PRINT "    '***********************************************************************************************"
        PRINT "    For lngIDX = intBEG To intEND"
        PRINT "        strIDX = Format$(lngIDX, ""00"")"
        PRINT "        .LX (2)"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Test Code "" & strIDX & ""  (VBA)"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""Public Sub Test"" & strIDX & ""(): Call Init_ALL"""
        PRINT "        .AX ""    Const pcMsgTtl = mcModNam & """".Test"" & strIDX & """""""""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize working constants"""
        PRINT "        .AX ""    Const pCMA   As String = """","""""""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Declare working variables"""
        PRINT "        .AX ""    Dim strSQL   As String"""
        PRINT "        .AX ""    Dim intIDX   As Integer"""
        PRINT "        .AX ""    Dim intCNT   As Integer"""
        PRINT "        .AX ""    Dim intUBD   As Integer"""
        PRINT "        .AX ""    Dim vrnARG() As Variant"""
        PRINT "        .AX ""    Dim vrnLST() As Variant"""
        PRINT "        .AX ""    Dim vrnITM   As Variant"""
        PRINT "        .AX ""    Dim strITM   As String"""
        PRINT "        .AX ""    Dim vrnFLD   As Variant"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize an empty variant array (UBound = -1)"""
        PRINT "        .AX ""    vrnLST = Array()"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Process a variant array (UBound)"""
        PRINT "        .AX ""    vrnLST = Array(""""001"""", """"002"""", """"003"""")"""
        PRINT "        .AX ""    intUBD = UBound(vrnLST)"""
        PRINT "        .AX ""    If intUBD > 0 Then"""
        PRINT "        .AX ""        For intIDX = 0 To intUBD"""
        PRINT "        .AX ""            strITM = CStr(vrnLST(intIDX))"""
        PRINT "        .AX ""            Debug.Print strITM"""
        PRINT "        .AX ""        Next"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Process a variant array (ForEach)"""
        PRINT "        .AX ""    vrnLST = Array(""""001"""", """"002"""", """"003"""")"""
        PRINT "        .AX ""    For Each vrnITM In vrnLST"""
        PRINT "        .AX ""        strITM = CStr(vrnITM)"""
        PRINT "        .AX ""        Debug.Print strITM"""
        PRINT "        .AX ""    Next"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Append to a variant array"""
        PRINT "        .AX ""    vrnARG = Array(""""001"""", """"002"""", """"003"""")"""
        PRINT "        .AX ""    vrnLST = Array(): intUBD = UBound(vrnLST)"""
        PRINT "        .AX ""    For Each vrnITM In vrnARG"""
        PRINT "        .AX ""        intUBD = intUBD+1"""
        PRINT "        .AX ""        ReDim Preserve vrnLST(intUBD)"""
        PRINT "        .AX ""        vrnLST(intUBD) = vrnITM"""
        PRINT "        .AX ""        strITM = CStr(vrnLST(intUBD))"""
        PRINT "        .AX ""        Debug.Print strITM"""
        PRINT "        .AX ""    Next"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize current project"""
        PRINT "        .AX ""    Dim prj As Object"""
        PRINT "        .AX ""    Set prj = Application.CurrentProject"""
        PRINT "        .AX ""    Dim obj As AccessObject"""
        PRINT "        .AX ""    For Each obj In prj.AllReports   ' AllReports AllForms AllModules"""
        PRINT "        .AX ""        Debug.Print """"OBJ: """" & obj.Name"""
        PRINT "        .AX ""    Next"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize working class"""
        PRINT "        .AX ""    Dim cls    As Application"""
        PRINT "        .AX ""    Set cls = New Application"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Process the working class"""
        PRINT "        .AX ""    wtx.AX_Clear"""
        PRINT "        .AX ""    With cls"""
        PRINT "        .AX ""        wtx.AX """"APP: """" & .Name"""
        PRINT "        .AX ""        wtx.PL wtx.LinDBL"""
        PRINT "        .AX ""    End With"""
        PRINT "        .AX ""    wtx.AX_WrtTmp"""
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "    Next"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' TEST_DAO:  List Test Modules"
        PRINT "'###################################################################################################"
        PRINT "Public Sub List_Test_DAO(Optional ByVal intBEG As Integer = 1, Optional ByVal intEND As Integer = 10, Optional ByVal blnCLR As Boolean = True)"
        PRINT "    If intEND < intBEG Then intEND = intBEG+9"
        PRINT "    Dim lngIDX As Integer: Dim strIDX As String"
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx: If blnCLR Then Call .AX_Clear"
        PRINT "    '***********************************************************************************************"
        PRINT "    For lngIDX = intBEG To intEND"
        PRINT "        strIDX = Format$(lngIDX, ""00"")"
        PRINT "        .LX (2)"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Test Code "" & strIDX & ""  (DAO)"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""Public Sub Test"" & strIDX & ""(): Call Init_ALL"""
        PRINT "        .AX ""    Const pcMsgTtl = mcModNam & """".Test"" & strIDX & """""""""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize working constants"""
        PRINT "        .AX ""    Const pCMA   As String = """","""""""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Declare working variables"""
        PRINT "        .AX ""    Dim strSQL   As String"""
        PRINT "        .AX ""    Dim intIDX   As Integer"""
        PRINT "        .AX ""    Dim intCNT   As Integer"""
        PRINT "        .AX ""    Dim vrnLST() As Variant"""
        PRINT "        .AX ""    Dim vrnITM   As Variant"""
        PRINT "        .AX ""    Dim vrnFLD   As Variant"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize current database"""
        PRINT "        .AX ""    Dim dbs    As DAO.Database"""
        PRINT "        .AX ""    Set dbs = CurrentDb"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' List table objects"""
        PRINT "        .AX ""    Dim tdf    As TableDef"""
        PRINT "        .AX ""    For Each tdf In dbs.TableDefs"""
        PRINT "        .AX ""        Debug.Print """"TBL: """" & tdf.Name"""
        PRINT "        .AX ""    Next"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Assign the SQL statement"""
        PRINT "        .AX ""    strSQL = """"SELECT * FROM AnyTable"""""""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize and process recordset"""
        PRINT "        .AX ""    Dim rst    As DAO.Recordset"""
        PRINT "        .AX ""    Set rst = dbs.OpenRecordset(strSQL)"""
        PRINT "        .AX ""    With rst"""
        PRINT "        .AX ""        If Not (.BOF And .EOF) Then .MoveFirst"""
        PRINT "        .AX ""        Do While Not .EOF"""
        PRINT "        .AX ""            vrnFLD = .Fields(""""FieldName"""")"""
        PRINT "        .AX ""            .MoveNext"""
        PRINT "        .AX ""        Loop"""
        PRINT "        .AX ""    End With"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Assign the SQL statement"""
        PRINT "        .AX ""    strSQL = """"UPDATE AnyTable SET Field = Value"""""""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize and process querydef"""
        PRINT "        .AX ""    Dim qdf    As DAO.QueryDef"""
        PRINT "        .AX ""    Set qdf = dbs.CreateQueryDef("""""""")"""
        PRINT "        .AX ""    With qdf"""
        PRINT "        .AX ""        .SQL = strSQL"""
        PRINT "        .AX ""        Call .Execute"""
        PRINT "        .AX ""    End With"""
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "    Next"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' TEST_ADO:  List Test Modules"
        PRINT "'###################################################################################################"
        PRINT "Public Sub List_Test_ADO(Optional ByVal intBEG As Integer = 1, Optional ByVal intEND As Integer = 10, Optional ByVal blnCLR As Boolean = True)"
        PRINT "    If intEND < intBEG Then intEND = intBEG+9"
        PRINT "    Dim lngIDX As Integer: Dim strIDX As String"
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx: If blnCLR Then Call .AX_Clear"
        PRINT "    '***********************************************************************************************"
        PRINT "    For lngIDX = intBEG To intEND"
        PRINT "        strIDX = Format$(lngIDX, ""00"")"
        PRINT "        .LX (2)"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Test Code "" & strIDX & ""  (ADO)"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""Public Sub Test"" & strIDX & ""(): Call Init_ALL"""
        PRINT "        .AX ""    Const pcMsgTtl = mcModNam & """".Test"" & strIDX & """""""""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize working constants"""
        PRINT "        .AX ""    Const pCMA   As String = """","""""""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Declare working variables"""
        PRINT "        .AX ""    Dim strSQL   As String"""
        PRINT "        .AX ""    Dim intIDX   As Integer"""
        PRINT "        .AX ""    Dim intCNT   As Integer"""
        PRINT "        .AX ""    Dim vrnLST() As Variant"""
        PRINT "        .AX ""    Dim vrnITM   As Variant"""
        PRINT "        .AX ""    Dim vrnFLD   As Variant"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize and open an automatic connection"""
        PRINT "        .AX ""    Dim cnn    As ADODB.Connection"""
        PRINT "        .AX ""    Set cnn = CurrentProject.Connection"""
        PRINT "        .AX """""
        PRINT "        .AX ""    '' Initialize and open a manual connection"""
        PRINT "        .AX ""    '' Run EXEC ut_zzVBX CNC for connection strings"""
        PRINT "        .AX ""    'Const mcMDBConn As String = """"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Y:\Data\DEV\Projects\DBTools\GEN\SQL\GenSQL.mdb;User ID=admin;Password=;Persist Security Info=True;"""""""
        PRINT "        .AX ""    'Const mcSQLConn As String = """"Provider=SQLOLEDB;Data Source=SERVER;Initial Catalog=DATABASE;Integrated Security=SSPI;"""""""
        PRINT "        .AX ""    'Set cnn = New ADODB.Connection"""
        PRINT "        .AX ""    'With cnn"""
        PRINT "        .AX ""    '    .ConnectionString = mcSQLConn"""
        PRINT "        .AX ""    '    .CursorLocation = adUseClient"""
        PRINT "        .AX ""    '    .Mode = adModeRead"""
        PRINT "        .AX ""    '    .Open"""
        PRINT "        .AX ""    'End With"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Assign the SQL statement"""
        PRINT "        .AX ""    strSQL = """"SELECT * FROM AnyTable"""""""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize and process an ADO recordset"""
        PRINT "        .AX ""    Dim rst    As ADODB.Recordset"""
        PRINT "        .AX ""    Set rst = New ADODB.Recordset"""
        PRINT "        .AX ""    With rst"""
        PRINT "        .AX ""        Call .Open(strSQL, cnn, adOpenForwardOnly, adLockReadOnly)"""
        PRINT "        .AX ""        If Not (.BOF And .EOF) Then .MoveFirst"""
        PRINT "        .AX ""        Do While Not .EOF"""
        PRINT "        .AX ""            vrnFLD = .Fields(""""FieldName"""")"""
        PRINT "        .AX ""            .MoveNext"""
        PRINT "        .AX ""        Loop"""
        PRINT "        .AX ""    End With"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Assign the SQL statement"""
        PRINT "        .AX ""    strSQL = """"UPDATE AnyTable SET Field = Value"""""""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize and execute an ADO command"""
        PRINT "        .AX ""    Dim cmd    As ADODB.Command"""
        PRINT "        .AX ""    Set cmd = New ADODB.Command"""
        PRINT "        .AX ""    With cmd"""
        PRINT "        .AX ""        .CommandText = strSQL"""
        PRINT "        .AX ""        .CommandType = adCmdText"""
        PRINT "        .AX ""        Set .ActiveConnection = cnn"""
        PRINT "        .AX ""        Call .Execute"""
        PRINT "        .AX ""    End With"""
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "    Next"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' GenStd_DevCmt:  List developer comments header for Class module"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Call vbg.DevCmtHdr(""clsClsNam"", ""Class_Description"", ""ANYCLS"", ""SCowden"", ""als"", wtx)"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Run_ClsDevCmt()"
        PRINT "    With wtx"
        PRINT "        .AX_Clear"
        PRINT "    End With"
        PRINT "    Call GenStd_DevCmt(""clsClsNam"", ""Class_Description"", ""ANYCLS"", ""SCowden"", ""als"", wtx)"
        PRINT "    With wtx"
        PRINT "        .AX_WrtTmp"
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub GenStd_DevCmt( _"
        PRINT "    strObjNam As String, _"
        PRINT "    strObjDsc As String, _"
        PRINT "    strRgnCod As String, _"
        PRINT "    strDevNam As String, _"
        PRINT "    strObjAls As String, _"
        PRINT "    clsWTX As clsUtlWTX _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenStd_DevCmt"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    If Len(strDevNam) = 0 Then strDevNam = ""SCowden"""
        PRINT "    strDevNam = Left$(strDevNam & String$(12, "" ""), 12)"
        PRINT "    With clsWTX"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Name:"" & String$(74, "" "") & Format$(Date, ""YYYY-MM-DD"") & "" "" & Format$(Time, ""hh:mm:ss"")"
        PRINT "        .AX ""'   "" & strObjNam"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Purpose:"""
        PRINT "        .AX ""'   "" & strObjDsc"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        If Len(strRgnCod) > 0 Then"
        PRINT "        .AX ""' Regen:"""
        PRINT "        .AX ""'   EXEC ut_zzVBA "" & UCase$(strRgnCod) & "","" & strObjNam & IIf(Len(strObjDsc) > 0, "","""""" & strObjDsc & """""""", """")"
        PRINT "        If strRgnCod = ""RUNRPT"" Then"
        PRINT "        .AX ""'   EXEC ut_zzVBA RUNRPR,''"""
        PRINT "        .AX ""'   EXEC ut_zzVBA RUNRPX,''"""
        PRINT "        End If"
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        End If"
        PRINT "        .AX ""' Developer    Date     Action"""
        PRINT "        .AX ""' ------------ -------- ----------------------------------------------------------------------------"""
        PRINT "        .AX ""' "" & strDevNam & "" "" & Format$(Date, ""mm/dd/yy"") & "" Created the script"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        If Len(strObjAls) > 0 Then"
        PRINT "        .AX ""'# Templates:"""
        PRINT "        .AX ""'"""
        PRINT "        .AX ""'    ' Initialize working objects"""
        PRINT "        .AX ""'    Dim "" & strObjAls & ""    As "" & strObjNam"
        PRINT "        .AX ""'    Set "" & strObjAls & "" = New "" & strObjNam"
        PRINT "        .AX ""'"""
        PRINT "        .AX ""'    ' Process working objects"""
        PRINT "        .AX ""'    With "" & strObjAls"
        PRINT "        .AX ""'    End With"""
        PRINT "        .AX ""'"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        End If"
        PRINT "        .AX ""Option Compare Database"""
        PRINT "        .AX ""Option Explicit"""
        PRINT "        .AX ""Option Base 0"""
        PRINT "        .AX ""'***************************************************************************************************"""
        PRINT "        .AX ""' Initialize module message constants"""
        PRINT "        .AX ""'***************************************************************************************************"""
        PRINT "        .AX ""Private Const mcModNam              As String = """""" & strObjNam & """""""""
        PRINT "        .AX ""Private Const mcModTtl              As String = """""" & strObjDsc & """""""""
        PRINT "        .AX ""Private Const mcModErr              As String = mcModNam"""
        PRINT "        .AX ""Private Const mcModMsg              As String = mcModTtl & """" - """""""
        PRINT "        Select Case Left$(strObjNam, 3)"
        PRINT "            Case ""cls"", ""frm"", ""lst"", ""sfm"", ""tfm"", ""pop"", ""sub"", ""mnu"", ""tpl"""
        PRINT "        .AX ""'***************************************************************************************************"""
        PRINT "        .AX ""' Public Class Events"""
        PRINT "        .AX ""'***************************************************************************************************"""
        PRINT "        .AX ""Public Event Error(ByVal Message As String)"""
        PRINT "        End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENJET = Build module:  vbaGenJET
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENJET
        EXEC ut_zzVBX GENJET
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENJET) BEGIN -- Posted: 2009-03-07
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Standard Lines"
        PRINT "'***************************************************************************************************"
        PRINT "Private mcLinSGL                    As String                             '"
        PRINT "Private mcLinDBL                    As String                             '"
        PRINT "Private mcLinPND                    As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mcSepMG0                    As String                             '"
        PRINT "Private mcSepMG1                    As String                             '"
        PRINT "Private mcSepMG2                    As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "' Table Prefix Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTblPfxLKP           As String = ""lkp_""                    ' Table Prefix: Lookup"
        PRINT "Private Const mcTblPfxLNK           As String = ""lnk_""                    ' Table Prefix: Link"
        PRINT "Private Const mcTblPfxPRF           As String = ""prf_""                    ' Table Prefix: Profile"
        PRINT "Private Const mcTblPfxREF           As String = ""ref_""                    ' Table Prefix: Reference"
        PRINT "Private Const mcTblPfxSYS           As String = ""sys_""                    ' Table Prefix: System"
        PRINT "Private Const mcTblPfxTRX           As String = ""trx_""                    ' Table Prefix: Transaction"
        PRINT "'***************************************************************************************************"
        PRINT "' Form Prefix Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmPfxFRM           As String = ""frm_""                    ' Form Prefix: Standard Form"
        PRINT "Private Const mcFrmPfxLST           As String = ""lst_""                    ' Form Prefix: List (subform)"
        PRINT "Private Const mcFrmPfxPOP           As String = ""pop_""                    ' Form Prefix: Popup Form"
        PRINT "Private Const mcFrmPfxSUB           As String = ""sub_""                    ' Form Prefix: Sub Form"
        PRINT "Private Const mcFrmPfxMNU           As String = ""mnu_""                    ' Form Prefix: Main Menu"
        PRINT "Private Const mcFrmPfxSYS           As String = ""sys_""                    ' Form Prefix: System"
        PRINT "Private Const mcFrmPfxZTP           As String = ""ztp_""                    ' Form Prefix: Templates"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private fso                         As FileSystemObject"
        PRINT "Private wtx                         As clsUtlWTX"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "Private prj                         As Object"
        PRINT "Private obj                         As AccessObject"
        PRINT "Private frm                         As Form"
        PRINT "Private prp                         As Property"
        PRINT "Private ctl                         As Control"
        PRINT "Private dbs                         As DAO.Database"
        PRINT "Private tdf                         As DAO.TableDef"
        PRINT "Private fld                         As DAO.Field"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPRP                 As Integer = 15                       '"
        PRINT "Private Const mcVAL                 As Integer = 25                       '"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private vrnLST()                    As Variant                            ' List array"
        PRINT "Private strELM()                    As String                             ' List elements"
        PRINT "Private vrnITM                      As Variant                            ' Loop item"
        PRINT "'***************************************************************************************************"
        PRINT "Private strOBJ                      As String                             ' Object name"
        PRINT "Private strNAM                      As String                             ' Object name"
        PRINT "Private strPFX                      As String                             ' Object prefix"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strALS                      As String                             ' Object alias"
        PRINT "Private strTBL                      As String                             ' Table name"
        PRINT "Private strTBS                      As String                             ' Table base"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strDTP                      As String                             ' Datatype name"
        PRINT "Private strDCT                      As String                             ' Datatype category"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strCLM                      As String                             ' Column name"
        PRINT "Private strCLX                      As String                             ' Column name (StdLen)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strFRM                      As String                             ' Form name"
        PRINT "Private strFLD                      As String                             ' Field name"
        PRINT "Private strFLX                      As String                             ' Field name (StdLen)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strPRF                      As String                             ' Property reference"
        PRINT "Private strPRP                      As String                             ' Property name"
        PRINT "Private strPRX                      As String                             ' Property name (StdLen)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strCTP                      As String                             ' Control type"
        PRINT "Private strCPX                      As String                             ' Control prefix"
        PRINT "Private strCRF                      As String                             ' Control reference"
        PRINT "Private strCBS                      As String                             ' Control base"
        PRINT "Private strCBX                      As String                             ' Control base (StdLen)"
        PRINT "Private strCTL                      As String                             ' Control object"
        PRINT "Private strCTX                      As String                             ' Control object (StdLen)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strVPX                      As String                             ' Variable prefix"
        PRINT "Private strVAR                      As String                             ' Variable name"
        PRINT "Private strVAX                      As String                             ' Variable name (StdLen)"
        PRINT "Private strVPR                      As String                             ' Variable name (Property)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strLVL                      As String                             ' Variable level"
        PRINT "Private strLVR                      As String                             ' Level VarName"
        PRINT "Private strLVX                      As String                             ' Level VarName (StdLen)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strLPR                      As String                             ' Level VarName (Property)"
        PRINT "Private strLPX                      As String                             ' Level VarName (Property StdLen)"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strRPT                      As String                             ' Report name"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Private strVAL                      As String                             ' Property value"
        PRINT "Private strPRV                      As String                             ' Previous value"
        PRINT "Private strNBR                      As String                             ' List Number"
        PRINT "Private strCMT                      As String                             ' Comment"
        PRINT "Private strSEP                      As String                             ' Separator line"
        PRINT "Private strCMA                      As String                             ' Comma"
        PRINT "Private strCMD                      As String                             ' Command"
        PRINT "Private strCLS                      As String                             ' Class"
        PRINT "Private strMTH                      As String                             ' Method"
        PRINT "Private strTTL                      As String                             ' Title"
        PRINT "Private strFLG                      As String                             ' Flag"
        PRINT "Private strTRG                      As String                             ' Target"
        PRINT "Private strSRC                      As String                             ' Source"
        PRINT "Private strSQT                      As String                             ' Single Quote"
        PRINT "Private strNGC                      As String                             ' Null Global Constant"
        PRINT "Private strSQX                      As String                             ' Single quote text"
        PRINT "Private strBAS                      As String                             ' Base name"
        PRINT "Private strAND                      As String                             ' SQL: AND"
        PRINT "Private strRQR                      As String                             ' "
        PRINT "Private strIDF                      As String                             ' "
        PRINT "Private strDNB                      As String                             ' "
        PRINT "Private strPNB                      As String                             ' "
        PRINT "Private strTNB                      As String                             ' "
        PRINT "'***************************************************************************************************"
        PRINT "Private intCNT                      As Integer                            ' Loop: Count"
        PRINT "Private intIDX                      As Integer                            ' Loop: Index"
        PRINT "Private intMXL                      As Integer                            ' Max Length"
        PRINT "Private intLMG                      As Integer                            ' Left Margin Index"
        PRINT "'***************************************************************************************************"
        PRINT "Private lngTYP                      As Long                               ' Property type"
        PRINT "Private lngIDX                      As Long                               ' Index sequence"
        PRINT "'***************************************************************************************************"
        PRINT "Private blnLIN                      As Boolean                            ' Include Line"
        PRINT "Private blnSTD                      As Boolean                            ' Is Standard"
        PRINT "'***************************************************************************************************"
        PRINT "Private intLenTBL                   As Integer                            ' Object Length: Table"
        PRINT "Private intLenFRM                   As Integer                            ' Object Length: Form"
        PRINT "Private intLenCLM                   As Integer                            ' Object Length: Column"
        PRINT "'***************************************************************************************************"
        PRINT "Private blnIsIMP                    As Boolean                            ' Is import object?"
        PRINT "Private blnIsUSR                    As Boolean                            ' Is user object?"
        PRINT "Private blnIsSYS                    As Boolean                            ' Is system object?"
        PRINT "Private blnIsSTD                    As Boolean                            ' Is standard object?"
        PRINT "Private blnIsUTL                    As Boolean                            ' Is utility object?"
        PRINT "'***************************************************************************************************"
        PRINT "Private blnIsIMI                    As Boolean                            ' Is import item object?"
        PRINT "Private blnIsIMX                    As Boolean                            ' Is import text object?"
        PRINT "Private blnIsLBL                    As Boolean                            ' Is label object?"
        PRINT "Private blnIsLKP                    As Boolean                            ' Is lookup object?"
        PRINT "Private blnIsLNK                    As Boolean                            ' Is link object?"
        PRINT "Private blnIsREF                    As Boolean                            ' Is reference object?"
        PRINT "Private blnIsTRX                    As Boolean                            ' Is transaction object?"
        PRINT "Private blnIsZZZ                    As Boolean                            ' Is temporary object?"
        PRINT "'***************************************************************************************************"
        PRINT "Private blnIsFRM                    As Boolean                            ' Is form object?"
        PRINT "Private blnIsLST                    As Boolean                            ' Is list object?"
        PRINT "Private blnIsPOP                    As Boolean                            ' Is popup object?"
        PRINT "Private blnIsSUB                    As Boolean                            ' Is subform object?"
        PRINT "Private blnIsMNU                    As Boolean                            ' Is menu object?"
        PRINT "Private blnIsTPL                    As Boolean                            ' Is template object?"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcOptYUP              As Boolean = True                     ' Optional: YUP"
        PRINT "Private Const mcOptNOP              As Boolean = False                    ' Optional: NOPE"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Init_ALL"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Init_ALL()"
        PRINT "    '------------------------"
        PRINT "    ' Initialize objects"
        PRINT "    '------------------------"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    Set vbg = New clsUtlVBG"
        PRINT "    '------------------------"
        PRINT "    Set prj = Application.CurrentProject"
        PRINT "    Set dbs = CurrentDb()"
        PRINT "    '------------------------"
        PRINT "    ' Initialize values"
        PRINT "    '------------------------"
        PRINT "    mcLinSGL = String$(100, ""-"")"
        PRINT "    mcLinDBL = String$(100, ""="")"
        PRINT "    mcLinPND = String$(100, ""#"")"
        PRINT "    '------------------------"
        PRINT "    mcSepMG0 = Space(0) & ""'"" & String$(99, ""-"")"
        PRINT "    mcSepMG1 = Space(4) & ""'"" & String$(95, ""-"")"
        PRINT "    mcSepMG2 = Space(8) & ""'"" & String$(91, ""-"")"
        PRINT "    '------------------------"
        PRINT "    gXTS = gcMTY"
        PRINT "    gAND = gcMTY"
        PRINT "    '------------------------"
        PRINT "    vrnLST = Array()"
        PRINT "    vrnITM = Null"
        PRINT "    '------------------------"
        PRINT "    strOBJ = gcMTY"
        PRINT "    strNAM = gcMTY"
        PRINT "    strPFX = gcMTY"
        PRINT "    strALS = gcMTY"
        PRINT "    strTBL = gcMTY"
        PRINT "    strCLM = gcMTY"
        PRINT "    strFLD = gcMTY"
        PRINT "    strFRM = gcMTY"
        PRINT "    strCTL = gcMTY"
        PRINT "    strCTP = gcMTY"
        PRINT "    strRPT = gcMTY"
        PRINT "    strVAR = gcMTY"
        PRINT "    strPRP = gcMTY"
        PRINT "    strVAL = gcMTY"
        PRINT "    strPRV = gcMTY"
        PRINT "    strLPR = gcMTY"
        PRINT "    strLVL = gcMTY"
        PRINT "    strVPX = gcMTY"
        PRINT "    strDTP = gcMTY"
        PRINT "    strDCT = gcMTY"
        PRINT "    strNBR = gcMTY"
        PRINT "    strCMT = gcMTY"
        PRINT "    strSEP = gcMTY"
        PRINT "    strCMA = gcMTY"
        PRINT "    strCPX = gcMTY"
        PRINT "    '------------------------"
        PRINT "    intCNT = gcZRO"
        PRINT "    intIDX = gcZRO"
        PRINT "    intMXL = gcZRO"
        PRINT "    intLMG = gcZRO"
        PRINT "    '------------------------"
        PRINT "    lngTYP = gcZRO"
        PRINT "    lngIDX = gcZRO"
        PRINT "    '------------------------"
        PRINT "    blnLIN = gcNOP"
        PRINT "    '------------------------"
        PRINT "    intLenTBL = GetLenTBL"
        PRINT "    intLenFRM = GetLenFRM"
        PRINT "    '------------------------"
        PRINT "    Call wtx.AX_Clear"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Column Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_CLM(): Call Init_ALL"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcTblLstCUS As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Custom)"
        PRINT "    Const pcTblLstDEF As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Default)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcVarDecMOD As Boolean = gcNOP  ' gcYUP gcNOP   Module Declaration"
        PRINT "    Const pcPrpDecPUB As Boolean = gcNOP  ' gcYUP gcNOP   Property Statement - Public"
        PRINT "    Const pcPrpDecPRV As Boolean = gcNOP  ' gcYUP gcNOP   Property Statement - Private"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcVarDecPRM As Boolean = gcNOP  ' gcYUP gcNOP   Parameter Declaration"
        PRINT "    Const pcVarDecPUB As Boolean = gcNOP  ' gcYUP gcNOP   Variable Declaration - Public"
        PRINT "    Const pcVarDecPRV As Boolean = gcNOP  ' gcYUP gcNOP   Variable Declaration - Private"
        PRINT "    Const pcVarDecDIM As Boolean = gcNOP  ' gcYUP gcNOP   Variable Declaration - Dimension"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcVarAsnVAL As Boolean = gcNOP  ' gcYUP gcNOP   Variable Assignment - Value"
        PRINT "    Const pcVarAsnPRP As Boolean = gcNOP  ' gcYUP gcNOP   Variable Assignment - Property"
        PRINT "    Const pcVarAsnCTL As Boolean = gcNOP  ' gcYUP gcNOP   Variable Assignment - Control"
        PRINT "    Const pcVarAsnFLD As Boolean = gcNOP  ' gcYUP gcNOP   Variable Assignment - Field"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcCtlAsnVAL As Boolean = gcNOP  ' gcYUP gcNOP   Control Assignment - Value"
        PRINT "    Const pcCtlAsnPRP As Boolean = gcNOP  ' gcYUP gcNOP   Control Assignment - Property"
        PRINT "    Const pcCtlAsnVAR As Boolean = gcNOP  ' gcYUP gcNOP   Control Assignment - Variable"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcPrpAsnVAR As Boolean = gcNOP  ' gcYUP gcNOP   Property Assignment - Variable"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const mcLodPrpSTD As Boolean = gcNOP  ' gcYUP gcNOP   Load clsGenPRP Items: Standard"
        PRINT "    Const mcLodPrpFRM As Boolean = gcNOP  ' gcYUP gcNOP   Load clsGenPRP Items: Form"
        PRINT "    Const mcLodRptPRP As Boolean = gcNOP  ' gcYUP gcNOP   Load clsGenRPT Items: Property"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcSqlSelCLM As Boolean = gcNOP  ' gcYUP gcNOP   SELECT: Columns"
        PRINT "    Const pcSqlIniCLM As Boolean = gcNOP  ' gcYUP gcNOP   INSERT: Columns"
        PRINT "    Const pcSqlIniVAR As Boolean = gcNOP  ' gcYUP gcNOP   INSERT: Variables"
        PRINT "    Const pcSqlIniVAL As Boolean = gcNOP  ' gcYUP gcNOP   INSERT: Values"
        PRINT "    Const pcSqlUpdCLM As Boolean = gcNOP  ' gcYUP gcNOP   UPDATE: Columns"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcAxxSelCLM As Boolean = gcNOP  ' gcYUP gcNOP   SELECT: Columns       [.AX]"
        PRINT "    Const pcAxxIniCLM As Boolean = gcNOP  ' gcYUP gcNOP   INSERT: Columns       [.AX]"
        PRINT "    Const pcAxxIniVAL As Boolean = gcNOP  ' gcYUP gcNOP   INSERT: Values        [.AX]"
        PRINT "    Const pcAxxIniVAN As Boolean = gcNOP  ' gcYUP gcNOP   INSERT: Values (Null) [.AX]"
        PRINT "    Const pcAxxUpdCLM As Boolean = gcNOP  ' gcYUP gcNOP   UPDATE: Columns       [.AX]"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcClsModVAR As Boolean = gcNOP  ' gcYUP gcNOP   Class: Module Variables"
        PRINT "    Const pcClsModPRP As Boolean = gcNOP  ' gcYUP gcNOP   Class: Module Properties"
        PRINT "    Const pcClsClrVAR As Boolean = gcNOP  ' gcYUP gcNOP   Class: Clear Variables"
        PRINT "    Const pcClsDecPRM As Boolean = gcNOP  ' gcYUP gcNOP   Class: Declare Parameters"
        PRINT "    Const pcClsWhrCRT As Boolean = gcNOP  ' gcYUP gcNOP   Class: Where Criteria"
        PRINT "    Const pcClsFldASN As Boolean = gcNOP  ' gcYUP gcNOP   Class: Field Assignment"
        PRINT "    Const pcClsIniCLM As Boolean = gcNOP  ' gcYUP gcNOP   Class: Insert Into Columns"
        PRINT "    Const pcClsIniVAR As Boolean = gcNOP  ' gcYUP gcNOP   Class: Insert Into Variables"
        PRINT "    Const pcClsUpdCLM As Boolean = gcNOP  ' gcYUP gcNOP   Class: Update Columns"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcFrmTxtRST As Boolean = gcNOP  ' gcYUP gcNOP   Form Text: Reset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcFrmTxtCUR As Boolean = gcNOP  ' gcYUP gcNOP   Form Text: CurVAL"
        PRINT "    Const pcFrmTxtRQD As Boolean = gcNOP  ' gcYUP gcNOP   Form Text: RqdVAL"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcFrmDatINT As Boolean = gcNOP  ' gcYUP gcNOP   Class: Form Data_Init"
        PRINT "    Const pcFrmDatASN As Boolean = gcNOP  ' gcYUP gcNOP   Class: Form Data_Assn"
        PRINT "    Const pcFrmDatLOD As Boolean = gcNOP  ' gcYUP gcNOP   Class: Form Data_Load"
        PRINT "    Const pcFrmDatSAV As Boolean = gcNOP  ' gcYUP gcNOP   Class: Form Data_Save"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcFrmTxtRSC As Boolean = gcNOP  ' gcYUP gcNOP   Form Text: CboRowSource Calls"
        PRINT "    Const pcFrmTxtRSX As Boolean = gcNOP  ' gcYUP gcNOP   Form Text: CboRowSource SQL"
        PRINT "    Const pcFrmTxtCTL As Boolean = gcNOP  ' gcYUP gcNOP   Form Text: Controls"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcTxtLstBAS As Boolean = gcNOP  ' gcYUP gcNOP   Field List (Basic)"
        PRINT "    Const pcTxtLstSEP As Boolean = gcNOP  ' gcYUP gcNOP   Field List (Separator)"
        PRINT "    Const pcTxtLstSPC As Boolean = gcNOP  ' gcYUP gcNOP   Field List (Spaced)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcTxtSepLIN As Boolean = gcNOP  ' gcYUP gcNOP   Text Separator Line"
        PRINT "    '***********************************************************************************************"
        PRINT "    strLVL = vbg.VarLvlMOD                ' VarLvlNON VarLvlMOD VarLvlGLB VarLvlFNC"
        PRINT "    intLMG = gcLM0                        ' gcLM0 gcLM1 gcLM2 gcLM3"
        PRINT "    blnLIN = gcYUP                        ' gcYUP gcNOP"
        PRINT "    strSEP = mcLinSGL                     ' mcLinSGL mcLinDBL mcLinPND"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    strRPT = ""rpt_DBS_Objects_by_ObjNam""  ' ReportName: rpt_RptNam"
        PRINT "    strFRM = ""sub_LstDBS""                 ' FormName:   frm_FrmNam"
        PRINT "    strALS = ""dbs""                        ' AliasTxt:   zzz"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""tbl_TblNam"""
        PRINT "        Case ""tbl_TblNam"": strOBJ = ""tbl_TblNam"""
        PRINT "        Case ""tbl_TblNam"": strOBJ = ""tbl_TblNam"""
        PRINT "        Case ""tbl_TblNam"": strOBJ = ""tbl_TblNam"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    'wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    For Each tdf In dbs.TableDefs"
        PRINT "        strTBL = tdf.Name"
        PRINT "        If (strTBL = strOBJ) Then"
        PRINT "            If Len(strALS) = 0 Or strALS = ""zzz"" Then"
        PRINT "                strALS = Right$(strTBL, 3)"
        PRINT "            End If"
        PRINT "            strALS = LCase$(strALS)"
        PRINT "            strTBS = Mid$(strTBL, 5, 6)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If pcTblLstCUS Then      ' Table List (Custom)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                '.AX ""    [ ] "" & strTBL"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX mcLinSGL"
        PRINT "                .AX ""[ ] "" & strTBL"
        PRINT "                .AX mcLinSGL"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstDEF Then  ' Table List (Default)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX mcLinSGL"
        PRINT "                .AX ""[ ] "" & strTBL"
        PRINT "                .AX mcLinSGL"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcSqlSelCLM Then  ' Select Statement"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX ""SELECT"""
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            For Each fld In tdf.Fields: intMXL = IIf(Len(fld.Name) > intMXL, Len(fld.Name), intMXL): Next"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            intCNT = tdf.Fields.Count: For Each fld In tdf.Fields: intIDX = intIDX+1"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                strCLM = fld.Name"
        PRINT "                strCLX = Left$(strCLM & gXTS, intMXL)"
        PRINT "                strBAS = Left$(strCLM, 6)"
        PRINT "                '------------------------------------------"
        PRINT "                strNBR = Format(intIDX, ""0000"")"
        PRINT "                strCMA = IIf(intIDX < intCNT, gcCMA, gcMTY)"
        PRINT "                strAND = IIf(intIDX = 1, gcFST, gcAND)"
        PRINT "                '------------------------------------------"
        PRINT "                strVPX = vbg.DaoTypVPX(fld.Type)"
        PRINT "                strCPX = vbg.VarPfxCPX(strVPX, strCLM)"
        PRINT "                '------------------------------------------"
        PRINT "                strDTP = vbg.VarPfxTYP(strVPX)"
        PRINT "                strDCT = vbg.VarPfxDCT(strVPX)"
        PRINT "                '------------------------------------------"
        PRINT "                strPRF = ""prp."""
        PRINT "                strCRF = ""Me."""
        PRINT "                '------------------------------------------"
        PRINT "                If vbg.IsIdent(strVPX, strCLM) Then"
        PRINT "                    strPRP = Mid$(strCLM, 4, 3) & ""Idn"""
        PRINT "                    strPRP = Left$(strCLM, 6)"
        PRINT "                Else"
        PRINT "                    strPRP = Left$(strCLM, 6)"
        PRINT "                End If"
        PRINT "                strPRX = Left$(strPRP & gXTS, intMXL)"
        PRINT "                '------------------------------------------"
        PRINT "                strFLD = strPRP"
        PRINT "                strFLX = strPRX"
        PRINT "                '------------------------------------------"
        PRINT "                strVAR = strVPX & strCLM"
        PRINT "                strVAX = strVPX & strCLX"
        PRINT "                '------------------------------------------"
        PRINT "                strLVR = strLVL & strVAR"
        PRINT "                strLVX = strLVL & strVAX"
        PRINT "                '------------------------------------------"
        PRINT "                strCBS = strCPX & strPRP"
        PRINT "                strCBX = strCPX & strPRX"
        PRINT "                '------------------------------------------"
        PRINT "                strCTL = strCRF & strCBS"
        PRINT "                strCTX = strCRF & strCBX"
        PRINT "                '------------------------------------------"
        PRINT "                strLPR = strLVL & strVPX & strPRP"
        PRINT "                strLPX = strLVL & strVPX & strPRX"
        PRINT "                '------------------------------------------"
        PRINT "                strVPR = strVPX & strPRP"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                strCMT = gcMTY: For Each prp In fld.Properties"
        PRINT "                    If prp.Name = ""Description"" Then strCMT = prp.Value"
        PRINT "                Next"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Select Case strDCT"
        PRINT "                    Case vbg.DatCatTXT: strSQT = ""'"": strNGC = ""gcNulTXT"""
        PRINT "                    Case vbg.DatCatDAT: strSQT = ""'"": strNGC = ""gcNulDAT"""
        PRINT "                    Case vbg.DatCatBLN: strSQT = """":  strNGC = ""gcNulBLN"""
        PRINT "                    Case Else:          strSQT = """":  strNGC = ""gcNulNBR"""
        PRINT "                End Select"
        PRINT "                strSQX = """""""" & strSQT & """""""""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                'On Error Resume Next"
        PRINT "                'For Each prp In fld.Properties"
        PRINT "                '    Debug.Print strCLM & "": "" & prp.Name & ""="" & prp.Value"
        PRINT "                'Next"
        PRINT "                'On Error GoTo 0"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                If pcVarDecMOD Then      ' Module Declaration"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.VarDecPrv(strLVL, strVPX, strCLM, strCMT, intLMG)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcPrpDecPUB Then  ' Property Statement - Public"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.PrpPubStd(strCLM, strDTP, strLVR, gcMTY, gcMTY, gcMTY, blnLIN)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcPrpDecPRV Then  ' Property Statement - Private"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.PrpPrvStd(strCLM, strDTP, strLVR, gcMTY, gcMTY, gcMTY, blnLIN)"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcVarDecPRM Then  ' Parameter Declaration"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.VarDecPrm(vbg.VarLvlNON, strVPX, strCLM, strCMT, strCMA, mcOptNOP, gcLM1)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarDecPUB Then  ' Variable Declaration - Public"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.VarDecPub(strLVL, strVPX, strCLM, strCMT, intLMG)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarDecPRV Then  ' Variable Declaration - Private"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.VarDecPrv(strLVL, strVPX, strCLM, strCMT, intLMG)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarDecDIM Then  ' Variable Declaration - Dimension"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.VarDecDim(strLVL, strVPX, strCLM, strCMT, intLMG)"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcVarAsnVAL Then  ' Variable Assignment - Value"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strLVX & "" = "" & vbg.VarPfxDVL(strVAR)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarAsnPRP Then  ' Variable Assignment - Property"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strLVX & "" = "" & strPRF & strPRP"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarAsnCTL Then  ' Variable Assignment - Control"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strLVX & "" = "" & strCTL"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarAsnFLD Then  ' Variable Assignment - Field"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""            "" & strLVX & "" = .Fields("""""" & strFLD & """""")"""
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcCtlAsnVAL Then  ' Control Assignment - Value"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strCTX & "" = "" & vbg.VarPfxDVL(strVAR)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcCtlAsnPRP Then  ' Control Assignment - Property"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strCTX & "" = "" & strPRF & strPRP"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcCtlAsnVAR Then  ' Control Assignment - Variable"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strCTX & "" = "" & strLVX"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcPrpAsnVAR Then  ' Property Assignment - Variable"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strPRF & strPRP & "" = "" & strLVX"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf mcLodPrpSTD Then  ' Load clsGenPRP Items: Standard"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX Left$(""    Call AddObjITM("""""" & strPRP & """""", """""" & strVPX & """""", """""" & strLPR & """""", """""" & strCTL & """""", """""" & strTBL & """""", """""" & strCLM & """""")"" & gXTS, 95) & "" ' "" & strNBR"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf mcLodPrpFRM Then  ' Load clsGenPRP Items: Form"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX Left$(""    Call AddFrmITM("""""" & strFRM & """""", """""" & strPRP & """""", """"mstrSln"" & strPRP & """""")"" & gXTS, 61) & "" ' "" & strNBR"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf mcLodRptPRP Then  ' Load clsGenRPT Items: Property"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX Left$(""    Call AddPrpITM("""""" & strRPT & """""", """""" & strPRP & """""", """"mcNoAlias"""")"" & gXTS, 93) & "" ' "" & strNBR"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcSqlSelCLM Then  ' SELECT: Columns"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strALS & ""."" & strCLX & "" AS "" & strCLM & strCMA"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcSqlIniCLM Then  ' INSERT INTO: Columns"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strCLM & strCMA"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcSqlIniVAR Then  ' INSERT INTO: Variables"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    "" & strLVR & strCMA"
        PRINT "                        Case vbg.DatCatDAT: .AX ""    "" & strLVR & strCMA"
        PRINT "                        Case Else:          .AX ""    "" & strLVR & strCMA"
        PRINT "                    End Select"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcSqlIniVAL Then  ' INSERT INTO: Values"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    """""" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """""""" & strCMA"
        PRINT "                        Case vbg.DatCatDAT: .AX ""    """""" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """""""" & strCMA"
        PRINT "                        Case Else:          .AX ""    """""" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """""""" & strCMA"
        PRINT "                    End Select"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcSqlUpdCLM Then  ' UPDATE: Columns"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    "" & strCLX & "" = """""" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """""""" & strCMA"
        PRINT "                        Case vbg.DatCatDAT: .AX ""    "" & strCLX & "" = """""" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """""""" & strCMA"
        PRINT "                        Case Else:          .AX ""    "" & strCLX & "" = """""" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """""""" & strCMA"
        PRINT "                    End Select"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcAxxSelCLM Then  ' SELECT: Columns [.AX]"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    .AX """"    "" & strALS & ""."" & strCLX & "" AS "" & strCLM & strCMA & """""""""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcAxxIniCLM Then  ' INSERT INTO: Columns [.AX]"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    .AX """"    "" & strCLM & strCMA & """""""""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcAxxIniVAL Then  ' INSERT INTO: Values [.AX]"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    .AX """"    "" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & strCMA & """""""""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    .AX """"    "" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & strCMA & """""""""
        PRINT "                        Case Else:          .AX ""    .AX """"    "" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & strCMA & """""""""
        PRINT "                    End Select"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcAxxIniVAN Then  ' INSERT INTO: Values (Null) [.AX]"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    .AX """"    "" & strSQT & """""" & IIf("" & strLVR & "" = 0, """"Null"""", "" & strLVR & "") & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    .AX """"    "" & strSQT & """""" & IIf("" & strLVR & "" = 0, """"Null"""", "" & strLVR & "") & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                        Case Else:          .AX ""    .AX """"    "" & strSQT & """""" & IIf("" & strLVR & "" = 0, """"Null"""", "" & strLVR & "") & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                    End Select"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcAxxUpdCLM Then  ' UPDATE: Columns [.AX]"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    .AX """"    "" & strCLX & "" = "" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    .AX """"    "" & strCLX & "" = "" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                        Case Else:          .AX ""    .AX """"    "" & strCLX & "" = "" & strSQT & """""" & "" & strLVR & "" & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                    End Select"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcClsModVAR Then  ' Class: Module Variables"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.VarDecPrv(vbg.VarLvlMOD, strVPX, strPRP, strCMT, intLMG)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcClsModPRP Then  ' Class: Module Properties"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.PrpPubStd(strPRP, strDTP, strLPR, gcMTY, gcMTY, gcMTY, blnLIN)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcClsClrVAR Then  ' Class: Clear Variables"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatBLN: .AX ""    "" & strLPR & "" = mcNulBLN"""
        PRINT "                        Case vbg.DatCatNBR: .AX ""    "" & strLPR & "" = mcNulNBR"""
        PRINT "                        Case vbg.DatCatTXT: .AX ""    "" & strLPR & "" = mcNulTXT"""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    "" & strLPR & "" = mcNulDAT"""
        PRINT "                        Case Else:          .AX ""    "" & strLPR & "" = mcNulVRN"""
        PRINT "                    End Select"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcClsDecPRM Then  ' Class: Declare Parameters"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX vbg.VarDecPrm(vbg.VarLvlNON, strVPX, strPRP, strCMT, strCMA, mcOptYUP, gcLM1)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcClsWhrCRT Then  ' Class: Where Criteria"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    .AX """""" & strAND & ""tbl."" & strCLX & "" = "" & strSQT & """""" & "" & strVPR & "" & """""" & strSQT & """""""""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    .AX """""" & strAND & ""tbl."" & strCLX & "" = "" & strSQT & """""" & "" & strVPR & "" & """""" & strSQT & """""""""
        PRINT "                        Case Else:          .AX ""    .AX """""" & strAND & ""tbl."" & strCLX & "" = "" & strSQT & """""" & "" & strVPR & "" & """""" & strSQT & """""""""
        PRINT "                    End Select"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcClsFldASN Then  ' Class: Field Assignment"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""            "" & strLPX & "" = .Fields("""""" & strCLM & """""")"""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcClsIniCLM Then  ' Class: Insert Into Columns"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    .AX """"    "" & strCLM & strCMA & """""""""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcClsIniVAR Then  ' Class: Insert Into Variables"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    .AX """"    "" & strSQT & """""" & "" & strLPR & "" & """""" & strSQT & strCMA & """""""""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    .AX """"    "" & strSQT & """""" & "" & strLPR & "" & """""" & strSQT & strCMA & """""""""
        PRINT "                        Case Else:          .AX ""    .AX """"    "" & strSQT & """""" & "" & strLPR & "" & """""" & strSQT & strCMA & """""""""
        PRINT "                    End Select"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcClsUpdCLM Then  ' Class: Update Columns"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    .AX """"    "" & strCLX & "" = "" & strSQT & """""" & "" & strLPR & "" & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    .AX """"    "" & strCLX & "" = "" & strSQT & """""" & "" & strLPR & "" & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                        Case Else:          .AX ""    .AX """"    "" & strCLX & "" = "" & strSQT & """""" & "" & strLPR & "" & """""" & strSQT & """" & strCMA & """""""""
        PRINT "                    End Select"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcFrmTxtRST Then  ' Form Text: Reset"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    Me.txt"" & strPRP & "".Enabled = mblnEnbYUP: Me.txt"" & strPRP & "".Locked = mblnLokYUP"""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFrmTxtCUR Then  ' Form Text: CurVAL"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    CurVAL = CurVAL & gcPIP & "" & strLPR"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFrmTxtRQD Then  ' Form Text: RqdVAL"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    RqdVAL = RqdVAL And (Len("" & strLPX & "") > 0)"""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    RqdVAL = RqdVAL And (Len("" & strLPX & "") > 0)"""
        PRINT "                        Case Else:          .AX ""    RqdVAL = RqdVAL And ("" & strLPX & "" > 0)"""
        PRINT "                    End Select"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcFrmDatINT Then  ' Class: Form Data_Init"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatBLN: .AX ""    "" & strLPX & "" = gcNulBLN"""
        PRINT "                        Case vbg.DatCatNBR: .AX ""    "" & strLPX & "" = gcNulNBR"""
        PRINT "                        Case vbg.DatCatTXT: .AX ""    "" & strLPX & "" = gcNulTXT"""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    "" & strLPX & "" = gcNulDAT"""
        PRINT "                        Case Else:          .AX ""    "" & strLPX & "" = gcNulVRN"""
        PRINT "                    End Select"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFrmDatASN Then  ' Class: Form Data_Assn"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    "" & strCTX & "" = "" & strLPR"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFrmDatLOD Then  ' Class: Form Data_Load"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""            "" & strLPX & "" = ."" & strPRP"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFrmDatSAV Then  ' Class: Form Data_Save"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""        ."" & strPRX & "" = "" & strLPR"
        PRINT "                '***********************************************************************************"
        PRINT "                ElseIf pcFrmTxtRSC Then  ' Class: Form Text: CboRowSource Calls"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    If strCPX = ""cbo"" Then"
        PRINT "                    .AX ""    Call "" & strCBS & ""_SetSql"""
        PRINT "                    End If"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFrmTxtRSX Then  ' Form Text: CboRowSource SQL"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    If strCPX = ""cbo"" Then"
        PRINT "                    .AX ""Private Function "" & strCBS & ""_RowSrc() As String"""
        PRINT "                    .AX ""    '***********************************************************************************************"""
        PRINT "                    .AX ""    With wtx: Call .AX_Clear"""
        PRINT "                    .AX ""    '***********************************************************************************************"""
        PRINT "                    .AX ""    .AX """"SELECT"""""""
        PRINT "                    .AX ""    .AX """"    lkp."" & strBAS & ""Srt,"""""""
        PRINT "                    .AX ""    .AX """"    lkp."" & strBAS & ""Cod,"""""""
        PRINT "                    .AX ""    .AX """"    lkp."" & strBAS & ""Nam,"""""""
        PRINT "                    .AX ""    .AX """"    lkp."" & strBAS & ""Dsc,"""""""
        PRINT "                    .AX ""    .AX """"    lkp."" & strBAS & ""ID"""""""
        PRINT "                    .AX ""    .AX """"FROM"""""""
        PRINT "                    .AX ""    .AX """"    lkp_"" & strBAS & "" lkp"""""""
        PRINT "                    .AX ""    .AX """"WHERE"""""""
        PRINT "                    .AX ""    .AX """"    lkp."" & strBAS & ""ID >= 1001"""""""
        PRINT "                    .AX ""    .AX """"ORDER BY"""""""
        PRINT "                    .AX ""    .AX """"    lkp."" & strBAS & ""Nam"""""""
        PRINT "                    .AX ""    '***********************************************************************************************"""
        PRINT "                    .AX ""    End With: If False Then Debug.Print wtx.Text ' True False"""
        PRINT "                    .AX ""    '***********************************************************************************************"""
        PRINT "                    .AX ""    "" & strCBS & ""_RowSrc = wtx.Text"""
        PRINT "                    .AX ""End Function"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    End If"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFrmTxtCTL Then  ' Form Text: Controls"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX """""
        PRINT "                    .AX """""
        PRINT "                    .AX ""'###################################################################################################"""
        PRINT "                    .AX ""' Controls:  "" & strCMT"
        PRINT "                    .AX ""'###################################################################################################"""
        PRINT "                    .AX ""Private Sub "" & strCBS & ""_AfterUpdate()"""
        PRINT "                    If strCPX = ""cbo"" Then"
        PRINT "                    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                    End If"
        PRINT "                    .AX ""    Call "" & strCBS & ""_SetVal"""
        PRINT "                    .AX ""    Call Controls_Reset"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    .AX ""Private Sub "" & strCBS & ""_DblClick(Cancel As Integer)"""
        PRINT "                    .AX ""    "" & strCTL & "" = "" & strNGC & """""
        PRINT "                    .AX ""    Call "" & strCBS & ""_AfterUpdate"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    .AX ""Private Sub "" & strCBS & ""_SetVal()"""
        PRINT "                    .AX ""    "" & strLPR & "" = Nz("" & strCTL & "", "" & strNGC & "")"""
        PRINT "                    .AX ""    "" & strCTL & "" = "" & strLPR"
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    .AX ""Private Sub "" & strCBS & ""_SetNul()"""
        PRINT "                    .AX ""    "" & strLPR & "" = "" & strNGC"
        PRINT "                    .AX ""    "" & strCTL & "" = "" & strLPR"
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    If strCPX = ""cbo"" Then"
        PRINT "                    .AX ""Private Sub "" & strCBS & ""_SetSql()"""
        PRINT "                    .AX ""    Me."" & strCBS & "".RowSource = "" & strCBS & ""_RowSrc"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    End If"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcTxtLstBAS Then  ' Field List (Basic)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    [ ] "" & strCLX & ""  ("" & strCMT & "")"""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcTxtLstSEP Then  ' Field List (Separator)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX ""    [ ] "" & strCLX & ""  ("" & strCMT & "")"""
        PRINT "                    .AX mcSepMG1"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcTxtLstSPC Then  ' Field List (Spaced)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    .AX """""
        PRINT "                    .AX mcSepMG1"
        PRINT "                    .AX ""    [ ] "" & strCLX & ""  ("" & strCMT & "")"""
        PRINT "                    .AX mcSepMG1"
        PRINT "                End If"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            Next"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If pcSqlSelCLM Then  ' Select Statement"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX ""FROM"""
        PRINT "                .AX ""    "" & strTBL & "" "" & strALS"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If pcTxtSepLIN Then  ' Text Separator Line"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        With wtx"
        PRINT "        '*******************************************************************************************"
        PRINT "        .AX """""
        PRINT "        .AX mcLinSGL"
        PRINT "        '*******************************************************************************************"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Table Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_TBL(): Call Init_ALL"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcTblLstCUS As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Custom)"
        PRINT "    Const pcTblLstRST As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Recordset Fields)"
        PRINT "    Const pcTblLstPRP As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Properties)"
        PRINT "    Const pcTblLstCLM As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Columns)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcTblLstBAS As Boolean = True   ' Default       Table List (Basic)"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcIncIMI    As Boolean = gcNOP  ' gcYUP gcNOP   Include import item objects"
        PRINT "    Const pcIncIMX    As Boolean = gcNOP  ' gcYUP gcNOP   Include import text objects"
        PRINT "    Const pcIncLBL    As Boolean = gcNOP  ' gcYUP gcNOP   Include label objects"
        PRINT "    Const pcIncLKP    As Boolean = gcNOP  ' gcYUP gcNOP   Include lookup objects"
        PRINT "    Const pcIncLNK    As Boolean = gcNOP  ' gcYUP gcNOP   Include link objects"
        PRINT "    Const pcIncREF    As Boolean = gcNOP  ' gcYUP gcNOP   Include reference objects"
        PRINT "    Const pcIncTRX    As Boolean = gcNOP  ' gcYUP gcNOP   Include transaction objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIncIMP    As Boolean = gcNOP  ' gcYUP gcNOP   Include import objects"
        PRINT "    Const pcIncUSR    As Boolean = gcNOP  ' gcYUP gcNOP   Include user objects"
        PRINT "    Const pcIncSYS    As Boolean = gcNOP  ' gcYUP gcNOP   Include system objects"
        PRINT "    Const pcIncSTD    As Boolean = gcNOP  ' gcYUP gcNOP   Include standard objects"
        PRINT "    Const pcIncUTL    As Boolean = gcNOP  ' gcYUP gcNOP   Include utility objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIncANY    As Boolean = gcNOP  ' gcYUP gcNOP   Include any objects"
        PRINT "    '***********************************************************************************************"
        PRINT "    strSEP = mcLinSGL                     ' mcLinSGL mcLinDBL mcLinPND"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""tbl_TblNam"""
        PRINT "        Case ""tbl_TblNam"": strOBJ = ""tbl_TblNam"""
        PRINT "        Case ""tbl_TblNam"": strOBJ = ""tbl_TblNam"""
        PRINT "        Case ""tbl_TblNam"": strOBJ = ""tbl_TblNam"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    'wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    For Each tdf In dbs.TableDefs"
        PRINT "        strNAM = tdf.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        blnIsIMI = (strPFX = ""imp_"")"
        PRINT "        blnIsIMX = (strPFX = ""imx_"")"
        PRINT "        blnIsLBL = (strPFX = ""lbl_"")"
        PRINT "        blnIsLKP = (strPFX = ""lkp_"")"
        PRINT "        blnIsLNK = (strPFX = ""lnk_"")"
        PRINT "        blnIsREF = (strPFX = ""ref_"")"
        PRINT "        blnIsTRX = (strPFX = ""trx_"")"
        PRINT "        blnIsZZZ = (strPFX = ""zzz_"")"
        PRINT "        blnIsSYS = (strPFX = ""MSys"")"
        PRINT "        blnIsIMP = (blnIsIMI Or blnIsIMX)"
        PRINT "        blnIsSTD = (blnIsLKP Or blnIsLNK Or blnIsREF Or blnIsTRX)"
        PRINT "        blnIsUSR = Not (blnIsSYS)"
        PRINT "        blnIsUTL = Not (blnIsIMP Or blnIsSTD Or blnIsSYS)"
        PRINT "        If (strNAM = strOBJ) _"
        PRINT "        Or (pcIncIMI And blnIsIMI) _"
        PRINT "        Or (pcIncIMX And blnIsIMX) _"
        PRINT "        Or (pcIncLBL And blnIsLBL) _"
        PRINT "        Or (pcIncLKP And blnIsLKP) _"
        PRINT "        Or (pcIncLNK And blnIsLNK) _"
        PRINT "        Or (pcIncREF And blnIsREF) _"
        PRINT "        Or (pcIncTRX And blnIsTRX) _"
        PRINT "        Or (pcIncIMP And blnIsIMP) _"
        PRINT "        Or (pcIncUSR And blnIsUSR) _"
        PRINT "        Or (pcIncSYS And blnIsSYS) _"
        PRINT "        Or (pcIncSTD And blnIsSTD) _"
        PRINT "        Or (pcIncUTL And blnIsUTL) _"
        PRINT "        Or pcIncANY Then"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If pcTblLstCUS Then      ' Table List (Custom)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                '.AX ""    [ ] "" & strNAM"
        PRINT "                '***********************************************************************************"
        PRINT "                If strPRV <> strPFX Then .AX mcSepMG1"
        PRINT "                .AX ""    'If gcNOP Then Call Export_Data("""""" & strNAM & """""")"""
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstRST Then  ' Table List (Recordset Fields)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                If Left$(strNAM, 4) <> ""MSys"" And Right$(strNAM, 2) <> ""_X"" Then"
        PRINT "                    lngIDX = lngIDX+1"
        PRINT "                     .AX ""    mrstALS.AddNew mvrnFldFmt, Array(""""t"" & Format(lngIDX, ""00"") & """""", """""" & strNAM & """""")"""
        PRINT "                End If"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstPRP Then  ' Table List (Properties)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX ""TBL: "" & strNAM"
        PRINT "                For Each prp In tdf.Properties"
        PRINT "                    strPRP = """": lngTYP = 0: strVAL = """""
        PRINT "                    On Error Resume Next"
        PRINT "                    strPRP = prp.Name: lngTYP = prp.Type"
        PRINT "                    Select Case lngTYP"
        PRINT "                        Case 9:    strVAL = ""***not printable***"""
        PRINT "                        Case 11:   strVAL = ""***not printable***"""
        PRINT "                        Case Else: strVAL = prp.Value"
        PRINT "                    End Select"
        PRINT "                    On Error GoTo 0"
        PRINT "                    .AX ""  TdfPRP: "" & Left$(strPRP & gXTS, mcPRP) & "" = "" & Left$(strVAL & gXTS, mcVAL) & ""  {"" & lngTYP & ""}"""
        PRINT "                Next"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstCLM Then  ' Table List (Columns)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX ""TBL: "" & strNAM"
        PRINT "                For Each fld In tdf.Fields"
        PRINT "                    strFLD = fld.Name"
        PRINT "                    .AX ""  FLD: "" & strFLD"
        PRINT "                Next"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstBAS Then  ' Table List (Basic)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                If strPRV <> strPFX Then .AX strSEP"
        PRINT "                .AX ""[ ] "" & strNAM"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            strPRV = strPFX"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_FRM(): Call Init_ALL"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcObjLstOPN As Boolean = gcNOP  ' gcYUP gcNOP   Object List (Open = Access collections and properties)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcFrmLstCUS As Boolean = gcNOP  ' gcYUP gcNOP   Form List (Custom)"
        PRINT "    Const pcFrmLstPRP As Boolean = gcNOP  ' gcYUP gcNOP   Form List (Properties)"
        PRINT "    Const pcFrmLstCTL As Boolean = gcNOP  ' gcYUP gcNOP   Form List (Controls)"
        PRINT "    Const pcFrmLstBAS As Boolean = gcNOP  ' gcYUP gcNOP   Form List (Basic)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcObjLstNAM As Boolean = True   ' Default       Object List (Name)"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcIncFRM    As Boolean = gcNOP  ' gcYUP gcNOP   Include form objects"
        PRINT "    Const pcIncLST    As Boolean = gcNOP  ' gcYUP gcNOP   Include list objects"
        PRINT "    Const pcIncPOP    As Boolean = gcNOP  ' gcYUP gcNOP   Include popup objects"
        PRINT "    Const pcIncSUB    As Boolean = gcNOP  ' gcYUP gcNOP   Include subform objects"
        PRINT "    Const pcIncMNU    As Boolean = gcNOP  ' gcYUP gcNOP   Include menu objects"
        PRINT "    Const pcIncSYS    As Boolean = gcNOP  ' gcYUP gcNOP   Include system objects"
        PRINT "    Const pcIncTPL    As Boolean = gcNOP  ' gcYUP gcNOP   Include template objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIncSTD    As Boolean = gcNOP  ' gcYUP gcNOP   Include standard objects"
        PRINT "    Const pcIncUTL    As Boolean = gcNOP  ' gcYUP gcNOP   Include utility objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIncANY    As Boolean = gcNOP  ' gcYUP gcNOP   Include any objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcObjOPN    As Boolean = gcYUP  ' gcYUP gcNOP   Open current object"
        PRINT "    '***********************************************************************************************"
        PRINT "    strSEP = mcLinSGL                     ' mcLinSGL mcLinDBL mcLinPND"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    'wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    For Each obj In prj.AllForms"
        PRINT "        strNAM = obj.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        blnIsFRM = (strPFX = mcFrmPfxFRM)"
        PRINT "        blnIsLST = (strPFX = mcFrmPfxLST)"
        PRINT "        blnIsPOP = (strPFX = mcFrmPfxPOP)"
        PRINT "        blnIsSUB = (strPFX = mcFrmPfxSUB)"
        PRINT "        blnIsMNU = (strPFX = mcFrmPfxMNU)"
        PRINT "        blnIsSYS = (strPFX = mcFrmPfxSYS)"
        PRINT "        blnIsTPL = (strPFX = mcFrmPfxZTP)"
        PRINT "        blnIsSTD = (blnIsFRM Or blnIsLST Or blnIsPOP Or blnIsSUB)"
        PRINT "        blnIsUTL = Not blnIsSTD"
        PRINT "        If (strNAM = strOBJ) _"
        PRINT "        Or (pcIncFRM And blnIsFRM) _"
        PRINT "        Or (pcIncLST And blnIsLST) _"
        PRINT "        Or (pcIncPOP And blnIsPOP) _"
        PRINT "        Or (pcIncSUB And blnIsSUB) _"
        PRINT "        Or (pcIncMNU And blnIsMNU) _"
        PRINT "        Or (pcIncSYS And blnIsSYS) _"
        PRINT "        Or (pcIncTPL And blnIsTPL) _"
        PRINT "        Or (pcIncSTD And blnIsSTD) _"
        PRINT "        Or (pcIncUTL And blnIsUTL) _"
        PRINT "        Or pcIncANY Then"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If pcObjLstOPN Then      ' Object List (Open = Access collections and properties)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                DoCmd.OpenForm strNAM"
        PRINT "                For Each frm In Forms"
        PRINT "                    If (frm.Name = strOBJ) Then"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        If pcFrmLstCUS Then      ' Form List (Custom)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""FRM: "" & strNAM"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        ElseIf pcFrmLstPRP Then  ' Form List (Properties)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""FRM: "" & strNAM"
        PRINT "                            For Each prp In frm.Properties"
        PRINT "                                strPRP = """": lngTYP = 0: strVAL = """""
        PRINT "                                On Error Resume Next"
        PRINT "                                strPRP = prp.Name: lngTYP = prp.Type"
        PRINT "                                Select Case lngTYP"
        PRINT "                                    Case 8209: strVAL = ""***not printable***"""
        PRINT "                                    Case Else: strVAL = prp.Value"
        PRINT "                                End Select"
        PRINT "                                On Error GoTo 0"
        PRINT "                                .AX ""  FrmPRP: "" & strPRP & ""="" & strVAL & ""  {"" & lngTYP & ""}"""
        PRINT "                            Next"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        ElseIf pcFrmLstCTL Then  ' Form List (Controls)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""FRM: "" & strNAM"
        PRINT "                            For Each ctl In frm.Controls"
        PRINT "                                strCTL = ctl.Name: strCTP = vbg.CtlTypTYX(ctl.ControlType)"
        PRINT "                                .AX ""  CTL: "" & strCTL & ""  {"" & strCTP & ""}"""
        PRINT "                            Next"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        ElseIf pcFrmLstBAS Then  ' Form List (Basic)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""[ ] "" & strNAM"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        End If"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                    End If"
        PRINT "                Next"
        PRINT "                DoCmd.Close acForm, strNAM, acSaveYes"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcObjLstNAM Then  ' Object List (Name)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX ""[ ] "" & strNAM"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            strPRV = strPFX"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_CTL(): Call Init_ALL"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcCtlTxt001 As Boolean = gcNOP  ' gcYUP gcNOP   Control Text: Custom 001"
        PRINT "    Const pcCtlLstBAS As Boolean = gcYUP  ' gcYUP gcNOP   Control List (Basic)"
        PRINT "    '***********************************************************************************************"
        PRINT "    strSEP = mcLinSGL                     ' mcLinSGL mcLinDBL mcLinPND"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    'wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    For Each obj In prj.AllForms"
        PRINT "        strNAM = obj.Name"
        PRINT "        If (strNAM = strOBJ) Then"
        PRINT "            wtx.AX ""[ ] "" & strNAM"
        PRINT "            DoCmd.OpenForm strNAM"
        PRINT "            For Each frm In Forms"
        PRINT "                If (frm.Name = strOBJ) Then"
        PRINT "                    For Each ctl In frm.Controls"
        PRINT "                        strCTL = ctl.Name: strCTP = vbg.CtlTypTYX(ctl.ControlType)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        If pcCtlTxt001 Then      ' Control Text: Custom 001"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            '.AX ""  CTL: "" & strCTL & ""  {"" & strCTP & ""}"""
        PRINT "                            '***********************************************************************"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        ElseIf pcCtlLstBAS Then  ' Control List (Basic)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""  CTL: "" & strCTL & ""  {"" & strCTP & ""}"""
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        End If"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                    Next"
        PRINT "                End If"
        PRINT "            Next"
        PRINT "            DoCmd.Close acForm, strNAM, acSaveYes"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Command Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_CMD(): Call Init_ALL"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcCmdLstSTD As Boolean = gcNOP  ' gcYUP gcNOP   Command List (clsGenCMD.LodLstSTD)"
        PRINT "    Const pcCmdLstFRM As Boolean = gcNOP  ' gcYUP gcNOP   Command List (clsGenCMD.LodLstFRM)"
        PRINT "    Const pcCmdLstPRP As Boolean = gcNOP  ' gcYUP gcNOP   Command List (clsGenCMD.LodLstPRP)"
        PRINT "    Const pcCmdLstTXT As Boolean = gcNOP  ' gcYUP gcNOP   Command List (clsGenTXT.Include_CMD)"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' CommandName | CommandTitle | RequiresRecord(mcYUP/mcNOP) | IsDefault(mcYUP/mcNOP) | ClassAlias | ClassName | ClassMethod"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim vrnCMD() As Variant: vrnCMD = Array(): Dim vrnDFN As Variant: Dim intDFX As Integer"
        PRINT "    Dim vrnPRP() As Variant: vrnPRP = Array(): Dim vrnPFN As Variant: Dim intPFX As Integer"
        PRINT "    Dim vrnTXT() As Variant: vrnTXT = Array(): Dim vrnTSN As Variant: Dim intTSX As Integer"
        PRINT "    Select Case strOBJ"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""frm_FrmNam"":"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            vrnCMD = Array( _"
        PRINT "                ""DbsObj_SynAll_ObjDfn_From_DBSchm|DBSchema: Synchronize Object Definitions|mcYUP|mcYUP|dbs|clsRqsDBS|DbsObjSYN(DbsIDN)"", _"
        PRINT "                ""DbsObj_DrpOrp_ObjDfn_From_DBSchm|DBSchema: Drop Orphan Object Definitions|mcYUP|mcNOP|dbs|clsRqsDBS|DbsObjDRP(DbsIDN)"", _"
        PRINT "                ""DbsObj_AddNew_ObjDfn_From_DBSchm|DBSchema: Add New Object Definitions    |mcYUP|mcNOP|dbs|clsRqsDBS|DbsObjADD(DbsIDN)"", _"
        PRINT "                ""DbsObj_UpdClm_ClmDfn_From_DBSchm|Update Object Columns from DBSchema     |mcYUP|mcNOP|dbs|clsRqsDBS|DbsObjCLM(DbsIDN)"", _"
        PRINT "                ""DbsObj_UpdObj_PrfDat_From_DBSchm|Update Object Profile from DBSchema     |mcYUP|mcNOP|dbs|clsRqsDBS|DbsObjPRF(DbsIDN)"", _"
        PRINT "                ""DbsObj_UpdObj_UsgDat_From_ClmUsg|Update Object Usage from Column Usage   |mcYUP|mcNOP|dbs|clsRqsDBS|DbsObjUSG(DbsIDN)"" _"
        PRINT "            )"
        PRINT "            vrnPRP = Array( _"
        PRINT "                ""PrpNam|mcNoAlias"", _"
        PRINT "                ""PrpNam|mcNoAlias"", _"
        PRINT "                ""PrpNam|mcNoAlias"" _"
        PRINT "            )"
        PRINT "            vrnTXT = Array( _"
        PRINT "                ""TrgPrp|SrcPrp"", _"
        PRINT "                ""TrgPrp|SrcPrp"", _"
        PRINT "                ""TrgPrp|SrcPrp"" _"
        PRINT "            )"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcDLM    As String = ""|""                                        ' Delimiter character"
        PRINT "    Const pcDLX    As String = ""||||||||||""                               ' Delimiter Suffix"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIdxNAM As Integer = 0                                         ' Command Name"
        PRINT "    Const pcIdxTTL As Integer = 1                                         ' Command Title"
        PRINT "    Const pcIdxRQR As Integer = 2                                         ' Requires Record in Form for Execution"
        PRINT "    Const pcIdxIDF As Integer = 3                                         ' Is Default Command in Command List"
        PRINT "    Const pcIdxALS As Integer = 4                                         ' Class Alias"
        PRINT "    Const pcIdxCLS As Integer = 5                                         ' Class Name"
        PRINT "    Const pcIdxMTH As Integer = 6                                         ' Class Method"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIdxPRP As Integer = 0                                         ' Property Name"
        PRINT "    Const pcIdxFLG As Integer = 1                                         ' Use Alias Flag"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIdxTRG As Integer = 0                                         ' Target Property Name"
        PRINT "    Const pcIdxSRC As Integer = 1                                         ' Source Property Name"
        PRINT "    '***********************************************************************************************"
        PRINT "    strFRM = strOBJ"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If pcCmdLstSTD Then"
        PRINT "        Call wtx.IM(1): Call wtx.PL(wtx.CmtSGL)"
        PRINT "    ElseIf pcCmdLstFRM Then"
        PRINT "        Call wtx.IM(1): Call wtx.PL(wtx.CmtSGL)"
        PRINT "    ElseIf pcCmdLstPRP Then"
        PRINT "        Call wtx.IM(1)"
        PRINT "    ElseIf pcCmdLstTXT Then"
        PRINT "        Call wtx.IM(2)"
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    intDFX = 0: For Each vrnDFN In vrnCMD: intDFX = intDFX+1"
        PRINT "        strELM = Split(CStr(vrnDFN) & pcDLX, pcDLM)"
        PRINT "        strCMD = Trim$(strELM(pcIdxNAM))"
        PRINT "        strTTL = Trim$(strELM(pcIdxTTL))"
        PRINT "        strRQR = Trim$(strELM(pcIdxRQR))"
        PRINT "        strIDF = Trim$(strELM(pcIdxIDF))"
        PRINT "        strALS = Trim$(strELM(pcIdxALS))"
        PRINT "        strCLS = Trim$(strELM(pcIdxCLS))"
        PRINT "        strMTH = Trim$(strELM(pcIdxMTH))"
        PRINT "        strDNB = Format(intDFX, ""0000"")"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        If pcCmdLstSTD Then          ' Command List (clsGenCMD.LodLstSTD)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            With wtx"
        PRINT "            '*******************************************************************************"
        PRINT "            .AX Left$(""Call AddObjITM("""""" & strCMD & """""", "" & strRQR & "", """""" & strTTL & """""")"" & gXTS, 110) & "" ' "" & strDNB"
        PRINT "            '*******************************************************************************"
        PRINT "            End With"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        ElseIf pcCmdLstFRM Then      ' Command List (clsGenCMD.LodLstFRM)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            With wtx"
        PRINT "            '*******************************************************************************"
        PRINT "            .AX Left$(""Call AddFrmITM("""""" & strFRM & """""", "" & strIDF & "", """""" & strCMD & """""", mcMTY)"" & gXTS, 89) & "" ' "" & strDNB"
        PRINT "            '*******************************************************************************"
        PRINT "            End With"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        ElseIf pcCmdLstPRP Then      ' Command List (clsGenCMD.LodLstPRP)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            With wtx"
        PRINT "            '*******************************************************************************"
        PRINT "            Call .PL(.CmtSGL)"
        PRINT "            intPFX = 0: For Each vrnPFN In vrnPRP: intPFX = intPFX+1"
        PRINT "                strELM = Split(CStr(vrnPFN) & pcDLX, pcDLM)"
        PRINT "                strPRP = Trim$(strELM(pcIdxPRP))"
        PRINT "                strFLG = Trim$(strELM(pcIdxFLG))"
        PRINT "                strPNB = Format(intPFX, ""0000"")"
        PRINT "                .AX Left$(""Call AddPrpITM("""""" & strCMD & """""", """""" & strPRP & """""", """""" & strFLG & """""")"" & gXTS, 89) & "" ' "" & strPNB"
        PRINT "            Next"
        PRINT "            '*******************************************************************************"
        PRINT "            End With"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        ElseIf pcCmdLstTXT Then      ' Command List (clsGenTXT.Include_CMD)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            With wtx"
        PRINT "            '*******************************************************************************"
        PRINT "            Call .PL(.CmtSGL)"
        PRINT "            .AX Left$(""Case """""" & strCMD & """""""" & gXTS, 73) & "" ' Command BaseName"""
        PRINT "            Call .PL(.CmtSGL)"
        PRINT "            .AX ""    .AX """"    ' Initialize Working Objects"""""""
        PRINT "            .AX ""    .AX """"    Dim "" & strALS & ""    As "" & strCLS & """""""""
        PRINT "            .AX ""    .AX """"    Set "" & strALS & "" = New "" & strCLS & """""""""
        PRINT "            .AX ""    .AX """""""""""
        PRINT "            .AX ""    .AX """"    ' Process working objects"""""""
        PRINT "            .AX ""    .AX """"    With "" & strALS & """""""""
        PRINT "            intTSX = 0: For Each vrnTSN In vrnTXT: intTSX = intTSX+1"
        PRINT "                strELM = Split(CStr(vrnTSN) & pcDLX, pcDLM)"
        PRINT "                strTRG = Trim$(strELM(pcIdxTRG))"
        PRINT "                strSRC = Trim$(strELM(pcIdxSRC))"
        PRINT "                strCMT = IIf(strTRG = ""TrgPrp"", ""'"", """")"
        PRINT "                strTNB = Format(intTSX, ""0000"")"
        PRINT "                .AX ""    .AX """"        "" & strCMT & ""."" & strTRG & "" = "" & strSRC & """""""""
        PRINT "            Next"
        PRINT "            .AX ""    .AX """"        Call ."" & strMTH & """""""""
        PRINT "            .AX ""    .AX """"    End With"""""""
        PRINT "            '*******************************************************************************"
        PRINT "            End With"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    If pcCmdLstSTD Then"
        PRINT "        Call wtx.PL(wtx.CmtSGL): Call wtx.DM(1)"
        PRINT "    ElseIf pcCmdLstFRM Then"
        PRINT "        Call wtx.PL(wtx.CmtSGL): Call wtx.DM(1)"
        PRINT "    ElseIf pcCmdLstPRP Then"
        PRINT "        Call wtx.PL(wtx.CmtSGL): Call wtx.DM(1)"
        PRINT "    ElseIf pcCmdLstTXT Then"
        PRINT "        Call wtx.PL(wtx.CmtSGL): Call wtx.DM(2)"
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Report Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_RPT(): Call Init_ALL"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcRptLstSTD As Boolean = gcNOP  ' gcYUP gcNOP   Report List (clsGenRPT.LodLstSTD)"
        PRINT "    Const pcRptLstFRM As Boolean = gcNOP  ' gcYUP gcNOP   Report List (clsGenRPT.LodLstFRM)"
        PRINT "    Const pcRptLstPRP As Boolean = gcNOP  ' gcYUP gcNOP   Report List (clsGenRPT.LodLstPRP)"
        PRINT "    Const pcRptLstTXT As Boolean = gcNOP  ' gcYUP gcNOP   Report List (clsGenTXT.Include_CMD)"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "        Case ""frm_FrmNam"": strOBJ = ""frm_FrmNam"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' ReportName | ReportTitle | RequiresRecord(mcYUP/mcNOP) | IsDefault(mcYUP/mcNOP) | ClassAlias | ClassName | ClassMethod"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim vrnRPT() As Variant: vrnRPT = Array(): Dim vrnDFN As Variant: Dim intDFX As Integer"
        PRINT "    Dim vrnPRP() As Variant: vrnPRP = Array(): Dim vrnPFN As Variant: Dim intPFX As Integer"
        PRINT "    Dim vrnTXT() As Variant: vrnTXT = Array(): Dim vrnTSN As Variant: Dim intTSX As Integer"
        PRINT "    Select Case strOBJ"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""frm_FrmNam"":"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            vrnRPT = Array( _"
        PRINT "                ""rpt_DBS_Column_Profile   |Database Column Profile                |mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Object_Columns   |Database Object Columns                |mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Object_NatKeys   |Database Object NatKeys                |mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Object_Profile   |Database Object Profile                |mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Objects_by_ClmCnt|Database Object List (by Column Count) |mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Objects_by_ObjNam|Database Object List (by Object Name)  |mcYUP|mcYUP"", _"
        PRINT "                ""rpt_DBS_Objects_by_ObjStt|Database Object List (by Object Status)|mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Objects_by_RowCnt|Database Object List (by Row Count)    |mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Objects_by_RqsCod|Database Object List (by Request Code) |mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Objects_by_SrcSys|Database Object List (by Source System)|mcYUP|mcNOP"", _"
        PRINT "                ""rpt_DBS_Objects_by_StdPtn|Database Object List (by Pattern)      |mcYUP|mcNOP"" _"
        PRINT "            )"
        PRINT "            vrnPRP = Array( _"
        PRINT "                ""PrpNam|mcNoAlias"", _"
        PRINT "                ""PrpNam|mcNoAlias"", _"
        PRINT "                ""PrpNam|mcNoAlias"" _"
        PRINT "            )"
        PRINT "            vrnTXT = Array( _"
        PRINT "                ""TrgPrp|SrcPrp"", _"
        PRINT "                ""TrgPrp|SrcPrp"", _"
        PRINT "                ""TrgPrp|SrcPrp"" _"
        PRINT "            )"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcDLM    As String = ""|""                                        ' Delimiter character"
        PRINT "    Const pcDLX    As String = ""||||||||||""                               ' Delimiter Suffix"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIdxNAM As Integer = 0                                         ' Report Name"
        PRINT "    Const pcIdxTTL As Integer = 1                                         ' Report Title"
        PRINT "    Const pcIdxRQR As Integer = 2                                         ' Requires Record in Form for Execution"
        PRINT "    Const pcIdxIDF As Integer = 3                                         ' Is Default Report in Report List"
        PRINT "    Const pcIdxALS As Integer = 4                                         ' Class Alias"
        PRINT "    Const pcIdxCLS As Integer = 5                                         ' Class Name"
        PRINT "    Const pcIdxMTH As Integer = 6                                         ' Class Method"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIdxPRP As Integer = 0                                         ' Property Name"
        PRINT "    Const pcIdxFLG As Integer = 1                                         ' Use Alias Flag"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIdxTRG As Integer = 0                                         ' Target Property Name"
        PRINT "    Const pcIdxSRC As Integer = 1                                         ' Source Property Name"
        PRINT "    '***********************************************************************************************"
        PRINT "    strFRM = strOBJ"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If pcRptLstSTD Then"
        PRINT "        Call wtx.IM(1): Call wtx.PL(wtx.CmtSGL)"
        PRINT "    ElseIf pcRptLstFRM Then"
        PRINT "        Call wtx.IM(1): Call wtx.PL(wtx.CmtSGL)"
        PRINT "    ElseIf pcRptLstPRP Then"
        PRINT "        Call wtx.IM(1)"
        PRINT "    ElseIf pcRptLstTXT Then"
        PRINT "        Call wtx.IM(2)"
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    intDFX = 0: For Each vrnDFN In vrnRPT: intDFX = intDFX+1"
        PRINT "        strELM = Split(CStr(vrnDFN) & pcDLX, pcDLM)"
        PRINT "        strRPT = Trim$(strELM(pcIdxNAM))"
        PRINT "        strTTL = Trim$(strELM(pcIdxTTL))"
        PRINT "        strRQR = Trim$(strELM(pcIdxRQR))"
        PRINT "        strIDF = Trim$(strELM(pcIdxIDF))"
        PRINT "        strALS = Trim$(strELM(pcIdxALS))"
        PRINT "        strCLS = Trim$(strELM(pcIdxCLS))"
        PRINT "        strMTH = Trim$(strELM(pcIdxMTH))"
        PRINT "        strDNB = Format(intDFX, ""0000"")"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        If pcRptLstSTD Then          ' Report List (clsGenRPT.LodLstSTD)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            With wtx"
        PRINT "            '*******************************************************************************"
        PRINT "            .AX Left$(""Call AddObjITM("""""" & strRPT & """""", "" & strRQR & "", """""" & strTTL & """""")"" & gXTS, 110) & "" ' "" & strDNB"
        PRINT "            '*******************************************************************************"
        PRINT "            End With"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        ElseIf pcRptLstFRM Then      ' Report List (clsGenRPT.LodLstFRM)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            With wtx"
        PRINT "            '*******************************************************************************"
        PRINT "            .AX Left$(""Call AddFrmITM("""""" & strFRM & """""", "" & strIDF & "", """""" & strRPT & """""", mcMTY)"" & gXTS, 89) & "" ' "" & strDNB"
        PRINT "            '*******************************************************************************"
        PRINT "            End With"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        ElseIf pcRptLstPRP Then      ' Report List (clsGenRPT.LodLstPRP)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            With wtx"
        PRINT "            '*******************************************************************************"
        PRINT "            Call .PL(.CmtSGL)"
        PRINT "            intPFX = 0: For Each vrnPFN In vrnPRP: intPFX = intPFX+1"
        PRINT "                strELM = Split(CStr(vrnPFN) & pcDLX, pcDLM)"
        PRINT "                strPRP = Trim$(strELM(pcIdxPRP))"
        PRINT "                strFLG = Trim$(strELM(pcIdxFLG))"
        PRINT "                strPNB = Format(intPFX, ""0000"")"
        PRINT "                .AX Left$(""Call AddPrpITM("""""" & strRPT & """""", """""" & strPRP & """""", """""" & strFLG & """""")"" & gXTS, 89) & "" ' "" & strPNB"
        PRINT "            Next"
        PRINT "            '*******************************************************************************"
        PRINT "            End With"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        ElseIf pcRptLstTXT Then      ' Report List (clsGenTXT.Include_RPT)"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            With wtx"
        PRINT "            '*******************************************************************************"
        PRINT "            Call .PL(.CmtSGL)"
        PRINT "            .AX Left$(""Case """""" & strRPT & """""""" & gXTS, 74) & "" ' Report BaseName"""
        PRINT "            Call .PL(.CmtSGL)"
        PRINT "            .AX ""    .AX """"    ' Initialize Working Objects"""""""
        PRINT "            .AX ""    .AX """"    Dim "" & strALS & ""    As "" & strCLS & """""""""
        PRINT "            .AX ""    .AX """"    Set "" & strALS & "" = New "" & strCLS & """""""""
        PRINT "            .AX ""    .AX """""""""""
        PRINT "            .AX ""    .AX """"    ' Process working objects"""""""
        PRINT "            .AX ""    .AX """"    With "" & strALS & """""""""
        PRINT "            intTSX = 0: For Each vrnTSN In vrnTXT: intTSX = intTSX+1"
        PRINT "                strELM = Split(CStr(vrnTSN) & pcDLX, pcDLM)"
        PRINT "                strTRG = Trim$(strELM(pcIdxTRG))"
        PRINT "                strSRC = Trim$(strELM(pcIdxSRC))"
        PRINT "                strCMT = IIf(strTRG = ""TrgPrp"", ""'"", """")"
        PRINT "                strTNB = Format(intTSX, ""0000"")"
        PRINT "                .AX ""    .AX """"        "" & strCMT & ""."" & strTRG & "" = "" & strSRC & """""""""
        PRINT "            Next"
        PRINT "            .AX ""    .AX """"        Call ."" & strMTH & """""""""
        PRINT "            .AX ""    .AX """"    End With"""""""
        PRINT "            '*******************************************************************************"
        PRINT "            End With"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    If pcRptLstSTD Then"
        PRINT "        Call wtx.PL(wtx.CmtSGL): Call wtx.DM(1)"
        PRINT "    ElseIf pcRptLstFRM Then"
        PRINT "        Call wtx.PL(wtx.CmtSGL): Call wtx.DM(1)"
        PRINT "    ElseIf pcRptLstPRP Then"
        PRINT "        Call wtx.PL(wtx.CmtSGL): Call wtx.DM(1)"
        PRINT "    ElseIf pcRptLstTXT Then"
        PRINT "        Call wtx.PL(wtx.CmtSGL): Call wtx.DM(2)"
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build Table Select List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub List_TBL()"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize Working Objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim wtx    As clsUtlWTX"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize Sort Mechanism"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const mcObjIDX As Integer = 2"
        PRINT "    Const mcObjNAM As String = ""ObjNAM"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim vrnDfnOBJ  As Variant: vrnDfnOBJ = Array(mcObjNAM)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim rstOBJ     As ADODB.Recordset"
        PRINT "    Set rstOBJ = New ADODB.Recordset"
        PRINT "    With rstOBJ"
        PRINT "        Call .Fields.Append(mcObjNAM, adVarChar, 128)"
        PRINT "    End With"
        PRINT "    With rstOBJ"
        PRINT "        Call .Open: .Sort = mcObjNAM & "" ASC"""
        PRINT "        rstOBJ.AddNEW vrnDfnOBJ, Array(strOBJ)"
        PRINT "    End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize Object Mechanism"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const mcDefNAM As String = ""tbl_TblNam"""
        PRINT "    Const mcAsnVAR As String = ""strOBJ"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim tdf As DAO.TableDef"
        PRINT "    Dim dbs As DAO.Database"
        PRINT "    Set dbs = CurrentDb()"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each tdf In dbs.TableDefs"
        PRINT "        Call rstOBJ.AddNEW(vrnDfnOBJ, Array(tdf.Name))"
        PRINT "    Next"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Generate List Code"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    With wtx: Call .AX_Reset(0, .StdWidPOR, .StdHgtPOR, False, .EnvFmtVBA)"
        PRINT "    '***********************************************************************************************"
        PRINT "        .IM"
        PRINT "        .AX ""Select Case """""" & mcDefNAM & """""""""
        PRINT "        .IM"
        PRINT "        With rstOBJ"
        PRINT "            If .RecordCount > 0 Then"
        PRINT "                strPRV = """": Call .MoveFirst: Do While Not .EOF: strOBJ = .Fields(mcObjNAM)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    strPFX = Left$(strOBJ, 4)"
        PRINT "                    Select Case strPFX"
        PRINT "                        Case mcTblPfxLKP: blnSTD = gcYUP"
        PRINT "                        Case mcTblPfxLNK: blnSTD = gcYUP"
        PRINT "                        Case mcTblPfxPRF: blnSTD = gcYUP"
        PRINT "                        Case mcTblPfxREF: blnSTD = gcYUP"
        PRINT "                        Case mcTblPfxTRX: blnSTD = gcYUP"
        PRINT "                        '-------------------------------"
        PRINT "                        Case mcTblPfxSYS: blnSTD = gcNOP"
        PRINT "                        Case Else:        blnSTD = gcNOP"
        PRINT "                    End Select"
        PRINT "                    If blnSTD Then"
        PRINT "                        If strPFX <> strPRV Then .PL (.CmtSGL)"
        PRINT "                        .AX ""Case """""" & strOBJ & """""": "" & mcAsnVAR & "" = """""" & strOBJ & """""""""
        PRINT "                        strPRV = strPFX"
        PRINT "                    End If"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Call .MoveNext: Loop"
        PRINT "            End If"
        PRINT "        End With"
        PRINT "        Call .PL(.CmtSGL)"
        PRINT "        .DM"
        PRINT "        .AX ""End Select"""
        PRINT "        .DM"
        PRINT "    '***********************************************************************************************"
        PRINT "     End With: Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build Form Select List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub List_FRM()"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize Working Objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim wtx    As clsUtlWTX"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize Sort Mechanism"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const mcObjIDX As Integer = 2"
        PRINT "    Const mcObjNAM As String = ""ObjNAM"""
        PRINT "    Dim vrnDfnOBJ  As Variant: vrnDfnOBJ = Array(mcObjNAM)"
        PRINT "    Dim rstOBJ     As ADODB.Recordset"
        PRINT "    Set rstOBJ = New ADODB.Recordset"
        PRINT "    With rstOBJ"
        PRINT "        Call .Fields.Append(mcObjNAM, adVarChar, 128)"
        PRINT "    End With"
        PRINT "    With rstOBJ"
        PRINT "        Call .Open: .Sort = mcObjNAM & "" ASC"""
        PRINT "        rstOBJ.AddNEW vrnDfnOBJ, Array(strOBJ)"
        PRINT "    End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize Object Mechanism"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const mcDefNAM As String = ""frm_FrmNam"""
        PRINT "    Const mcAsnVAR As String = ""strFRM"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim prj        As Object"
        PRINT "    Dim obj        As AccessObject"
        PRINT "    Set prj = Application.CurrentProject"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Build Sorted Object List"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each obj In prj.AllForms"
        PRINT "        Call rstOBJ.AddNEW(vrnDfnOBJ, Array(obj.Name))"
        PRINT "    Next"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Generate List Code"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    With wtx: Call .AX_Reset(0, .StdWidPOR, .StdHgtPOR, False, .EnvFmtVBA)"
        PRINT "    '***********************************************************************************************"
        PRINT "        .IM"
        PRINT "        .AX ""Select Case """""" & mcDefNAM & """""""""
        PRINT "        .IM"
        PRINT "        With rstOBJ"
        PRINT "            If .RecordCount > 0 Then"
        PRINT "                strPRV = """": Call .MoveFirst: Do While Not .EOF: strOBJ = .Fields(mcObjNAM)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    strPFX = Left$(strOBJ, 4)"
        PRINT "                    Select Case strPFX"
        PRINT "                        Case mcFrmPfxFRM: blnSTD = gcYUP"
        PRINT "                        Case mcFrmPfxLST: blnSTD = gcYUP"
        PRINT "                        Case mcFrmPfxPOP: blnSTD = gcYUP"
        PRINT "                        Case mcFrmPfxSUB: blnSTD = gcYUP"
        PRINT "                        '-------------------------------"
        PRINT "                        Case mcFrmPfxMNU: blnSTD = gcNOP"
        PRINT "                        Case mcFrmPfxSYS: blnSTD = gcNOP"
        PRINT "                        Case mcFrmPfxZTP: blnSTD = gcNOP"
        PRINT "                        Case Else:        blnSTD = gcNOP"
        PRINT "                    End Select"
        PRINT "                    If blnSTD Then"
        PRINT "                        If strPFX <> strPRV Then .PL (.CmtSGL)"
        PRINT "                        .AX ""Case """""" & strOBJ & """""": "" & mcAsnVAR & "" = """""" & strOBJ & """""""""
        PRINT "                        strPRV = strPFX"
        PRINT "                    End If"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Call .MoveNext: Loop"
        PRINT "            End If"
        PRINT "        End With"
        PRINT "        Call .PL(.CmtSGL)"
        PRINT "        .DM"
        PRINT "        .AX ""End Select"""
        PRINT "        .DM"
        PRINT "    '***********************************************************************************************"
        PRINT "     End With: Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Object Lengths"
        PRINT "'###################################################################################################"
        PRINT "Private Function GetLenTBL() As Integer"
        PRINT "    For Each tdf In dbs.TableDefs: strNAM = tdf.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        blnIsZZZ = (strPFX = ""zzz_"")"
        PRINT "        blnIsSYS = (strPFX = ""MSys"")"
        PRINT "        If Not blnIsZZZ And Not blnIsSYS Then"
        PRINT "            If GetLenTBL < Len(strNAM) Then GetLenTBL = Len(strNAM)"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetLenCLM(ByVal strTBL As String) As Integer"
        PRINT "    For Each tdf In dbs.TableDefs: strNAM = tdf.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        If strNAM = strTBL Then"
        PRINT "            For Each fld In tdf.Fields: strFLD = fld.Name"
        PRINT "                If GetLenCLM < Len(strFLD) Then GetLenCLM = Len(strFLD)"
        PRINT "            Next"
        PRINT "            Exit Function"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetLenFRM() As Integer"
        PRINT "    For Each obj In prj.AllForms: strNAM = obj.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        blnIsZZZ = (strPFX = ""zzz_"")"
        PRINT "        blnIsSYS = (strPFX = ""sys_"")"
        PRINT "        If Not blnIsZZZ And Not blnIsSYS Then"
        PRINT "            If GetLenFRM < Len(strNAM) Then GetLenFRM = Len(strNAM)"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate Case Statement Lists"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenList_TBL(): Call Init_ALL"
        PRINT "    For Each tdf In dbs.TableDefs: strNAM = tdf.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        blnIsZZZ = (strPFX = ""zzz_"")"
        PRINT "        blnIsSYS = (strPFX = ""MSys"")"
        PRINT "        If Not blnIsZZZ And Not blnIsSYS Then"
        PRINT "            strOBJ = Left$(strNAM & """""":"" & String(intLenTBL, "" ""), intLenTBL+2)"
        PRINT "            wtx.AX ""        Case """""" & strOBJ & "" strOBJ = """""" & strNAM & """""""""
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub GenList_FRM(): Call Init_ALL"
        PRINT "    For Each obj In prj.AllForms: strNAM = obj.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        blnIsZZZ = (strPFX = ""zzz_"")"
        PRINT "        blnIsSYS = (strPFX = ""sys_"")"
        PRINT "        If Not blnIsZZZ And Not blnIsSYS Then"
        PRINT "            strOBJ = Left$(strNAM & """""":"" & String(intLenFRM, "" ""), intLenFRM+2)"
        PRINT "            wtx.AX ""        Case """""" & strOBJ & "" strOBJ = """""" & strNAM & """""""""
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENJET) BEGIN -- Old Code: Verify if needed (2009-03-07)
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' STD: Lines"
        PRINT "'***************************************************************************************************"
        PRINT "Private mcLinSGL                    As String                             '"
        PRINT "Private mcLinDBL                    As String                             '"
        PRINT "Private mcLinPND                    As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mcSepMG0                    As String                             '"
        PRINT "Private mcSepMG1                    As String                             '"
        PRINT "Private mcSepMG2                    As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private fso                         As FileSystemObject"
        PRINT "Private wtx                         As clsUtlWTX"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "Private prj                         As Object"
        PRINT "Private obj                         As AccessObject"
        PRINT "Private frm                         As Form"
        PRINT "Private prp                         As Property"
        PRINT "Private ctl                         As Control"
        PRINT "Private dbs                         As DAO.Database"
        PRINT "Private tdf                         As DAO.TableDef"
        PRINT "Private fld                         As DAO.Field"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPRP                 As Integer = 15                       '"
        PRINT "Private Const mcVAL                 As Integer = 25                       '"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private strOBJ                      As String                             ' Object name"
        PRINT "Private strNAM                      As String                             ' Object name"
        PRINT "Private strPFX                      As String                             ' Object prefix"
        PRINT "Private strTBL                      As String                             ' Table name"
        PRINT "Private strFLD                      As String                             ' Field name"
        PRINT "Private strCTL                      As String                             ' Control name"
        PRINT "Private strCTP                      As String                             ' Control type"
        PRINT "Private strVAR                      As String                             ' Variable name"
        PRINT "Private strPRP                      As String                             ' Property name"
        PRINT "Private strVAL                      As String                             ' Property value"
        PRINT "Private strPRV                      As String                             ' Previous value"
        PRINT "Private strLVL                      As String                             ' Datatype level"
        PRINT "Private strVPX                      As String                             ' Datatype prefix"
        PRINT "Private strDTP                      As String                             ' Datatype name"
        PRINT "Private strDCT                      As String                             ' Datatype category"
        PRINT "Private strSEP                      As String                             ' Separator line"
        PRINT "'***************************************************************************************************"
        PRINT "Private lngTYP                      As Long                               ' Property type"
        PRINT "Private lngIDX                      As Long                               ' Index sequence"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Init_ALL"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Init_ALL()"
        PRINT "    '------------------------"
        PRINT "    ' Initialize objects"
        PRINT "    '------------------------"
        PRINT "    Set fso = New FileSystemObject"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    Set vbg = New clsUtlVBG"
        PRINT "    '------------------------"
        PRINT "    Set prj = Application.CurrentProject"
        PRINT "    Set dbs = CurrentDb()"
        PRINT "    '------------------------"
        PRINT "    ' Initialize values"
        PRINT "    '------------------------"
        PRINT "    mcLinSGL = String$(100, ""-"")"
        PRINT "    mcLinDBL = String$(100, ""="")"
        PRINT "    mcLinPND = String$(100, ""#"")"
        PRINT "    '------------------------"
        PRINT "    mcSepMG0 = Space(0) & ""'"" & String$(99, ""-"")"
        PRINT "    mcSepMG1 = Space(4) & ""'"" & String$(95, ""-"")"
        PRINT "    mcSepMG2 = Space(8) & ""'"" & String$(91, ""-"")"
        PRINT "    '------------------------"
        PRINT "    gXTS = gcMTY"
        PRINT "    gAND = gcMTY"
        PRINT "    '------------------------"
        PRINT "    strOBJ = gcMTY"
        PRINT "    strTBL = gcMTY"
        PRINT "    strFLD = gcMTY"
        PRINT "    strPRP = gcMTY"
        PRINT "    strVAL = gcMTY"
        PRINT "    strPRV = gcMTY"
        PRINT "    strVPX = gcMTY"
        PRINT "    strSEP = gcMTY"
        PRINT "    lngTYP = gcZRO"
        PRINT "    '------------------------"
        PRINT "    Call wtx.AX_Clear"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Column Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_CLM(): Call Init_ALL"
        PRINT "    strSEP = mcLinSGL ' mcLinSGL mcLinDBL mcLinPND"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""trx_TvlItm"""
        PRINT "        Case ""trx_ChkLst"": strOBJ = ""trx_ChkLst"""
        PRINT "        Case ""imp_FltAtv"": strOBJ = ""imp_FltAtv"""
        PRINT "        Case ""lkp_ArpDst"": strOBJ = ""lkp_ArpDst"""
        PRINT "        Case ""trx_FltItm"": strOBJ = ""trx_FltItm"""
        PRINT "        Case ""trx_TvlItm"": strOBJ = ""trx_TvlItm"""
        PRINT "        Case ""trx_LdgItm"": strOBJ = ""trx_LdgItm"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcTblLstCUS As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Custom)"
        PRINT "    Const pcTblLstDEF As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Default)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcVarDecMOD As Boolean = gcNOP  ' gcYUP gcNOP   Module Declaration"
        PRINT "    Const pcVarDecPRP As Boolean = gcNOP  ' gcYUP gcNOP   Property Statement"
        PRINT "    Const pcVarDecPRM As Boolean = gcNOP  ' gcYUP gcNOP   Parameter Declaration"
        PRINT "    Const pcVarDecDIM As Boolean = gcNOP  ' gcYUP gcNOP   Dimension Declaration"
        PRINT "    Const pcVarAsnVAL As Boolean = gcNOP  ' gcYUP gcNOP   Assign Variable Value"
        PRINT "    Const pcAxxSelCLM As Boolean = gcNOP  ' gcYUP gcNOP   SELECT: Columns"
        PRINT "    Const pcAxxIniCLM As Boolean = gcNOP  ' gcYUP gcNOP   INSERT INTO: Columns"
        PRINT "    Const pcAxxIniVAL As Boolean = gcNOP  ' gcYUP gcNOP   INSERT INTO: Values"
        PRINT "    Const pcAxxIniVAN As Boolean = gcYUP  ' gcYUP gcNOP   INSERT INTO: Values (Null)"
        PRINT "    Const pcFldLstBAS As Boolean = gcNOP  ' gcYUP gcNOP   Field List (Basic)"
        PRINT "    Const pcFldLstSEP As Boolean = gcNOP  ' gcYUP gcNOP   Field List (Separator)"
        PRINT "    Const pcFldLstSPC As Boolean = gcNOP  ' gcYUP gcNOP   Field List (Spaced)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcTxtSepLIN As Boolean = gcNOP  ' gcYUP gcNOP   Text Separator Line"
        PRINT "    '***********************************************************************************************"
        PRINT "    'wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    For Each tdf In dbs.TableDefs"
        PRINT "        strTBL = tdf.Name"
        PRINT "        If (strTBL = strOBJ) Then"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If pcTblLstCUS Then      ' Table List (Custom)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                '.AX ""    [ ] "" & strTBL"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX mcLinSGL"
        PRINT "                .AX ""[ ] "" & strTBL"
        PRINT "                .AX mcLinSGL"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstDEF Then  ' Table List (Default)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX mcLinSGL"
        PRINT "                .AX ""[ ] "" & strTBL"
        PRINT "                .AX mcLinSGL"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            For Each fld In tdf.Fields    ' strVPX = vbg.DaoTypVPX(fld.Type) strVPX = vbg.VarSfxVPX(strFLD)"
        PRINT "                strFLD = fld.Name"
        PRINT "                strVPX = vbg.DaoTypVPX(fld.Type)"
        PRINT "                strDTP = vbg.VarPfxTYP(strVPX)"
        PRINT "                strDCT = vbg.VarPfxDCT(strVPX)"
        PRINT "                strVAR = strVPX & strFLD"
        PRINT "                strLVR = strLVL & strVAR"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                If pcVarDecMOD Then      ' Module Declaration"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX vbg.VarDecPrv(vbg.VarLvlMOD, strVPX, strFLD)  ' VarDecPrv/VarDecPub  VarLvlGLB/VarLvlMOD"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarDecPRP Then  ' Property Statement"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX vbg.PrpPubStd(strFLD, strDTP, strVAR)         ' PrpPubStd/PrpPrvStd"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarDecPRM Then  ' Parameter Declaration"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX vbg.VarDecPrm(vbg.VarLvlNON, strVPX, strFLD)"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarDecDIM Then  ' Dimension Declaration"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX vbg.VarDecDim(vbg.VarLvlNON, strVPX, strFLD)"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcVarAsnVAL Then  '  Assign Variable Value"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    strLVL = vbg.VarLvlMOD   ' VarLvlNON VarLvlMOD VarLvlGLB VarLvlFUNC"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX ""    "" & strLVR & "" = "" & vbg.VarPfxDVL(strVAR)"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcAxxSelCLM Then  ' SELECT: Columns"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    strPFX = ""zzz"""
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX ""    .AX """"    "" & strPFX & ""."" & strFLD & "" AS "" & strFLD & "","""""""
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcAxxIniCLM Then  ' INSERT INTO: Columns"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX ""    .AX """"    "" & strFLD & "","""""""
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcAxxIniVAL Then  ' INSERT INTO: Values"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    strLVL = vbg.VarLvlMOD   ' VarLvlNON VarLvlMOD VarLvlGLB VarLvlFUNC"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    .AX """"    '"""" & "" & strLVR & "" & """"',"""""""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    .AX """"    '"""" & "" & strLVR & "" & """"',"""""""
        PRINT "                        Case Else:          .AX ""    .AX """"    """" & "" & strLVR & "" & """","""""""
        PRINT "                    End Select"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcAxxIniVAN Then  ' INSERT INTO: Values (Null)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    strLVL = vbg.VarLvlMOD   ' VarLvlNON VarLvlMOD VarLvlGLB VarLvlFUNC"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    Select Case strDCT"
        PRINT "                        Case vbg.DatCatTXT: .AX ""    .AX """"    '"""" & IIf("" & strLVR & "" = 0, """"Null"""", "" & strLVR & "") & """"',"""""""
        PRINT "                        Case vbg.DatCatDAT: .AX ""    .AX """"    '"""" & IIf("" & strLVR & "" = 0, """"Null"""", "" & strLVR & "") & """"',"""""""
        PRINT "                        Case Else:          .AX ""    .AX """"    """" & IIf("" & strLVR & "" = 0, """"Null"""", "" & strLVR & "") & """","""""""
        PRINT "                    End Select"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFldLstBAS Then  ' Field List (Basic)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX ""    [ ] "" & strFLD"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFldLstSEP Then  ' Field List (Separator)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX ""    [ ] "" & strFLD"
        PRINT "                    .AX mcSepMG1"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                ElseIf pcFldLstSPC Then  ' Field List (Spaced)"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                    With wtx"
        PRINT "                    '*******************************************************************************"
        PRINT "                    .AX """""
        PRINT "                    .AX mcSepMG1"
        PRINT "                    .AX ""    [ ] "" & strFLD"
        PRINT "                    .AX mcSepMG1"
        PRINT "                    '*******************************************************************************"
        PRINT "                    End With"
        PRINT "                End If"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "            Next"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If pcTxtSepLIN Then  ' Text Separator Line"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "        With wtx"
        PRINT "        '*******************************************************************************************"
        PRINT "        .AX """""
        PRINT "        .AX mcLinSGL"
        PRINT "        '*******************************************************************************************"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Table Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_TBL(): Call Init_ALL"
        PRINT "    strSEP = mcLinSGL ' mcLinSGL mcLinDBL mcLinPND"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""tbl_TableName"""
        PRINT "        Case ""tbl_TableName"": strOBJ = ""tbl_TableName"""
        PRINT "        Case ""tbl_TableName"": strOBJ = ""tbl_TableName"""
        PRINT "        Case ""tbl_TableName"": strOBJ = ""tbl_TableName"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcTblLstCUS As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Custom)"
        PRINT "    Const pcTblLstRST As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Recordset Fields)"
        PRINT "    Const pcTblLstPRP As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Properties)"
        PRINT "    Const pcTblLstCLM As Boolean = gcNOP  ' gcYUP gcNOP   Table List (Columns)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcTblLstBAS As Boolean = True   ' Default       Table List (Basic)"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcIncIMI    As Boolean = gcNOP  ' gcYUP gcNOP   Include import item objects"
        PRINT "    Const pcIncIMX    As Boolean = gcNOP  ' gcYUP gcNOP   Include import text objects"
        PRINT "    Const pcIncLBL    As Boolean = gcNOP  ' gcYUP gcNOP   Include label objects"
        PRINT "    Const pcIncLKP    As Boolean = gcNOP  ' gcYUP gcNOP   Include lookup objects"
        PRINT "    Const pcIncLNK    As Boolean = gcNOP  ' gcYUP gcNOP   Include link objects"
        PRINT "    Const pcIncREF    As Boolean = gcNOP  ' gcYUP gcNOP   Include reference objects"
        PRINT "    Const pcIncTRX    As Boolean = gcNOP  ' gcYUP gcNOP   Include transaction objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIncIMP    As Boolean = gcNOP  ' gcYUP gcNOP   Include import objects"
        PRINT "    Const pcIncUSR    As Boolean = gcNOP  ' gcYUP gcNOP   Include user objects"
        PRINT "    Const pcIncSYS    As Boolean = gcNOP  ' gcYUP gcNOP   Include system objects"
        PRINT "    Const pcIncSTD    As Boolean = gcNOP  ' gcYUP gcNOP   Include standard objects"
        PRINT "    Const pcIncUTL    As Boolean = gcNOP  ' gcYUP gcNOP   Include utility objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIncANY    As Boolean = gcNOP  ' gcYUP gcNOP   Include any objects"
        PRINT "    '***********************************************************************************************"
        PRINT "    'wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim blnIsIMP  As Boolean              ' Is import object?"
        PRINT "    Dim blnIsUSR  As Boolean              ' Is user object?"
        PRINT "    Dim blnIsSYS  As Boolean              ' Is system object?"
        PRINT "    Dim blnIsSTD  As Boolean              ' Is standard object?"
        PRINT "    Dim blnIsUTL  As Boolean              ' Is utility object?"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim blnIsIMI  As Boolean              ' Is import item object?"
        PRINT "    Dim blnIsIMX  As Boolean              ' Is import text object?"
        PRINT "    Dim blnIsLBL  As Boolean              ' Is label object?"
        PRINT "    Dim blnIsLKP  As Boolean              ' Is lookup object?"
        PRINT "    Dim blnIsLNK  As Boolean              ' Is link object?"
        PRINT "    Dim blnIsREF  As Boolean              ' Is reference object?"
        PRINT "    Dim blnIsTRX  As Boolean              ' Is transaction object?"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each tdf In dbs.TableDefs"
        PRINT "        strNAM = tdf.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        blnIsIMI = (strPFX = ""imp_"")"
        PRINT "        blnIsIMX = (strPFX = ""imx_"")"
        PRINT "        blnIsLBL = (strPFX = ""lbl_"")"
        PRINT "        blnIsLKP = (strPFX = ""lkp_"")"
        PRINT "        blnIsLNK = (strPFX = ""lnk_"")"
        PRINT "        blnIsREF = (strPFX = ""ref_"")"
        PRINT "        blnIsTRX = (strPFX = ""trx_"")"
        PRINT "        blnIsSYS = (strPFX = ""MSys"")"
        PRINT "        blnIsIMP = (blnIsIMI Or blnIsIMX)"
        PRINT "        blnIsSTD = (blnIsLKP Or blnIsLNK Or blnIsREF Or blnIsTRX)"
        PRINT "        blnIsUSR = Not (blnIsSYS)"
        PRINT "        blnIsUTL = Not (blnIsIMP Or blnIsSTD Or blnIsSYS)"
        PRINT "        If (strNAM = strOBJ) _"
        PRINT "        Or (pcIncIMI And blnIsIMI) _"
        PRINT "        Or (pcIncIMX And blnIsIMX) _"
        PRINT "        Or (pcIncLBL And blnIsLBL) _"
        PRINT "        Or (pcIncLKP And blnIsLKP) _"
        PRINT "        Or (pcIncLNK And blnIsLNK) _"
        PRINT "        Or (pcIncREF And blnIsREF) _"
        PRINT "        Or (pcIncTRX And blnIsTRX) _"
        PRINT "        Or (pcIncIMP And blnIsIMP) _"
        PRINT "        Or (pcIncUSR And blnIsUSR) _"
        PRINT "        Or (pcIncSYS And blnIsSYS) _"
        PRINT "        Or (pcIncSTD And blnIsSTD) _"
        PRINT "        Or (pcIncUTL And blnIsUTL) _"
        PRINT "        Or pcIncANY Then"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If pcTblLstCUS Then      ' Table List (Custom)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                '.AX ""    [ ] "" & strNAM"
        PRINT "                '***********************************************************************************"
        PRINT "                If strPRV <> strPFX Then .AX mcSepMG1"
        PRINT "                .AX ""    'If gcNOP Then Call Export_Data("""""" & strNAM & """""")"""
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstRST Then  ' Table List (Recordset Fields)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                If Left$(strNAM, 4) <> ""MSys"" And Right$(strNAM, 2) <> ""_X"" Then"
        PRINT "                    lngIDX = lngIDX+1"
        PRINT "                     .AX ""    mrstALS.AddNew mvrnFldFmt, Array(""""t"" & Format(lngIDX, ""00"") & """""", """""" & strNAM & """""")"""
        PRINT "                End If"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstPRP Then  ' Table List (Properties)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX ""TBL: "" & strNAM"
        PRINT "                For Each prp In tdf.Properties"
        PRINT "                    strPRP = """": lngTYP = 0: strVAL = """""
        PRINT "                    On Error Resume Next"
        PRINT "                    strPRP = prp.Name: lngTYP = prp.Type"
        PRINT "                    Select Case lngTYP"
        PRINT "                        Case 9:    strVAL = ""***not printable***"""
        PRINT "                        Case 11:   strVAL = ""***not printable***"""
        PRINT "                        Case Else: strVAL = prp.Value"
        PRINT "                    End Select"
        PRINT "                    On Error GoTo 0"
        PRINT "                    .AX ""  TdfPRP: "" & Left$(strPRP & gXTS, mcPRP) & "" = "" & Left$(strVAL & gXTS, mcVAL) & ""  {"" & lngTYP & ""}"""
        PRINT "                Next"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstCLM Then  ' Table List (Columns)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX ""TBL: "" & strNAM"
        PRINT "                For Each fld In tdf.Fields"
        PRINT "                    strFLD = fld.Name"
        PRINT "                    .AX ""  FLD: "" & strFLD"
        PRINT "                Next"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcTblLstBAS Then  ' Table List (Basic)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                If strPRV <> strPFX Then .AX strSEP"
        PRINT "                .AX ""[ ] "" & strNAM"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            strPRV = strPFX"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_FRM(): Call Init_ALL"
        PRINT "    strSEP = mcLinSGL ' mcLinSGL mcLinDBL mcLinPND"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""frm_FormName"""
        PRINT "        Case ""frm_FormName"": strOBJ = ""frm_FormName"""
        PRINT "        Case ""frm_FormName"": strOBJ = ""frm_FormName"""
        PRINT "        Case ""frm_FormName"": strOBJ = ""frm_FormName"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcObjLstOPN As Boolean = gcNOP  ' gcYUP gcNOP   Object List (Open = Access collections and properties)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcFrmLstCUS As Boolean = gcNOP  ' gcYUP gcNOP   Form List (Custom)"
        PRINT "    Const pcFrmLstPRP As Boolean = gcNOP  ' gcYUP gcNOP   Form List (Properties)"
        PRINT "    Const pcFrmLstCTL As Boolean = gcNOP  ' gcYUP gcNOP   Form List (Controls)"
        PRINT "    Const pcFrmLstBAS As Boolean = gcNOP  ' gcYUP gcNOP   Form List (Basic)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcObjLstNAM As Boolean = True   ' Default       Object List (Name)"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcIncFRM    As Boolean = gcNOP  ' gcYUP gcNOP   Include form objects"
        PRINT "    Const pcIncLST    As Boolean = gcNOP  ' gcYUP gcNOP   Include list objects"
        PRINT "    Const pcIncPOP    As Boolean = gcNOP  ' gcYUP gcNOP   Include popup objects"
        PRINT "    Const pcIncSUB    As Boolean = gcNOP  ' gcYUP gcNOP   Include subform objects"
        PRINT "    Const pcIncMNU    As Boolean = gcNOP  ' gcYUP gcNOP   Include menu objects"
        PRINT "    Const pcIncSYS    As Boolean = gcNOP  ' gcYUP gcNOP   Include system objects"
        PRINT "    Const pcIncTPL    As Boolean = gcNOP  ' gcYUP gcNOP   Include template objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIncSTD    As Boolean = gcNOP  ' gcYUP gcNOP   Include standard objects"
        PRINT "    Const pcIncUTL    As Boolean = gcNOP  ' gcYUP gcNOP   Include utility objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcIncANY    As Boolean = gcNOP  ' gcYUP gcNOP   Include any objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcObjOPN    As Boolean = gcYUP  ' gcYUP gcNOP   Open current object"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim blnIsFRM  As Boolean              ' Is form object?"
        PRINT "    Dim blnIsLST  As Boolean              ' Is list object?"
        PRINT "    Dim blnIsPOP  As Boolean              ' Is popup object?"
        PRINT "    Dim blnIsSUB  As Boolean              ' Is subform object?"
        PRINT "    Dim blnIsMNU  As Boolean              ' Is menu object?"
        PRINT "    Dim blnIsSYS  As Boolean              ' Is system object?"
        PRINT "    Dim blnIsTPL  As Boolean              ' Is template object?"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim blnIsSTD  As Boolean              ' Is standard object?"
        PRINT "    Dim blnIsUTL  As Boolean              ' Is utility object?"
        PRINT "    '***********************************************************************************************"
        PRINT "    'wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    For Each obj In prj.AllForms"
        PRINT "        strNAM = obj.Name: strPFX = Left$(strNAM, 4)"
        PRINT "        blnIsFRM = (strPFX = ""frm_"")"
        PRINT "        blnIsLST = (strPFX = ""lst_"")"
        PRINT "        blnIsPOP = (strPFX = ""pop_"")"
        PRINT "        blnIsSUB = (strPFX = ""sub_"")"
        PRINT "        blnIsMNU = (strPFX = ""mnu_"")"
        PRINT "        blnIsSYS = (strPFX = ""sys_"")"
        PRINT "        blnIsTPL = (strPFX = ""ztp_"")"
        PRINT "        blnIsSTD = (blnIsFRM Or blnIsLST Or blnIsPOP Or blnIsSUB)"
        PRINT "        blnIsUTL = Not blnIsSTD"
        PRINT "        If (strNAM = strOBJ) _"
        PRINT "        Or (pcIncFRM And blnIsFRM) _"
        PRINT "        Or (pcIncLST And blnIsLST) _"
        PRINT "        Or (pcIncPOP And blnIsPOP) _"
        PRINT "        Or (pcIncSUB And blnIsSUB) _"
        PRINT "        Or (pcIncMNU And blnIsMNU) _"
        PRINT "        Or (pcIncSYS And blnIsSYS) _"
        PRINT "        Or (pcIncTPL And blnIsTPL) _"
        PRINT "        Or (pcIncSTD And blnIsSTD) _"
        PRINT "        Or (pcIncUTL And blnIsUTL) _"
        PRINT "        Or pcIncANY Then"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If pcObjLstOPN Then      ' Object List (Open = Access collections and properties)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                DoCmd.OpenForm strNAM"
        PRINT "                For Each frm In Forms"
        PRINT "                    If (frm.Name = strOBJ) Then"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        If pcFrmLstCUS Then      ' Form List (Custom)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""FRM: "" & strNAM"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        ElseIf pcFrmLstPRP Then  ' Form List (Properties)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""FRM: "" & strNAM"
        PRINT "                            For Each prp In frm.Properties"
        PRINT "                                strPRP = """": lngTYP = 0: strVAL = """""
        PRINT "                                On Error Resume Next"
        PRINT "                                strPRP = prp.Name: lngTYP = prp.Type"
        PRINT "                                Select Case lngTYP"
        PRINT "                                    Case 8209: strVAL = ""***not printable***"""
        PRINT "                                    Case Else: strVAL = prp.Value"
        PRINT "                                End Select"
        PRINT "                                On Error GoTo 0"
        PRINT "                                .AX ""  FrmPRP: "" & strPRP & ""="" & strVAL & ""  {"" & lngTYP & ""}"""
        PRINT "                            Next"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        ElseIf pcFrmLstCTL Then  ' Form List (Controls)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""FRM: "" & strNAM"
        PRINT "                            For Each ctl In frm.Controls"
        PRINT "                                strCTL = ctl.Name: strCTP = vbg.CtlTypTYX(ctl.ControlType)"
        PRINT "                                .AX ""  CTL: "" & strCTL & ""  {"" & strCTP & ""}"""
        PRINT "                            Next"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        ElseIf pcFrmLstBAS Then  ' Form List (Basic)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""[ ] "" & strNAM"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        End If"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                    End If"
        PRINT "                Next"
        PRINT "                DoCmd.Close acForm, strNAM, acSaveYes"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            ElseIf pcObjLstNAM Then  ' Object List (Name)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "                With wtx"
        PRINT "                '***********************************************************************************"
        PRINT "                .AX ""[ ] "" & strNAM"
        PRINT "                '***********************************************************************************"
        PRINT "                End With"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            strPRV = strPFX"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub GenCust_CTL(): Call Init_ALL"
        PRINT "    strSEP = mcLinSGL ' mcLinSGL mcLinDBL mcLinPND"
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case ""frm_FormName"""
        PRINT "        Case ""frm_FormName"": strOBJ = ""frm_FormName"""
        PRINT "        Case ""frm_FormName"": strOBJ = ""frm_FormName"""
        PRINT "        Case ""frm_FormName"": strOBJ = ""frm_FormName"""
        PRINT "    End Select"
        PRINT "    '***********************************************************************************************"
        PRINT "    Const pcCtlTxt001 As Boolean = gcNOP  ' gcYUP gcNOP   Control Text: Custom 001"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const pcCtlLstBAS As Boolean = True   ' Default       Control List (Basic)"
        PRINT "    '***********************************************************************************************"
        PRINT "    'wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    For Each obj In prj.AllForms"
        PRINT "        strNAM = obj.Name"
        PRINT "        If (strNAM = strOBJ) Then"
        PRINT "            wtx.AX ""[ ] "" & strNAM"
        PRINT "            DoCmd.OpenForm strNAM"
        PRINT "            For Each frm In Forms"
        PRINT "                If (frm.Name = strOBJ) Then"
        PRINT "                    For Each ctl In frm.Controls"
        PRINT "                        strCTL = ctl.Name: strCTP = vbg.CtlTypTYX(ctl.ControlType)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        If pcCtlTxt001 Then      ' Control Text: Custom 001"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            '.AX ""  CTL: "" & strCTL & ""  {"" & strCTP & ""}"""
        PRINT "                            '***********************************************************************"
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                        ElseIf pcCtlLstBAS Then  ' Control List (Basic)"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                            With wtx"
        PRINT "                            '***********************************************************************"
        PRINT "                            .AX ""  CTL: "" & strCTL & ""  {"" & strCTP & ""}"""
        PRINT "                            '***********************************************************************"
        PRINT "                            End With"
        PRINT "                        End If"
        PRINT "                        '---------------------------------------------------------------------------"
        PRINT "                    Next"
        PRINT "                End If"
        PRINT "            Next"
        PRINT "            DoCmd.Close acForm, strNAM, acSaveYes"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    wtx.AX strSEP"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- SGNFLG = StdGEN Objects:  Flags
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX SGNFLG
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSGNFLG) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' GEN: List Flags"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcUseLstCUR           As Integer = 0"
        PRINT "Private Const mcUseLstTMP           As Integer = 1"
        PRINT "Private Const mcUseLstTPL           As Integer = 2"
        PRINT "Private Const mcUseLstSTD           As Integer = 3"
        PRINT "Private Const mcUseLstFRM           As Integer = 4"
        PRINT "Private Const mcUseLstPRP           As Integer = 5"
        PRINT "'***************************************************************************************************"
        PRINT "' GEN: Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModObjDBG           As Integer = 1"
        PRINT "Private Const mcModObjLST           As Integer = 2"
        PRINT "Private Const mcModObjREG           As Integer = 3"
        PRINT "Private Const mcModObjRUN           As Integer = 4"
        PRINT "Private Const mcModObjGEN           As Integer = 5"
        PRINT "Private Const mcModObjCOD           As Integer = 6"
        PRINT "'***************************************************************************************************"
        PRINT "' GEN: Process Flags"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcNewYUP              As Boolean = True"
        PRINT "Private Const mcNewNOP              As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWrtYUP              As Boolean = True"
        PRINT "Private Const mcWrtNOP              As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDbgYUP              As Boolean = True"
        PRINT "Private Const mcDbgNOP              As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcHdrYUP              As Boolean = True"
        PRINT "Private Const mcHdrNOP              As Boolean = False"
        --------------------------------------------------------------------------------------------
        IF @InpTxt IN (@SecGENCMD) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcHdrYUP              As Boolean = True"
        PRINT "Private Const mcHdrNOP              As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private cmd                         As clsGenCMD"
        PRINT "'***************************************************************************************************"
        PRINT "Private frm                         As clsGenFRM"
        PRINT "Private prp                         As clsGenPRP"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmdGdbVBA           As String = ""VBACMD"""
        PRINT "Private Const mcCmdGdbGEN           As String = ""GENCMD"""
        PRINT "Private Const mcCmdGdbREG           As String = ""REGCMD"""
        PRINT "Private Const mcCmdGdbRUN           As String = ""RUNCMD"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE IF @InpTxt IN (@SecGENCTL) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private ctl                         As clsGenCTL"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private prp                         As clsGenPRP"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlGdbVBA           As String = ""VBACTL"""
        PRINT "Private Const mcCtlGdbGEN           As String = ""GENCTL"""
        PRINT "Private Const mcCtlGdbREG           As String = ""REGCTL"""
        PRINT "Private Const mcCtlGdbRUN           As String = ""RUNCTL"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE IF @InpTxt IN (@SecGENFRM) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private frm                         As clsGenFRM"
        PRINT "Private ctl                         As clsGenCTL"
        PRINT "'***************************************************************************************************"
        PRINT "Private prp                         As clsGenPRP"
        PRINT "Private tbl                         As clsGenTBL"
        PRINT "Private cmd                         As clsGenCMD"
        PRINT "Private rpt                         As clsGenRPT"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIncRptYUP           As Boolean = True                     ' Include Form/Report section"
        PRINT "Private Const mcIncRptNOP           As Boolean = False                    ' Exclude Form/Report section"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIncModYUP           As Boolean = True                     ' Include Module section"
        PRINT "Private Const mcIncModNOP           As Boolean = False                    ' Exclude Module section"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIncDckYUP           As Boolean = True                     ' Include DblClick section"
        PRINT "Private Const mcIncDckNOP           As Boolean = False                    ' Exclude DblClick section"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmAnyFRM           As String = ""ANYFRM"""
        PRINT "Private Const mcFrmAnyTAB           As String = ""ANYTAB"""
        PRINT "Private Const mcFrmAnyLST           As String = ""ANYLST"""
        PRINT "Private Const mcFrmAnyPOP           As String = ""ANYPOP"""
        PRINT "Private Const mcFrmAnySUB           As String = ""ANYSUB"""
        PRINT "Private Const mcFrmAnyMNU           As String = ""ANYMNU"""
        PRINT "Private Const mcFrmAnyGIT           As String = ""GEN_IT"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmGdbVBA           As String = ""VBAFRM"""
        PRINT "Private Const mcFrmGdbGEN           As String = ""GENFRM"""
        PRINT "Private Const mcFrmGdbREG           As String = ""REGFRM"""
        PRINT "Private Const mcFrmGdbRUN           As String = ""RUNFRM"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE IF @InpTxt IN (@SecGENGBY) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private frm                         As clsGenFRM"
        PRINT "Private ctl                         As clsGenCTL"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcGbyGdbVBA           As String = ""VBAGBY"""
        PRINT "Private Const mcGbyGdbGEN           As String = ""GENGBY"""
        PRINT "Private Const mcGbyGdbREG           As String = ""REGGBY"""
        PRINT "Private Const mcGbyGdbRUN           As String = ""RUNGBY"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE IF @InpTxt IN (@SecGENPRP) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private prp                         As clsGenPRP"
        PRINT "'***************************************************************************************************"
        PRINT "Private frm                         As clsGenFRM"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpGdbVBA           As String = ""VBAPRP"""
        PRINT "Private Const mcPrpGdbGEN           As String = ""GENPRP"""
        PRINT "Private Const mcPrpGdbREG           As String = ""REGPRP"""
        PRINT "Private Const mcPrpGdbRUN           As String = ""RUNPRP"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE IF @InpTxt IN (@SecGENRPT) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private rpt                         As clsGenRPT"
        PRINT "'***************************************************************************************************"
        PRINT "Private frm                         As clsGenFRM"
        PRINT "Private prp                         As clsGenPRP"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptGdbVBA           As String = ""VBARPT"""
        PRINT "Private Const mcRptGdbGEN           As String = ""GENRPT"""
        PRINT "Private Const mcRptGdbREG           As String = ""REGRPT"""
        PRINT "Private Const mcRptGdbRUN           As String = ""RUNRPT"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE IF @InpTxt IN (@SecGENSBY) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private frm                         As clsGenFRM"
        PRINT "Private ctl                         As clsGenCTL"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSbyGdbVBA           As String = ""VBASBY"""
        PRINT "Private Const mcSbyGdbGEN           As String = ""GENSBY"""
        PRINT "Private Const mcSbyGdbREG           As String = ""REGSBY"""
        PRINT "Private Const mcSbyGdbRUN           As String = ""RUNSBY"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE IF @InpTxt IN (@SecGENSQL) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private frm                         As clsGenFRM"
        PRINT "Private ctl                         As clsGenCTL"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRsqGdbVBA           As String = ""VBARSQ"""
        PRINT "Private Const mcRsqGdbGEN           As String = ""GENRSQ"""
        PRINT "Private Const mcRsqGdbREG           As String = ""REGRSQ"""
        PRINT "Private Const mcRsqGdbRUN           As String = ""RUNRSQ"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE IF @InpTxt IN (@SecGENTBL) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private tbl                         As clsGenTBL"
        PRINT "'***************************************************************************************************"
        PRINT "Private frm                         As clsGenFRM"
        PRINT "'***************************************************************************************************"
        PRINT "Private txt                         As clsGenTXT"
        PRINT "Private vbg                         As clsUtlVBG"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTblGdbVBA           As String = ""VBATBL"""
        PRINT "Private Const mcTblGdbGEN           As String = ""GENTBL"""
        PRINT "Private Const mcTblGdbREG           As String = ""REGTBL"""
        PRINT "Private Const mcTblGdbRUN           As String = ""RUNTBL"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END ELSE BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        --------------------------------------------------------------------------------------------
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- SGXTBL = StdGEN Execute:  Table
    -- SGXPRP = StdGEN Execute:  Property
    -- SGXCMD = StdGEN Execute:  Command
    -- SGXRPT = StdGEN Execute:  Report
    -- SGXFRM = StdGEN Execute:  Form
    -- SGXCTL = StdGEN Execute:  Control
    -- SGXGBY = StdGEN Execute:  GroupBy
    -- SGXSQL = StdGEN Execute:  SQLCode
    -- SGXSBY = StdGEN Execute:  SortBy
    -- SGXPTH = StdGEN Execute:  Path
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX SGXTBL
        --------------------------------------------------------------------------------------------
        EXEC ut_zzVBX SGXTBL,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        EXEC ut_zzVBX SGXPRP,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        EXEC ut_zzVBX SGXCMD,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        EXEC ut_zzVBX SGXRPT,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        EXEC ut_zzVBX SGXFRM,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        EXEC ut_zzVBX SGXCTL,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        EXEC ut_zzVBX SGXSQL,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        EXEC ut_zzVBX SGXSBY,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        EXEC ut_zzVBX SGXGBY,'',0,0,0,0,'sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GEN_IT,'','','sub_MntSRC|pop_SrcOBJ|lst_SrcCLM|pop_SrcCLM'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSGXTBL,@SecSGXPRP,@SecSGXCMD,@SecSGXRPT,@SecSGXSQL,@SecSGXSBY,@SecSGXGBY,@SecSGXCTL,@SecSGXFRM) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @SEP = '|'; SET @LST = @StdTx1; IF LEN(@LST) = 0 SET @LST = "frm_FrmNam"
        SET @LST = LTRIM(RTRIM(REPLACE(REPLACE(@LST," ",""),@NLN,@SEP)))
        WHILE LEFT (@LST,LEN(@SEP)) = @SEP SET @LST = RIGHT(@LST,LEN(@LST)-LEN(@SEP))
        WHILE RIGHT(@LST,LEN(@SEP)) = @SEP SET @LST = LEFT (@LST,LEN(@LST)-LEN(@SEP))
        WHILE @LST LIKE "%"+@SEP+@SEP+"%"  SET @LST = REPLACE(@LST,@SEP+@SEP,@SEP)
        PRINT ""
        PRINT ""
        --------------------------------------------------------------------------------------------
        IF @BldCOD IN (@SecSGXTBL,@SecSGXPRP,@SecSGXCMD,@SecSGXRPT,@SecSGXSQL,@SecSGXSBY,@SecSGXGBY,@SecSGXCTL,@SecSGXFRM) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "'###################################################################################################"
        PRINT "' Run Gen_"+RIGHT(@BldCOD,3)
        PRINT "'###################################################################################################"
        PRINT "Private Sub Gen_"+RIGHT(@BldCOD,3)+"()"
        PRINT "    Dim strFRM As String    ' Form Name"
        PRINT "    Dim intLST As Integer   ' List Type"
        PRINT "    Dim intMOD As Integer   ' Module Type"
        PRINT "    '***********************************************************************************************"
        PRINT CASE @BldCOD
            WHEN @SecSGXTBL THEN "    intLST = mcUseLstSTD    ' mcUseLstSTD mcUseLstTPL mcUseLstTMP mcUseLstFRM"
            WHEN @SecSGXPRP THEN "    intLST = mcUseLstSTD    ' mcUseLstSTD mcUseLstTPL mcUseLstTMP mcUseLstFRM"
            WHEN @SecSGXCMD THEN "    intLST = mcUseLstSTD    ' mcUseLstSTD mcUseLstTPL mcUseLstTMP mcUseLstFRM"
            WHEN @SecSGXRPT THEN "    intLST = mcUseLstSTD    ' mcUseLstSTD mcUseLstTPL mcUseLstTMP mcUseLstFRM"
            WHEN @SecSGXSQL THEN "    intLST = mcUseLstSTD"
            WHEN @SecSGXSBY THEN "    intLST = mcUseLstSTD"
            WHEN @SecSGXGBY THEN "    intLST = mcUseLstSTD"
            WHEN @SecSGXCTL THEN "    intLST = mcUseLstSTD    ' mcUseLstSTD mcUseLstTPL mcUseLstTMP mcUseLstFRM"
            WHEN @SecSGXFRM THEN "    intLST = mcUseLstSTD    ' mcUseLstSTD mcUseLstTPL mcUseLstTMP mcUseLstFRM"
        END
        PRINT CASE @BldCOD
            WHEN @SecSGXTBL THEN "    intMOD = mcModObjREG    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
            WHEN @SecSGXPRP THEN "    intMOD = mcModObjLST    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
            WHEN @SecSGXCMD THEN "    intMOD = mcModObjRUN    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
            WHEN @SecSGXRPT THEN "    intMOD = mcModObjRUN    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
            WHEN @SecSGXSQL THEN "    intMOD = mcModObjCOD    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
            WHEN @SecSGXSBY THEN "    intMOD = mcModObjCOD    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
            WHEN @SecSGXGBY THEN "    intMOD = mcModObjCOD    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
            WHEN @SecSGXCTL THEN "    intMOD = mcModObjLST    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
            WHEN @SecSGXFRM THEN "    intMOD = mcModObjCOD    ' mcModObjDBG mcModObjLST mcModObjCOD mcModObjREG mcModObjRUN mcModObjGEN"
        END
        PRINT "    '***********************************************************************************************"


        END
        PRINT ""
        SET @IDN = 0; WHILE LEN(@LST) > 0 BEGIN
            SET @POS = CHARINDEX(@SEP,@LST)
            IF @POS > 0 BEGIN
                SET @ITM = LTRIM(RTRIM(LEFT(@LST,@POS-1)))
                SET @LST = LTRIM(RIGHT(@LST,LEN(@LST)-@POS-(LEN(@SEP)-1)))
            END ELSE BEGIN
                SET @ITM = LTRIM(RTRIM(@LST))
                SET @LST = ""
            END
            SET @IDN = @IDN+1
            ------------------------------------------------------------------------------------------------
            IF @IDN = 1 PRINT "    Select Case """+@ITM+""""
            PRINT "        Case """+@ITM+""": strFRM = """+@ITM+""""
            ------------------------------------------------------------------------------------------------
        END
        PRINT "    End Select"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        --------------------------------------------------------------------------------------------
        IF @BldCOD IN (@SecSGXTBL) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        Case mcModObjDBG: Call GenTbl_ObjDBG(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgYUP)"
        PRINT "        Case mcModObjLST: Call GenTbl_ObjLST(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjCOD: Call GenTbl_ObjCOD(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjREG: Call GenTbl_ObjREG(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjRUN: Call GenTbl_ObjRUN(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjGEN: Call GenTbl_ObjGEN(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgNOP)"
        PRINT "    End Select"
        --------------------------------------------------------------------------------------------
        END ELSE IF @BldCOD IN (@SecSGXPRP) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        Case mcModObjDBG: Call GenPrp_ObjDBG(wtx, strFRM, intLST, mcNewNOP, mcDbgYUP)"
        PRINT "        Case mcModObjLST: Call GenPrp_ObjLST(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "        Case mcModObjCOD: Call GenPrp_ObjCOD(wtx, strFRM, intLST, mcNewNOP, mcDbgNOP)"
        PRINT "        Case mcModObjREG: Call GenPrp_ObjREG(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "        Case mcModObjRUN: Call GenPrp_ObjRUN(wtx, strFRM, intLST, mcNewNOP, mcDbgNOP)"
        PRINT "        Case mcModObjGEN: Call GenPrp_ObjGEN(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "    End Select"
        --------------------------------------------------------------------------------------------
        END ELSE IF @BldCOD IN (@SecSGXCMD) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        Case mcModObjDBG: Call GenCmd_ObjDBG(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgYUP)"
        PRINT "        Case mcModObjLST: Call GenCmd_ObjLST(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgYUP)"
        PRINT "        Case mcModObjCOD: Call GenCmd_ObjCOD(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjREG: Call GenCmd_ObjREG(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjRUN: Call GenCmd_ObjRUN(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjGEN: Call GenCmd_ObjGEN(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgNOP)"
        PRINT "    End Select"
        --------------------------------------------------------------------------------------------
        END ELSE IF @BldCOD IN (@SecSGXRPT) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        Case mcModObjDBG: Call GenRpt_ObjDBG(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgYUP)"
        PRINT "        Case mcModObjLST: Call GenRpt_ObjLST(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjCOD: Call GenRpt_ObjCOD(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjREG: Call GenRpt_ObjREG(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjRUN: Call GenRpt_ObjRUN(wtx, strFRM, intLST, mcNewNOP, mcWrtYUP, mcDbgNOP)"
        PRINT "        Case mcModObjGEN: Call GenRpt_ObjGEN(wtx, strFRM, intLST, mcNewYUP, mcWrtYUP, mcDbgNOP)"
        PRINT "    End Select"
        --------------------------------------------------------------------------------------------
        END ELSE IF @BldCOD IN (@SecSGXSQL) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        'ase mcModObjLST: Call GenSql_ObjLST(wtx, strFRM, mcDbgNOP)"
        PRINT "        Case mcModObjCOD: Call GenSql_ObjCOD(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjREG: Call GenSql_ObjREG(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjRUN: Call GenSql_ObjRUN(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjGEN: Call GenSql_ObjGEN(wtx, strFRM, mcDbgNOP)"
        PRINT "    End Select"
        --------------------------------------------------------------------------------------------
        END ELSE IF @BldCOD IN (@SecSGXSBY) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        'ase mcModObjLST: Call GenSby_ObjLST(wtx, strFRM, mcDbgNOP)"
        PRINT "        Case mcModObjCOD: Call GenSby_ObjCOD(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjREG: Call GenSby_ObjREG(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjRUN: Call GenSby_ObjRUN(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjGEN: Call GenSby_ObjGEN(wtx, strFRM, mcDbgNOP)"
        PRINT "    End Select"
        --------------------------------------------------------------------------------------------
        END ELSE IF @BldCOD IN (@SecSGXGBY) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        'ase mcModObjLST: Call GenGby_ObjLST(wtx, strFRM, mcDbgNOP)"
        PRINT "        Case mcModObjCOD: Call GenGby_ObjCOD(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjREG: Call GenGby_ObjREG(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjRUN: Call GenGby_ObjRUN(wtx, strFRM, mcDbgNOP)"
        PRINT "        'ase mcModObjGEN: Call GenGby_ObjGEN(wtx, strFRM, mcDbgNOP)"
        PRINT "    End Select"
        --------------------------------------------------------------------------------------------
        END ELSE IF @BldCOD IN (@SecSGXCTL) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        Case mcModObjDBG: Call GenCtl_ObjDBG(wtx, strFRM, intLST, mcNewNOP, mcDbgYUP)"
        PRINT "        Case mcModObjLST: Call GenCtl_ObjLST(wtx, strFRM, intLST, mcNewYUP, mcDbgYUP)"
        PRINT "        Case mcModObjCOD: Call GenCtl_ObjCOD(wtx, strFRM, intLST, mcNewNOP, mcDbgNOP)"
        PRINT "        Case mcModObjREG: Call GenCtl_ObjREG(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "        Case mcModObjRUN: Call GenCtl_ObjRUN(wtx, strFRM, intLST, mcNewNOP, mcDbgNOP)"
        PRINT "        Case mcModObjGEN: Call GenCtl_ObjGEN(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "    End Select"
        --------------------------------------------------------------------------------------------
        END ELSE IF @BldCOD IN (@SecSGXFRM) BEGIN
        --------------------------------------------------------------------------------------------
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intMOD  ' mcNewYUP/mcNewNOP  mcDbgYUP/mcDbgNOP"
        PRINT "        Case mcModObjDBG: Call GenFrm_ObjDBG(wtx, strFRM, intLST, mcNewNOP, mcDbgYUP)"
        PRINT "        Case mcModObjLST: Call GenFrm_ObjLST(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "        Case mcModObjCOD: Call GenFrm_ObjCOD(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "        Case mcModObjREG: Call GenFrm_ObjREG(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "        Case mcModObjRUN: Call GenFrm_ObjRUN(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "        Case mcModObjGEN: Call GenFrm_ObjGEN(wtx, strFRM, intLST, mcNewYUP, mcDbgNOP)"
        PRINT "    End Select"
         --------------------------------------------------------------------------------------------
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- GEN_IT = Build module:  vbaGen_IT
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GEN_IT
        EXEC ut_zzVBX GEN_IT
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGEN_IT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' EXEC ut_zzVBA GEN_IT,'','','"+@StdTx1+"'"
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENFRM = Build module:  vbaGenFRM
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENFRM
        EXEC ut_zzVBX GENFRM
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENFRM) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Any Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenFrm_ANY( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    ByVal strTAB As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenFrm_ANY"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize module values"
        PRINT "    mintFrmTyp = intTYP"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT "    ' Build module code"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, """", """", """", wtx)"
        PRINT "    Call Code_HdrDec(frm, wtx, strABV, strTAB, mcIncRptNOP, mcIncModYUP)"
        PRINT "    Call Code_FrmEvt(frm, wtx, strABV, strTAB)"
        PRINT "    Call Code_FrmCmd(frm, wtx, strABV, mcIncDckNOP)"
        PRINT "    Call Code_FrmStp(frm, wtx, strABV)"
        PRINT "    Call Code_MngMch(frm, wtx, strABV)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Standard Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenFrm_FRM( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    ByVal strTAB As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenFrm_FRM"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize module values"
        PRINT "    mintFrmTyp = intTYP"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT "    ' Build module code"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, mcFrmAnyFRM, """", """", wtx)"
        PRINT "    Call Code_HdrDec(frm, wtx, strABV, strTAB, mcIncRptYUP, mcIncModYUP)"
        PRINT "    Call Code_FrmEvt(frm, wtx, strABV, strTAB)"
        PRINT "    Call Code_FrmCmd(frm, wtx, strABV, mcIncDckNOP)"
        PRINT "    Call Code_FrmStp(frm, wtx, strABV)"
        PRINT "    Call Code_MngMch(frm, wtx, strABV)"
        PRINT "    Call Code_MngSql(frm, wtx, strABV, strOBJ)"
        PRINT "    Call Code_MngCmd(frm, wtx, blnLST)"
        PRINT "    Call Code_MngRpt(frm, wtx, blnLST)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Tabbed Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenFrm_TAB( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    ByVal strTAB As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenFrm_FRM"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize module values"
        PRINT "    mintFrmTyp = intTYP"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT "    ' Build module code"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, mcFrmAnyTAB, """", """", wtx)"
        PRINT "    Call Code_HdrDec(frm, wtx, strABV, strTAB, mcIncRptYUP, mcIncModYUP)"
        PRINT "    Call Code_FrmEvt(frm, wtx, strABV, strTAB)"
        PRINT "    Call Code_FrmCmd(frm, wtx, strABV, mcIncDckNOP)"
        PRINT "    Call Code_FrmStp(frm, wtx, strABV)"
        PRINT "    Call Code_MngMch(frm, wtx, strABV)"
        PRINT "    Call Code_MngSql(frm, wtx, strABV, strOBJ)"
        PRINT "    Call Code_MngCmd(frm, wtx, blnLST)"
        PRINT "    Call Code_MngRpt(frm, wtx, blnLST)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  List Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenFrm_LST( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    ByVal strTAB As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenFrm_LST"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize module values"
        PRINT "    mintFrmTyp = intTYP"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT "    ' Build module code"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, mcFrmAnyLST, """", """", wtx)"
        PRINT "    Call Code_HdrDec(frm, wtx, strABV, strTAB, mcIncRptYUP, mcIncModYUP)"
        PRINT "    Call Code_FrmEvt(frm, wtx, strABV, strTAB)"
        PRINT "    Call Code_FrmCmd(frm, wtx, strABV, mcIncDckYUP)"
        PRINT "    Call Code_FrmStp(frm, wtx, strABV)"
        PRINT "    Call Code_MngCtl(frm, wtx, strABV)"
        PRINT "    Call Code_MngMch(frm, wtx, strABV)"
        PRINT "    Call Code_MngSql(frm, wtx, strABV, strOBJ)"
        PRINT "    Call Code_MngCmd(frm, wtx, blnLST)"
        PRINT "    Call Code_MngRpt(frm, wtx, blnLST)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  PopUp Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenFrm_POP( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    ByVal strTAB As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenFrm_POP"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize module values"
        PRINT "    mintFrmTyp = intTYP"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT "    ' Build module code"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, mcFrmAnyPOP, """", """", wtx)"
        PRINT "    Call Code_HdrDec(frm, wtx, strABV, strTAB, mcIncRptYUP, mcIncModYUP)"
        PRINT "    Call Code_FrmEvt(frm, wtx, strABV, strTAB)"
        PRINT "    Call Code_FrmCmd(frm, wtx, strABV, mcIncDckNOP)"
        PRINT "    Call Code_FrmStp(frm, wtx, strABV)"
        PRINT "    Call Code_MngMch(frm, wtx, strABV)"
        PRINT "    Call Code_MngCtl(frm, wtx, strABV)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  SubForm Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenFrm_SUB( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    ByVal strTAB As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenFrm_SUB"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize module values"
        PRINT "    mintFrmTyp = intTYP"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT "    ' Build module code"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, mcFrmAnySUB, """", """", wtx)"
        PRINT "    Call Code_HdrDec(frm, wtx, strABV, strTAB, mcIncRptNOP, mcIncModYUP)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  SubForm Form Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenFrm_MNU( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal intTYP As Integer, _"
        PRINT "    ByVal strTAB As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenFrm_MNU"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize module values"
        PRINT "    mintFrmTyp = intTYP"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT "    ' Build module code"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, mcFrmAnyMNU, """", """", wtx)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  Header Declarations"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_HdrDec( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal strTAB As String, _"
        PRINT "    ByVal blnIncRpt As Boolean, _"
        PRINT "    ByVal blnIncMod As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_HdrDec"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHPX As String"
        PRINT "    Dim strHSX As String"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & UCase$(strABV)"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & UCase$(strABV)"
        PRINT ""
        PRINT "    ' Declare tab tracking variables"
        PRINT "    strTAB = UCase$(Trim$(strTAB))"
        PRINT "    Dim blnTAB As Boolean: blnTAB = (Len(strTAB) > 0)"
        PRINT ""
        PRINT "    ' Declare Property variables"
        PRINT "    Dim strPrpNam       As String"
        PRINT "    Dim strPrpTyp       As String"
        PRINT "    Dim strPrpTbl       As String"
        PRINT "    Dim strPrpVar       As String"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    If blnIncRpt Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Form/Report Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrOpenText                As String                             '"""
        PRINT "    .AX ""Private mstrOpenName                As String                             '"""
        PRINT "    .AX ""Private mintOpenView                As Integer                            '"""
        PRINT "    .AX ""Private mstrFiltName                As String                             '"""
        PRINT "    .AX ""Private mstrWhereTxt                As String                             '"""
        PRINT "    .AX ""Private mintDataMode                As Integer                            '"""
        PRINT "    .AX ""Private mintWindMode                As Integer                            '"""
        PRINT "    .AX ""Private mstrOpenArgs                As String                             '"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgSQL Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' RunSql Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFSQ Then"
        PRINT "    .AX ""Private Const mcFndSqlENB           As Boolean = False                    ' True => Always enabled"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgRSQ Then"
        PRINT "    .AX ""Private Const mcRunSqlENB           As Boolean = True                     ' True => Always enabled"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgCSQ Then"
        PRINT "    .AX ""Private Const mcClrSqlENB           As Boolean = False                    ' True => Always enabled"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgWSQ Then"
        PRINT "    .AX ""Private Const mcWrtSqlENB           As Boolean = True                     ' True => Always enabled"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgWSQ Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mblnWrtSQL                  As Boolean                            ' Write SQL statement to temp file"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgSBY Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SrtBy Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private sby                         As clsRunSBY                          ' SrtBy Object"""
        PRINT "    .AX ""Private mvrnSrtBy()                 As Variant                            ' SrtBy Variable"""
        PRINT "    .AX ""Private Const mcClearSBY            As Boolean = True                     ' SrtBy Clear Flag"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgGBY Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' GrpBy Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private gby                         As clsRunGBY                          ' GrpBy Object"""
        PRINT "    .AX ""Private mvrnGrpBy()                 As Variant                            ' GrpBy Variable"""
        PRINT "    .AX ""Private Const mcClearGBY            As Boolean = True                     ' GrpBy Clear Flag"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgSBY Or mblnMchFlgGBY Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SrtBy/GrpBy Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX VBA_Sfx2Hdr(mrstCTL.Fields(mcCtlIdxHSX), ""FRM"", ""SrtBy/GrpBy Tracking"")"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End If"
        PRINT "    If mblnMchFlgSLN Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SelOn Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strPrpTyp = ""LNG"""
        PRINT "                strPrpNam = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                strPrpVar = ""mlng"" & strPrpNam"
        PRINT "                '---------------------------------------------------------------------------------------"
        PRINT "                .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar, ""SelOn Tracking"")"
        PRINT "                '---------------------------------------------------------------------------------------"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strPrpTyp = ""STR"""
        PRINT "                strPrpNam = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                strPrpVar = ""mstr"" & strPrpNam"
        PRINT "                '---------------------------------------------------------------------------------------"
        PRINT "                .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar, ""SelOn Tracking"")"
        PRINT "                '---------------------------------------------------------------------------------------"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End If"
        PRINT "    If mblnMchFlgFND Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' FndOn Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    End If"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Data Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcDatCtl & ""' AND "" & mcCtlNamHSX & "" = '"" & mcDatHsx & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strTYP = mrstCTL.Fields(mcCtlIdxTYP)"
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "            Select Case strTYP"
        PRINT "                Case mcCtlTypTXT: strPrpTyp = ""STR"": strPrpVar = ""mstr"" & strPrpNam"
        PRINT "                Case mcCtlTypCBO: strPrpTyp = ""LNG"": strPrpVar = ""mlng"" & strPrpNam"
        PRINT "                Case mcCtlTypCHK: strPrpTyp = ""BLN"": strPrpVar = ""mbln"" & strPrpNam"
        PRINT "            End Select"
        PRINT "            strPrpVar = ""mlng"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar, ""Data Control Tracking"")"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    If mblnMchFlgCMD Or mblnMchFlgRPT Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' List Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcEmptySql            As Boolean = True                     ' Initialize empty recordset"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcUseTplList          As Boolean = True                     ' Template List"""
        PRINT "    .AX ""Private Const mcUseStdList          As Boolean = False                    ' Standard List"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgCMD Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Command Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrRowSrcCMD               As String                             ' Command RowSource List"""
        PRINT "    .AX ""Private mintRowDefCMD               As Integer                            ' Default Command Item"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgRPT Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Report Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrRowSrcRPT               As String                             ' Report RowSource List"""
        PRINT "    .AX ""Private mintRowDefRPT               As Integer                            ' Default Report Item"""
        PRINT "    End If"
        PRINT "    If blnTAB Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Subform Tab Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcSfmYUP              As Boolean = True                     ' This IS  a subform"""
        PRINT "    .AX ""Private Const mcSfmNOP              As Boolean = False                    ' This NOT a subform"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Subform Tab Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mblnSubFlg                  As Boolean                            ' Acting as a subform?"""
        PRINT "    .AX ""Private mstrFrmTab                  As String                             ' Selected Form Tab Code"""
        PRINT "    .AX ""Private mintTabNbr                  As Integer                            ' Form Tab Number"""
        PRINT "    .AX ""Private mstrTabCod                  As String                             ' Form Tab Code"""
        PRINT "    End If"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Form Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrnOpnArg                  As Variant                            ' Manage OpenArgs()"""
        PRINT "    .AX ""Private mstrPrvVAL                  As String                             ' Previous control value list"""
        PRINT "    If blnIncMod Then"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private kys                         As clsUtlASC                          ' Filter keystrokes"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  Form Events"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_FrmEvt( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal strTAB As String _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_FrmEvt"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHPX As String"
        PRINT "    Dim strHSX As String"
        PRINT ""
        PRINT "    ' Declare tab tracking variables"
        PRINT "    strTAB = UCase$(Trim$(strTAB))"
        PRINT "    Dim blnTAB As Boolean: blnTAB = (Len(strTAB) > 0)"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & UCase$(strABV)"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & UCase$(strABV)"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Form Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If blnTAB Then"
        PRINT "    .AX ""Public Sub InitPFL(ByRef IfoPFL As clsIfoPFL)"""
        PRINT "    .AX ""    Set pfl = IfoPFL"""
        PRINT "    .AX ""End Sub"""
        PRINT "    End If"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is opened"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Open(Cancel As Integer)"""
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    ' Initialize:  Form Objects"""
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    Set kys = New clsUtlASC"""
        PRINT "    If mblnMchFlgSBY Then"
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    ' Initialize:  SrtBy Objects"""
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    Set sby = New clsRunSBY"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgGBY Then"
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    ' Initialize:  GrpBy Objects"""
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    Set gby = New clsRunGBY"""
        PRINT "    End If"
        PRINT "    If blnTAB Then"
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    ' Mechanism for including in GenPFL"""
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    mstrFrmTab = fmt.DpfCod"" & strTAB"
        PRINT "    .AX ""    mintTabNbr = fmt.DpfNbr"" & strTAB"
        PRINT "    .AX ""    mstrTabCod = fmt.DpfCod"" & strTAB"
        PRINT "    .AX ""    mblnSubFlg = mcSfmYUP"""
        PRINT "    .AX ""    Dim strTXT As String"""
        PRINT "    .AX ""    On Error Resume Next ' Does not exist if no parent"""
        PRINT "    .AX ""    strTXT = Me.Parent.Name"""
        PRINT "    .AX ""    On Error GoTo 0"""
        PRINT "    .AX ""    If Len(strTXT) = 0 Then"""
        PRINT "    .AX ""        mblnSubFlg = mcSfmNOP"""
        PRINT "    .AX ""        Set pfl = New clsIfoPFL"""
        PRINT "    .AX ""        Call pfl.Current_DMO"""
        PRINT "    .AX ""        Call pfl.Current_PFL"""
        PRINT "    .AX ""        Call pfl.Current_TAB(mstrTabCod)"""
        PRINT "    .AX ""        Call pfl.Current_PIK(mstrTabCod)"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    ' Read calling arguments"""
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    .AX ""    mvrnOpnArg = Nz(Me.OpenArgs, """""""")"""
        PRINT "    .AX ""    '---------------------------------------------"""
        PRINT "    End If"
        PRINT "    Select Case mintFrmTyp"
        PRINT "        Case mcFrmTypFRM, mcFrmTypTAB, mcFrmTypLST"
        PRINT "            If Not blnTAB Then"
        PRINT "    .AX ""    ' Display form full screen"""
        PRINT "    .AX ""    DoCmd.Maximize"""
        PRINT "            End If"
        PRINT "    End Select"
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is loaded"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Load()"""
        PRINT "    .AX ""    ' Initialize:  Form Properties"""
        PRINT "    .AX ""    Call Form_Setup"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when record becomes current"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' BeforeUpdate(frm) => AfterUpdate(frm) => Exit(ctl) => LostFocus(ctl) => Current(frm)"""
        PRINT "    .AX ""Private Sub Form_Current()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is unloaded"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Unload(Cancel As Integer)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is closed"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Close()"""
        PRINT "    If mblnMchFlgSBY Then"
        PRINT "    .AX ""    RunRST.SrtBy"" & UCase$(strABV) & "" = sby.SrtBy  ' Persist SrtBy Array"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgGBY Then"
        PRINT "    .AX ""    RunRST.SrtBy"" & UCase$(strABV) & "" = sby.GrpBy  ' Persist GrpBy Array"""
        PRINT "    End If"
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Redisplay underlying data values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Form_Refresh()"""
        PRINT "    .AX ""    Me.Refresh"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Form_Requery()"""
        PRINT "    .AX ""    Me.Requery"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  Form Commands"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_FrmCmd( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal blnIncDck As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_FrmCmd"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHPX As String"
        PRINT "    Dim strHSX As String"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & UCase$(strABV)"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & UCase$(strABV)"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Form Commands"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If mblnMchFlgFRF Then"
        PRINT "    .AX ""Private Sub cmdRefreshForm_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdRefreshForm_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Refresh the form"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdRefresh"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFAN Then"
        PRINT "    .AX ""Private Sub cmdAddNewRecord_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdAddNewRecord_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Save the current record"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdRecordsGoToNew"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFSV Then"
        PRINT "    .AX ""Private Sub cmdSaveRecord_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdSaveRecord_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Save the current record"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdSaveRecord"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFUN Then"
        PRINT "    .AX ""Private Sub cmdUndoRecord_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdUndoRecord_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Undo all unsaved changes for the current record"""
        PRINT "    .AX ""    If Me.Dirty Then"""
        PRINT "    .AX ""        DoCmd.RunCommand acCmdUndo"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFDL Then"
        PRINT "    .AX ""Private Sub cmdDeleteRecord_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdDeleteRecord_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Delete the current record (disregard errors)"""
        PRINT "    .AX ""    On Error Resume Next"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdDeleteRecord"""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFCL Then"
        PRINT "    .AX ""Private Sub cmdCloseForm_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdCloseForm_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Close the current form"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdClose"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFQT Then"
        PRINT "    .AX ""Private Sub cmdQuit_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdQuit_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Close the current form"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdClose"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFAC Then"
        PRINT "    .AX ""Private Sub cmdAccept_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdAccept_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Close the current form"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdClose"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFCN Then"
        PRINT "    .AX ""Private Sub cmdCancel_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.cmdCancel_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Close the current form"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdClose"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    If blnIncDck Then"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open the corresponding form"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Form_DblClick(Cancel As Integer)"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Assign parameters"""
        PRINT "    .AX ""    mstrOpenText = """""""""""
        PRINT "    .AX ""    mstrOpenName = mstrOpenText"""
        PRINT "    .AX ""    mstrFiltName = """""""""""
        PRINT "    .AX ""    mstrWhereTxt = """""""""""
        PRINT "    .AX ""    mstrOpenArgs = """""""""""
        PRINT "    .AX ""    mintOpenView = acNormal"""
        PRINT "    .AX ""    mintDataMode = acFormPropertySettings"""
        PRINT "    .AX ""    mintWindMode = acWindowNormal"""
        PRINT "    .AX ""    ' Open the form ignoring any error conditions"""
        PRINT "    .AX ""    If Len(mstrOpenName) > 0 Then"""
        PRINT "    .AX ""        If Me.Dirty Then Call SaveIt(0)"""
        PRINT "    .AX ""        On Error Resume Next"""
        PRINT "    .AX ""        DoCmd.OpenForm mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt, mintDataMode, mintWindMode, mstrOpenArgs"""
        PRINT "    .AX ""        On Error GoTo 0"""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        MsgBox """"This form is not available."""", vbOKOnly, """"Open """" & mstrOpenText"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  Form Setup"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_FrmStp( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strABV As String _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_FrmStp"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHPX As String"
        PRINT "    Dim strHSX As String"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & UCase$(strABV)"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & UCase$(strABV)"
        PRINT ""
        PRINT "    Dim strPRV As String"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize form properties and mechanisms"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Form_Setup()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam.Form_Setup"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup form display values"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.Caption = mcModTtl"""
        PRINT "    If mblnMchFlgTLB Then"
        PRINT "    .AX ""    Me.lblTitle01.Caption = mcModTtl"""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup form process values"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.AllowFilters = "" & frm.AllowFilters"
        PRINT "    .AX ""    Me.AllowAdditions = "" & frm.AllowAdditions"
        PRINT "    .AX ""    Me.AllowEdits = "" & frm.AllowEdits"
        PRINT "    .AX ""    Me.AllowDeletions = "" & frm.AllowDeletions"
        PRINT "    Select Case mintFrmTyp"
        PRINT "        Case mcFrmTypPOP"
        PRINT "    .AX ""    Me.DataEntry = "" & frm.DataEntry"
        PRINT "        Case mcFrmTypSUB"
        PRINT "        Case Else"
        PRINT "    .AX ""    'e.UniqueTable = """""""""""
        PRINT "    End Select"
        PRINT "    If mblnMchFlgSBY Then"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Assign SrtBy Objects"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    sby.SrtBy = RunRST."" & strSBY"
        PRINT "    .AX ""    Call SrtBySyncCap"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgGBY Then"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Assign GrpBy Objects"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    gby.GrpBy = RunRST."" & strGBY"
        PRINT "    End If"
        PRINT "    If mblnMchFlgCMD Then"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Path mechanisms (with defaults - mcUseStdList mcUseTplList)"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Setup_Path(""""Y:\Data\DEV\Projects\"""", mcUseStdList)"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgCMD Then"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Command mechanisms (with defaults - mcUseStdList mcUseTplList)"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Setup_Command(""""ProcessName_01"""", mcUseTplList)"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgRPT Then"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Report mechanisms (with defaults - mcUseStdList mcUseTplList)"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Setup_Report(""""ReportName_01"""", mcUseTplList)"""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Reset the hourglass"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call DoCmd.Hourglass(False)"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Controls"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Controls_Setup"""
        PRINT "    .AX """""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl ERROR:"""" & Err.Number """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Controls"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Controls_Setup()"""
        PRINT "    If mblnMchFlgHBY Then"
        PRINT "    .AX ""    Call Load_SelOnVals           ' Initialize SelOn Variables"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    End If"
        PRINT "    .AX ""    Call Controls_RowSrc          ' Load combo control records"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    If mblnMchFlgSQL Then"
        PRINT "    .AX ""    Call ExecSQL(mcEmptySql)      ' Assign an empty recordset"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    End If"
        PRINT "    .AX ""    mstrPrvVAL = CurVAL           ' Establish value comparison baseline"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Controls_Reset           ' Assign control dependencies"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    If mblnMchFlgRSQ Then"
        PRINT "    .AX ""Private Sub Controls_Reset(Optional ByVal blnRunSQL As Boolean = False)"""
        PRINT "    Else"
        PRINT "    .AX ""Private Sub Controls_Reset()"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgWSQ Then"
        PRINT "    .AX ""    Me.tglWrtSQL.Enabled = mcWrtSqlENB"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFSQ Then"
        PRINT "    .AX ""    Me.tglFndSQL.Enabled = mcFndSqlENB"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgRSQ Then"
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = (blnRunSQL Or mcRunSqlENB)"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgCSQ Then"
        PRINT "    mTXT = ""    Me.tglClrSQL.Enabled = ("": mSEP = gcMTY"
        PRINT "    If mblnMchFlgSBY Then mTXT = mTXT & mSEP & ""sby.HasElm"": mSEP = "" Or """
        PRINT "    If mblnMchFlgGBY Then mTXT = mTXT & mSEP & ""gby.HasElm"": mSEP = "" Or """
        PRINT "    If mblnMchFlgHBY Then mTXT = mTXT & mSEP & ""HasSLN"":     mSEP = "" Or """
        PRINT "    .AX mTXT & mSEP & ""mcClrSqlENB)"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgSQL Then"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgFAC Then"
        PRINT "    .AX ""    Me.cmdAccept.Enabled = AnyVAL"""
        PRINT "    End If"
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Defaults()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Requery()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Clear()"""
        PRINT "    '---------------------------------------------------------------------------------------------------"
        PRINT "    mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcDatCtl & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strTYP = mrstCTL.Fields(mcCtlIdxTYP)"
        PRINT "            strNAM = mrstCTL.Fields(mcCtlIdxNAM)"
        PRINT "            strBAS = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "            Select Case strTYP"
        PRINT "                Case mcCtlTypTXT: .AX ""    mstr"" & strBAS & "" = gcNulTXT: Me."" & strNAM & "" = mstr"" & strBAS"
        PRINT "                Case mcCtlTypCBO: .AX ""    mlng"" & strBAS & "" = gcNulNBR: Me."" & strNAM & "" = mlng"" & strBAS"
        PRINT "                Case mcCtlTypCHK: .AX ""    mbln"" & strBAS & "" = gcNulBLN: Me."" & strNAM & "" = mbln"" & strBAS"
        PRINT "            End Select"
        PRINT "        mrstCTL.MoveNext: Loop"
        PRINT "    End If"
        PRINT "    '---------------------------------------------------------------------------------------------------"
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_RowSrc(Optional ByVal blnRST As Boolean)"""
        PRINT "    mrstCTL.Filter = mcCtlNamTYP & "" = "" & mcCtlTypCBO: mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strNAM = mrstCTL.Fields(mcCtlIdxNAM)"
        PRINT "            strBAS = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "            strHPX = mrstCTL.Fields(mcCtlIdxHPX)"
        PRINT "            Select Case strHPX"
        PRINT "                Case mcCmdMch"
        PRINT "                Case mcRptMch"
        PRINT "                Case Else"
        PRINT "                    If Len(strPRV) = 0 Then strPRV = strHPX"
        PRINT "                    '-------------------------------------------------------------------------------------------"
        PRINT "                    If strHPX <> strPRV Then"
        PRINT "                    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "                    End If"
        PRINT "                    .AX ""    Me."" & strNAM & "".RowSource = RunSQL.CboSql_"" & strBAS"
        PRINT "                    '-------------------------------------------------------------------------------------------"
        PRINT "                    strPRV = strHPX"
        PRINT "            End Select"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "        .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    End If"
        PRINT "    .AX ""    If blnRST Then Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Control Values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Function CurVAL() As String"""
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strTYP = mrstCTL.Fields(mcCtlIdxTYP)"
        PRINT "            strNAM = mrstCTL.Fields(mcCtlIdxNAM)"
        PRINT "            strBAS = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "            Select Case strTYP"
        PRINT "                Case mcCtlTypTXT: .AX ""    CurVAL = CurVAL & gcPIP & mstr"" & strBAS"
        PRINT "                Case mcCtlTypCBO: .AX ""    CurVAL = CurVAL & gcPIP & mlng"" & strBAS"
        PRINT "                Case mcCtlTypCHK: .AX ""    CurVAL = CurVAL & gcPIP & mbln"" & strBAS"
        PRINT "            End Select"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    'urVAL = CurVAL & gcMTY & Nz(Me.txtCtlNam, gcNulTXT)"""
        PRINT "    .AX ""    'urVAL = CurVAL & gcMTY & Nz(Me.cboCtlNam, gcNulNBR)"""
        PRINT "    .AX ""    'urVAL = CurVAL & gcPIP & Nz(Me.cboCtlNam.Column(0), gcNulTXT)"""
        PRINT "    .AX ""    'urVAL = CurVAL & gcPIP & Me.chkCtlNam"""
        PRINT "    .AX ""    'urVAL = CurVAL & gcPIP & mzzzCtlNam"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function RqdVAL() As Boolean: RqdVAL = True"""
        PRINT "    '---------------------------------------------------------------------------------------------------"
        PRINT "    mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcDatCtl & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strTYP = mrstCTL.Fields(mcCtlIdxTYP)"
        PRINT "            strNAM = mrstCTL.Fields(mcCtlIdxNAM)"
        PRINT "            strBAS = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "            Select Case strTYP"
        PRINT "                Case mcCtlTypTXT: .AX ""    RqdVAL = RqdVAL And (Len(mstr"" & strBAS & "") > 0)"""
        PRINT "                Case mcCtlTypCBO: .AX ""    RqdVAL = RqdVAL And (mlng"" & strBAS & "" > gcMtyID)"""
        PRINT "                'ase mcCtlTypCHK: Checkbox values (True/False) cannot be verified"
        PRINT "            End Select"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    '---------------------------------------------------------------------------------------------------"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    'qdVAL = RqdVAL And (Len(mstrCtlNam) > 0)"""
        PRINT "    .AX ""    'qdVAL = RqdVAL And (mlngCtlNam >  gcMtyID)"""
        PRINT "    .AX ""    'qdVAL = RqdVAL And (mlngCtlNam >= gcPrdID)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    If mblnMchFlgFAC Then"
        PRINT "    .AX ""Private Function AnyVAL() As Boolean: AnyVAL = False"""
        PRINT "    '---------------------------------------------------------------------------------------------------"
        PRINT "    mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcDatCtl & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strTYP = mrstCTL.Fields(mcCtlIdxTYP)"
        PRINT "            strNAM = mrstCTL.Fields(mcCtlIdxNAM)"
        PRINT "            strBAS = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "            Select Case strTYP"
        PRINT "                Case mcCtlTypTXT: .AX ""    AnyVAL = AnyVAL Or (Len(mstr"" & strBAS & "") > 0)"""
        PRINT "                Case mcCtlTypCBO: .AX ""    AnyVAL = AnyVAL Or (mlng"" & strBAS & "" > gcMtyID)"""
        PRINT "                'ase mcCtlTypCHK: Checkbox values (True/False) cannot be verified"
        PRINT "            End Select"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    '---------------------------------------------------------------------------------------------------"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    'nyVAL = AnyVAL Or (Len(mstrCtlNam) > 0)"""
        PRINT "    .AX ""    'nyVAL = AnyVAL Or (mlngCtlNam >  gcMtyID)"""
        PRINT "    .AX ""    'nyVAL = AnyVAL Or (mlngCtlNam >= gcPrdID)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Logical Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Function HasDIF() As Boolean"""
        PRINT "    .AX ""    HasDIF = (CurVAL <> mstrPrvVAL)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasRQD() As Boolean"""
        PRINT "    .AX ""    HasRQD = RqdVAL"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    If mblnMchFlgCMD Then"
        PRINT "    .AX ""Private Function CanCMD() As Boolean"""
        PRINT "    .AX ""    CanCMD = (True _"""
        PRINT "    .AX ""        And (Me.Recordset.RecordCount > 0) _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgRPT Then"
        PRINT "    .AX ""Private Function CanRPT() As Boolean"""
        PRINT "    .AX ""    CanRPT = (True _"""
        PRINT "    .AX ""        And (Me.Recordset.RecordCount > 0) _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Records"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub SaveIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdSaveRecord"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub ReadIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""    Me.Refresh      ' Read form source values"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LoadIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""    Call Me.Requery ' Requery form source records"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  MngCtl"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_MngCtl( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strABV As String _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_MngCtl"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHPX As String"
        PRINT "    Dim strHSX As String"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & UCase$(strABV)"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & UCase$(strABV)"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcDatCtl & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strTYP = mrstCTL.Fields(mcCtlIdxTYP)"
        PRINT "            strNAM = mrstCTL.Fields(mcCtlIdxNAM)"
        PRINT "            strBAS = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "            strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "            .AX """""
        PRINT "            .AX """""
        PRINT "            .AX ""'###################################################################################################"""
        PRINT "            .AX ""' Data Control:  "" & strNAM"
        PRINT "            .AX ""'###################################################################################################"""
        PRINT "            Select Case strTYP"
        PRINT "                Case mcCtlTypTXT"
        PRINT "                    .AX ""Private Sub "" & strNAM & ""_AfterUpdate()"""
        PRINT "                    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                    .AX ""    Me."" & strNAM & "" = Nz(Me."" & strNAM & "", gcNulTXT)"""
        PRINT "                    .AX ""    Call Controls_Reset"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    If strHSX <> mcSlnTxt Then"
        PRINT "                    .AX ""Private Sub "" & strNAM & ""_DblClick(Cancel As Integer)"""
        PRINT "                    .AX ""    Me."" & strNAM & "" = """""""""""
        PRINT "                    .AX ""    Call "" & strNAM & ""_AfterUpdate"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    End If"
        PRINT "                    .AX ""Private Sub txtModCod_KeyPress(KeyAscii As Integer)"""
        PRINT "                    .AX ""    If kys.Get_Any_Mixed(KeyAscii) Then Beep"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                Case mcCtlTypCBO"
        PRINT "                    .AX ""Private Sub "" & strNAM & ""_AfterUpdate()"""
        PRINT "                    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                    .AX ""    Me."" & strNAM & "" = Nz(Me."" & strNAM & "", gcNulTXT)"""
        PRINT "                    .AX ""    Call Controls_Reset"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    If strHSX <> mcSlnCbo Then"
        PRINT "                    .AX ""Private Sub "" & strNAM & ""_DblClick(Cancel As Integer)"""
        PRINT "                    .AX ""    Me."" & strNAM & "" = Null"""
        PRINT "                    .AX ""    Call "" & strNAM & ""_AfterUpdate"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                    End If"
        PRINT "                Case mcCtlTypCHK"
        PRINT "                    .AX ""Private Sub "" & strNAM & ""_AfterUpdate()"""
        PRINT "                    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                    .AX ""    Call Controls_Reset"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                Case mcCtlTypCMD"
        PRINT "                    .AX ""Private Sub "" & strNAM & ""_Click()"""
        PRINT "                    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                    .AX ""    Call Controls_Reset"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                Case mcCtlTypTGL"
        PRINT "                    .AX ""Private Sub "" & strNAM & ""_AfterUpdate()"""
        PRINT "                    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                    .AX ""    ' Set the toggle state"""
        PRINT "                    .AX ""    Me.tglClrSQL = True"""
        PRINT "                    .AX ""    Me.tglClrSQL.Enabled = True"""
        PRINT "                    .AX ""    '--------------------------------------------------"""
        PRINT "                    .AX ""    ' *** Place Toggle Logic Here ***"""
        PRINT "                    .AX ""    '--------------------------------------------------"""
        PRINT "                    .AX ""    ' Reset the toggle state"""
        PRINT "                    .AX ""    Me.tglClrSQL = False"""
        PRINT "                    .AX ""    Me.tglClrSQL.Enabled = mcClrSqlENB"""
        PRINT "                    .AX ""    ' Process dependent controls"""
        PRINT "                    .AX ""    Call Controls_Reset"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "                Case Else"
        PRINT "                    .AX ""Private Sub "" & strNAM & ""_AfterUpdate()"""
        PRINT "                    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                    .AX ""    Call Controls_Reset"""
        PRINT "                    .AX ""End Sub"""
        PRINT "                    .AX ""'==================================================================================================="""
        PRINT "            End Select"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Data Entry"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  MngMch"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_MngMch( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strABV As String _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_MngMch"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHPX As String"
        PRINT "    Dim strHSX As String"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & UCase$(strABV)"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & UCase$(strABV)"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    If mblnMchFlgSBY Then"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SrtBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' SrtBy:  Synchronize Captions"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub SrtBySyncCap(Optional ByVal blnCLR As Boolean = False)"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    If blnCLR Then Call sby.ClrCap"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "            .AX ""    cmdSrtBy"" & strHSX & "".Caption = sby.GetCap(mcHdr"" & strHSX & "")"""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    RunRST."" & strSBY & "" = sby.SrtBy"""
        PRINT "    .AX ""    RunSQL."" & strSBY & "" = sby.SrtBy"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' SrtBy:  Process Command Controls"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "            .AX ""Private Sub cmdSrtBy"" & strHSX & ""_Click()"""
        PRINT "            .AX ""    cmdSrtBy"" & strHSX & "".Caption = sby.NxtCap(mcHdr"" & strHSX & "", cmdSrtBy"" & strHSX & "".Caption): Call SrtBySyncCap"""
        PRINT "            .AX ""End Sub"""
        PRINT "            .AX ""'==================================================================================================="""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgGBY Then"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage GrpBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "            .AX ""Private Sub tglGrpBy"" & strHSX & ""_AfterUpdate()"""
        PRINT "            .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "            .AX ""    Me.tglGrpBy"" & strHSX & "" = False"""
        PRINT "            .AX ""End Sub"""
        PRINT "            .AX ""'==================================================================================================="""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgHBY Then"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SelOn Variables"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Load_SelOnVals()"""
        PRINT "    If mblnMchFlgSLN Then"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX ""    mlng"" & strHSX & "" = RunRST."" & strHSX & "": Me.cboSelOn"" & strHSX & "" = mlng"" & strHSX"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX ""    mstr"" & strHSX & "" = RunRST."" & strHSX & "": Me.txtSelOn"" & strHSX & "" = mstr"" & strHSX"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End If"
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Load_SelOnDefs()"""
        PRINT "    If mblnMchFlgSLN Then"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX ""    mlng"" & strHSX & "" = gcNulNBR: RunRST."" & strHSX & "" = mlng"" & strHSX & "": Me.cboSelOn"" & strHSX & "" = mlng"" & strHSX"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX ""    mstr"" & strHSX & "" = gcNulTXT: RunRST."" & strHSX & "" = mstr"" & strHSX & "": Me.txtSelOn"" & strHSX & "" = mstr"" & strHSX"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End If"
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasSLN() As Boolean: HasSLN = True"""
        PRINT "    If mblnMchFlgSLN Then"
        PRINT "        mTXT = ""  """
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX ""    HasSLN = HasSLN And (mlng"" & strHSX & "" > gcMtyID)"""
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX ""    HasSLN = HasSLN And (Len(mstr"" & strHSX & "") > 0)"""
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End If"
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    'asSLN = HasSLN And (Len(mstrCtlNam) > 0)"""
        PRINT "    .AX ""    'asSLN = HasSLN And (mlngCtlNam >  gcMtyID)"""
        PRINT "    .AX ""    'asSLN = HasSLN And (mlngCtlNam >= gcPrdID)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    End If"
        PRINT "    If mblnMchFlgSLN Then"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX """""
        PRINT "                .AX """""
        PRINT "                .AX ""'###################################################################################################"""
        PRINT "                .AX ""' SelOn Control:  "" & strHSX"
        PRINT "                .AX ""'###################################################################################################"""
        PRINT "                .AX ""Private Sub cboSelOn"" & strHSX & ""_AfterUpdate()"""
        PRINT "                .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                .AX ""    mlng"" & strHSX & "" = Nz(Me.cboSelOn"" & strHSX & "", gcNulNBR)"""
        PRINT "                .AX ""    RunRST."" & strHSX & "" = mlng"" & strHSX"
        PRINT "                .AX ""    Call Controls_Reset"""
        PRINT "                .AX ""End Sub"""
        PRINT "                .AX ""'==================================================================================================="""
        PRINT "                .AX ""Private Sub cboSelOn"" & strHSX & ""_DblClick(Cancel As Integer)"""
        PRINT "                .AX ""    Me.cboSelOn"" & strHSX & "" = Null"""
        PRINT "                .AX ""    Call cboSelOn"" & strHSX & ""_AfterUpdate"""
        PRINT "                .AX ""End Sub"""
        PRINT "                .AX ""'==================================================================================================="""
        PRINT "                .AX ""Private Sub cbo"" & strHSX & ""_DblClick(Cancel As Integer)"""
        PRINT "                .AX ""    Me.cboSelOn"" & strHSX & "" = Me.cbo"" & strHSX"
        PRINT "                .AX ""    Call cboSelOn"" & strHSX & ""_AfterUpdate"""
        PRINT "                .AX ""End Sub"""
        PRINT "                .AX ""'==================================================================================================="""
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX """""
        PRINT "                .AX """""
        PRINT "                .AX ""'###################################################################################################"""
        PRINT "                .AX ""' SelOn Control:  "" & strHSX"
        PRINT "                .AX ""'###################################################################################################"""
        PRINT "                .AX ""Private Sub txtSelOn"" & strHSX & ""_AfterUpdate()"""
        PRINT "                .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "                .AX ""    mlng"" & strHSX & "" = Nz(Me.cboSelOn"" & strHSX & "", gcNulTXT)"""
        PRINT "                .AX ""    RunRST."" & strHSX & "" = mstr"" & strHSX"
        PRINT "                .AX ""    Call Controls_Reset"""
        PRINT "                .AX ""End Sub"""
        PRINT "                .AX ""'==================================================================================================="""
        PRINT "                .AX ""Private Sub cboSelOn"" & strHSX & ""_DblClick(Cancel As Integer)"""
        PRINT "                .AX ""    Me.cboSelOn"" & strHSX & "" = Null"""
        PRINT "                .AX ""    Call cboSelOn"" & strHSX & ""_AfterUpdate"""
        PRINT "                .AX ""End Sub"""
        PRINT "                .AX ""'==================================================================================================="""
        PRINT "                .AX ""Private Sub cbo"" & strHSX & ""_DblClick(Cancel As Integer)"""
        PRINT "                .AX ""    Me.cboSelOn"" & strHSX & "" = Me.cbo"" & strHSX"
        PRINT "                .AX ""    Call cboSelOn"" & strHSX & ""_AfterUpdate"""
        PRINT "                .AX ""End Sub"""
        PRINT "                .AX ""'==================================================================================================="""
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "        .AX """""
        PRINT "        .AX """""
        PRINT "        .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  MngSql"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_MngSql( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal strOBJ As String _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_MngSql"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHPX As String"
        PRINT "    Dim strHSX As String"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & UCase$(strABV)"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & UCase$(strABV)"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    If mblnMchFlgSQL Then"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Build SQL Statements"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If mblnMchFlgRSQ Then"
        PRINT "    .AX ""Private Sub tglRunSQL_AfterUpdate()"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglRunSQL = True"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = True"""
        PRINT "    .AX ""    ' Assign the SQL statement"""
        PRINT "    .AX ""    Call ExecSQL"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglRunSQL = False"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = mcRunSqlENB"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgCSQ Then"
        PRINT "    .AX ""Private Sub tglClrSQL_AfterUpdate()"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglClrSQL = True"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = True"""
        PRINT "    .AX ""    ' Assign the SQL statement"""
        PRINT "    If mblnMchFlgSBY Then"
        PRINT "    .AX ""    Call SrtBySyncCap(mcClearSBY)"""
        PRINT "    .AX ""    Call Load_SelOnDefs"""
        PRINT "    End If"
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglClrSQL = False"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = mcClrSqlENB"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    If mblnMchFlgWSQ Then"
        PRINT "    .AX ""Private Sub tglWrtSQL_AfterUpdate()"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    mblnWrtSQL = Me.tglWrtSQL"""
        PRINT "    .AX ""    RunRST.WrtSQL = mblnWrtSQL"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SQL Criteria"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub AssignSQL()"""
        PRINT "    .AX ""    With RunSQL"""
        PRINT "    .AX ""        ' System"""
        PRINT "    If mblnMchFlgWSQ Then"
        PRINT "    .AX ""        .WrtSQL = mblnWrtSQL"""
        PRINT "    End If"
        PRINT "    .AX ""        ' Criteria"""
        PRINT "    If mblnMchFlgSLN Then"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX ""        ."" & strHSX & "" = mlng"" & strHSX"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "        mrstCTL.Filter = mcCtlNamHPX & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "        If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "            mrstCTL.MoveFirst"
        PRINT "            Do While Not mrstCTL.EOF"
        PRINT "                strHSX = mrstCTL.Fields(mcCtlIdxHSX)"
        PRINT "                .AX ""        ."" & strHSX & "" = mstr"" & strHSX"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End If"
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub ExecSQL(Optional ByVal blnEmpty As Boolean)"""
        PRINT "    .AX ""    Call AssignSQL"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    'Me.RecordSource = RunSQL.FrmSql_"" & strOBJ & ""(blnEmpty)"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    mstrPrvVAL = CurVAL"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  MngCmd"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_MngCmd( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_MngCmd"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strOBJ As String: strOBJ = frm.Name"
        PRINT "    Dim reg    As clsRegCMD"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST  ' mcUseTplList  mcUseStdList"
        PRINT ""
        PRINT "    ' Declare working objects"
        PRINT "    Dim obj As AccessObject"
        PRINT ""
        PRINT "    ' Initialize report registration"
        PRINT "    Set reg = New clsRegCMD"
        PRINT "    Call reg.Activate(mblnUseLst)"
        PRINT ""
        PRINT "    ' Initialize form property list"
        PRINT "    Dim vrnFrmPrp As Variant"
        PRINT "    vrnFrmPrp = GenPrp_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize form command list"
        PRINT "    Dim vrnFrmCmd As Variant"
        PRINT "    vrnFrmCmd = GenCmd_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize working command list"
        PRINT "    'all Init_CmdRst(mcIncRegNOP)"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnITM          As Variant"
        PRINT "    Dim intCNT          As Integer"
        PRINT "    Dim intIDX          As Integer"
        PRINT "    Dim strIDX          As String"
        PRINT "    Dim strCMA          As String"
        PRINT ""
        PRINT "    ' Declare Command variables"
        PRINT "    Dim strCmdNum       As String"
        PRINT "    Dim strCmdNam       As String"
        PRINT "    Dim strCmdTtl       As String"
        PRINT "    Dim strRunNam       As String"
        PRINT "    Dim blnTplNam       As Boolean"
        PRINT "    Dim blnIsForm       As Boolean"
        PRINT ""
        PRINT "    ' How many commands in the list?"
        PRINT "    intCNT = UBound(vrnFrmCmd)+1"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    If mblnMchFlgCMD Then"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Commands Mechanism"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Setup_Command(ByVal strDefault As String, ByVal blnUseList As boolean)"""
        PRINT "    .AX ""    Dim RegCMD    As clsRegCMD"""
        PRINT "    .AX ""    Set RegCMD = New clsRegCMD"""
        PRINT "    .AX ""    Dim mvrnCmdLst As Variant"""
        PRINT "    .AX ""    With RegCMD"""
        PRINT "    .AX ""        Call .Activate(blnUseList)  ' blnUseList mcUseStdList mcUseTplList"""
        PRINT "    .AX ""        mvrnCmdLst = Array( _"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmCmd: intIDX = intIDX+1: strCMA = IIf(intIDX < intCNT, "","", """")"
        PRINT "        strCmdNam = CStr(vrnITM)"
        PRINT "        .AX ""            .GetCmdNum("""""" & strCmdNam & """""")"" & strCMA & "" _"""
        PRINT "    Next"
        PRINT "    .AX ""        )"""
        PRINT "    .AX ""        mstrRowSrcCMD = .GetCmdLst(mvrnCmdLst, strDefault, mcNoBlank)"""
        PRINT "    .AX ""        mintRowDefCMD = .DefaultItem"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    Set RegCMD = Nothing"""
        PRINT "    .AX ""    Me.cboCmdLst.RowSource = mstrRowSrcCMD"""
        PRINT "    .AX ""    Call Reset_CommandList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_CommandList()"""
        PRINT "    .AX ""    If CanCMD And Len(mstrRowSrcCMD) > 0 Then"""
        PRINT "    .AX ""        ' Set command list value to default"""
        PRINT "    .AX ""        Me.cboCmdLst.Value = mintRowDefCMD"""
        PRINT "    .AX ""        ' Reset command buttons"""
        PRINT "    .AX ""        Call Reset_CommandButtons"""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        ' Disable command mechanism"""
        PRINT "    .AX ""        Call Disable_CommandButtons"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_CommandButtons()"""
        PRINT "    .AX ""    ' Reset command buttons"""
        PRINT "    .AX ""    Me.cboCmdLst.Enabled = True"""
        PRINT "    .AX ""    Me.tglRunCmd.Enabled = (Me.cboCmdLst.Value > 0)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Disable_CommandButtons()"""
        PRINT "    .AX ""    ' Disable command mechanism"""
        PRINT "    .AX ""    Me.cboCmdLst.Enabled = False"""
        PRINT "    .AX ""    Me.tglRunCmd.Enabled = False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboCmdLst_AfterUpdate()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset command buttons"""
        PRINT "    .AX ""    Call Reset_CommandButtons"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboCmdLst_DblClick(Cancel As Integer)"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset command list value"""
        PRINT "    .AX ""    Call Reset_CommandList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglRunCmd_Click()"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglRunCmd.Value = True"""
        PRINT "    .AX ""    ' Print the command"""
        PRINT "    .AX ""    Call Run_Command(acViewNormal)"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglRunCmd.Value = False"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Set_Command_Criteria(ByVal strCMD As String, ByRef cmd As clsRunCMD)"""
        PRINT "    .AX ""    ' Set command criteria"""
        PRINT "    .AX ""    Select Case strCMD"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmCmd: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strCmdTtl = reg.GetCmdTtl(reg.GetCmdNum(CStr(vrnITM)))"
        PRINT "        .AX ""        'Case """""" & strIDX & """"""    ' "" & strCmdTtl"
        PRINT "    Next"
        PRINT "    .AX ""        Case Else"""
        PRINT "    For Each vrnITM In vrnFrmPrp"
        PRINT "    .AX ""            cmd."" & vrnITM(mcPrpIdxNAM) & "" = "" & IIf(InStr(vrnITM(mcPrpIdxCTL), ""."") = 0, ""Me."", """") & vrnITM(mcPrpIdxCTL)"
        PRINT "    Next"
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Run_Command(ByVal lngViewType As Long)  ' acViewPreview acViewNormal"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".Run_Command"""""""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Get the command number"""
        PRINT "    .AX ""    Dim strCMD As String: strCMD = Format$(Me.cboCmdLst.Value, """"00"""")"""
        PRINT "    .AX ""    ' Call the specified command"""
        PRINT "    .AX ""    Select Case strCMD"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmCmd: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strCmdTtl = reg.GetCmdTtl(reg.GetCmdNum(CStr(vrnITM)))"
        PRINT "        .AX ""        Case """""" & strIDX & """""": Call Run_Command_"" & strIDX & ""(lngViewType)    ' "" & strCmdTtl"
        PRINT "    Next"
        PRINT "    .AX ""        Case Else"""
        PRINT "    .AX ""            MsgBox """"This Command ("""" & strCMD & """") is not registered."""", vbInformation, pcMsgTtl"""
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmCmd: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strCmdNum = reg.GetCmdNum(CStr(vrnITM))"
        PRINT "        strCmdTtl = reg.GetCmdTtl(strCmdNum)"
        PRINT "        strCmdNam = reg.GetCmdNam(strCmdNum)"
        PRINT "        strRunNam = mcCmdTxtPFX & GenRpt_Clean(strCmdNam)"
        PRINT "        Select Case strCmdNam"
        PRINT "            Case mcCmdTpl001: blnTplNam = True"
        PRINT "            Case mcCmdTpl002: blnTplNam = True"
        PRINT "            Case mcCmdTpl003: blnTplNam = True"
        PRINT "            Case Else:        blnTplNam = False"
        PRINT "        End Select"
        PRINT "        blnIsForm = False: For Each obj In Application.CurrentProject.AllForms"
        PRINT "            blnIsForm = (obj.Name = strCmdNam Or blnIsForm)"
        PRINT "        Next"
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        .AX ""' Run Command "" & strIDX & "":  "" & strCmdTtl"
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        .AX ""Private Sub Run_Command_"" & strIDX & ""(ByVal lngViewType As Long)"""
        PRINT "        .AX ""    Const pcCmdNum = """""" & strIDX & """""": Const pcMsgTtl = mcModNam & """".Run_Command_"""" & pcCmdNum"""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Display hourglass"""
        PRINT "        .AX ""    Call DoCmd.Hourglass(True)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Hide the cursor"""
        PRINT "        .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Deactivate this procedure"""
        PRINT "        If blnTplNam Then"
        PRINT "        .AX ""    If True Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This command is not active."""", vbInformation, pcMsgTtl"""
        PRINT "        .AX ""        GoTo Exit_Procedure"""
        PRINT "        .AX ""    End If"""
        PRINT "        Else"
        PRINT "        .AX ""    If False Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This command is not active."""", vbInformation, pcMsgTtl"""
        PRINT "        .AX ""        GoTo Exit_Procedure"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Make sure there is a current active record"""
        PRINT "        .AX ""    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This command requires an active record."""", vbInformation, mcModTtl"""
        PRINT "        .AX ""        Exit Sub"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        If blnIsForm Then"
        PRINT "        .AX ""    ' Assign parameters"""
        PRINT "        .AX ""    mstrOpenText = """""" & strCmdNam & """""""""
        PRINT "        .AX ""    mstrOpenName = mstrOpenText"""
        PRINT "        .AX ""    mstrFiltName = """""""""""
        PRINT "        .AX ""    mstrWhereTxt = """""""""""
        PRINT "        .AX ""    mstrOpenArgs = """""""""""
        PRINT "        .AX ""    mintOpenView = acNormal"""
        PRINT "        .AX ""    mintDataMode = acFormPropertySettings"""
        PRINT "        .AX ""    mintWindMode = acWindowNormal"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Open the form ignoring any error conditions"""
        PRINT "        .AX ""    If Len(mstrOpenName) > 0 Then"""
        PRINT "        .AX ""        On Error Resume Next"""
        PRINT "        .AX ""        DoCmd.OpenForm mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt, mintDataMode, mintWindMode, mstrOpenArgs"""
        PRINT "        .AX ""        'On Error GoTo Error_Handler"""
        PRINT "        .AX ""    End If"""
        PRINT "        Else"
        PRINT "        .AX ""    ' Initialize the command object"""
        PRINT "        .AX ""    Dim cmd    As clsRunCMD"""
        PRINT "        .AX ""    Set cmd = New clsRunCMD"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Save current values"""
        PRINT "        .AX ""    If Me.Dirty Then Call SaveIt(0)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Set command criteria"""
        PRINT "        .AX ""    Call Set_Command_Criteria(pcCmdNum, cmd)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Run the command"""
        PRINT "        .AX ""    Call cmd."" & strRunNam & """""
        PRINT "        End If"
        PRINT "        End If"
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Call DoCmd.Hourglass(False)"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "    Next"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  MngRpt"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_MngRpt( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_MngRpt"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strOBJ As String: strOBJ = frm.Name"
        PRINT "    Dim reg    As clsRegRPT"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST  ' mcUseTplList  mcUseStdList"
        PRINT ""
        PRINT "    ' Declare working objects"
        PRINT "    Dim obj As AccessObject"
        PRINT ""
        PRINT "    ' Initialize report registration"
        PRINT "    Set reg = New clsRegRPT"
        PRINT "    Call reg.Activate(mblnUseLst)"
        PRINT ""
        PRINT "    ' Initialize form property list"
        PRINT "    Dim vrnFrmPrp As Variant"
        PRINT "    vrnFrmPrp = GenPrp_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize form command list"
        PRINT "    Dim vrnFrmRpt As Variant"
        PRINT "    vrnFrmRpt = GenRpt_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize working report list"
        PRINT "    'all Init_RptRst(mcIncRegNOP)"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnITM          As Variant"
        PRINT "    Dim intCNT          As Integer"
        PRINT "    Dim intIDX          As Integer"
        PRINT "    Dim strIDX          As String"
        PRINT "    Dim strCMA          As String"
        PRINT ""
        PRINT "    ' Declare Report variables"
        PRINT "    Dim strRptNum       As String"
        PRINT "    Dim strRptNam       As String"
        PRINT "    Dim strRptTtl       As String"
        PRINT "    Dim strRunNam       As String"
        PRINT "    Dim blnTplNam       As Boolean"
        PRINT "    Dim blnIsRprt       As Boolean"
        PRINT ""
        PRINT "    ' How many reports in the list?"
        PRINT "    intCNT = UBound(vrnFrmRpt)+1"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    If mblnMchFlgRPT Then"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Report Mechanism"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Setup_Report(ByVal strDefault As String, ByVal blnUseList As boolean)"""
        PRINT "    .AX ""    Dim RegRPT    As clsRegRPT"""
        PRINT "    .AX ""    Set RegRPT = New clsRegRPT"""
        PRINT "    .AX ""    Dim mvrnRptLst As Variant"""
        PRINT "    .AX ""    With RegRPT"""
        PRINT "    .AX ""        Call .Activate(blnUseList)  ' blnUseList mcUseStdList mcUseTplList"""
        PRINT "    .AX ""        mvrnRptLst = Array( _"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmRpt: intIDX = intIDX+1: strCMA = IIf(intIDX < intCNT, "","", """")"
        PRINT "        strRptNam = CStr(vrnITM)"
        PRINT "        .AX ""            .GetRptNum("""""" & strRptNam & """""")"" & strCMA & "" _"""
        PRINT "    Next"
        PRINT "    .AX ""        )"""
        PRINT "    .AX ""        mstrRowSrcRPT = .GetRptLst(mvrnRptLst, strDefault, mcNoBlank)"""
        PRINT "    .AX ""        mintRowDefRPT = .DefaultItem"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    Set RegRPT = Nothing"""
        PRINT "    .AX ""    Me.cboRptLst.RowSource = mstrRowSrcRPT"""
        PRINT "    .AX ""    Call Reset_ReportList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_ReportList()"""
        PRINT "    .AX ""    If CanRPT And Len(mstrRowSrcRPT) > 0 Then"""
        PRINT "    .AX ""        ' Set report list value to default"""
        PRINT "    .AX ""        Me.cboRptLst.Value = mintRowDefRPT"""
        PRINT "    .AX ""        ' Reset report buttons"""
        PRINT "    .AX ""        Call Reset_ReportButtons"""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        ' Disable report mechanism"""
        PRINT "    .AX ""        Call Disable_ReportButtons"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_ReportButtons()"""
        PRINT "    .AX ""    ' Reset report buttons"""
        PRINT "    .AX ""    Me.cboRptLst.Enabled = True"""
        PRINT "    .AX ""    Me.tglPrnRpt.Enabled = (Me.cboRptLst.Value > 0)"""
        PRINT "    .AX ""    Me.tglPrvRpt.Enabled = Me.tglPrnRpt.Enabled"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Disable_ReportButtons()"""
        PRINT "    .AX ""    ' Disable report mechanism"""
        PRINT "    .AX ""    Me.cboRptLst.Enabled = False"""
        PRINT "    .AX ""    Me.tglPrnRpt.Enabled = False"""
        PRINT "    .AX ""    Me.tglPrvRpt.Enabled = False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboRptLst_AfterUpdate()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset report buttons"""
        PRINT "    .AX ""    Call Reset_ReportButtons"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboRptLst_DblClick(Cancel As Integer)"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset report list value"""
        PRINT "    .AX ""    Call Reset_ReportList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglPrvRpt_Click()"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglPrvRpt.Value = True"""
        PRINT "    .AX ""    ' Print the report"""
        PRINT "    .AX ""    Call Run_Report(acViewPreview)"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglPrvRpt.Value = False"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglPrnRpt_Click()"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglPrnRpt.Value = True"""
        PRINT "    .AX ""    ' Print the report"""
        PRINT "    .AX ""    Call Run_Report(acViewNormal)"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglPrnRpt.Value = False"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Set_Report_Criteria(ByVal strRPT As String, ByRef rpt As clsRunRPT)"""
        PRINT "    .AX ""    ' Set report criteria"""
        PRINT "    .AX ""    Select Case strRPT"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmRpt: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strRptTtl = reg.GetRptTtl(reg.GetRptNum(CStr(vrnITM)))"
        PRINT "        .AX ""        'Case """""" & strIDX & """"""    ' "" & strRptTtl"
        PRINT "    Next"
        PRINT "    .AX ""        Case Else"""
        PRINT "    For Each vrnITM In vrnFrmPrp"
        PRINT "    .AX ""            rpt."" & vrnITM(mcPrpIdxNAM) & "" = "" & IIf(InStr(vrnITM(mcPrpIdxCTL), ""."") = 0, ""Me."", """") & vrnITM(mcPrpIdxCTL)"
        PRINT "    Next"
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Run_Report(ByVal lngViewType As Long)  ' acViewPreview acViewNormal"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".Run_Report"""""""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Get the report number"""
        PRINT "    .AX ""    Dim strRPT As String: strRPT = Format$(Me.cboRptLst.Value, """"00"""")"""
        PRINT "    .AX ""    ' Call the specified report"""
        PRINT "    .AX ""    Select Case strRPT"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmRpt: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strRptTtl = reg.GetRptTtl(reg.GetRptNum(CStr(vrnITM)))"
        PRINT "        .AX ""        Case """""" & strIDX & """""": Call Run_Report_"" & strIDX & ""(lngViewType)    ' "" & strRptTtl"
        PRINT "    Next"
        PRINT "    .AX ""        Case Else"""
        PRINT "    .AX ""            MsgBox """"This Report ("""" & strRPT & """") is not registered."""", vbInformation, pcMsgTtl"""
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmRpt: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strRptNum = reg.GetRptNum(CStr(vrnITM))"
        PRINT "        strRptTtl = reg.GetRptTtl(strRptNum)"
        PRINT "        strRptNam = reg.GetRptNam(strRptNum)"
        PRINT "        strRunNam = mcRptTxtPFX & GenRpt_Clean(strRptNam)"
        PRINT "        Select Case strRptNam"
        PRINT "            Case mcRptTpl001: blnTplNam = True"
        PRINT "            Case mcRptTpl002: blnTplNam = True"
        PRINT "            Case mcRptTpl003: blnTplNam = True"
        PRINT "            Case Else:        blnTplNam = False"
        PRINT "        End Select"
        PRINT "        blnIsRprt = False: For Each obj In Application.CurrentProject.AllReports"
        PRINT "            blnIsRprt = (obj.Name = strRptNam Or blnIsRprt)"
        PRINT "        Next"
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        .AX ""' Run Report "" & strIDX & "":  "" & strRptTtl"
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        .AX ""Private Sub Run_Report_"" & strIDX & ""(ByVal lngViewType As Long)"""
        PRINT "        .AX ""    Const pcRptNum = """""" & strIDX & """""": Const pcMsgTtl = mcModNam & """".Run_Report_"""" & pcRptNum"""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Hide the cursor"""
        PRINT "        .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Deactivate this procedure"""
        PRINT "        If blnTplNam Then"
        PRINT "        .AX ""    If True Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This report is not active."""", vbInformation, pcMsgTtl"""
        PRINT "        .AX ""        GoTo Exit_Procedure"""
        PRINT "        .AX ""    End If"""
        PRINT "        Else"
        PRINT "        .AX ""    If False Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This report is not active."""", vbInformation, pcMsgTtl"""
        PRINT "        .AX ""        GoTo Exit_Procedure"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Make sure there is a current active record"""
        PRINT "        .AX ""    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This report requires an active record."""", vbInformation, mcModTtl"""
        PRINT "        .AX ""        Exit Sub"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize the report object"""
        PRINT "        .AX ""    Dim rpt    As clsRunRPT"""
        PRINT "        .AX ""    Set rpt = New clsRunRPT"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Save current values"""
        PRINT "        .AX ""    If Me.Dirty Then Call SaveIt(0)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Set report criteria"""
        PRINT "        .AX ""    Call Set_Report_Criteria(pcRptNum, rpt)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Run the report"""
        PRINT "        .AX ""    Call rpt."" & strRunNam & ""(lngViewType)"""
        PRINT "        End If"
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "    Next"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Code:  ZzzXxx"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Code_ZzzXxx( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strABV As String, _"
        PRINT "    ByVal blnIncAaa As Boolean, _"
        PRINT "    ByVal blnIncBbb As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Code_ZzzXxx"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHPX As String"
        PRINT "    Dim strHSX As String"
        PRINT ""
        PRINT "    ' Initialize working values"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & UCase$(strABV)"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & UCase$(strABV)"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    If blnIncAaa Then"
        PRINT "    End If"
        PRINT "    If blnIncBbb Then"
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize:  Control List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_CtlRst(ByRef frm As Form, ByRef wtx As clsUtlWTX)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Init_CtlRst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize working objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim ctl As Control"
        PRINT "    Dim prp As Property"
        PRINT "    Dim obj As AccessObject"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize new report list"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Set mrstCTL = New ADODB.Recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Create recordset fields"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mvrnFldFmt = Array( _"
        PRINT "        mcCtlNamSQN, _"
        PRINT "        mcCtlNamTBX, _"
        PRINT "        mcCtlNamVSB, _"
        PRINT "        mcCtlNamNAM, _"
        PRINT "        mcCtlNamTYP, _"
        PRINT "        mcCtlNamBAS, _"
        PRINT "        mcCtlNamHPX, _"
        PRINT "        mcCtlNamHSX _"
        PRINT "    )"
        PRINT "    With mrstCTL"
        PRINT "        Call .Fields.Append(mcCtlNamSQN, adInteger, 4)"
        PRINT "        Call .Fields.Append(mcCtlNamTBX, adInteger, 4)"
        PRINT "        Call .Fields.Append(mcCtlNamVSB, adBoolean, 1)"
        PRINT "        Call .Fields.Append(mcCtlNamNAM, adVarChar, 99)"
        PRINT "        Call .Fields.Append(mcCtlNamTYP, adVarChar, 3)"
        PRINT "        Call .Fields.Append(mcCtlNamBAS, adVarChar, 99)"
        PRINT "        Call .Fields.Append(mcCtlNamHPX, adVarChar, 8)"
        PRINT "        Call .Fields.Append(mcCtlNamHSX, adVarChar, 99)"
        PRINT "    End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup the recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    With mrstCTL"
        PRINT "        .Open: .Sort = mcCtlNamSQN & "" ASC"""
        PRINT "    End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Declare Report variables"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim lngCtlSqn       As Long                                           ' Control Sequence"
        PRINT "    Dim lngCtlSec       As Long                                           ' Control Section"
        PRINT "    Dim lngCtlTbx       As Long                                           ' Control TabIndex"
        PRINT "    Dim blnCtlVsb       As Boolean                                        ' Control IsVisible"
        PRINT "    Dim strCtlNam       As String                                         ' Control Full Name (w/  type prefix)"
        PRINT "    Dim strCtlTyp       As String                                         ' Control Type Prefix"
        PRINT "    Dim strCtlBas       As String                                         ' Control Base Name (w/o type prefix)"
        PRINT "    Dim strCtlHpx       As String                                         ' Control Header Mechanism Prefix (SrtBy,etc)"
        PRINT "    Dim strCtlHsx       As String                                         ' Control Header Mechanism Suffix (SrtBy,etc)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim lngCtlTyp       As Long"
        PRINT "    Dim intMaxNam       As Integer"
        PRINT "    Dim intMaxBas       As Integer"
        PRINT "    Dim strSQL          As String"
        PRINT "    Dim strHSX          As String"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim intIDX          As Integer"
        PRINT "    For Each ctl In frm.Controls"
        PRINT "        lngCtlSqn = -1"
        PRINT "        lngCtlTbx = -1"
        PRINT "        With ctl"
        PRINT "            If False Then  ' True False"
        PRINT "                For Each prp In ctl.Properties"
        PRINT "                    On Error Resume Next"
        PRINT "                    Debug.Print ctl.Name & "": "" & prp.Name & ""="" & prp.Value"
        PRINT "                    'On Error GoTo Error_Handler"
        PRINT "                Next"
        PRINT "                Debug.Print String$(100, ""="")"
        PRINT "            End If"
        PRINT "            For Each prp In ctl.Properties"
        PRINT "                On Error Resume Next"
        PRINT "                If prp.Name = ""Visible"" Then blnCtlVsb = prp.Value"
        PRINT "                If prp.Name = ""Section"" Then lngCtlSec = prp.Value"
        PRINT "                If prp.Name = ""TabIndex"" Then lngCtlTbx = prp.Value+1"
        PRINT "                On Error GoTo 0"
        PRINT "            Next"
        PRINT "            If blnCtlVsb And (.Name = mcFrmTt1) Then"
        PRINT "                lngCtlSqn = 201"
        PRINT "                lngCtlTbx = 0"
        PRINT "                strCtlNam = .Name"
        PRINT "                lngCtlTyp = .ControlType"
        PRINT "            ElseIf blnCtlVsb And (lngCtlTbx >= 0) Then"
        PRINT "                lngCtlSec = lngCtlSec * 100"
        PRINT "                lngCtlSqn = lngCtlSec+lngCtlTbx"
        PRINT "                strCtlNam = .Name"
        PRINT "                lngCtlTyp = .ControlType"
        PRINT "            End If"
        PRINT "        End With"
        PRINT "        If lngCtlSqn > 0 Then"
        PRINT "            strCtlTyp = """""
        PRINT "            strCtlBas = """""
        PRINT "            strCtlHpx = """""
        PRINT "            strCtlHsx = """""
        PRINT "            ' Assign header control type prefix and base name"
        PRINT "            Select Case lngCtlTyp"
        PRINT "                Case mcCtlTypTXT: strCtlTyp = mcCtlTypTXT: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCBO: strCtlTyp = mcCtlTypCBO: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCHK: strCtlTyp = mcCtlTypCHK: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCMD: strCtlTyp = mcCtlTypCMD: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypTGL: strCtlTyp = mcCtlTypTGL: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypLBL: Select Case strCtlNam: Case mcFrmTt1"
        PRINT "                                  strCtlTyp = mcCtlTypLBL: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                                  End Select"
        PRINT "            End Select"
        PRINT "            ' Assign header prefix/suffix to header mechanism controls"
        PRINT "            Select Case Left$(strCtlNam, 8)"
        PRINT "                Case mcSbyCmd: strCtlHpx = mcSbyCmd: strCtlHsx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcGbyTgl: strCtlHpx = mcGbyTgl: strCtlHsx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcSlnTxt: strCtlHpx = mcSlnTxt: strCtlHsx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcSlnCbo: strCtlHpx = mcSlnCbo: strCtlHsx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcSlnChk: strCtlHpx = mcSlnChk: strCtlHsx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcFndTxt: strCtlHpx = mcFndTxt: strCtlHsx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcFndCbo: strCtlHpx = mcFndCbo: strCtlHsx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcFndChk: strCtlHpx = mcFndChk: strCtlHsx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "            End Select"
        PRINT "            ' Assign header prefix to infrastructure controls"
        PRINT "            Select Case strCtlNam"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcFrmHcr: strCtlHpx = mcFrmSup: strCtlHsx = """""
        PRINT "                Case mcFrmTt1: strCtlHpx = mcFrmSup: strCtlHsx = """""
        PRINT "                Case mcFrmTt2: strCtlHpx = mcFrmSup: strCtlHsx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcFrmRfh: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                Case mcFrmAdn: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                Case mcFrmSav: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                Case mcFrmUnd: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                Case mcFrmDel: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                Case mcFrmCls: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                Case mcFrmQit: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                Case mcFrmAcp: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                Case mcFrmCan: strCtlHpx = mcFrmCmd: strCtlHsx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcFndSQL: strCtlHpx = mcMngSQL: strCtlHsx = """""
        PRINT "                Case mcRunSQL: strCtlHpx = mcMngSQL: strCtlHsx = """""
        PRINT "                Case mcClrSQL: strCtlHpx = mcMngSQL: strCtlHsx = """""
        PRINT "                Case mcWrtSQL: strCtlHpx = mcMngSQL: strCtlHsx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcCmdLst: strCtlHpx = mcCmdMch: strCtlHsx = """""
        PRINT "                Case mcCmdRun: strCtlHpx = mcCmdMch: strCtlHsx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcRptLst: strCtlHpx = mcRptMch: strCtlHsx = """""
        PRINT "                Case mcRptPrn: strCtlHpx = mcRptMch: strCtlHsx = """""
        PRINT "                Case mcRptPrv: strCtlHpx = mcRptMch: strCtlHsx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "            End Select"
        PRINT "            ' Flag data controls"
        PRINT "            If Len(strCtlHpx) = 0 Then"
        PRINT "                strCtlHpx = mcDatCtl: strCtlHsx = """""
        PRINT "            End If"
        PRINT "            ' Calculate maximum lengths"
        PRINT "            If intMaxNam < Len(strCtlNam) Then intMaxNam = Len(strCtlNam)"
        PRINT "            If intMaxBas < Len(strCtlBas) Then intMaxBas = Len(strCtlBas)"
        PRINT "            ' Insert the record"
        PRINT "            If Len(strCtlTyp) > 0 And (strCtlHpx <> mcFrmSup Or strCtlNam = mcFrmTt1) Then"
        PRINT "                Call AddCtlItm(lngCtlSqn, lngCtlTbx, blnCtlVsb, strCtlNam, strCtlTyp, strCtlBas, strCtlHpx, strCtlHsx)"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    ' Align entry controls with form mechanisms"
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                strCtlNam = .Fields(mcCtlIdxNAM)"
        PRINT "                strCtlBas = .Fields(mcCtlIdxBAS)"
        PRINT "                strCtlHpx = .Fields(mcCtlIdxHPX)"
        PRINT "                strCtlHsx = .Fields(mcCtlIdxHSX)"
        PRINT "                strHSX = """""
        PRINT "                'If Len(strCtlHpx) = 0 Then"
        PRINT "                If strCtlHpx = mcDatCtl Then"
        PRINT "                    If HasCtlNam(mcSlnTxt & strCtlBas) Then"
        PRINT "                        strHSX = mcSlnTxt"
        PRINT "                    ElseIf HasCtlNam(mcSlnCbo & strCtlBas) Then"
        PRINT "                        strHSX = mcSlnCbo"
        PRINT "                    ElseIf HasCtlNam(mcSbyCmd & strCtlBas) Then"
        PRINT "                        strHSX = mcSbyCmd"
        PRINT "                    ElseIf HasCtlNam(mcGbyTgl & strCtlBas) Then"
        PRINT "                        strHSX = mcGbyTgl"
        PRINT "                    End If"
        PRINT "                    Call FndCtlNam(strCtlNam)"
        PRINT "                End If"
        PRINT "                If Len(strHSX) > 0 Then"
        PRINT "                    .Fields(mcCtlIdxHSX) = strHSX"
        PRINT "                End If"
        PRINT "                .MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "    Call Init_CtlFlg"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If mcCtlLstDBG Then"
        PRINT "        Call List_CtlItm(wtx, intMaxNam, intMaxBas)"
        PRINT "        Call List_CtlFlg(wtx)"
        PRINT "    End If"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddCtlItm( _"
        PRINT "    ByVal lngCtlSqn As Long, _"
        PRINT "    ByVal lngCtlTbx As Long, _"
        PRINT "    ByVal blnCtlVsb As Boolean, _"
        PRINT "    ByVal strCtlNam As String, _"
        PRINT "    ByVal strCtlTyp As String, _"
        PRINT "    ByVal strCtlBas As String, _"
        PRINT "    ByVal strCtlHpx As String, _"
        PRINT "    ByVal strCtlHsx As String _"
        PRINT ")"
        PRINT "    If Not HasCtlNam(strCtlNam) Then"
        PRINT "        With mrstCTL"
        PRINT "            .AddNew mvrnFldFmt, Array(lngCtlSqn, lngCtlTbx, blnCtlVsb, strCtlNam, strCtlTyp, strCtlBas, strCtlHpx, strCtlHsx)"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub FndCtlNam(ByVal strFndNam As String)"
        PRINT "    Dim strFND As String: strFND = ""CtlNam = '"" & strFndNam & ""'"""
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strFND)"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasCtlNam(ByVal strCtlNam As String, Optional ByVal strFndNam As String) As Boolean"
        PRINT "    Dim strCTL As String: strCTL = ""CtlNam = '"" & strCtlNam & ""'"""
        PRINT "    Dim strFND As String: strFND = ""CtlNam = '"" & strFndNam & ""'"""
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strCTL)"
        PRINT "            HasCtlNam = (Not (.BOF Or .EOF))"
        PRINT "            If Len(strFndNam) > 0 Then"
        PRINT "                Call .MoveFirst"
        PRINT "                Call .Find(strFND)"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasCtlHdr(ByVal strCtlHdr As String, Optional ByVal strFndNam As String) As Boolean"
        PRINT "    Dim strHDR As String: strHDR = ""CtlHdr = '"" & strCtlHdr & ""'"""
        PRINT "    Dim strFND As String: strFND = ""CtlNam = '"" & strFndNam & ""'"""
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strHDR)"
        PRINT "            HasCtlHdr = (Not (.BOF Or .EOF))"
        PRINT "            If Len(strFndNam) > 0 Then"
        PRINT "                Call .MoveFirst"
        PRINT "                Call .Find(strFND)"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function IsVisible(ByVal strCtlNam As String, Optional ByVal strFndNam As String) As Boolean"
        PRINT "    Dim strCTL As String: strCTL = ""CtlNam = '"" & strCtlNam & ""'"""
        PRINT "    Dim strFND As String: strFND = ""CtlNam = '"" & strFndNam & ""'"""
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strCTL)"
        PRINT "            If Not (.BOF Or .EOF) Then"
        PRINT "                IsVisible = .Fields(mcCtlIdxVSB)"
        PRINT "            End If"
        PRINT "            If Len(strFndNam) > 0 Then"
        PRINT "                Call .MoveFirst"
        PRINT "                Call .Find(strFND)"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Init_CtlFlg()"
        PRINT "    mblnMchFlgSBY = (HasCtlHdr(mcSbyCmd))"
        PRINT "    mblnMchFlgGBY = (HasCtlHdr(mcGbyTgl))"
        PRINT "    mblnMchFlgSLN = (HasCtlHdr(mcSlnTxt) Or HasCtlHdr(mcSlnCbo))"
        PRINT "    mblnMchFlgHBY = (mblnMchFlgSBY Or mblnMchFlgGBY)"
        PRINT "    mblnMchFlgFND = (HasCtlHdr(mcFndTxt) Or HasCtlHdr(mcFndCbo) Or HasCtlHdr(mcFndChk))"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mblnMchFlgFSQ = (HasCtlNam(mcFndSQL))"
        PRINT "    mblnMchFlgRSQ = (HasCtlNam(mcRunSQL))"
        PRINT "    mblnMchFlgCSQ = (HasCtlNam(mcClrSQL))"
        PRINT "    mblnMchFlgWSQ = (HasCtlNam(mcWrtSQL))"
        PRINT "    mblnMchFlgSQL = (mblnMchFlgFSQ Or mblnMchFlgRSQ Or mblnMchFlgCSQ Or mblnMchFlgWSQ)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mblnMchFlgCMD = (HasCtlNam(mcCmdLst))"
        PRINT "    mblnMchFlgRPT = (HasCtlNam(mcRptLst))"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mblnMchFlgHCR = (HasCtlNam(mcFrmHcr))"
        PRINT "    mblnMchFlgTLB = (HasCtlNam(mcFrmTt1))"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mblnMchFlgFRF = (HasCtlNam(mcFrmRfh) And IsVisible(mcFrmRfh))"
        PRINT "    mblnMchFlgFAN = (HasCtlNam(mcFrmAdn) And IsVisible(mcFrmAdn))"
        PRINT "    mblnMchFlgFSV = (HasCtlNam(mcFrmSav) And IsVisible(mcFrmSav))"
        PRINT "    mblnMchFlgFUN = (HasCtlNam(mcFrmUnd) And IsVisible(mcFrmUnd))"
        PRINT "    mblnMchFlgFDL = (HasCtlNam(mcFrmDel) And IsVisible(mcFrmDel))"
        PRINT "    mblnMchFlgFCL = (HasCtlNam(mcFrmCls) And IsVisible(mcFrmCls))"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mblnMchFlgFQT = (HasCtlNam(mcFrmQit) And IsVisible(mcFrmQit))"
        PRINT "    mblnMchFlgFAC = (HasCtlNam(mcFrmAcp) And IsVisible(mcFrmAcp))"
        PRINT "    mblnMchFlgFCN = (HasCtlNam(mcFrmCan) And IsVisible(mcFrmCan))"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub List_CtlItm(ByRef wtx As clsUtlWTX, ByVal intNAM As Integer, ByVal intBAS As Integer)"
        PRINT "    Dim intVSB As Integer: intVSB = 5"
        PRINT "    Dim intTYP As Integer: intTYP = 3"
        PRINT "    Dim intHPX As Integer: intHPX = 8"
        PRINT "    '-----------------------------"
        PRINT "    mrstCTL.Filter = """": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                wtx.AX gcMTY _"
        PRINT "                    & ""SQN="" & Format$(.Fields(mcCtlIdxSQN), ""000"") & "" "" _"
        PRINT "                    & ""TBX="" & Format$(.Fields(mcCtlIdxTBX), ""000"") & "" "" _"
        PRINT "                    & ""VSB="" & Left$(.Fields(mcCtlIdxVSB) & mSPC, intVSB) & "" "" _"
        PRINT "                    & ""NAM="" & Left$(.Fields(mcCtlIdxNAM) & mSPC, intNAM) & "" "" _"
        PRINT "                    & ""TYP="" & Left$(.Fields(mcCtlIdxTYP) & mSPC, intTYP) & "" "" _"
        PRINT "                    & ""BAS="" & Left$(.Fields(mcCtlIdxBAS) & mSPC, intBAS) & "" "" _"
        PRINT "                    & ""HPX="" & Left$(.Fields(mcCtlIdxHPX) & mSPC, intHPX) & "" "" _"
        PRINT "                    & ""HSX="" & .Fields(mcCtlIdxHSX)"
        PRINT "                mrstCTL.MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "    wtx.AX String$(100, ""="")"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub List_CtlFlg(ByRef wtx As clsUtlWTX)"
        PRINT "    With wtx"
        PRINT "        .AX ""mblnMchFlgSBY="" & mblnMchFlgSBY"
        PRINT "        .AX ""mblnMchFlgGBY="" & mblnMchFlgGBY"
        PRINT "        .AX ""mblnMchFlgSLN="" & mblnMchFlgSLN"
        PRINT "        .AX ""mblnMchFlgHBY="" & mblnMchFlgHBY"
        PRINT "        .AX ""mblnMchFlgFND="" & mblnMchFlgFND"
        PRINT "        '-----------------------------------"
        PRINT "        .AX ""mblnMchFlgSQL="" & mblnMchFlgSQL"
        PRINT "        .AX ""mblnMchFlgFSQ="" & mblnMchFlgFSQ"
        PRINT "        .AX ""mblnMchFlgRSQ="" & mblnMchFlgRSQ"
        PRINT "        .AX ""mblnMchFlgCSQ="" & mblnMchFlgCSQ"
        PRINT "        .AX ""mblnMchFlgWSQ="" & mblnMchFlgWSQ"
        PRINT "        '-----------------------------------"
        PRINT "        .AX ""mblnMchFlgCMD="" & mblnMchFlgCMD"
        PRINT "        .AX ""mblnMchFlgRPT="" & mblnMchFlgRPT"
        PRINT "        '-----------------------------------"
        PRINT "        .AX ""mblnMchFlgFRF="" & mblnMchFlgFRF"
        PRINT "        .AX ""mblnMchFlgFAN="" & mblnMchFlgFAN"
        PRINT "        .AX ""mblnMchFlgFSV="" & mblnMchFlgFSV"
        PRINT "        .AX ""mblnMchFlgFUN="" & mblnMchFlgFUN"
        PRINT "        .AX ""mblnMchFlgFDL="" & mblnMchFlgFDL"
        PRINT "        .AX ""mblnMchFlgFCL="" & mblnMchFlgFCL"
        PRINT "        '-----------------------------------"
        PRINT "        .AX ""mblnMchFlgFQT="" & mblnMchFlgFQT"
        PRINT "        .AX ""mblnMchFlgFAC="" & mblnMchFlgFAC"
        PRINT "        .AX ""mblnMchFlgFCN="" & mblnMchFlgFCN"
        PRINT "    End With"
        PRINT "    wtx.AX String$(100, ""="")"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENCTL = Build module:  vbaGenCTL
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENCTL
        EXEC ut_zzVBX GENCTL
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENCTL) BEGIN
    ------------------------------------------------------------------------------------------------
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENTBL = Build module:  vbaGenTBL
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENTBL
        EXEC ut_zzVBX GENTBL
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENTBL) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcZRO                 As Long = 0                           ' BTX: Empty Number"
        PRINT "Private Const mcMTY                 As String = """"                        ' BTX: Empty String"
        PRINT "Private Const mcSPC                 As String = "" ""                       ' BTX: Single Space"
        PRINT "Private Const mcDOT                 As String = "".""                       ' BTX: Period/Dot"
        PRINT "Private Const mcCMA                 As String = "",""                       ' BTX: Comma Constant"
        PRINT "Private Const mcDSH                 As String = ""-""                       ' BTX: Dash"
        PRINT "Private Const mcUBR                 As String = ""_""                       ' BTX: Underbar"
        PRINT "Private Const mcPIP                 As String = ""|""                       ' BTX: Pipe"
        PRINT "Private Const mcBKS                 As String = ""\\""                       ' BTX: Backslash"
        PRINT "Private Const mcFWS                 As String = ""/""                       ' BTX: Forwardslash"
        PRINT "Private Const mcSCN                 As String = "";""                       ' BTX: Semi-Colon"
        PRINT "Private Const mcCLN                 As String = "":""                       ' BTX: Colon"
        PRINT "Private Const mcTLD                 As String = ""~""                       ' BTX: Tilde"
        PRINT "Private Const mcTIK                 As String = ""`""                       ' BTX: Backtick"
        PRINT "Private Const mcSQT                 As String = ""'""                       ' BTX: Single Quote"
        PRINT "Private Const mcDQT                 As String = """"""""                      ' BTX: Double Quote"
        PRINT "Private Const mcCLF                 As String = vbCrLf                    ' BTX: CarrRtn/LineFeed"
        PRINT "Private Const mcNUL                 As Variant = Null                     ' BTX: Null Value"
        PRINT "Private Const mcYUP                 As Boolean = True                     ' BTX: Standard True"
        PRINT "Private Const mcNOP                 As Boolean = False                    ' BTX: Standard False"
        PRINT "Private Const mcALL                 As String = ""ALL""                     ' BTX: Standard ALL"
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTXT                        As String                             '"
        PRINT "Private mTX1                        As String                             '"
        PRINT "Private mTX2                        As String                             '"
        PRINT "Private mTX3                        As String                             '"
        PRINT "Private mTX4                        As String                             '"
        PRINT "Private mTX5                        As String                             '"
        PRINT "Private mTX6                        As String                             '"
        PRINT "Private mTX7                        As String                             '"
        PRINT "Private mTX8                        As String                             '"
        PRINT "Private mTX9                        As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mLEN                        As Integer                            '"
        PRINT "Private mLN1                        As Integer                            '"
        PRINT "Private mLN2                        As Integer                            '"
        PRINT "Private mLN3                        As Integer                            '"
        PRINT "Private mLN4                        As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mNBR                        As Long                               '"
        PRINT "Private mNB1                        As Long                               '"
        PRINT "Private mNB2                        As Long                               '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mBLN                        As Boolean                            '"
        PRINT "Private mBL1                        As Boolean                            '"
        PRINT "Private mBL2                        As Boolean                            '"
        PRINT "'***************************************************************************************************"
        PRINT "' Extended Text Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mIDX                        As Integer                            '"
        PRINT "Private mCNT                        As Integer                            '"
        PRINT "Private mUBD                        As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mCUR                        As String                             '"
        PRINT "Private mPRV                        As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mCMT                        As String                             '"
        PRINT "Private mOBJ                        As String                             '"
        PRINT "Private mLST                        As String                             '"
        PRINT "Private mITM                        As String                             '"
        PRINT "Private mVAL                        As String                             '"
        PRINT "Private mLFT                        As String                             '"
        PRINT "Private mMID                        As String                             '"
        PRINT "Private mRGT                        As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mPOS                        As Integer                            '"
        PRINT "Private mPS1                        As Integer                            '"
        PRINT "Private mPS2                        As Integer                            '"
        PRINT "Private mPS3                        As Integer                            '"
        PRINT "Private mPS4                        As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "' SQL Construction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWHR                 As String = ""WHERE""                   ' SQL: Operator WHERE"
        PRINT "Private Const mcFST                 As String = ""    ""                    ' SQL: First criteria"
        PRINT "Private Const mcAND                 As String = ""AND ""                    ' SQL: Append criteria"
        PRINT "Private Const mcORR                 As String = ""OR  ""                    ' SQL: Append criteria"
        PRINT "Private Const mcNON                 As String = ""0=9""                     ' SQL: Records = None"
        PRINT "Private Const mcANY                 As String = ""1=1""                     ' SQL: Records = All/Any"
        PRINT "Private Const mcMG0                 As String = """"                        ' SQL: Margin: 0"
        PRINT "Private Const mcMG1                 As String = ""    ""                    ' SQL: Margin: 1"
        PRINT "Private Const mcMG2                 As String = ""        ""                ' SQL: Margin: 2"
        PRINT "Private mXTS                        As String * 1000                      ' SQL: Extend Space"
        PRINT "Private mSQL                        As String                             ' SQL: Statement Build"
        PRINT "Private mWHR                        As String                             ' SQL: Statement WHERE"
        PRINT "Private mAND                        As String * 4                         ' SQL: Separater AND"
        PRINT "Private mCMA                        As String                             ' SQL: Separater Comma"
        PRINT "Private mSEP                        As String                             ' SQL: Separater Placeholder"
        PRINT "'***************************************************************************************************"
        PRINT "' GEN: Flags"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcClrWTX              As Boolean = True"
        PRINT "Private Const mcIntREG              As Boolean = True"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIncRegYUP           As Boolean = True"
        PRINT "Private Const mcIncRegNOP           As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcUseLstTMP           As Integer = 1"
        PRINT "Private Const mcUseLstTPL           As Integer = 2"
        PRINT "Private Const mcUseLstSTD           As Integer = 3"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcOupFmtADD           As Integer = 1"
        PRINT "Private Const mcOupFmtVRN           As Integer = 2"
        PRINT "'***************************************************************************************************"
        PRINT "' GEN: Table"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModTblLst           As Integer = 1"
        PRINT "Private Const mcModRegTbl           As Integer = 2"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTblIdxNUM           As Integer = 0"
        PRINT "Private Const mcTblIdxALS           As Integer = 1"
        PRINT "Private Const mcTblIdxNAM           As Integer = 2"
        PRINT "Private Const mcTblIdxTTL           As Integer = 3"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTblNamNUM           As String = ""TblNum"""
        PRINT "Private Const mcTblNamALS           As String = ""TblAls"""
        PRINT "Private Const mcTblNamNAM           As String = ""TblNam"""
        PRINT "Private Const mcTblNamTTL           As String = ""TblTtl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRegTblRGN           As String = ""REGTBL"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private tbl                         As clsRegTBL"
        PRINT "Private mrstTBL                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldFmt                  As Variant"
        PRINT "Private mblnUseLst                  As Boolean"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcTblLstDBG           As Boolean = False     ' True False"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Gen_TBL"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Gen_TBL()"
        PRINT "    Dim intLST As Integer   ' Registration list"
        PRINT "    Dim intTYP As Integer   ' Module type"
        PRINT "    '***********************************************************************************************"
        PRINT "    intLST = mcUseLstSTD    ' mcUseLstSTD mcUseLstTPL mcUseLstTMP"
        PRINT "    intTYP = mcModTblLst    ' mcModTblLst mcModRegTbl"
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcModTblLst: Call GenTbl_GenLst(wtx, intLST, mcClrWTX, mcIntREG)     ' Table list for clsRegTBL.LodStdLst"
        PRINT "        Case mcModRegTbl: Call GenTbl_RegTbl(wtx, intLST, mcClrWTX, mcIntREG)     ' Class module code for clsRegTBL"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize:  Table List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_TblRst( _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal intLST As Integer, _"
        PRINT "    Optional ByVal blnNonReg As Boolean = True _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Init_TblRst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize registration object"
        PRINT "    Set tbl = New clsRegTBL"
        PRINT "    Call tbl.Activate(intLST)"
        PRINT ""
        PRINT "    ' Declare working objects"
        PRINT "    Dim tdf As DAO.TableDef"
        PRINT "    Dim dbs As DAO.Database"
        PRINT "    Set dbs = CurrentDb()"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strTblNum       As String"
        PRINT "    Dim strTblAls       As String"
        PRINT "    Dim strTblNam       As String"
        PRINT "    Dim strTblTtl       As String"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Add non-registered tables"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnNonReg Then"
        PRINT "        For Each tdf In dbs.TableDefs"
        PRINT "            strTblNam = tdf.Name"
        PRINT "            If Left$(strTblNam, 4) <> ""MSys"" Then"
        PRINT "                strTblAls = """""
        PRINT "                strTblTtl = """""
        PRINT "                Call tbl.AddObjItm(strTblAls, strTblNam, strTblTtl)"
        PRINT "            End If"
        PRINT "        Next"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    If mcTblLstDBG Then Call tbl.DbgLstTBL(wtx)"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Table List"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenTbl_GenLst( _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal intLST As Integer, _"
        PRINT "    Optional ByVal blnWTX As Boolean, _"
        PRINT "    Optional ByVal blnINT As Boolean _"
        PRINT ")"
        PRINT ""
        PRINT "    ' Optionally clear the output text"
        PRINT "    If blnWTX Then Call wtx.AX_Clear"
        PRINT ""
        PRINT "    ' Optionally initialize the recordset"
        PRINT "    If blnINT Then Call Init_TblRst(wtx, intLST, mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Generate the list"
        PRINT "    Call tbl.GenLstTBL(wtx, intLST)"
        PRINT ""
        PRINT "    ' Optionally write the output text"
        PRINT "    If blnWTX Then Call wtx.AX_WrtTmp"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenTbl_RegTbl"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenTbl_RegTbl( _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal intLST As Integer, _"
        PRINT "    Optional ByVal blnWTX As Boolean, _"
        PRINT "    Optional ByVal blnINT As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenTbl_RegTbl"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Optionally clear the output text"
        PRINT "    If blnWTX Then Call wtx.AX_Clear"
        PRINT ""
        PRINT "    ' Optionally initialize the recordset"
        PRINT "    If blnINT Then Call Init_TblRst(wtx, intLST, mcIncRegYUP)"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(""clsRegTBL"", ""Register Table Information"", mcRegTblRGN, """", ""tbl"", wtx)"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Text Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcMTY                 As String = """"""""                        ' BTX: Empty String"""
        PRINT "    .AX ""Private mXTS                        As String * 1000                      ' SQL: Extend Space"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mrstOBJ                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstSTD                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstTPL                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstTMP                     As ADODB.Recordset"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcUseLstTMP           As Integer = 1"""
        PRINT "    .AX ""Private Const mcUseLstTPL           As Integer = 2"""
        PRINT "    .AX ""Private Const mcUseLstSTD           As Integer = 3"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldIdxNUM           As Integer = 0"""
        PRINT "    .AX ""Private Const mcFldIdxALS           As Integer = 1"""
        PRINT "    .AX ""Private Const mcFldIdxNAM           As Integer = 2"""
        PRINT "    .AX ""Private Const mcFldIdxTTL           As Integer = 3"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldNamNUM           As String = """"TblNum"""""""
        PRINT "    .AX ""Private Const mcFldNamALS           As String = """"TblAls"""""""
        PRINT "    .AX ""Private Const mcFldNamNAM           As String = """"TblNam"""""""
        PRINT "    .AX ""Private Const mcFldNamTTL           As String = """"TblTtl"""""""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcObjFmtNUM           As String = """"0000"""""""
        PRINT "    .AX ""Private Const mcTblDefALS           As String = """"zzz"""""""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrnFldLst                  As Variant"""
        PRINT "    .AX ""Private mintDefItm                  As Integer"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize values"""
        PRINT "    .AX ""    mXTS = mcMTY"""
        PRINT "    .AX ""    ' Initialize objects"""
        PRINT "    .AX ""    mvrnFldLst = Array( _"""
        PRINT "    .AX ""        mcFldNamNUM, _"""
        PRINT "    .AX ""        mcFldNamALS, _"""
        PRINT "    .AX ""        mcFldNamNAM, _"""
        PRINT "    .AX ""        mcFldNamTTL _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""    ' Initialize objects"""
        PRINT "    .AX ""    Call LodStdLst"""
        PRINT "    .AX ""    Call LodTplLst"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Default list item"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Property Get DefaultItem() As Integer"""
        PRINT "    .AX ""    DefaultItem = mintDefItm"""
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Activate the Registration Recordset"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Activate(ByVal intLST As Integer)"""
        PRINT "    .AX ""    ' Set active recordset"""
        PRINT "    .AX ""    Select Case intLST"""
        PRINT "    .AX ""        Case mcUseLstTPL: Set mrstOBJ = mrstTPL.Clone"""
        PRINT "    .AX ""        Case mcUseLstSTD: Set mrstOBJ = mrstSTD.Clone"""
        PRINT "    .AX ""        Case Else:        Set mrstOBJ = mrstTMP.Clone"""
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetTblAls(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    GetTblAls = ObjTxtALS(strObjNAM)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Get the Registration RowSource List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Function GetTblLst( _"""
        PRINT "    .AX ""    ByVal vrnLST As Variant, _"""
        PRINT "    .AX ""    ByVal strDEF As String, _"""
        PRINT "    .AX ""    ByVal blnBLK As Boolean _"""
        PRINT "    .AX "") As String"""
        PRINT "    .AX ""    ' Declare working constants"""
        PRINT "    .AX ""    Const pDLM As String = """";"""""""
        PRINT "    .AX ""    ' Declare working variables"""
        PRINT "    .AX ""    Dim strNAM As String"""
        PRINT "    .AX ""    Dim strTTL As String"""
        PRINT "    .AX ""    Dim strSRC As String"""
        PRINT "    .AX ""    Dim strDLM As String"""
        PRINT "    .AX ""    Dim intIND As Integer"""
        PRINT "    .AX ""    Dim vrnITM As Variant"""
        PRINT "    .AX ""    ' Reset default selection"""
        PRINT "    .AX ""    mintDefItm = 0"""
        PRINT "    .AX ""    ' Prepend blank selection"""
        PRINT "    .AX ""    If blnBLK Then"""
        PRINT "    .AX ""        strSRC = """";0"""": strDLM = pDLM"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    ' Lookup the report values"""
        PRINT "    .AX ""    For Each vrnITM In vrnLST"""
        PRINT "    .AX ""        strNAM = ObjTxtNAM(vrnITM)"""
        PRINT "    .AX ""        strTTL = ObjTxtTTL(vrnITM)"""
        PRINT "    .AX ""        If Len(strNAM) > 0 Then"""
        PRINT "    .AX ""            intIND = intIND+1"""
        PRINT "    .AX ""            strSRC = strSRC & strDLM & strTTL & pDLM & intIND: strDLM = pDLM"""
        PRINT "    .AX ""            If strNAM = strDEF Then"""
        PRINT "    .AX ""                mintDefItm = intIND"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    Next"""
        PRINT "    .AX ""    ' Return results"""
        PRINT "    .AX ""    GetTblLst = strSRC"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Number"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtNUM(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"TblNam = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    ObjTxtNUM = mcObjFmtNUM"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtNUM = Trim$(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenNUM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxNUM)) > MaxLenNUM Then MaxLenNUM = Len(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Alias"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtALS(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"TblNam = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    ObjTxtALS = mcTblDefALS"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtALS = Trim$(.Fields(mcFldIdxALS))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenALS() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxALS)) > MaxLenALS Then MaxLenALS = Len(.Fields(mcFldIdxALS))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Name"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtNAM(ByVal strObjNUM As String, Optional ByVal strDefNam As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strObjNUM = Right$(mcObjFmtNUM & strObjNUM, 4)"""
        PRINT "    .AX ""    strSQL = """"TblNum = '"""" & strObjNUM & """"'"""""""
        PRINT "    .AX ""    ObjTxtNAM = IIf(Len(strDefNam) > 0, strDefNam, """"Table """" & strObjNUM & """" not found"""")"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtNAM = Trim$(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenNAM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxNAM)) > MaxLenNAM Then MaxLenNAM = Len(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Title"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtTTL(ByVal strObjNUM As String, Optional ByVal strDefTtl As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strObjNUM = Right$(mcObjFmtNUM & strObjNUM, 4)"""
        PRINT "    .AX ""    strSQL = """"TblNum = '"""" & strObjNUM & """"'"""""""
        PRINT "    .AX ""    ObjTxtTTL = IIf(Len(strDefTtl) > 0, strDefTtl, """"Table """" & strObjNUM & """" not found"""")"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtTTL = Trim$(.Fields(mcFldIdxTTL))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenTTL() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxTTL)) > MaxLenTTL Then MaxLenTTL = Len(.Fields(mcFldIdxTTL))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Registration Formatting"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Function GetObjALS(ByVal strALS As String, Optional ByVal strDEF As String) As String"""
        PRINT "    .AX ""    If Len(strDEF) = 0 Then strDEF = mcTblDefALS"""
        PRINT "    .AX ""    If Len(strALS) = 0 Then strALS = strDEF"""
        PRINT "    .AX ""    GetObjALS = LCase$(Left$(Trim$(strALS), 3))"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetObjNAM(ByVal strNAM As String, Optional ByVal strDEF As String) As String"""
        PRINT "    .AX ""    If Len(strDEF) = 0 Then strDEF = mcTblDefALS & """"_TblNam"""""""
        PRINT "    .AX ""    If Len(strNAM) = 0 Then strNAM = strNAM"""
        PRINT "    .AX ""    GetObjNAM = Trim$(strNAM)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetObjTTL(ByVal strTTL As String) As String"""
        PRINT "    .AX ""    GetObjTTL = strTTL"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Registration Records"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub GenLstTBL(ByRef wtx As clsUtlWTX, ByVal intLST As Integer)"""
        PRINT "    .AX ""    Dim strNUM As String: Dim intNUM As Integer: intNUM = MaxLenNUM"""
        PRINT "    .AX ""    Dim strALS As String: Dim intALS As Integer: intALS = MaxLenALS"""
        PRINT "    .AX ""    Dim strNAM As String: Dim intNAM As Integer: intNAM = MaxLenNAM"""
        PRINT "    .AX ""    Dim strTTL As String: Dim intTTL As Integer: intTTL = MaxLenTTL"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        .Filter = mcFldNamNUM & """" <> '0000'"""": .Sort = mcFldNamNAM & """" ASC"""""""
        PRINT "    .AX ""        If intLST = mcUseLstSTD Then"""
        PRINT "    .AX ""            If Not (.EOF And .EOF) Then"""
        PRINT "    .AX ""                .MoveFirst"""
        PRINT "    .AX ""                Do While Not .EOF"""
        PRINT "    .AX ""                    strNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""                    strALS = .Fields(mcFldIdxALS)"""
        PRINT "    .AX ""                    strNAM = .Fields(mcFldIdxNAM)"""
        PRINT "    .AX ""                    strTTL = .Fields(mcFldIdxTTL)"""
        PRINT "    .AX ""                    wtx.AX """"    Call AddTmpItm("""" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strALS & """""""""""","""" & mXTS, intALS+3) & """" """" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strNAM & """""""""""","""" & mXTS, intNAM+3) & """" """" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strTTL & """""""""""" """" & mXTS, intTTL+2) & """")  ' """" & strNUM"""
        PRINT "    .AX ""                    .MoveNext"""
        PRINT "    .AX ""                Loop"""
        PRINT "    .AX ""            Else"""
        PRINT "    .AX ""                intLST = mcUseLstTPL"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""        If intLST = mcUseLstTPL Then"""
        PRINT "    .AX ""            wtx.AX """"    Call AddTmpItm(""""""""tb1"""""""", """"""""TableName_01"""""""", """"""""Table 0001"""""""")  ' 0001"""""""
        PRINT "    .AX ""            wtx.AX """"    Call AddTmpItm(""""""""tb2"""""""", """"""""TableName_02"""""""", """"""""Table 0002"""""""")  ' 0002"""""""
        PRINT "    .AX ""            wtx.AX """"    Call AddTmpItm(""""""""tb3"""""""", """"""""TableName_03"""""""", """"""""Table 0003"""""""")  ' 0003"""""""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasObjNam(ByVal strObjNAM As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasObjNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtObjNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtObjNum = Right$(mcObjFmtNUM & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub AddObjItm( _"""
        PRINT "    .AX ""    ByVal strObjALS As String, _"""
        PRINT "    .AX ""    ByVal strObjNAM As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjTTL As String _"""
        PRINT "    .AX "")"""
        PRINT "    .AX ""    If Not HasObjNam(strObjNAM) Then"""
        PRINT "    .AX ""        strObjALS = GetObjALS(strObjALS)"""
        PRINT "    .AX ""        strObjNAM = GetObjNAM(strObjNAM)"""
        PRINT "    .AX ""        strObjTTL = GetObjTTL(strObjTTL)"""
        PRINT "    .AX ""        With mrstOBJ"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array( _"""
        PRINT "    .AX ""                NxtObjNum, _"""
        PRINT "    .AX ""                strObjALS, _"""
        PRINT "    .AX ""                strObjNAM, _"""
        PRINT "    .AX ""                strObjTTL _"""
        PRINT "    .AX ""            )"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub DbgLstTBL(ByRef wtx As clsUtlWTX)"""
        PRINT "    .AX ""    Dim intNUM As Integer: intNUM = MaxLenNUM"""
        PRINT "    .AX ""    Dim intALS As Integer: intALS = MaxLenALS"""
        PRINT "    .AX ""    Dim intNAM As Integer: intNAM = MaxLenNAM"""
        PRINT "    .AX ""    Dim intTTL As Integer: intTTL = MaxLenTTL"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                wtx.AX Trim$( _"""
        PRINT "    .AX ""                    """" NUM="""" & Left$(.Fields(mcFldIdxNUM) & mXTS, intNUM) & _"""
        PRINT "    .AX ""                    """" ALS="""" & Left$(.Fields(mcFldIdxALS) & mXTS, intALS) & _"""
        PRINT "    .AX ""                    """" NAM="""" & Left$(.Fields(mcFldIdxNAM) & mXTS, intNAM) & _"""
        PRINT "    .AX ""                    """" TTL="""" & Left$(.Fields(mcFldIdxTTL) & mXTS, intTTL) & _"""
        PRINT "    .AX ""                mcMTY)"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    wtx.AX String$(100, """"="""")"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Registration Processing"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Init_RstTMP()"""
        PRINT "    .AX ""    ' Initialize new report list"""
        PRINT "    .AX ""    Set mrstTMP = New ADODB.Recordset"""
        PRINT "    .AX ""    ' Create recordset fields"""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamALS, adVarChar, 3)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Initialize the recordset"""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        .Open: .Sort = mcFldNamNAM & """" ASC"""""""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasTmpNam(ByVal strObjNAM As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasTmpNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtTmpNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtTmpNum = Right$(mcObjFmtNUM & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub AddTmpItm( _"""
        PRINT "    .AX ""    ByVal strObjALS As String, _"""
        PRINT "    .AX ""    ByVal strObjNAM As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjTTL As String _"""
        PRINT "    .AX "")"""
        PRINT "    .AX ""    If Not HasTmpNam(strObjNAM) Then"""
        PRINT "    .AX ""        strObjALS = GetObjALS(strObjALS)"""
        PRINT "    .AX ""        strObjNAM = GetObjNAM(strObjNAM)"""
        PRINT "    .AX ""        strObjTTL = GetObjTTL(strObjTTL)"""
        PRINT "    .AX ""        With mrstTMP"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array( _"""
        PRINT "    .AX ""                NxtTmpNum, _"""
        PRINT "    .AX ""                strObjALS, _"""
        PRINT "    .AX ""                strObjNAM, _"""
        PRINT "    .AX ""                strObjTTL _"""
        PRINT "    .AX ""            )"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub DbgLstTMP()"""
        PRINT "    .AX ""    Dim intNUM As Integer: intNUM = TmpLenNUM"""
        PRINT "    .AX ""    Dim intALS As Integer: intALS = TmpLenALS"""
        PRINT "    .AX ""    Dim intNAM As Integer: intNAM = TmpLenNAM"""
        PRINT "    .AX ""    Dim intTTL As Integer: intTTL = TmpLenTTL"""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                Debug.Print Trim$( _"""
        PRINT "    .AX ""                    """" NUM="""" & Left$(.Fields(mcFldIdxNUM) & mXTS, intNUM) & _"""
        PRINT "    .AX ""                    """" ALS="""" & Left$(.Fields(mcFldIdxALS) & mXTS, intALS) & _"""
        PRINT "    .AX ""                    """" NAM="""" & Left$(.Fields(mcFldIdxNAM) & mXTS, intNAM) & _"""
        PRINT "    .AX ""                    """" TTL="""" & Left$(.Fields(mcFldIdxTTL) & mXTS, intTTL) & _"""
        PRINT "    .AX ""                mcMTY)"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    Debug.Print String$(100, """"="""")"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenNUM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxNUM)) > TmpLenNUM Then TmpLenNUM = Len(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenALS() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxALS)) > TmpLenALS Then TmpLenALS = Len(.Fields(mcFldIdxALS))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenNAM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxNAM)) > TmpLenNAM Then TmpLenNAM = Len(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenTTL() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxTTL)) > TmpLenTTL Then TmpLenTTL = Len(.Fields(mcFldIdxTTL))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Template Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub LodTplLst()"""
        PRINT "    .AX ""    Call Init_RstTMP"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    Call GenTbl_GenLst(wtx, mcUseLstTPL)"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Set mrstTPL = mrstTMP.Clone"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    If False Then Call DbgLstTMP  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Standard Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub LodStdLst()"""
        PRINT "    .AX ""    Call Init_RstTMP"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    Call GenTbl_GenLst(wtx, intLST)"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Set mrstSTD = mrstTMP.Clone"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    If False Then Call DbgLstTMP  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT "    'Call GenTbl_GenLst(wtx, mcUseLstTPL)"
        PRINT "    'Call GenTbl_GenLst(wtx, intLST)"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENPRP = Build module:  vbaGenPRP
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENPRP
        EXEC ut_zzVBX GENPRP
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENPRP) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcZRO                 As Long = 0                           ' BTX: Empty Number"
        PRINT "Private Const mcMTY                 As String = """"                        ' BTX: Empty String"
        PRINT "Private Const mcSPC                 As String = "" ""                       ' BTX: Single Space"
        PRINT "Private Const mcDOT                 As String = "".""                       ' BTX: Period/Dot"
        PRINT "Private Const mcCMA                 As String = "",""                       ' BTX: Comma Constant"
        PRINT "Private Const mcDSH                 As String = ""-""                       ' BTX: Dash"
        PRINT "Private Const mcUBR                 As String = ""_""                       ' BTX: Underbar"
        PRINT "Private Const mcPIP                 As String = ""|""                       ' BTX: Pipe"
        PRINT "Private Const mcBKS                 As String = ""\\""                       ' BTX: Backslash"
        PRINT "Private Const mcFWS                 As String = ""/""                       ' BTX: Forwardslash"
        PRINT "Private Const mcSCN                 As String = "";""                       ' BTX: Semi-Colon"
        PRINT "Private Const mcCLN                 As String = "":""                       ' BTX: Colon"
        PRINT "Private Const mcTLD                 As String = ""~""                       ' BTX: Tilde"
        PRINT "Private Const mcTIK                 As String = ""`""                       ' BTX: Backtick"
        PRINT "Private Const mcSQT                 As String = ""'""                       ' BTX: Single Quote"
        PRINT "Private Const mcDQT                 As String = """"""""                      ' BTX: Double Quote"
        PRINT "Private Const mcCLF                 As String = vbCrLf                    ' BTX: CarrRtn/LineFeed"
        PRINT "Private Const mcNUL                 As Variant = Null                     ' BTX: Null Value"
        PRINT "Private Const mcYUP                 As Boolean = True                     ' BTX: Standard True"
        PRINT "Private Const mcNOP                 As Boolean = False                    ' BTX: Standard False"
        PRINT "Private Const mcALL                 As String = ""ALL""                     ' BTX: Standard ALL"
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTXT                        As String                             '"
        PRINT "Private mTX1                        As String                             '"
        PRINT "Private mTX2                        As String                             '"
        PRINT "Private mTX3                        As String                             '"
        PRINT "Private mTX4                        As String                             '"
        PRINT "Private mTX5                        As String                             '"
        PRINT "Private mTX6                        As String                             '"
        PRINT "Private mTX7                        As String                             '"
        PRINT "Private mTX8                        As String                             '"
        PRINT "Private mTX9                        As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mLEN                        As Integer                            '"
        PRINT "Private mLN1                        As Integer                            '"
        PRINT "Private mLN2                        As Integer                            '"
        PRINT "Private mLN3                        As Integer                            '"
        PRINT "Private mLN4                        As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mNBR                        As Long                               '"
        PRINT "Private mNB1                        As Long                               '"
        PRINT "Private mNB2                        As Long                               '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mBLN                        As Boolean                            '"
        PRINT "Private mBL1                        As Boolean                            '"
        PRINT "Private mBL2                        As Boolean                            '"
        PRINT "'***************************************************************************************************"
        PRINT "' Extended Text Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mIDX                        As Integer                            '"
        PRINT "Private mCNT                        As Integer                            '"
        PRINT "Private mUBD                        As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mCUR                        As String                             '"
        PRINT "Private mPRV                        As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mCMT                        As String                             '"
        PRINT "Private mOBJ                        As String                             '"
        PRINT "Private mLST                        As String                             '"
        PRINT "Private mITM                        As String                             '"
        PRINT "Private mVAL                        As String                             '"
        PRINT "Private mLFT                        As String                             '"
        PRINT "Private mMID                        As String                             '"
        PRINT "Private mRGT                        As String                             '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mPOS                        As Integer                            '"
        PRINT "Private mPS1                        As Integer                            '"
        PRINT "Private mPS2                        As Integer                            '"
        PRINT "Private mPS3                        As Integer                            '"
        PRINT "Private mPS4                        As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "' SQL Construction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWHR                 As String = ""WHERE""                   ' SQL: Operator WHERE"
        PRINT "Private Const mcFST                 As String = ""    ""                    ' SQL: First criteria"
        PRINT "Private Const mcAND                 As String = ""AND ""                    ' SQL: Append criteria"
        PRINT "Private Const mcORR                 As String = ""OR  ""                    ' SQL: Append criteria"
        PRINT "Private Const mcNON                 As String = ""0=9""                     ' SQL: Records = None"
        PRINT "Private Const mcANY                 As String = ""1=1""                     ' SQL: Records = All/Any"
        PRINT "Private Const mcMG0                 As String = """"                        ' SQL: Margin: 0"
        PRINT "Private Const mcMG1                 As String = ""    ""                    ' SQL: Margin: 1"
        PRINT "Private Const mcMG2                 As String = ""        ""                ' SQL: Margin: 2"
        PRINT "Private mXTS                        As String * 1000                      ' SQL: Extend Space"
        PRINT "Private mSQL                        As String                             ' SQL: Statement Build"
        PRINT "Private mWHR                        As String                             ' SQL: Statement WHERE"
        PRINT "Private mAND                        As String * 4                         ' SQL: Separater AND"
        PRINT "Private mCMA                        As String                             ' SQL: Separater Comma"
        PRINT "Private mSEP                        As String                             ' SQL: Separater Placeholder"
        PRINT "'***************************************************************************************************"
        PRINT "' GEN: Flags"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcClrWTX              As Boolean = True"
        PRINT "Private Const mcIntREG              As Boolean = True"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIncRegYUP           As Boolean = True"
        PRINT "Private Const mcIncRegNOP           As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcUseLstTMP           As Integer = 1"
        PRINT "Private Const mcUseLstTPL           As Integer = 2"
        PRINT "Private Const mcUseLstSTD           As Integer = 3"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcOupFmtADD           As Integer = 1"
        PRINT "Private Const mcOupFmtVRN           As Integer = 2"
        PRINT "'***************************************************************************************************"
        PRINT "' GEN: Property"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModPrpLst           As Integer = 1"
        PRINT "Private Const mcModRegPrp           As Integer = 2"
        PRINT "Private Const mcModRunPrp           As Integer = 3"
        PRINT "Private Const mcModWhrPrp           As Integer = 4"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpIdxNUM           As Integer = 0"
        PRINT "Private Const mcPrpIdxTYP           As Integer = 1"
        PRINT "Private Const mcPrpIdxNAM           As Integer = 2"
        PRINT "Private Const mcPrpIdxTBL           As Integer = 3"
        PRINT "Private Const mcPrpIdxVAR           As Integer = 4"
        PRINT "Private Const mcPrpIdxCTL           As Integer = 5"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpNAMNUM           As String = ""PrpNum"""
        PRINT "Private Const mcPrpNAMTYP           As String = ""PrpTYP"""
        PRINT "Private Const mcPrpNAMNAM           As String = ""PrpNAM"""
        PRINT "Private Const mcPrpNAMTBL           As String = ""PrpTBL"""
        PRINT "Private Const mcPrpNAMVAR           As String = ""PrpVAR"""
        PRINT "Private Const mcPrpNAMCTL           As String = ""PrpCTL"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRegPrpRGN           As String = ""REGPRP"""
        PRINT "Private Const mcRunPrpRGN           As String = ""RUNPRP"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private prp                         As clsRegPRP"
        PRINT "Private mrstPRP                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldFmt                  As Variant"
        PRINT "Private mblnUseLst                  As Boolean"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpLstDBG           As Boolean = False     ' True False"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Gen_PRP"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Gen_PRP()"
        PRINT "    Dim strCMN As String    ' Common description"
        PRINT "    Dim strOBJ As String    ' Form name"
        PRINT "    Dim strDSC As String    ' Form description"
        PRINT "    Dim strDEF As String    ' Default property"
        PRINT "    Dim intLST As Integer   ' Registration list"
        PRINT "    Dim intTYP As Integer   ' Module type"
        PRINT "    '***********************************************************************************************"
        PRINT "    intLST = mcUseLstSTD    ' mcUseLstSTD mcUseLstTPL mcUseLstTMP"
        PRINT "    intTYP = mcModRegPrp    ' mcModPrpLst mcModRegPrp mcModRunPrp mcModWhrPrp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "    strCMN = ""General"": strOBJ = ""frm_FormName"": strDSC = ""Description"": strDEF = ""PropName"""
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim wtx As clsUtlWTX: Set wtx = New clsUtlWTX"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcModPrpLst: Call GenPrp_GenLst(wtx, intLST, mcClrWTX, mcIntREG)     ' Table list for clsRegPRP.LodStdLst"
        PRINT "        Case mcModRegPrp: Call GenTbl_RegPrp(wtx, intLST)                         ' Class module code for clsRegPRP"
        PRINT "        Case mcModRunPrp: Call GenPrp_RunPrp(wtx, intLST, strCMN)                 ' Property statements for clsRunRST/SQL"
        PRINT "        Case mcModWhrPrp: Call GenPrp_WhrPrp(wtx, intLST, strOBJ)                 ' WHERE    statements for clsRunRST/SQL"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize:  Property List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_PrpRst( _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal intLST As Integer, _"
        PRINT "    Optional ByVal blnNonReg As Boolean = True _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".Init_TblRst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize registration object"
        PRINT "    Set prp = New clsRegPRP"
        PRINT "    Call prp.Activate(intLST)"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  Property List"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenPrp_GenLst( _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal intLST As Integer, _"
        PRINT "    Optional ByVal blnWTX As Boolean, _"
        PRINT "    Optional ByVal blnINT As Boolean _"
        PRINT ")"
        PRINT ""
        PRINT "    ' Optionally initialize the recordset"
        PRINT "    If blnINT Then Call Init_PrpRst(wtx, intLST, mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Generate the list"
        PRINT "    If blnWTX Then Call wtx.AX_Clear"
        PRINT "    Call prp.GenLstPRP(wtx, intLST)"
        PRINT "    If blnWTX Then Call wtx.AX_WrtTmp"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  clsRegPRP Code"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenTbl_RegPrp( _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal intLST As Integer _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenTbl_RegPrp"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    Call Init_PrpRst(wtx, intLST, mcIncRegYUP)"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(""clsRegPRP"", ""Register Property Information"", mcRegPrpRGN, """", ""prp"", wtx)"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Text Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcMTY                 As String = """"""""                        ' BTX: Empty String"""
        PRINT "    .AX ""Private mXTS                        As String * 1000                      ' SQL: Extend Space"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mrstOBJ                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstSTD                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstTPL                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstTMP                     As ADODB.Recordset"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcUseLstTMP           As Integer = 1"""
        PRINT "    .AX ""Private Const mcUseLstTPL           As Integer = 2"""
        PRINT "    .AX ""Private Const mcUseLstSTD           As Integer = 3"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldIdxNUM           As Integer = 0"""
        PRINT "    .AX ""Private Const mcFldIdxNAM           As Integer = 1"""
        PRINT "    .AX ""Private Const mcFldIdxTYP           As Integer = 2"""
        PRINT "    .AX ""Private Const mcFldIdxVAR           As Integer = 3"""
        PRINT "    .AX ""Private Const mcFldIdxCTL           As Integer = 4"""
        PRINT "    .AX ""Private Const mcFldIdxTBL           As Integer = 5"""
        PRINT "    .AX ""Private Const mcFldIdxCLM           As Integer = 6"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldNamNUM           As String = """"PrpNum"""""""
        PRINT "    .AX ""Private Const mcFldNamNAM           As String = """"PrpNAM"""""""
        PRINT "    .AX ""Private Const mcFldNamTYP           As String = """"PrpTYP"""""""
        PRINT "    .AX ""Private Const mcFldNamVAR           As String = """"PrpVAR"""""""
        PRINT "    .AX ""Private Const mcFldNamCTL           As String = """"PrpCTL"""""""
        PRINT "    .AX ""Private Const mcFldNamTBL           As String = """"PrpTBL"""""""
        PRINT "    .AX ""Private Const mcFldNamCLM           As String = """"PrpCLM"""""""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcObjFmtNUM           As String = """"0000"""""""
        PRINT "    .AX ""Private Const mcPrpDefTYP           As String = """"zzz"""""""
        PRINT "    .AX ""Private Const mcVarDefPFX           As String = """"zzz"""""""
        PRINT "    .AX ""Private Const mcCtlDefPFX           As String = """"zzz"""""""
        PRINT "    .AX ""Private Const mcTblDefPFX           As String = """"zzz_"""""""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrnFldLst                  As Variant"""
        PRINT "    .AX ""Private mintDefItm                  As Integer"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize values"""
        PRINT "    .AX ""    mXTS = mcMTY"""
        PRINT "    .AX ""    ' Initialize objects"""
        PRINT "    .AX ""    mvrnFldLst = Array( _"""
        PRINT "    .AX ""        mcFldNamNUM, _"""
        PRINT "    .AX ""        mcFldNamNAM, _"""
        PRINT "    .AX ""        mcFldNamTYP, _"""
        PRINT "    .AX ""        mcFldNamVAR, _"""
        PRINT "    .AX ""        mcFldNamCTL, _"""
        PRINT "    .AX ""        mcFldNamTBL, _"""
        PRINT "    .AX ""        mcFldNamCLM _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""    Call LodStdLst"""
        PRINT "    .AX ""    Call LodTplLst"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Default list item"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Property Get DefaultItem() As Integer"""
        PRINT "    .AX ""    DefaultItem = mintDefItm"""
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Activate the Registration Recordset"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Activate(ByVal intLST As Integer)"""
        PRINT "    .AX ""    ' Set active recordset"""
        PRINT "    .AX ""    Select Case intLST"""
        PRINT "    .AX ""        Case mcUseLstTPL: Set mrstOBJ = mrstTPL.Clone"""
        PRINT "    .AX ""        Case mcUseLstSTD: Set mrstOBJ = mrstSTD.Clone"""
        PRINT "    .AX ""        Case Else:        Set mrstOBJ = mrstTMP.Clone"""
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Get the Registration RowSource List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Function GetObjLst( _"""
        PRINT "    .AX ""    ByVal vrnLST As Variant, _"""
        PRINT "    .AX ""    ByVal strDEF As String, _"""
        PRINT "    .AX ""    ByVal blnBLK As Boolean _"""
        PRINT "    .AX "") As String"""
        PRINT "    .AX ""    ' Declare working constants"""
        PRINT "    .AX ""    Const pDLM As String = """";"""""""
        PRINT "    .AX ""    ' Declare working variables"""
        PRINT "    .AX ""    Dim strNAM As String"""
        PRINT "    .AX ""    Dim strTTL As String"""
        PRINT "    .AX ""    Dim strSRC As String"""
        PRINT "    .AX ""    Dim strDLM As String"""
        PRINT "    .AX ""    Dim intIND As Integer"""
        PRINT "    .AX ""    Dim vrnITM As Variant"""
        PRINT "    .AX ""    ' Reset default selection"""
        PRINT "    .AX ""    mintDefItm = 0"""
        PRINT "    .AX ""    ' Prepend blank selection"""
        PRINT "    .AX ""    If blnBLK Then"""
        PRINT "    .AX ""        strSRC = """";0"""": strDLM = pDLM"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    ' Lookup the report values"""
        PRINT "    .AX ""    For Each vrnITM In vrnLST"""
        PRINT "    .AX ""        strNAM = ObjTxtNAM(vrnITM)"""
        PRINT "    .AX ""        strTTL = ObjTxtTBL(vrnITM)"""
        PRINT "    .AX ""        If Len(strNAM) > 0 Then"""
        PRINT "    .AX ""            intIND = intIND+1"""
        PRINT "    .AX ""            strSRC = strSRC & strDLM & strTTL & pDLM & intIND: strDLM = pDLM"""
        PRINT "    .AX ""            If strNAM = strDEF Then"""
        PRINT "    .AX ""                mintDefItm = intIND"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    Next"""
        PRINT "    .AX ""    ' Return results"""
        PRINT "    .AX ""    GetObjLst = strSRC"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Number"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtNUM(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    ObjTxtNUM = mcObjFmtNUM"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtNUM = Trim$(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenNUM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxNUM)) > MaxLenNUM Then MaxLenNUM = Len(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Name"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtNAM(ByVal strObjNUM As String, Optional ByVal strDefNam As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strObjNUM = Right$(mcObjFmtNUM & strObjNUM, 4)"""
        PRINT "    .AX ""    strSQL = mcFldNamNUM & """" = '"""" & strObjNUM & """"'"""""""
        PRINT "    .AX ""    ObjTxtNAM = IIf(Len(strDefNam) > 0, strDefNam, """"Property """" & strObjNUM & """" not found"""")"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtNAM = Trim$(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenNAM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxNAM)) > MaxLenNAM Then MaxLenNAM = Len(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Type"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtTYP(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    ObjTxtTYP = """"ZZZ"""""""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtTYP = Trim$(.Fields(mcFldIdxTYP))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenTYP() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxTYP)) > MaxLenTYP Then MaxLenTYP = Len(.Fields(mcFldIdxTYP))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Variable"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtVAR(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    ObjTxtVAR = """"zzz_VarNam"""""""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtVAR = Trim$(.Fields(mcFldIdxVAR))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenVAR() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxVAR)) > MaxLenVAR Then MaxLenVAR = Len(.Fields(mcFldIdxVAR))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Control"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtCTL(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    ObjTxtCTL = """"zzz_CtlNam"""""""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtCTL = Trim$(.Fields(mcFldIdxCTL))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenCTL() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxCTL)) > MaxLenCTL Then MaxLenCTL = Len(.Fields(mcFldIdxCTL))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Table"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtTBL(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    ObjTxtTBL = """"zzz_TblNam"""""""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtTBL = Trim$(.Fields(mcFldIdxTBL))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenTBL() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxTBL)) > MaxLenTBL Then MaxLenTBL = Len(.Fields(mcFldIdxTBL))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Column"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function ObjTxtCLM(ByVal strObjNAM As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    ObjTxtCLM = """"ZZZ"""""""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                ObjTxtCLM = Trim$(.Fields(mcFldIdxCLM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""Public Function MaxLenCLM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxCLM)) > MaxLenCLM Then MaxLenCLM = Len(.Fields(mcFldIdxCLM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Registration Formatting"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Function GetObjNAM(ByVal strNAM As String, Optional ByVal strDEF As String) As String"""
        PRINT "    .AX ""    If Len(strDEF) = 0 Then strDEF = """"PrpZzz"""""""
        PRINT "    .AX ""    If Len(strNAM) = 0 Then strNAM = strNAM"""
        PRINT "    .AX ""    GetObjNAM = Trim$(strNAM)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetObjTYP(ByVal strTYP As String, Optional ByVal strDEF As String) As String"""
        PRINT "    .AX ""    If Len(strDEF) = 0 Then strDEF = """"zzz"""""""
        PRINT "    .AX ""    If Len(strTYP) = 0 Then strTYP = strDEF"""
        PRINT "    .AX ""    GetObjTYP = LCase$(Left$(Trim$(strTYP), 3))"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetObjVAR(ByVal strVAR As String, ByVal strTYP As String, ByVal strNAM As String) As String"""
        PRINT "    .AX ""    If Len(strVAR) > 0 And GetTxt2Typ(Mid$(strVAR, 2, 999)) <> mcVarDefPFX Then"""
        PRINT "    .AX ""        strTYP = Mid$(strVAR, 2, 3)"""
        PRINT "    .AX ""        strNAM = Mid$(strVAR, 5, 999)"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    GetObjVAR = """"m"""" & GetObjTYP(strTYP) & GetObjNAM(strNAM)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetObjCTL(ByVal strCTL As String, ByVal strTYP As String, ByVal strNAM As String) As String"""
        PRINT "    .AX ""    Dim strPFX As String"""
        PRINT "    .AX ""    If Len(strCTL) > 0 And GetTyp2Ctl(strCTL) <> mcCtlDefPFX Then"""
        PRINT "    .AX ""        strTYP = Left$(strCTL, 3)"""
        PRINT "    .AX ""        strNAM = Right$(strCTL, Len(strCTL) - 3)"""
        PRINT "    .AX ""        strPFX = GetTyp2Ctl(strTYP)"""
        PRINT "    .AX ""    ElseIf (strTYP = """"lng"""" And Right$(strNAM, 2) = """"ID"""") Then"""
        PRINT "    .AX ""        strPFX = """"cbo"""""""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        strPFX = GetTyp2Ctl(strTYP)"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    GetObjCTL = strPFX & GetObjNAM(strNAM)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetObjTBL(ByVal strTBL As String, Optional ByVal strDEF As String) As String"""
        PRINT "    .AX ""    If Len(strDEF) = 0 Then strDEF = """"TblNam"""""""
        PRINT "    .AX ""    strDEF = mcTblDefPFX & Replace$(strDEF, mcTblDefPFX, mcMTY)"""
        PRINT "    .AX ""    If Len(strTBL) = 0 Then strTBL = strDEF"""
        PRINT "    .AX ""    GetObjTBL = Trim$(strTBL)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetObjCLM(ByVal strCLM As String, Optional ByVal strDEF As String) As String"""
        PRINT "    .AX ""    If Len(strDEF) = 0 Then strDEF = """"ClmZzz"""""""
        PRINT "    .AX ""    If Len(strCLM) = 0 Then strCLM = strDEF"""
        PRINT "    .AX ""    GetObjCLM = Trim$(strCLM)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetTxt2Typ(ByVal strTXT As String) As String"""
        PRINT "    .AX ""    strTXT = LCase$(Left$(strTXT, 3))"""
        PRINT "    .AX ""    Select Case strTXT"""
        PRINT "    .AX ""        Case """"bln"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case """"int"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case """"lng"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case """"cur"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case """"sgl"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case """"dbl"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case """"str"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case """"dat"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case """"vrn"""": GetTxt2Typ = strTXT"""
        PRINT "    .AX ""        Case Else:  GetTxt2Typ = mcVarDefPFX"""
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function GetTyp2Ctl(ByVal strTYP As String) As String"""
        PRINT "    .AX ""    Select Case LCase$(Left$(strTYP, 3))"""
        PRINT "    .AX ""        Case """"bln"""": GetTyp2Ctl = """"chk"""""""
        PRINT "    .AX ""        Case """"int"""": GetTyp2Ctl = """"txt"""""""
        PRINT "    .AX ""        Case """"lng"""": GetTyp2Ctl = """"txt"""""""
        PRINT "    .AX ""        Case """"cur"""": GetTyp2Ctl = """"txt"""""""
        PRINT "    .AX ""        Case """"sgl"""": GetTyp2Ctl = """"txt"""""""
        PRINT "    .AX ""        Case """"dbl"""": GetTyp2Ctl = """"txt"""""""
        PRINT "    .AX ""        Case """"str"""": GetTyp2Ctl = """"txt"""""""
        PRINT "    .AX ""        Case """"dat"""": GetTyp2Ctl = """"txt"""""""
        PRINT "    .AX ""        Case """"vrn"""": GetTyp2Ctl = """"txt"""""""
        PRINT "    .AX ""        Case Else:  GetTyp2Ctl = mcCtlDefPFX"""
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Registration Records"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub GenLstPRP(ByRef wtx As clsUtlWTX, ByVal intLST As Integer)"""
        PRINT "    .AX ""    Dim strNUM As String: Dim intNUM As Integer: intNUM = MaxLenNUM"""
        PRINT "    .AX ""    Dim strNAM As String: Dim intNAM As Integer: intNAM = MaxLenNAM"""
        PRINT "    .AX ""    Dim strTYP As String: Dim intTYP As Integer: intTYP = MaxLenTYP"""
        PRINT "    .AX ""    Dim strVAR As String: Dim intVAR As Integer: intVAR = MaxLenVAR"""
        PRINT "    .AX ""    Dim strCTL As String: Dim intCTL As Integer: intCTL = MaxLenCTL"""
        PRINT "    .AX ""    Dim strTBL As String: Dim intTBL As Integer: intTBL = MaxLenTBL"""
        PRINT "    .AX ""    Dim strCLM As String: Dim intCLM As Integer: intCLM = MaxLenCLM"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        .Filter = mcFldNamNUM & """" <> '0000'"""": .Sort = mcFldNamNAM & """" ASC"""""""
        PRINT "    .AX ""        If intLST = mcUseLstSTD Then"""
        PRINT "    .AX ""            If Not (.EOF And .EOF) Then"""
        PRINT "    .AX ""                .MoveFirst"""
        PRINT "    .AX ""                Do While Not .EOF"""
        PRINT "    .AX ""                    strNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""                    strNAM = .Fields(mcFldIdxNAM)"""
        PRINT "    .AX ""                    strTYP = .Fields(mcFldIdxTYP)"""
        PRINT "    .AX ""                    strVAR = .Fields(mcFldIdxVAR)"""
        PRINT "    .AX ""                    strCTL = .Fields(mcFldIdxCTL)"""
        PRINT "    .AX ""                    strTBL = .Fields(mcFldIdxTBL)"""
        PRINT "    .AX ""                    strCLM = .Fields(mcFldIdxCLM)"""
        PRINT "    .AX ""                    wtx.AX """"    Call AddTmpItm("""" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strNAM & """""""""""","""" & mXTS, intNAM+3) & """" """" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strTYP & """""""""""","""" & mXTS, intTYP+3) & """" """" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strVAR & """""""""""","""" & mXTS, intVAR+3) & """" """" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strCTL & """""""""""","""" & mXTS, intCTL+3) & """" """" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strTBL & """""""""""","""" & mXTS, intTBL+3) & """" """" & _"""
        PRINT "    .AX ""                         Left$("""""""""""""""" & strCLM & """""""""""" """" & mXTS, intCLM+2) & """")  ' """" & strNUM"""
        PRINT "    .AX ""                    .MoveNext"""
        PRINT "    .AX ""                Loop"""
        PRINT "    .AX ""            Else"""
        PRINT "    .AX ""                intLST = mcUseLstTPL"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""        If intLST = mcUseLstTPL Then"""
        PRINT "    .AX ""            wtx.AX """"    Call AddTmpItm(""""""""PropName_01"""""""", """""""""""" & mcPrpDefTYP & """""""""""", """"""""VarName_01"""""""", """"""""ControlName_01"""""""", """"""""TableName_01"""""""", """"""""ColumnName_01"""""""") ' 0001"""""""
        PRINT "    .AX ""            wtx.AX """"    Call AddTmpItm(""""""""PropName_02"""""""", """""""""""" & mcPrpDefTYP & """""""""""", """"""""VarName_02"""""""", """"""""ControlName_02"""""""", """"""""TableName_02"""""""", """"""""ColumnName_02"""""""") ' 0002"""""""
        PRINT "    .AX ""            wtx.AX """"    Call AddTmpItm(""""""""PropName_03"""""""", """""""""""" & mcPrpDefTYP & """""""""""", """"""""VarName_03"""""""", """"""""ControlName_03"""""""", """"""""TableName_03"""""""", """"""""ColumnName_03"""""""") ' 0003"""""""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasObjNam(ByVal strObjNAM As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasObjNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtObjNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtObjNum = Right$(mcObjFmtNUM & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub AddObjItm( _"""
        PRINT "    .AX ""    ByVal strObjNAM As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjTYP As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjVAR As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjCTL As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjTBL As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjCLM As String _"""
        PRINT "    .AX "")"""
        PRINT "    .AX ""    If Not HasObjNam(strObjNAM) Then"""
        PRINT "    .AX ""        strObjNAM = GetObjNAM(strObjNAM)"""
        PRINT "    .AX ""        strObjTYP = GetObjTYP(strObjTYP)"""
        PRINT "    .AX ""        strObjVAR = GetObjVAR(strObjVAR, strObjTYP, strObjNAM)"""
        PRINT "    .AX ""        strObjCTL = GetObjCTL(strObjCTL, strObjTYP, strObjNAM)"""
        PRINT "    .AX ""        strObjTBL = GetObjTBL(strObjTBL)"""
        PRINT "    .AX ""        strObjCLM = GetObjCLM(strObjCLM, strObjNAM)"""
        PRINT "    .AX ""        With mrstOBJ"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array( _"""
        PRINT "    .AX ""                NxtObjNum, _"""
        PRINT "    .AX ""                strObjNAM, _"""
        PRINT "    .AX ""                strObjTYP, _"""
        PRINT "    .AX ""                strObjVAR, _"""
        PRINT "    .AX ""                strObjCTL, _"""
        PRINT "    .AX ""                strObjTBL, _"""
        PRINT "    .AX ""                strObjCLM _"""
        PRINT "    .AX ""            )"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub DbgLstPRP(ByRef wtx As clsUtlWTX)"""
        PRINT "    .AX ""    Dim intNUM As Integer: intNUM = MaxLenNUM"""
        PRINT "    .AX ""    Dim intNAM As Integer: intNAM = MaxLenNAM"""
        PRINT "    .AX ""    Dim intTYP As Integer: intTYP = MaxLenTYP"""
        PRINT "    .AX ""    Dim intVAR As Integer: intVAR = MaxLenVAR"""
        PRINT "    .AX ""    Dim intCTL As Integer: intCTL = MaxLenCTL"""
        PRINT "    .AX ""    Dim intTBL As Integer: intTBL = MaxLenTBL"""
        PRINT "    .AX ""    Dim intCLM As Integer: intCLM = MaxLenCLM"""
        PRINT "    .AX ""    With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                wtx.AX Trim$( _"""
        PRINT "    .AX ""                    """" NUM="""" & Left$(.Fields(mcFldIdxNUM) & mXTS, intNUM) & _"""
        PRINT "    .AX ""                    """" NAM="""" & Left$(.Fields(mcFldIdxNAM) & mXTS, intNAM) & _"""
        PRINT "    .AX ""                    """" TYP="""" & Left$(.Fields(mcFldIdxTYP) & mXTS, intTYP) & _"""
        PRINT "    .AX ""                    """" VAR="""" & Left$(.Fields(mcFldIdxVAR) & mXTS, intVAR) & _"""
        PRINT "    .AX ""                    """" CTL="""" & Left$(.Fields(mcFldIdxCTL) & mXTS, intCTL) & _"""
        PRINT "    .AX ""                    """" TBL="""" & Left$(.Fields(mcFldIdxTBL) & mXTS, intTBL) & _"""
        PRINT "    .AX ""                    """" CLM="""" & Left$(.Fields(mcFldIdxCLM) & mXTS, intCLM) & _"""
        PRINT "    .AX ""                mcMTY)"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    wtx.AX String$(100, """"="""")"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Registration Processing"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Init_RstTMP()"""
        PRINT "    .AX ""    ' Initialize new report list"""
        PRINT "    .AX ""    Set mrstTMP = New ADODB.Recordset"""
        PRINT "    .AX ""    ' Create recordset fields"""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNAM, adVarChar, 99)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamTYP, adVarChar, 3)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamVAR, adVarChar, 200)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamCTL, adVarChar, 200)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamTBL, adVarChar, 200)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamCLM, adVarChar, 200)"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Initialize the recordset"""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        .Open: .Sort = mcFldNamNAM & """" ASC"""""""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasTmpNam(ByVal strObjNAM As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = mcFldNamNAM & """" = '"""" & strObjNAM & """"'"""""""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasTmpNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtTmpNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtTmpNum = Right$(mcObjFmtNUM & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub AddTmpItm( _"""
        PRINT "    .AX ""    ByVal strObjNAM As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjTYP As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjVAR As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjCTL As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjTBL As String, _"""
        PRINT "    .AX ""    Optional ByVal strObjCLM As String _"""
        PRINT "    .AX "")"""
        PRINT "    .AX ""    If Not HasTmpNam(strObjNAM) Then"""
        PRINT "    .AX ""        strObjNAM = GetObjNAM(strObjNAM)"""
        PRINT "    .AX ""        strObjTYP = GetObjTYP(strObjTYP)"""
        PRINT "    .AX ""        strObjVAR = GetObjVAR(strObjVAR, strObjTYP, strObjNAM)"""
        PRINT "    .AX ""        strObjCTL = GetObjCTL(strObjCTL, strObjTYP, strObjNAM)"""
        PRINT "    .AX ""        strObjTBL = GetObjTBL(strObjTBL)"""
        PRINT "    .AX ""        strObjCLM = GetObjCLM(strObjCLM, strObjNAM)"""
        PRINT "    .AX ""        With mrstTMP"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array( _"""
        PRINT "    .AX ""                NxtTmpNum, _"""
        PRINT "    .AX ""                strObjNAM, _"""
        PRINT "    .AX ""                strObjTYP, _"""
        PRINT "    .AX ""                strObjVAR, _"""
        PRINT "    .AX ""                strObjCTL, _"""
        PRINT "    .AX ""                strObjTBL, _"""
        PRINT "    .AX ""                strObjCLM _"""
        PRINT "    .AX ""            )"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub DbgLstTMP()"""
        PRINT "    .AX ""    Dim intNUM As Integer: intNUM = TmpLenNUM"""
        PRINT "    .AX ""    Dim intNAM As Integer: intNAM = TmpLenNAM"""
        PRINT "    .AX ""    Dim intTYP As Integer: intTYP = TmpLenTYP"""
        PRINT "    .AX ""    Dim intVAR As Integer: intVAR = TmpLenVAR"""
        PRINT "    .AX ""    Dim intCTL As Integer: intCTL = TmpLenCTL"""
        PRINT "    .AX ""    Dim intTBL As Integer: intTBL = TmpLenTBL"""
        PRINT "    .AX ""    Dim intCLM As Integer: intCLM = TmpLenCLM"""
        PRINT "    .AX ""    With mrstTMP"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                Debug.Print Trim$( _"""
        PRINT "    .AX ""                    """" NUM="""" & Left$(.Fields(mcFldIdxNUM) & mXTS, intNUM) & _"""
        PRINT "    .AX ""                    """" NAM="""" & Left$(.Fields(mcFldIdxNAM) & mXTS, intNAM) & _"""
        PRINT "    .AX ""                    """" TYP="""" & Left$(.Fields(mcFldIdxTYP) & mXTS, intTYP) & _"""
        PRINT "    .AX ""                    """" VAR="""" & Left$(.Fields(mcFldIdxVAR) & mXTS, intVAR) & _"""
        PRINT "    .AX ""                    """" CTL="""" & Left$(.Fields(mcFldIdxCTL) & mXTS, intCTL) & _"""
        PRINT "    .AX ""                    """" TBL="""" & Left$(.Fields(mcFldIdxTBL) & mXTS, intTBL) & _"""
        PRINT "    .AX ""                    """" CLM="""" & Left$(.Fields(mcFldIdxCLM) & mXTS, intCLM) & _"""
        PRINT "    .AX ""                mcMTY)"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    Debug.Print String$(100, """"="""")"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenNUM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxNUM)) > TmpLenNUM Then TmpLenNUM = Len(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenNAM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxNAM)) > TmpLenNAM Then TmpLenNAM = Len(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenTYP() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxTYP)) > TmpLenTYP Then TmpLenTYP = Len(.Fields(mcFldIdxTYP))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenVAR() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxVAR)) > TmpLenVAR Then TmpLenVAR = Len(.Fields(mcFldIdxVAR))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenCTL() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxCTL)) > TmpLenCTL Then TmpLenCTL = Len(.Fields(mcFldIdxCTL))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenTBL() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxTBL)) > TmpLenTBL Then TmpLenTBL = Len(.Fields(mcFldIdxTBL))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function TmpLenCLM() As Integer"""
        PRINT "    .AX ""   With mrstOBJ"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                If Len(.Fields(mcFldIdxCLM)) > TmpLenCLM Then TmpLenCLM = Len(.Fields(mcFldIdxCLM))"""
        PRINT "    .AX ""                .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Template Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub LodTplLst()"""
        PRINT "    .AX ""    Call Init_RstTMP"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    Call GenPrp_GenLst(wtx, mcUseLstTPL)"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Set mrstTPL = mrstTMP.Clone"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    If False Then Call DbgLstTMP  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Standard Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub LodStdLst()"""
        PRINT "    .AX ""    Call Init_RstTMP"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    Call GenPrp_GenLst(wtx, intLST)"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Set mrstSTD = mrstTMP.Clone"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    If False Then Call DbgLstTMP  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT "    'Call GenPrp_GenLst(wtx, mcUseLstTPL)"
        PRINT "    'Call GenPrp_GenLst(wtx, intLST)"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenPrp_RunPrp"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenPrp_RunPrp( _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal intLST As Integer, _"
        PRINT "    Optional ByVal strCmnDsc As String = ""General"" _"
        PRINT "): Const pcMsgTtl = mcModNam & "".GenPrp_RunPrp"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    Call Init_PrpRst(wtx, intLST, mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim blnLIN          As Boolean"
        PRINT ""
        PRINT "    ' Declare Property variables"
        PRINT "    Dim strPrpTYP       As String"
        PRINT "    Dim strPrpNAM       As String"
        PRINT "    Dim strPrpTBL       As String"
        PRINT "    Dim strPrpVAR       As String"
        PRINT "    Dim strPrpCmt       As String"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Common Criteria:  Identities"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    If Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTYP = mrstPRP.Fields(mcPrpNAMTYP)"
        PRINT "            strPrpNAM = mrstPRP.Fields(mcPrpNAMNAM)"
        PRINT "            strPrpTBL = mrstPRP.Fields(mcPrpNAMTBL)"
        PRINT "            strPrpVAR = ""m"" & LCase$(strPrpTYP) & strPrpNAM"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If IsIdent(strPrpTYP, strPrpNAM) Then"
        PRINT "                .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTYP), strPrpNAM, strPrpVAR)"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Common Criteria:  "" & strCmnDsc"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    If Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTYP = mrstPRP.Fields(mcPrpNAMTYP)"
        PRINT "            strPrpNAM = mrstPRP.Fields(mcPrpNAMNAM)"
        PRINT "            strPrpTBL = mrstPRP.Fields(mcPrpNAMTBL)"
        PRINT "            strPrpVAR = ""m"" & LCase$(strPrpTYP) & strPrpNAM"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If Not IsIdent(strPrpTYP, strPrpNAM) Then"
        PRINT "                .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTYP), strPrpNAM, strPrpVAR)"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Common Criteria:  Identities"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    blnLIN = True"
        PRINT "    If Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTYP = mrstPRP.Fields(mcPrpNAMTYP)"
        PRINT "            strPrpNAM = mrstPRP.Fields(mcPrpNAMNAM)"
        PRINT "            strPrpTBL = mrstPRP.Fields(mcPrpNAMTBL)"
        PRINT "            strPrpVAR = ""m"" & LCase$(strPrpTYP) & strPrpNAM"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If IsIdent(strPrpTYP, strPrpNAM) Then"
        PRINT "                .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTYP), strPrpNAM, strPrpVAR): blnLIN = False"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    If blnLIN Then"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Common Criteria:  "" & strCmnDsc"
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    blnLIN = True"
        PRINT "    If Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTYP = mrstPRP.Fields(mcPrpNAMTYP)"
        PRINT "            strPrpNAM = mrstPRP.Fields(mcPrpNAMNAM)"
        PRINT "            strPrpTBL = mrstPRP.Fields(mcPrpNAMTBL)"
        PRINT "            strPrpVAR = ""m"" & LCase$(strPrpTYP) & strPrpNAM"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            If Not IsIdent(strPrpTYP, strPrpNAM) Then"
        PRINT "                .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTYP), strPrpNAM, strPrpVAR): blnLIN = False"
        PRINT "            End If"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    If blnLIN Then"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenPrp_WhrPrp"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenPrp_WhrPrp( _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal intLST As Integer, _"
        PRINT "    ByVal strOBJ As String _"
        PRINT "): Const pcMsgTtl = mcModNam & "".GenPrp_WhrPrp"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnITM As Variant"
        PRINT ""
        PRINT "    ' Declare Property variables"
        PRINT "    Dim strPrpTYP       As String"
        PRINT "    Dim strPrpNAM       As String"
        PRINT "    Dim strPrpTBL       As String"
        PRINT "    Dim strPrpVAR       As String"
        PRINT "    Dim strPrpCmt       As String"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    For Each vrnITM In GenPrp_FrmLst(strOBJ)"
        PRINT "        strPrpTYP = vrnITM(mcPrpIdxTYP)"
        PRINT "        strPrpNAM = vrnITM(mcPrpIdxNAM)"
        PRINT "        strPrpVAR = ""m"" & LCase$(strPrpTYP) & strPrpNAM"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Whr(strPrpTYP, strPrpNAM, strPrpVAR)"
        PRINT "    Next"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENCMD = Build module:  vbaGenCMD
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENCMD
        EXEC ut_zzVBX GENCMD
     ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENCMD) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As New clsUtlWTX"
        PRINT "Private reg                         As New clsRegCMD"
        PRINT "'***************************************************************************************************"
        PRINT "Private mrstCMD                     As ADODB.Recordset"
        PRINT "Private mrstPRP                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcUseTplList          As Boolean = True"
        PRINT "Private Const mcUseStdList          As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIncRegYUP           As Boolean = True"
        PRINT "Private Const mcIncRegNOP           As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModCmdLst           As Integer = 1"
        PRINT "Private Const mcModRegCmd           As Integer = 2"
        PRINT "Private Const mcModRunCmd           As Integer = 3"
        PRINT "Private Const mcModFrmCmd           As Integer = 4"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRegCmdRGN           As String = ""REGCMD"""
        PRINT "Private Const mcRunCmdRGN           As String = ""RUNCMD"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpIdxTYP           As Integer = 0"
        PRINT "Private Const mcPrpIdxNAM           As Integer = 1"
        PRINT "Private Const mcPrpIdxTBL           As Integer = 2"
        PRINT "Private Const mcPrpIdxCTL           As Integer = 3"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpNamTYP           As String = ""PrpTyp"""
        PRINT "Private Const mcPrpNamNAM           As String = ""PrpNam"""
        PRINT "Private Const mcPrpNamTBL           As String = ""PrpTbl"""
        PRINT "Private Const mcPrpNamCTL           As String = ""PrpCtl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmdIdxNUM           As Integer = 0"
        PRINT "Private Const mcCmdIdxNAM           As Integer = 1"
        PRINT "Private Const mcCmdIdxTTL           As Integer = 2"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmdNamNUM           As String = ""CmdNum"""
        PRINT "Private Const mcCmdNamNAM           As String = ""CmdNam"""
        PRINT "Private Const mcCmdNamTTL           As String = ""CmdTtl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmdTpl001           As String = ""ProcessName_01"""
        PRINT "Private Const mcCmdTpl002           As String = ""ProcessName_02"""
        PRINT "Private Const mcCmdTpl003           As String = ""ProcessName_03"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmdTxtPFX           As String = ""Process_"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mSQL                        As String"
        PRINT "Private mTXT                        As String"
        PRINT "Private mTX1                        As String"
        PRINT "Private mTX2                        As String"
        PRINT "Private mTX3                        As String"
        PRINT "Private mSPC                        As String * 100"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldFmt                  As Variant"
        PRINT "Private mblnUseLst                  As Boolean"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Gen_CMD"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Gen_CMD()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Gen_CMD"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    Dim strOBJ As String    ' Form name"
        PRINT "    Dim strDSC As String    ' Form description"
        PRINT "    Dim strDEF As String    ' Default command"
        PRINT "    Dim blnLST As Boolean   ' Registration list"
        PRINT "    Dim intTYP As Integer   ' Module type"
        PRINT "    '***********************************************************************************************"
        PRINT "    blnLST = mcUseStdList   ' mcUseStdList mcUseTplList"
        PRINT "    intTYP = mcModRunCmd    ' mcModCmdLst mcModRegCmd mcModRunCmd mcModFrmCmd"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    strOBJ = ""frm_FormName"": strDSC = ""Description"": strDEF = ""ProcessName_01"""
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcModCmdLst: Call GenCmd_CmdLst(blnLST, True)                   ' Command list for clsRegCMD.LodCmdLst"
        PRINT "        Case mcModRegCmd: Call GenCmd_RegCmd(blnLST)                         ' Class module code for clsRegCMD"
        PRINT "        Case mcModRunCmd: Call GenCmd_RunCmd(blnLST)                         ' Class module code for clsRunCMD"
        PRINT "        Case mcModFrmCmd: Call GenCmd_FrmCmd(strOBJ, strDSC, strDEF, blnLST) ' Form module code for command setup/execution"
        PRINT "    End Select"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" - "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenCmd_CmdLst"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenCmd_CmdLst( _"
        PRINT "    ByVal blnLST As Boolean, _"
        PRINT "    Optional ByVal blnWTX As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenCmd_CmdLst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    Call Init_CmdRst(mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Declare Command variables"
        PRINT "    Dim strCmdNum       As String"
        PRINT "    Dim strCmdNam       As String"
        PRINT "    Dim strCmdTtl       As String"
        PRINT ""
        PRINT "    Dim intMaxNum       As Integer: intMaxNum = GetNumLen"
        PRINT "    Dim intMaxNam       As Integer: intMaxNam = GetNamLen"
        PRINT "    Dim intMaxTtl       As Integer: intMaxTtl = GetTtlLen"
        PRINT ""
        PRINT "    If blnWTX Then Call wtx.AX_Clear"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    mrstCMD.Filter = mcCmdNamNUM & "" <> '0000'"""
        PRINT "    mrstCMD.Sort = mcCmdNamNUM & "" ASC"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstCMD.EOF And mrstCMD.EOF) Then"
        PRINT "        mrstCMD.MoveFirst"
        PRINT "        Do While Not mrstCMD.EOF"
        PRINT "            strCmdNum = mrstCMD.Fields(mcCmdIdxNUM)"
        PRINT "            strCmdNam = mrstCMD.Fields(mcCmdIdxNAM)"
        PRINT "            strCmdTtl = mrstCMD.Fields(mcCmdIdxTTL)"
        PRINT "            .AX ""    Call AddStdItm("" & Left$("""""""" & strCmdNam & """""","" & mSPC, intMaxNam+3) & "" "" & Left$("""""""" & strCmdTtl & """""""" & mSPC, intMaxTtl+2) & "")  ' "" & strCmdNum"
        PRINT "            mrstCMD.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        .AX ""    Call AddTplItm(""""ProcessName_01"""", """"Process 0001"""")  ' 0001"""
        PRINT "        .AX ""    Call AddTplItm(""""ProcessName_02"""", """"Process 0002"""")  ' 0002"""
        PRINT "        .AX ""    Call AddTplItm(""""ProcessName_03"""", """"Process 0003"""")  ' 0003"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenCmd_RegCmd"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenCmd_RegCmd( _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenCmd_RegCmd"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST"
        PRINT "    Call Init_CmdRst(mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Declare Command variables"
        PRINT "    Dim strCmdNum       As String"
        PRINT "    Dim strCmdNam       As String"
        PRINT "    Dim strCmdTtl       As String"
        PRINT ""
        PRINT "    Dim intMaxNum       As Integer: intMaxNum = GetNumLen"
        PRINT "    Dim intMaxNam       As Integer: intMaxNam = GetNamLen"
        PRINT "    Dim intMaxTtl       As Integer: intMaxTtl = GetTtlLen"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(""clsRegCMD"", ""Register Command Information"", mcRegCmdRGN, """", ""rcp"", wtx)"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mrstCMD                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstSTD                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstTPL                     As ADODB.Recordset"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldIdxNUM           As Integer = 0"""
        PRINT "    .AX ""Private Const mcFldIdxNAM           As Integer = 1"""
        PRINT "    .AX ""Private Const mcFldIdxTTL           As Integer = 2"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldNamNUM           As String = """"CmdNum"""""""
        PRINT "    .AX ""Private Const mcFldNamNAM           As String = """"CmdNam"""""""
        PRINT "    .AX ""Private Const mcFldNamTTL           As String = """"CmdTtl"""""""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrnFldLst                  As Variant"""
        PRINT "    .AX ""Private mintDefItm                  As Integer"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize objects"""
        PRINT "    .AX ""    mvrnFldLst = Array(mcFldNamNUM, mcFldNamNAM, mcFldNamTTL)"""
        PRINT "    .AX ""    Call LodStdLst"""
        PRINT "    .AX ""    Call LodTplLst"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Class_Terminate()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Default list item"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Property Get DefaultItem() As Integer"""
        PRINT "    .AX ""    DefaultItem = mintDefItm"""
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Activate the Registration Recordset"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Activate(Optional ByVal blnTPL As Boolean = False)"""
        PRINT "    .AX ""    ' Set active recordset"""
        PRINT "    .AX ""    If blnTPL Then"""
        PRINT "    .AX ""        Set mrstCMD = mrstTPL.Clone"""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        Set mrstCMD = mrstSTD.Clone"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Get the Registration RowSource List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Function GetCmdLst( _"""
        PRINT "    .AX ""    ByVal vrnLST As Variant, _"""
        PRINT "    .AX ""    ByVal strDEF As String, _"""
        PRINT "    .AX ""    ByVal blnBLK As Boolean _"""
        PRINT "    .AX "") As String"""
        PRINT "    .AX ""    ' Declare working constants"""
        PRINT "    .AX ""    Const pDLM As String = """";"""""""
        PRINT "    .AX ""    ' Declare working variables"""
        PRINT "    .AX ""    Dim strNAM As String"""
        PRINT "    .AX ""    Dim strTTL As String"""
        PRINT "    .AX ""    Dim strSRC As String"""
        PRINT "    .AX ""    Dim strDLM As String"""
        PRINT "    .AX ""    Dim intIND As Integer"""
        PRINT "    .AX ""    Dim vrnITM As Variant"""
        PRINT "    .AX ""    ' Reset default selection"""
        PRINT "    .AX ""    mintDefItm = 0"""
        PRINT "    .AX ""    ' Prepend blank selection"""
        PRINT "    .AX ""    If blnBLK Then"""
        PRINT "    .AX ""        strSRC = """";0"""": strDLM = pDLM"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    ' Lookup the report values"""
        PRINT "    .AX ""    For Each vrnITM In vrnLST"""
        PRINT "    .AX ""        strNAM = GetCmdNam(vrnITM)"""
        PRINT "    .AX ""        strTTL = GetCmdTtl(vrnITM)"""
        PRINT "    .AX ""        If Len(strNAM) > 0 Then"""
        PRINT "    .AX ""            intIND = intIND+1"""
        PRINT "    .AX ""            strSRC = strSRC & strDLM & strTTL & pDLM & intIND: strDLM = pDLM"""
        PRINT "    .AX ""            If strNAM = strDEF Then"""
        PRINT "    .AX ""                mintDefItm = intIND"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    Next"""
        PRINT "    .AX ""    ' Return results"""
        PRINT "    .AX ""    GetCmdLst = strSRC"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Name"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetCmdNam(ByVal strCmdNum As String, Optional ByVal strDefNam As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strCmdNum = Right$(""""0000"""" & strCmdNum, 4)"""
        PRINT "    .AX ""    strSQL = """"CmdNum = '"""" & strCmdNum & """"'"""""""
        PRINT "    .AX ""    GetCmdNam = IIf(Len(strDefNam) > 0, strDefNam, """"Command """" & strCmdNum & """" not found"""")"""
        PRINT "    .AX ""    With mrstCMD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                GetCmdNam = Trim$(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Title"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetCmdTtl(ByVal strCmdNum As String, Optional ByVal strDefTtl As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strCmdNum = Right$(""""0000"""" & strCmdNum, 4)"""
        PRINT "    .AX ""    strSQL = """"CmdNum = '"""" & strCmdNum & """"'"""""""
        PRINT "    .AX ""    GetCmdTtl = IIf(Len(strDefTtl) > 0, strDefTtl, """"Command """" & strCmdNum & """" not found"""")"""
        PRINT "    .AX ""    With mrstCMD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                GetCmdTtl = Trim$(.Fields(mcFldIdxTTL))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Number"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetCmdNum(ByVal strCmdNam As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"CmdNam = '"""" & strCmdNam & """"'"""""""
        PRINT "    .AX ""    GetCmdNum = """"0000"""""""
        PRINT "    .AX ""    With mrstCMD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                GetCmdNum = Trim$(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Template Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Init_RstTPL()"""
        PRINT "    .AX ""    ' Initialize new report list"""
        PRINT "    .AX ""    Set mrstTPL = New ADODB.Recordset"""
        PRINT "    .AX ""    ' Create recordset fields"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Initialize the recordset"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        .Open: .Sort = mcFldNamNUM & """" ASC"""""""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasTplNam(ByVal strCmdNam As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"CmdNam = '"""" & strCmdNam & """"'"""""""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasTplNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtTplNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtTplNum = Right$(""""0000"""" & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub AddTplItm(ByVal strCmdNam As String, ByVal strCmdTtl As String)"""
        PRINT "    .AX ""    If Not HasTplNam(strCmdNam) Then"""
        PRINT "    .AX ""        With mrstTPL"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array(NxtTplNum, Trim$(strCmdNam), Trim$(strCmdTtl))"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub DbgTplLst()"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                Debug.Print .Fields(mcFldIdxNUM) & """"|"""" & .Fields(mcFldIdxNAM) & """"|"""" & .Fields(mcFldIdxTTL): .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LodTplLst()"""
        PRINT "    .AX ""    Call Init_RstTPL"""
        PRINT "    .AX ""    Call AddTplItm(""""ProcessName_01"""", """"Process 0001"""")  ' 0001"""
        PRINT "    .AX ""    Call AddTplItm(""""ProcessName_02"""", """"Process 0002"""")  ' 0002"""
        PRINT "    .AX ""    Call AddTplItm(""""ProcessName_03"""", """"Process 0003"""")  ' 0003"""
        PRINT "    .AX ""    If False Then Call DbgTplLst  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Standard Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Init_RstSTD()"""
        PRINT "    .AX ""    ' Initialize new report list"""
        PRINT "    .AX ""    Set mrstSTD = New ADODB.Recordset"""
        PRINT "    .AX ""    ' Create recordset fields"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Initialize the recordset"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        .Open: .Sort = mcFldNamNUM & """" ASC"""""""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasStdNam(ByVal strCmdNam As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"CmdNam = '"""" & strCmdNam & """"'"""""""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasStdNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtStdNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtStdNum = Right$(""""0000"""" & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub AddStdItm(ByVal strCmdNam As String, ByVal strCmdTtl As String)"""
        PRINT "    .AX ""    If Not HasStdNam(strCmdNam) Then"""
        PRINT "    .AX ""        With mrstSTD"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array(NxtStdNum, Trim$(strCmdNam), Trim$(strCmdTtl))"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub DbgStdLst()"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                Debug.Print .Fields(mcFldIdxNUM) & """"|"""" & .Fields(mcFldIdxNAM) & """"|"""" & .Fields(mcFldIdxTTL): .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LodStdLst()"""
        PRINT "    .AX ""    Call Init_RstSTD"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX """""
        PRINT "    Call GenCmd_CmdLst(blnLST)"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    If False Then Call DbgStdLst  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenCmd_RunCmd"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenCmd_RunCmd( _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenCmd_RunCmd"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST"
        PRINT "    Call Init_PrpRst"
        PRINT "    Call Init_CmdRst(mcIncRegNOP)"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnFldFmt       As Variant"
        PRINT "    Dim vrnValLst       As Variant"
        PRINT ""
        PRINT "    ' Declare Property variables"
        PRINT "    Dim strPrpNam       As String"
        PRINT "    Dim strPrpTyp       As String"
        PRINT "    Dim strPrpTbl       As String"
        PRINT "    Dim strPrpVar       As String"
        PRINT ""
        PRINT "    ' Declare Command variables"
        PRINT "    Dim strCmdNam       As String"
        PRINT "    Dim intMaxNam       As Integer"
        PRINT "    Dim strRunNam       As String"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(""clsRunCMD"", ""Run MSAccess Commands"", mcRunCmdRGN, """", ""cmd"", wtx)"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Form/Report Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrOpenText                As String"""
        PRINT "    .AX ""Private mstrOpenName                As String"""
        PRINT "    .AX ""Private mintOpenView                As Integer"""
        PRINT "    .AX ""Private mstrFiltName                As String"""
        PRINT "    .AX ""Private mstrWhereTxt                As String"""
        PRINT "    .AX ""Private mintDataMode                As Integer"""
        PRINT "    .AX ""Private mintWindMode                As Integer"""
        PRINT "    .AX ""Private mstrOpenArgs                As String"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private whr                         As clsRunWHR"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcVbaTypNON           As Long = 0                            ' non - No type"""
        PRINT "    .AX ""Private Const mcVbaTypBYT           As Long = 1                            ' byt - Byte"""
        PRINT "    .AX ""Private Const mcVbaTypBLN           As Long = 2                            ' bln - Boolean"""
        PRINT "    .AX ""Private Const mcVbaTypINT           As Long = 3                            ' int - Integer"""
        PRINT "    .AX ""Private Const mcVbaTypLNG           As Long = 4                            ' lng - Long"""
        PRINT "    .AX ""Private Const mcVbaTypSGL           As Long = 5                            ' sgl - Single"""
        PRINT "    .AX ""Private Const mcVbaTypDBL           As Long = 6                            ' dbl - Double"""
        PRINT "    .AX ""Private Const mcVbaTypCUR           As Long = 7                            ' cur - Currency"""
        PRINT "    .AX ""Private Const mcVbaTypDEC           As Long = 8                            ' dec - Decimal"""
        PRINT "    .AX ""Private Const mcVbaTypDAT           As Long = 9                            ' dat - Date"""
        PRINT "    .AX ""Private Const mcVbaTypSTR           As Long = 10                           ' str - String"""
        PRINT "    .AX ""Private Const mcVbaTypVRN           As Long = 11                           ' vrn - Variant"""
        PRINT "    .AX ""Private Const mcVbaTypOBJ           As Long = 12                           ' obj - Object"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcNoAlias             As String = """"""""                         ' Empty tablename excludes alias"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""' Run vbaGen_IT.Gen_CMD to generate current module code"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""'    blnLST = mcUseStdList"""
        PRINT "    .AX ""'    intTYP = mcModRunCmd"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""' Setup vbaGen_IT.GenPrp_RunCrt property list"""
        PRINT "    .AX ""' Setup vbaGen_IT.GenCmd_SetPrp criteria lists"""
        PRINT "    .AX ""' Setup vbaGen_IT.GenCmd_AsnPrp assignment lists"""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Criteria Variables"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTyp = ""VRN"""
        PRINT "            strPrpNam = mrstPRP.Fields(mcPrpNamNAM)"
        PRINT "            strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        strPrpTyp = ""VRN"""
        PRINT "        strPrpNam = ""ClmName"""
        PRINT "        strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        mrstPRP.MoveNext"
        PRINT "    End If"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    Set whr = New clsRunWHR"""
        PRINT "    .AX ""    Call Init_Vars"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Class_Terminate()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Criteria Initialization"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Init_Vars()"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTyp = ""VRN"""
        PRINT "            strPrpNam = mrstPRP.Fields(mcPrpNamNAM)"
        PRINT "            strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Int(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        strPrpTyp = ""VRN"""
        PRINT "        strPrpNam = ""ClmName"""
        PRINT "        strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        mrstPRP.MoveNext"
        PRINT "    End If"
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Criteria Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTyp = ""VRN"""
        PRINT "            strPrpNam = mrstPRP.Fields(mcPrpNamNAM)"
        PRINT "            strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        strPrpTyp = ""VRN"""
        PRINT "        strPrpNam = ""ClmName"""
        PRINT "        strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        mrstPRP.MoveNext"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Assign WHERE Criteria Phrases"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTyp = mrstPRP.Fields(mcPrpNamTYP)"
        PRINT "            strPrpNam = mrstPRP.Fields(mcPrpNamNAM)"
        PRINT "            strPrpTbl = mrstPRP.Fields(mcPrpNamTBL)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Spw(strPrpTyp, strPrpNam, strPrpTbl)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        strPrpTyp = ""STR"""
        PRINT "        strPrpNam = ""ClmName"""
        PRINT "        strPrpTbl = ""TblName"""
        PRINT "        strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Spw(strPrpTyp, strPrpNam, strPrpTbl)"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    mrstCMD.Filter = """""
        PRINT "    mrstCMD.Sort = ""CmdNam"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstCMD.BOF And mrstCMD.EOF) Then"
        PRINT "        mrstCMD.MoveFirst"
        PRINT "        Do While Not mrstCMD.EOF"
        PRINT "            strCmdNam = mrstCMD.Fields(""CmdNam"")"
        PRINT "            strRunNam = ""Process_"" & GenRpt_Clean(strCmdNam)"
        PRINT "            .AX """""
        PRINT "            .AX """""
        PRINT "            .AX ""'###################################################################################################"""
        PRINT "            .AX ""' Run Command:  "" & strCmdNam"
        PRINT "            .AX ""'###################################################################################################"""
        PRINT "            .AX ""Public Sub "" & strRunNam & ""()"""
        PRINT "            .AX ""    Const pcMsgTtl = mcModNam & """"."" & strRunNam & """""""""
        PRINT "            .AX ""    'On Error GoTo Error_Handler"""
        PRINT "            .AX """""
        PRINT "            .AX ""    ' Build the WHERE statement"""
        PRINT "            .AX ""    Dim strWHR As String"""
        PRINT "            Call GenCmd_SetPrp(strCmdNam, wtx)"
        PRINT "            .AX ""    strWHR = whr.WhrStm"""
        PRINT "            .AX """""
        PRINT "            Call GenCmd_CusLog(strCmdNam, wtx)"
        PRINT "            .AX """""
        PRINT "            .AX ""Exit_Procedure:"""
        PRINT "            .AX ""    Exit Sub"""
        PRINT "            .AX ""Error_Handler:"""
        PRINT "            .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """"  """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "            .AX ""    Resume Exit_Procedure"""
        PRINT "            .AX ""End Sub"""
        PRINT "            .AX ""'==================================================================================================="""
        PRINT "            mrstCMD.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        .AX """""
        PRINT "        .AX """""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Run Command:  Command_Name"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""Public Sub Process_Command_Name()"""
        PRINT "        .AX ""    Const pcMsgTtl = mcModNam & """".Process_Command_Name"""""""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Build the WHERE statement"""
        PRINT "        .AX ""    Dim strWHR As String"""
        PRINT "        .AX ""    Call Set_ClmName"""
        PRINT "        .AX ""    strWHR = whr.WhrStm"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Command logic"""
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """"  """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenCmd_FrmCmd"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenCmd_FrmCmd( _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strDEF As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenCmd_FrmCmd"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST"
        PRINT ""
        PRINT "    ' Declare working objects"
        PRINT "    Dim obj As AccessObject"
        PRINT ""
        PRINT "    ' Initialize report registration"
        PRINT "    Set reg = New clsRegCMD"
        PRINT "    Call reg.Activate(mblnUseLst)"
        PRINT ""
        PRINT "    ' Initialize form property list"
        PRINT "    Dim vrnFrmPrp As Variant"
        PRINT "    vrnFrmPrp = GenPrp_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize form command list"
        PRINT "    Dim vrnFrmCmd As Variant"
        PRINT "    vrnFrmCmd = GenCmd_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize working command list"
        PRINT "    Call Init_CmdRst(mcIncRegNOP)"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnITM          As Variant"
        PRINT "    Dim intCNT          As Integer"
        PRINT "    Dim intIDX          As Integer"
        PRINT "    Dim strIDX          As String"
        PRINT "    Dim strCMA          As String"
        PRINT ""
        PRINT "    ' Declare Command variables"
        PRINT "    Dim strCmdNum       As String"
        PRINT "    Dim strCmdNam       As String"
        PRINT "    Dim strCmdTtl       As String"
        PRINT "    Dim strRunNam       As String"
        PRINT "    Dim blnTplNam       As Boolean"
        PRINT "    Dim blnIsForm       As Boolean"
        PRINT ""
        PRINT "    ' How many commands in the list?"
        PRINT "    intCNT = UBound(vrnFrmCmd)+1"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, """", """", """", wtx)"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Form/Report Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrOpenText                As String"""
        PRINT "    .AX ""Private mstrOpenName                As String"""
        PRINT "    .AX ""Private mintOpenView                As Integer"""
        PRINT "    .AX ""Private mstrFiltName                As String"""
        PRINT "    .AX ""Private mstrWhereTxt                As String"""
        PRINT "    .AX ""Private mintDataMode                As Integer"""
        PRINT "    .AX ""Private mintWindMode                As Integer"""
        PRINT "    .AX ""Private mstrOpenArgs                As String"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' RunSql Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcRunSqlENB           As Boolean = True        ' True = Always enabled"""
        PRINT "    .AX ""Private Const mcClrSqlENB           As Boolean = False       ' True = Always enabled"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' List Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcEmptySql            As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcAddBlank            As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcNoBlank             As Boolean = False       ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcUseTplList          As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcUseStdList          As Boolean = False       ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Command Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrRowSrcCMD               As String                ' """
        PRINT "    .AX ""Private mintRowDefCMD               As Integer               ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Form Properties/Methods"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is opened"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Open(Cancel As Integer)"""
        PRINT "    .AX ""    ' Display form full screen"""
        PRINT "    .AX ""    DoCmd.Maximize"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is loaded"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Load()"""
        PRINT "    .AX ""    ' Initialize:  Form Properties"""
        PRINT "    .AX ""    Call Form_Setup"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when record becomes current"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' BeforeUpdate(frm) => AfterUpdate(frm) => Exit(ctl) => LostFocus(ctl) => Current(frm)"""
        PRINT "    .AX ""Private Sub Form_Current()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is unloaded"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Unload(Cancel As Integer)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is closed"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Close()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Redisplay underlying data values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Form_Refresh()"""
        PRINT "    .AX ""    Me.Refresh"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Form_Requery()"""
        PRINT "    .AX ""    Me.Requery"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Form Commands"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub cmdRefreshForm_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdAddNewRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdSaveRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdUndoRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdDeleteRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdCloseForm_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".cmdCloseForm_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Close the current form"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdClose"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize form properties and mechanisms"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Form_Setup()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".Form_Setup"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup form display values"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.Caption = mcModTtl"""
        PRINT "    .AX ""    Me.lblTitle01.Caption = mcModTtl"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup form process values"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.AllowFilters = True"""
        PRINT "    .AX ""    Me.AllowAdditions = True"""
        PRINT "    .AX ""    Me.AllowEdits = True"""
        PRINT "    .AX ""    Me.AllowDeletions = True"""
        PRINT "    .AX ""    Me.DataEntry = False"""
        PRINT "    .AX ""    'e.UniqueTable = """""""""""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Command mechanisms (with defaults - mcUseStdList mcUseTplList)"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Setup_Command("""""" & strDEF & """""", "" & IIf(mblnUseLst, ""mcUseTplList"", ""mcUseStdList"") & "")"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Reset the hourglass"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call DoCmd.Hourglass(False)"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Controls"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Controls_Setup"""
        PRINT "    .AX """""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Controls"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Controls_Setup()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Reset(Optional ByVal blnRunSQL As Boolean = False)"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = (blnRunSQL Or mcRunSqlENB)"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = ( _"""
        PRINT "    .AX ""           mcClrSqlENB _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Defaults()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Requery()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Clear()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Build SQL Statements"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub tglFndSQL_AfterUpdate()"""
        PRINT "    .AX ""'    Const pcMsgTtl = mcModNam & """".tglFndSQL_AfterUpdate"""""""
        PRINT "    .AX ""'    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""'    ' Set the toggle state"""
        PRINT "    .AX ""'    Me.tglFndSQL = True"""
        PRINT "    .AX ""'    Me.tglFndSQL.Enabled = True"""
        PRINT "    .AX ""'    ' Assign the SQL statement"""
        PRINT "    .AX ""'    Call ExecSQL"""
        PRINT "    .AX ""'Exit_Procedure:"""
        PRINT "    .AX ""'    ' Reset the toggle state"""
        PRINT "    .AX ""'    Me.tglFndSQL = False"""
        PRINT "    .AX ""'    Me.tglFndSQL.Enabled = mcFndSqlENB"""
        PRINT "    .AX ""'    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""'    Exit Sub"""
        PRINT "    .AX ""'Error_Handler:"""
        PRINT "    .AX ""'    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""'    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglRunSQL_AfterUpdate()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".tglRunSQL_AfterUpdate"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglRunSQL = True"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = True"""
        PRINT "    .AX ""    ' Assign the SQL statement"""
        PRINT "    .AX ""    Call ExecSQL"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglRunSQL = False"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = mcRunSqlENB"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglClrSQL_AfterUpdate()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".tglClrSQL_AfterUpdate"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglClrSQL = True"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = True"""
        PRINT "    .AX ""    ' Assign the SQL statement"""
        PRINT "    .AX ""    'Call SrtBySyncCap(mcClearSBY)"""
        PRINT "    .AX ""    'Call Vars_Defaults"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglClrSQL = False"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = mcClrSqlENB"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglWrtSQL_AfterUpdate()"""
        PRINT "    .AX ""'    Const pcMsgTtl = mcModNam & """".tglWrtSQL_AfterUpdate"""""""
        PRINT "    .AX ""'    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""'    ' Set the toggle state"""
        PRINT "    .AX ""'    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""'    ' Assign flags"""
        PRINT "    .AX ""'    mblnWrtSQL = Me.tglWrtSQL"""
        PRINT "    .AX ""'    RunRST.WrtSQL = mblnWrtSQL"""
        PRINT "    .AX ""'Exit_Procedure:"""
        PRINT "    .AX ""'    Exit Sub"""
        PRINT "    .AX ""'Error_Handler:"""
        PRINT "    .AX ""'    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""'    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SQL Criteria"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub AssignSQL()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".AssignSQL"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Assign current criteria"""
        PRINT "    .AX ""    With RunSQL"""
        PRINT "    .AX ""        ' System"""
        PRINT "    .AX ""        '.WrtSQL = mblnWrtSQL"""
        PRINT "    .AX ""        ' Criteria"""
        PRINT "    For Each vrnITM In vrnFrmPrp"
        PRINT "    .AX ""        ."" & vrnITM(mcPrpIdxNAM) & "" = "" & IIf(InStr(vrnITM(mcPrpIdxCTL), ""."") = 0, ""Me."", """") & vrnITM(mcPrpIdxCTL)"
        PRINT "    Next"
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub ExecSQL(Optional ByVal blnEmpty As Boolean)"""
        PRINT "    .AX ""    Call AssignSQL"""
        PRINT "    .AX ""    'Me.RecordSource = RunSQL.Empty_Text(blnEmpty)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize Control RowSource"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Records"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub SaveIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdSaveRecord"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub ReadIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""    Me.Refresh      ' Read form source values"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LoadIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""    Call Me.Requery ' Requery form source records"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Logical Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Function CanCMD() As Boolean"""
        PRINT "    .AX ""    CanCMD = (True _"""
        PRINT "    .AX ""        And (Me.Recordset.RecordCount > 0) _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function CanRPT() As Boolean"""
        PRINT "    .AX ""    CanRPT = (True _"""
        PRINT "    .AX ""        And (Me.Recordset.RecordCount > 0) _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SrtBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage GrpBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage FndOn Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Command Mechanism"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Setup_Command(ByVal strDefault As String, ByVal blnUseList As boolean)"""
        PRINT "    .AX ""    Dim RegCMD    As clsRegCMD"""
        PRINT "    .AX ""    Set RegCMD = New clsRegCMD"""
        PRINT "    .AX ""    Dim mvrnCmdLst As Variant"""
        PRINT "    .AX ""    With RegCMD"""
        PRINT "    .AX ""        Call .Activate(blnUseList)  ' blnUseList mcUseStdList mcUseTplList"""
        PRINT "    .AX ""        mvrnCmdLst = Array( _"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmCmd: intIDX = intIDX+1: strCMA = IIf(intIDX < intCNT, "","", """")"
        PRINT "        strCmdNam = CStr(vrnITM)"
        PRINT "        .AX ""            .GetCmdNum("""""" & strCmdNam & """""")"" & strCMA & "" _"""
        PRINT "    Next"
        PRINT "    .AX ""        )"""
        PRINT "    .AX ""        mstrRowSrcCMD = .GetCmdLst(mvrnCmdLst, strDefault, mcNoBlank)"""
        PRINT "    .AX ""        mintRowDefCMD = .DefaultItem"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    Set RegCMD = Nothing"""
        PRINT "    .AX ""    Me.cboCmdLst.RowSource = mstrRowSrcCMD"""
        PRINT "    .AX ""    Call Reset_CommandList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_CommandList()"""
        PRINT "    .AX ""    If CanCMD And Len(mstrRowSrcCMD) > 0 Then"""
        PRINT "    .AX ""        ' Set command list value to default"""
        PRINT "    .AX ""        Me.cboCmdLst.Value = mintRowDefCMD"""
        PRINT "    .AX ""        ' Reset command buttons"""
        PRINT "    .AX ""        Call Reset_CommandButtons"""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        ' Disable command mechanism"""
        PRINT "    .AX ""        Call Disable_CommandButtons"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_CommandButtons()"""
        PRINT "    .AX ""    ' Reset command buttons"""
        PRINT "    .AX ""    Me.cboCmdLst.Enabled = True"""
        PRINT "    .AX ""    Me.tglRunCmd.Enabled = (Me.cboCmdLst.Value > 0)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Disable_CommandButtons()"""
        PRINT "    .AX ""    ' Disable command mechanism"""
        PRINT "    .AX ""    Me.cboCmdLst.Enabled = False"""
        PRINT "    .AX ""    Me.tglRunCmd.Enabled = False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboCmdLst_AfterUpdate()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset command buttons"""
        PRINT "    .AX ""    Call Reset_CommandButtons"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboCmdLst_DblClick(Cancel As Integer)"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset command list value"""
        PRINT "    .AX ""    Call Reset_CommandList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglRunCmd_Click()"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglRunCmd.Value = True"""
        PRINT "    .AX ""    ' Print the command"""
        PRINT "    .AX ""    Call Run_Command(acViewNormal)"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglRunCmd.Value = False"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Set_Command_Criteria(ByVal strCMD As String, ByRef cmd As clsRunCMD)"""
        PRINT "    .AX ""    ' Set command criteria"""
        PRINT "    .AX ""    Select Case strCMD"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmCmd: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strCmdTtl = reg.GetCmdTtl(reg.GetCmdNum(CStr(vrnITM)))"
        PRINT "        .AX ""        'Case """""" & strIDX & """"""    ' "" & strCmdTtl"
        PRINT "    Next"
        PRINT "    .AX ""        Case Else"""
        PRINT "    For Each vrnITM In vrnFrmPrp"
        PRINT "    .AX ""            cmd."" & vrnITM(mcPrpIdxNAM) & "" = "" & IIf(InStr(vrnITM(mcPrpIdxCTL), ""."") = 0, ""Me."", """") & vrnITM(mcPrpIdxCTL)"
        PRINT "    Next"
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Run_Command(ByVal lngViewType As Long)  ' acViewPreview acViewNormal"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".Run_Command"""""""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Get the command number"""
        PRINT "    .AX ""    Dim strCMD As String: strCMD = Format$(Me.cboCmdLst.Value, """"00"""")"""
        PRINT "    .AX ""    ' Call the specified command"""
        PRINT "    .AX ""    Select Case strCMD"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmCmd: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strCmdTtl = reg.GetCmdTtl(reg.GetCmdNum(CStr(vrnITM)))"
        PRINT "        .AX ""        Case """""" & strIDX & """""": Call Run_Command_"" & strIDX & ""(lngViewType)    ' "" & strCmdTtl"
        PRINT "    Next"
        PRINT "    .AX ""        Case Else"""
        PRINT "    .AX ""            MsgBox """"This Command ("""" & strCMD & """") is not registered."""", vbInformation, pcMsgTtl"""
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmCmd: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strCmdNum = reg.GetCmdNum(CStr(vrnITM))"
        PRINT "        strCmdTtl = reg.GetCmdTtl(strCmdNum)"
        PRINT "        strCmdNam = reg.GetCmdNam(strCmdNum)"
        PRINT "        strRunNam = mcCmdTxtPFX & GenRpt_Clean(strCmdNam)"
        PRINT "        Select Case strCmdNam"
        PRINT "            Case mcCmdTpl001: blnTplNam = True"
        PRINT "            Case mcCmdTpl002: blnTplNam = True"
        PRINT "            Case mcCmdTpl003: blnTplNam = True"
        PRINT "            Case Else:        blnTplNam = False"
        PRINT "        End Select"
        PRINT "        blnIsForm = False: For Each obj In Application.CurrentProject.AllForms"
        PRINT "            blnIsForm = (obj.Name = strCmdNam Or blnIsForm)"
        PRINT "        Next"
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        .AX ""' Run Command "" & strIDX & "":  "" & strCmdTtl"
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        .AX ""Private Sub Run_Command_"" & strIDX & ""(ByVal lngViewType As Long)"""
        PRINT "        .AX ""    Const pcCmdNum = """""" & strIDX & """""": Const pcMsgTtl = mcModNam & """".Run_Command_"""" & pcCmdNum"""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Display hourglass"""
        PRINT "        .AX ""    Call DoCmd.Hourglass(True)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Hide the cursor"""
        PRINT "        .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Deactivate this procedure"""
        PRINT "        If blnTplNam Then"
        PRINT "        .AX ""    If True Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This command is not active."""", vbInformation, pcMsgTtl"""
        PRINT "        .AX ""        GoTo Exit_Procedure"""
        PRINT "        .AX ""    End If"""
        PRINT "        Else"
        PRINT "        .AX ""    If False Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This command is not active."""", vbInformation, pcMsgTtl"""
        PRINT "        .AX ""        GoTo Exit_Procedure"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Make sure there is a current active record"""
        PRINT "        .AX ""    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This command requires an active record."""", vbInformation, mcModTtl"""
        PRINT "        .AX ""        Exit Sub"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        If blnIsForm Then"
        PRINT "        .AX ""    ' Assign parameters"""
        PRINT "        .AX ""    mstrOpenText = """""" & strCmdNam & """""""""
        PRINT "        .AX ""    mstrOpenName = mstrOpenText"""
        PRINT "        .AX ""    mstrFiltName = """""""""""
        PRINT "        .AX ""    mstrWhereTxt = """""""""""
        PRINT "        .AX ""    mstrOpenArgs = """""""""""
        PRINT "        .AX ""    mintOpenView = acNormal"""
        PRINT "        .AX ""    mintDataMode = acFormPropertySettings"""
        PRINT "        .AX ""    mintWindMode = acWindowNormal"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Open the form ignoring any error conditions"""
        PRINT "        .AX ""    If Len(mstrOpenName) > 0 Then"""
        PRINT "        .AX ""        On Error Resume Next"""
        PRINT "        .AX ""        DoCmd.OpenForm mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt, mintDataMode, mintWindMode, mstrOpenArgs"""
        PRINT "        .AX ""        'On Error GoTo Error_Handler"""
        PRINT "        .AX ""    End If"""
        PRINT "        Else"
        PRINT "        .AX ""    ' Initialize the command object"""
        PRINT "        .AX ""    Dim cmd    As clsRunCMD"""
        PRINT "        .AX ""    Set cmd = New clsRunCMD"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Save current values"""
        PRINT "        .AX ""    If Me.Dirty Then Call SaveIt(0)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Set command criteria"""
        PRINT "        .AX ""    Call Set_Command_Criteria(pcCmdNum, cmd)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Run the command"""
        PRINT "        .AX ""    Call cmd."" & strRunNam & """""
        PRINT "        End If"
        PRINT "        End If"
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Call DoCmd.Hourglass(False)"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "    Next"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build run properties list"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_PrpRst()"
        PRINT "    Call GenPrp_RunCrt(mrstPRP)  ' vbaGen_IT"
        PRINT "    mrstPRP.Filter = """""
        PRINT "    mrstPRP.Sort = mcPrpNamNAM"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build current command list"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_CmdRst(Optional ByVal blnNonReg As Boolean = True)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Init_CmdRst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize report registration"
        PRINT "    Set reg = New clsRegCMD"
        PRINT "    Call reg.Activate(mblnUseLst)"
        PRINT ""
        PRINT "    ' Declare working objects"
        PRINT "    Dim obj As AccessObject"
        PRINT ""
        PRINT "    ' Initialize new command list"
        PRINT "    Set mrstCMD = New ADODB.Recordset"
        PRINT ""
        PRINT "    ' Create recordset fields"
        PRINT "    mvrnFldFmt = Array( _"
        PRINT "        mcCmdNamNUM, _"
        PRINT "        mcCmdNamNAM, _"
        PRINT "        mcCmdNamTTL _"
        PRINT "    )"
        PRINT "    With mrstCMD"
        PRINT "        Call .Fields.Append(mcCmdNamNUM, adVarChar, 4)"
        PRINT "        Call .Fields.Append(mcCmdNamNAM, adVarChar, 200)"
        PRINT "        Call .Fields.Append(mcCmdNamTTL, adVarChar, 200)"
        PRINT "    End With"
        PRINT ""
        PRINT "    ' Setup the recordset"
        PRINT "    With mrstCMD"
        PRINT "        .Open: .Sort = mcCmdNamNUM & "" ASC"""
        PRINT "    End With"
        PRINT ""
        PRINT "    ' Declare Command variables"
        PRINT "    Dim strCmdNam       As String"
        PRINT "    Dim strCmdTtl       As String"
        PRINT ""
        PRINT "    ' Initialize array index values"
        PRINT "    Const pcCmdIdxNAM  As Integer = 0"
        PRINT "    Const pcCmdIdxTTL  As Integer = 1"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnCMD         As Variant"
        PRINT ""
        PRINT "    ' Add registered commands"
        PRINT "    For Each vrnCMD In GenCmd_RegNam"
        PRINT "        strCmdNam = vrnCMD(pcCmdIdxNAM)"
        PRINT "        strCmdTtl = vrnCMD(pcCmdIdxTTL)"
        PRINT "        If reg.GetCmdNum(strCmdNam) <> ""0000"" Then"
        PRINT "            Call AddCmdItm(strCmdNam, strCmdTtl)"
        PRINT "        End If"
        PRINT "    Next"
        PRINT ""
        PRINT "    ' Add non-registered commands"
        PRINT "    If blnNonReg Then"
        PRINT "        For Each vrnCMD In GenCmd_RegNam"
        PRINT "            strCmdNam = vrnCMD(pcCmdIdxNAM)"
        PRINT "            strCmdTtl = vrnCMD(pcCmdIdxTTL)"
        PRINT "            Call AddCmdItm(strCmdNam, strCmdTtl)"
        PRINT "        Next"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function FmtCmdTtl(ByVal strTXT As String) As String"
        PRINT "    FmtCmdTtl = Replace$(Replace$(strTXT, ""cmd_"", """"), ""_"", "" "")"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function NxtCmdNum() As String"
        PRINT "    Dim intNUM As Integer"
        PRINT "    With mrstCMD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveLast"
        PRINT "            intNUM = .Fields(mcCmdIdxNUM)"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "    intNUM = intNUM+1"
        PRINT "    NxtCmdNum = Right$(""0000"" & intNUM, 4)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasCmdNam(ByVal strCmdNam As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""CmdNam = '"" & strCmdNam & ""'"""
        PRINT "    With mrstCMD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasCmdNam = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddCmdItm(ByVal strCmdNam As String, ByVal strCmdTtl As String)"
        PRINT "    If Not HasCmdNam(strCmdNam) Then"
        PRINT "        With mrstCMD"
        PRINT "            .AddNew mvrnFldFmt, Array(NxtCmdNum, strCmdNam, strCmdTtl)"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetNumLen() As Integer"
        PRINT "    With mrstCMD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                If Len(.Fields(mcCmdIdxNUM)) > GetNumLen Then GetNumLen = Len(.Fields(mcCmdIdxNUM))"
        PRINT "            .MoveNext: Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetNamLen() As Integer"
        PRINT "   With mrstCMD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                If Len(.Fields(mcCmdIdxNAM)) > GetNamLen Then GetNamLen = Len(.Fields(mcCmdIdxNAM))"
        PRINT "            .MoveNext: Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetTtlLen() As Integer"
        PRINT "    With mrstCMD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                If Len(.Fields(mcCmdIdxTTL)) > GetTtlLen Then GetTtlLen = Len(.Fields(mcCmdIdxTTL))"
        PRINT "            .MoveNext: Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub LstCmdItm()"
        PRINT "    Dim strNUM As String"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTTL As String"
        PRINT "    mrstCMD.Filter = """""
        PRINT "    mrstCMD.Sort = mcCmdNamNUM"
        PRINT "    If Not (mrstCMD.BOF And mrstCMD.EOF) Then mrstCMD.MoveFirst"
        PRINT "    Do While Not mrstCMD.EOF"
        PRINT "        strNUM = mrstCMD.Fields(mcCmdIdxNUM)"
        PRINT "        strNAM = mrstCMD.Fields(mcCmdIdxNAM)"
        PRINT "        strTTL = mrstCMD.Fields(mcCmdIdxTTL)"
        PRINT "        wtx.AX ""CmdNam="" & strNUM & "":"" & strNAM & "":"" & strTTL"
        PRINT "        mrstCMD.MoveNext"
        PRINT "    Loop"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENRPT = Build module:  vbaGenRPT
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENRPT
        EXEC ut_zzVBX GENRPT
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENRPT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As New clsUtlWTX"
        PRINT "Private reg                         As New clsRegRPT"
        PRINT "'***************************************************************************************************"
        PRINT "Private mrstRPT                     As ADODB.Recordset"
        PRINT "Private mrstPRP                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIncRegYUP           As Boolean = True"
        PRINT "Private Const mcIncRegNOP           As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcUseTplList          As Boolean = True"
        PRINT "Private Const mcUseStdList          As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModRptLst           As Integer = 1"
        PRINT "Private Const mcModRegRpt           As Integer = 2"
        PRINT "Private Const mcModRunRpt           As Integer = 3"
        PRINT "Private Const mcModFrmRpt           As Integer = 4"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptPrmREG           As String = ""REGRPT"""
        PRINT "Private Const mcRptPrmRUN           As String = ""RUNRPT"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpIdxTYP           As Integer = 0"
        PRINT "Private Const mcPrpIdxNAM           As Integer = 1"
        PRINT "Private Const mcPrpIdxTBL           As Integer = 2"
        PRINT "Private Const mcPrpIdxCTL           As Integer = 3"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpNamTYP           As String = ""PrpTyp"""
        PRINT "Private Const mcPrpNamNAM           As String = ""PrpNam"""
        PRINT "Private Const mcPrpNamTBL           As String = ""PrpTbl"""
        PRINT "Private Const mcPrpNamCTL           As String = ""PrpCtl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptIdxNUM           As Integer = 0"
        PRINT "Private Const mcRptIdxNAM           As Integer = 1"
        PRINT "Private Const mcRptIdxTTL           As Integer = 2"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptNamNUM           As String = ""RptNum"""
        PRINT "Private Const mcRptNamNAM           As String = ""RptNam"""
        PRINT "Private Const mcRptNamTTL           As String = ""RptTtl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptTpl001           As String = ""ReportName_01"""
        PRINT "Private Const mcRptTpl002           As String = ""ReportName_02"""
        PRINT "Private Const mcRptTpl003           As String = ""ReportName_03"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptTxtPFX           As String = ""Print_"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mSQL                        As String"
        PRINT "Private mTXT                        As String"
        PRINT "Private mTX1                        As String"
        PRINT "Private mTX2                        As String"
        PRINT "Private mTX3                        As String"
        PRINT "Private mSPC                        As String * 100"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldFmt                  As Variant"
        PRINT "Private mblnUseLst                  As Boolean"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Gen_RPT"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Gen_RPT()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Gen_RPT"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    Dim strOBJ As String    ' Form name"
        PRINT "    Dim strDSC As String    ' Form description"
        PRINT "    Dim strDEF As String    ' Default report"
        PRINT "    Dim blnLST As Boolean   ' Registration list"
        PRINT "    Dim intTYP As Integer   ' Module type"
        PRINT "    '***********************************************************************************************"
        PRINT "    blnLST = mcUseTplList   ' mcUseStdList mcUseTplList"
        PRINT "    intTYP = mcModRunRpt    ' mcModRptLst mcModRegRpt mcModRunRpt mcModFrmRpt"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    strOBJ = ""frm_FormName"": strDSC = ""Description"": strDEF = ""ReportName_01"""
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcModRptLst: Call GenRpt_RptLst(blnLST, True)                   ' Report list for clsRegRPT.LodStdLst"
        PRINT "        Case mcModRegRpt: Call GenRpt_RegRpt(blnLST)                         ' Class module code for clsRegRPT"
        PRINT "        Case mcModRunRpt: Call GenRpt_RunRpt(blnLST)                         ' Class module code for clsRunRPT"
        PRINT "        Case mcModFrmRpt: Call GenRpt_FrmRpt(strOBJ, strDSC, strDEF, blnLST) ' Form module code for report setup/execution"
        PRINT "    End Select"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" - "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenRpt_RptLst"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenRpt_RptLst( _"
        PRINT "    ByVal blnLST As Boolean, _"
        PRINT "    Optional ByVal blnWTX As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenRpt_RptLst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    Call Init_RptRst(mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Declare Report variables"
        PRINT "    Dim strRptNum       As String"
        PRINT "    Dim strRptNam       As String"
        PRINT "    Dim strRptTtl       As String"
        PRINT ""
        PRINT "    Dim intMaxNum       As Integer: intMaxNum = GetNumLen"
        PRINT "    Dim intMaxNam       As Integer: intMaxNam = GetNamLen"
        PRINT "    Dim intMaxTtl       As Integer: intMaxTtl = GetTtlLen"
        PRINT ""
        PRINT "    If blnWTX Then Call wtx.AX_Clear"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    mrstRPT.Filter = mcRptNamNUM & "" <> '0000'"""
        PRINT "    mrstRPT.Sort = mcRptNamNUM & "" ASC"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstRPT.EOF And mrstRPT.EOF) Then"
        PRINT "        mrstRPT.MoveFirst"
        PRINT "        Do While Not mrstRPT.EOF"
        PRINT "            strRptNum = mrstRPT.Fields(mcRptIdxNUM)"
        PRINT "            strRptNam = mrstRPT.Fields(mcRptIdxNAM)"
        PRINT "            strRptTtl = mrstRPT.Fields(mcRptIdxTTL)"
        PRINT "            .AX ""    Call AddStdItm("" & Left$("""""""" & strRptNam & """""","" & mSPC, intMaxNam+3) & "" "" & Left$("""""""" & strRptTtl & """""""" & mSPC, intMaxTtl+2) & "")  ' "" & strRptNum"
        PRINT "            mrstRPT.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        .AX ""    Call AddStdItm(""""ReportName_01"""", """"Report 0001"""")  ' 0001"""
        PRINT "        .AX ""    Call AddStdItm(""""ReportName_02"""", """"Report 0002"""")  ' 0002"""
        PRINT "        .AX ""    Call AddStdItm(""""ReportName_03"""", """"Report 0003"""")  ' 0003"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenRpt_RegRpt"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenRpt_RegRpt( _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenRpt_RegRpt"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST"
        PRINT "    Call Init_RptRst(mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Declare Report variables"
        PRINT "    Dim strRptNum       As String"
        PRINT "    Dim strRptNam       As String"
        PRINT "    Dim strRptTtl       As String"
        PRINT ""
        PRINT "    Dim intMaxNum       As Integer: intMaxNum = GetNumLen"
        PRINT "    Dim intMaxNam       As Integer: intMaxNam = GetNamLen"
        PRINT "    Dim intMaxTtl       As Integer: intMaxTtl = GetTtlLen"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(""clsRegRPT"", ""Register Report Information"", mcRptPrmREG, """", ""rrp"", wtx)"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mrstRPT                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstSTD                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstTPL                     As ADODB.Recordset"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldIdxNUM           As Integer = 0"""
        PRINT "    .AX ""Private Const mcFldIdxNAM           As Integer = 1"""
        PRINT "    .AX ""Private Const mcFldIdxTTL           As Integer = 2"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldNamNUM           As String = """"RptNum"""""""
        PRINT "    .AX ""Private Const mcFldNamNAM           As String = """"RptNam"""""""
        PRINT "    .AX ""Private Const mcFldNamTTL           As String = """"RptTtl"""""""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrnFldLst                  As Variant"""
        PRINT "    .AX ""Private mintDefItm                  As Integer"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize objects"""
        PRINT "    .AX ""    mvrnFldLst = Array(mcFldNamNUM, mcFldNamNAM, mcFldNamTTL)"""
        PRINT "    .AX ""    Call LodStdLst"""
        PRINT "    .AX ""    Call LodTplLst"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Class_Terminate()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Default list item"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Property Get DefaultItem() As Integer"""
        PRINT "    .AX ""    DefaultItem = mintDefItm"""
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Activate the Registration Recordset"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Activate(Optional ByVal blnTPL As Boolean = False)"""
        PRINT "    .AX ""    ' Set active recordset"""
        PRINT "    .AX ""    If blnTPL Then"""
        PRINT "    .AX ""        Set mrstRPT = mrstTPL.Clone"""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        Set mrstRPT = mrstSTD.Clone"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Get the Registration RowSource List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Function GetRptLst( _"""
        PRINT "    .AX ""    ByVal vrnLST As Variant, _"""
        PRINT "    .AX ""    ByVal strDEF As String, _"""
        PRINT "    .AX ""    ByVal blnBLK As Boolean _"""
        PRINT "    .AX "") As String"""
        PRINT "    .AX ""    ' Declare working constants"""
        PRINT "    .AX ""    Const pDLM As String = """";"""""""
        PRINT "    .AX ""    ' Declare working variables"""
        PRINT "    .AX ""    Dim strNAM As String"""
        PRINT "    .AX ""    Dim strTTL As String"""
        PRINT "    .AX ""    Dim strSRC As String"""
        PRINT "    .AX ""    Dim strDLM As String"""
        PRINT "    .AX ""    Dim intIND As Integer"""
        PRINT "    .AX ""    Dim vrnITM As Variant"""
        PRINT "    .AX ""    ' Reset default selection"""
        PRINT "    .AX ""    mintDefItm = 0"""
        PRINT "    .AX ""    ' Prepend blank selection"""
        PRINT "    .AX ""    If blnBLK Then"""
        PRINT "    .AX ""        strSRC = """";0"""": strDLM = pDLM"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    ' Lookup the report values"""
        PRINT "    .AX ""    For Each vrnITM In vrnLST"""
        PRINT "    .AX ""        strNAM = GetRptNam(vrnITM)"""
        PRINT "    .AX ""        strTTL = GetRptTtl(vrnITM)"""
        PRINT "    .AX ""        If Len(strNAM) > 0 Then"""
        PRINT "    .AX ""            intIND = intIND+1"""
        PRINT "    .AX ""            strSRC = strSRC & strDLM & strTTL & pDLM & intIND: strDLM = pDLM"""
        PRINT "    .AX ""            If strNAM = strDEF Then"""
        PRINT "    .AX ""                mintDefItm = intIND"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    Next"""
        PRINT "    .AX ""    ' Return results"""
        PRINT "    .AX ""    GetRptLst = strSRC"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Name"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetRptNam(ByVal strRptNum As String, Optional ByVal strDefNam As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strRptNum = Right$(""""0000"""" & strRptNum, 4)"""
        PRINT "    .AX ""    strSQL = """"RptNum = '"""" & strRptNum & """"'"""""""
        PRINT "    .AX ""    GetRptNam = IIf(Len(strDefNam) > 0, strDefNam, """"Report """" & strRptNum & """" not found"""")"""
        PRINT "    .AX ""    With mrstRPT"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                GetRptNam = Trim$(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Title"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetRptTtl(ByVal strRptNum As String, Optional ByVal strDefTtl As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strRptNum = Right$(""""0000"""" & strRptNum, 4)"""
        PRINT "    .AX ""    strSQL = """"RptNum = '"""" & strRptNum & """"'"""""""
        PRINT "    .AX ""    GetRptTtl = IIf(Len(strDefTtl) > 0, strDefTtl, """"Report """" & strRptNum & """" not found"""")"""
        PRINT "    .AX ""    With mrstRPT"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                GetRptTtl = Trim$(.Fields(mcFldIdxTTL))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Number"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetRptNum(ByVal strRptNam As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"RptNam = '"""" & strRptNam & """"'"""""""
        PRINT "    .AX ""    GetRptNum = """"0000"""""""
        PRINT "    .AX ""    With mrstRPT"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                GetRptNum = Trim$(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Template Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Init_RstTPL()"""
        PRINT "    .AX ""    ' Initialize new report list"""
        PRINT "    .AX ""    Set mrstTPL = New ADODB.Recordset"""
        PRINT "    .AX ""    ' Create recordset fields"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Initialize the recordset"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        .Open: .Sort = mcFldNamNUM & """" ASC"""""""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasTplNam(ByVal strRptNam As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"RptNam = '"""" & strRptNam & """"'"""""""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasTplNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtTplNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtTplNum = Right$(""""0000"""" & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub AddTplItm(ByVal strRptNam As String, ByVal strRptTtl As String)"""
        PRINT "    .AX ""    If Not HasTplNam(strRptNam) Then"""
        PRINT "    .AX ""        With mrstTPL"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array(NxtTplNum, Trim$(strRptNam), Trim$(strRptTtl))"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub DbgTplLst()"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                Debug.Print .Fields(mcFldIdxNUM) & """"|"""" & .Fields(mcFldIdxNAM) & """"|"""" & .Fields(mcFldIdxTTL): .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LodTplLst()"""
        PRINT "    .AX ""    Call Init_RstTPL"""
        PRINT "    .AX ""    Call AddTplItm(""""ReportName_01"""", """"Report 0001"""")  ' 0001"""
        PRINT "    .AX ""    Call AddTplItm(""""ReportName_02"""", """"Report 0002"""")  ' 0002"""
        PRINT "    .AX ""    Call AddTplItm(""""ReportName_03"""", """"Report 0003"""")  ' 0003"""
        PRINT "    .AX ""    If False Then Call DbgTplLst  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Standard Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Init_RstSTD()"""
        PRINT "    .AX ""    ' Initialize new report list"""
        PRINT "    .AX ""    Set mrstSTD = New ADODB.Recordset"""
        PRINT "    .AX ""    ' Create recordset fields"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Initialize the recordset"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        .Open: .Sort = mcFldNamNUM & """" ASC"""""""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasStdNam(ByVal strRptNam As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"RptNam = '"""" & strRptNam & """"'"""""""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasStdNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtStdNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtStdNum = Right$(""""0000"""" & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub AddStdItm(ByVal strRptNam As String, ByVal strRptTtl As String)"""
        PRINT "    .AX ""    If Not HasStdNam(strRptNam) Then"""
        PRINT "    .AX ""        With mrstSTD"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array(NxtStdNum, Trim$(strRptNam), Trim$(strRptTtl))"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub DbgStdLst()"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                Debug.Print .Fields(mcFldIdxNUM) & """"|"""" & .Fields(mcFldIdxNAM) & """"|"""" & .Fields(mcFldIdxTTL): .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LodStdLst()"""
        PRINT "    .AX ""    Call Init_RstSTD"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX """""
        PRINT "    Call GenRpt_RptLst(blnLST)"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    If False Then Call DbgStdLst  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenRpt_RunRpt"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenRpt_RunRpt( _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenRpt_RunRpt"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST"
        PRINT "    Call Init_PrpRst"
        PRINT "    Call Init_RptRst(mcIncRegNOP)"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnFldFmt       As Variant"
        PRINT "    Dim vrnValLst       As Variant"
        PRINT ""
        PRINT "    ' Declare Property variables"
        PRINT "    Dim strPrpNam       As String"
        PRINT "    Dim strPrpTyp       As String"
        PRINT "    Dim strPrpTbl       As String"
        PRINT "    Dim strPrpVar       As String"
        PRINT ""
        PRINT "    ' Declare Report variables"
        PRINT "    Dim strRptNam       As String"
        PRINT "    Dim intMaxNam       As Integer"
        PRINT "    Dim strRunNam       As String"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(""clsRunRPT"", ""Run MSAccess Reports"", mcRptPrmRUN, """", ""rpt"", wtx)"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Form/Report Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrOpenText                As String"""
        PRINT "    .AX ""Private mstrOpenName                As String"""
        PRINT "    .AX ""Private mintOpenView                As Integer"""
        PRINT "    .AX ""Private mstrFiltName                As String"""
        PRINT "    .AX ""Private mstrWhereTxt                As String"""
        PRINT "    .AX ""Private mintDataMode                As Integer"""
        PRINT "    .AX ""Private mintWindMode                As Integer"""
        PRINT "    .AX ""Private mstrOpenArgs                As String"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private whr                         As clsRunWHR"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcVbaTypNON           As Long = 0                            ' non - No type"""
        PRINT "    .AX ""Private Const mcVbaTypBYT           As Long = 1                            ' byt - Byte"""
        PRINT "    .AX ""Private Const mcVbaTypBLN           As Long = 2                            ' bln - Boolean"""
        PRINT "    .AX ""Private Const mcVbaTypINT           As Long = 3                            ' int - Integer"""
        PRINT "    .AX ""Private Const mcVbaTypLNG           As Long = 4                            ' lng - Long"""
        PRINT "    .AX ""Private Const mcVbaTypSGL           As Long = 5                            ' sgl - Single"""
        PRINT "    .AX ""Private Const mcVbaTypDBL           As Long = 6                            ' dbl - Double"""
        PRINT "    .AX ""Private Const mcVbaTypCUR           As Long = 7                            ' cur - Currency"""
        PRINT "    .AX ""Private Const mcVbaTypDEC           As Long = 8                            ' dec - Decimal"""
        PRINT "    .AX ""Private Const mcVbaTypDAT           As Long = 9                            ' dat - Date"""
        PRINT "    .AX ""Private Const mcVbaTypSTR           As Long = 10                           ' str - String"""
        PRINT "    .AX ""Private Const mcVbaTypVRN           As Long = 11                           ' vrn - Variant"""
        PRINT "    .AX ""Private Const mcVbaTypOBJ           As Long = 12                           ' obj - Object"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcNoAlias             As String = """"""""                         ' Empty tablename excludes alias"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""' Run vbaGen_IT.Gen_RPT to generate current module code"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""'    blnLST = mcUseStdList"""
        PRINT "    .AX ""'    intTYP = mcModRunCmd"""
        PRINT "    .AX ""'---------------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""' Setup vbaGen_IT.GenPrp_RunCrt property list"""
        PRINT "    .AX ""' Setup vbaGen_IT.GenRpt_SetPrp criteria lists"""
        PRINT "    .AX ""' Setup vbaGen_IT.GenRpt_RptPrp assignment lists"""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Criteria Variables"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTyp = ""VRN"""
        PRINT "            strPrpNam = mrstPRP.Fields(mcPrpNamNAM)"
        PRINT "            strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        strPrpTyp = ""VRN"""
        PRINT "        strPrpNam = ""ClmName"""
        PRINT "        strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        mrstPRP.MoveNext"
        PRINT "    End If"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    Set whr = New clsRunWHR"""
        PRINT "    .AX ""    Call Init_Vars"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Class_Terminate()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Criteria Initialization"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Init_Vars()"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTyp = ""VRN"""
        PRINT "            strPrpNam = mrstPRP.Fields(mcPrpNamNAM)"
        PRINT "            strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Int(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        strPrpTyp = ""VRN"""
        PRINT "        strPrpNam = ""ClmName"""
        PRINT "        strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        mrstPRP.MoveNext"
        PRINT "    End If"
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Criteria Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTyp = ""VRN"""
        PRINT "            strPrpNam = mrstPRP.Fields(mcPrpNamNAM)"
        PRINT "            strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        strPrpTyp = ""VRN"""
        PRINT "        strPrpNam = ""ClmName"""
        PRINT "        strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        mrstPRP.MoveNext"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Assign WHERE Criteria Phrases"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPRP.BOF And mrstPRP.EOF) Then"
        PRINT "        mrstPRP.MoveFirst"
        PRINT "        Do While Not mrstPRP.EOF"
        PRINT "            strPrpTyp = mrstPRP.Fields(mcPrpNamTYP)"
        PRINT "            strPrpNam = mrstPRP.Fields(mcPrpNamNAM)"
        PRINT "            strPrpTbl = mrstPRP.Fields(mcPrpNamTBL)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Spw(strPrpTyp, strPrpNam, strPrpTbl)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstPRP.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        strPrpTyp = ""STR"""
        PRINT "        strPrpNam = ""ClmName"""
        PRINT "        strPrpTbl = ""TblName"""
        PRINT "        strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "        '---------------------------------------------------------------------------------------"
        PRINT "        .AX VBA_Var2Spw(strPrpTyp, strPrpNam, strPrpTbl)"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    mrstRPT.Filter = """""
        PRINT "    mrstRPT.Sort = ""RptNam"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstRPT.BOF And mrstRPT.EOF) Then"
        PRINT "        mrstRPT.MoveFirst"
        PRINT "        Do While Not mrstRPT.EOF"
        PRINT "            strRptNam = mrstRPT.Fields(""RptNam"")"
        PRINT "            strRunNam = ""Print_"" & GenRpt_Clean(strRptNam)"
        PRINT "            .AX """""
        PRINT "            .AX """""
        PRINT "            .AX ""'###################################################################################################"""
        PRINT "            .AX ""' Print Report:  "" & strRptNam"
        PRINT "            .AX ""'###################################################################################################"""
        PRINT "            .AX ""Public Sub "" & strRunNam & ""(ByVal lngViewType As Long)"""
        PRINT "            .AX ""    Const pcMsgTtl = mcModNam & """"."" & strRunNam & """""""""
        PRINT "            .AX ""    'On Error GoTo Error_Handler"""
        PRINT "            .AX """""
        PRINT "            .AX ""    ' Build the WHERE statement"""
        PRINT "            .AX ""    Dim strWHR As String"""
        PRINT "            Call GenRpt_SetPrp(strRptNam, wtx)"
        PRINT "            .AX ""    strWHR = whr.WhrStm"""
        PRINT "            .AX """""
        PRINT "            .AX ""    ' Open a report"""""""
        PRINT "            .AX ""    mstrOpenName = """""" & strRptNam & """""""""
        PRINT "            .AX ""    mstrFiltName = """""""""""
        PRINT "            .AX ""    mstrWhereTxt = strWHR"""
        PRINT "            .AX ""    mintOpenView = lngViewType  ' acViewPreview acViewNormal"""
        PRINT "            .AX """""
        PRINT "            .AX ""    ' Call the report ignoring any error conditions"""""""
        PRINT "            .AX ""    If Len(mstrOpenName) > 0 Then"""
        PRINT "            .AX ""        On Error Resume Next"""
        PRINT "            .AX ""        DoCmd.OpenReport mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt"""
        PRINT "            .AX ""        'On Error GoTo Error_Handler"""
        PRINT "            .AX ""    End If"""
        PRINT "            .AX """""
        PRINT "            .AX ""Exit_Procedure:"""
        PRINT "            .AX ""    Exit Sub"""
        PRINT "            .AX ""Error_Handler:"""
        PRINT "            .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """"  """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "            .AX ""    Resume Exit_Procedure"""
        PRINT "            .AX ""End Sub"""
        PRINT "            .AX ""'==================================================================================================="""
        PRINT "            mrstRPT.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        .AX """""
        PRINT "        .AX """""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""' Print Report:  rpt_Report_Name"""
        PRINT "        .AX ""'###################################################################################################"""
        PRINT "        .AX ""Public Sub Print_rpt_Report_Name(ByVal lngViewType As Long)"""
        PRINT "        .AX ""    Const pcMsgTtl = mcModNam & """".Print_rpt_Report_Name"""""""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Build the WHERE statement"""
        PRINT "        .AX ""    Dim strWHR As String"""
        PRINT "        .AX ""    Call Set_ClmName"""
        PRINT "        .AX ""    strWHR = whr.WhrStm"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Open a report"""""""
        PRINT "        .AX ""    mstrOpenName = """"rpt_Report_Name"""""""
        PRINT "        .AX ""    mstrFiltName = """""""""""
        PRINT "        .AX ""    mstrWhereTxt = strWHR"""
        PRINT "        .AX ""    mintOpenView = lngViewType  ' acViewPreview acViewNormal"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Call the report ignoring any error conditions"""""""
        PRINT "        .AX ""    If Len(mstrOpenName) > 0 Then"""
        PRINT "        .AX ""        On Error Resume Next"""
        PRINT "        .AX ""        DoCmd.OpenReport mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt"""
        PRINT "        .AX ""        'On Error GoTo Error_Handler"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """"  """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenRpt_FrmRpt"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenRpt_FrmRpt( _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strDEF As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenRpt_FrmRpt"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST"
        PRINT ""
        PRINT "    ' Declare working objects"
        PRINT "    Dim obj As AccessObject"
        PRINT ""
        PRINT "    ' Initialize report registration"
        PRINT "    Set reg = New clsRegRPT"
        PRINT "    Call reg.Activate(mblnUseLst)"
        PRINT ""
        PRINT "    ' Initialize form property list"
        PRINT "    Dim vrnFrmPrp As Variant"
        PRINT "    vrnFrmPrp = GenPrp_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize form command list"
        PRINT "    Dim vrnFrmRpt As Variant"
        PRINT "    vrnFrmRpt = GenRpt_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize working report list"
        PRINT "    Call Init_RptRst(mcIncRegNOP)"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnITM          As Variant"
        PRINT "    Dim intCNT          As Integer"
        PRINT "    Dim intIDX          As Integer"
        PRINT "    Dim strIDX          As String"
        PRINT "    Dim strCMA          As String"
        PRINT ""
        PRINT "    ' Declare Report variables"
        PRINT "    Dim strRptNum       As String"
        PRINT "    Dim strRptNam       As String"
        PRINT "    Dim strRptTtl       As String"
        PRINT "    Dim strRunNam       As String"
        PRINT "    Dim blnTplNam       As Boolean"
        PRINT "    Dim blnIsRprt       As Boolean"
        PRINT ""
        PRINT "    ' How many reports in the list?"
        PRINT "    intCNT = UBound(vrnFrmRpt)+1"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, """", """", """", wtx)"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Form/Report Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrOpenText                As String"""
        PRINT "    .AX ""Private mstrOpenName                As String"""
        PRINT "    .AX ""Private mintOpenView                As Integer"""
        PRINT "    .AX ""Private mstrFiltName                As String"""
        PRINT "    .AX ""Private mstrWhereTxt                As String"""
        PRINT "    .AX ""Private mintDataMode                As Integer"""
        PRINT "    .AX ""Private mintWindMode                As Integer"""
        PRINT "    .AX ""Private mstrOpenArgs                As String"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' RunSql Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcRunSqlENB           As Boolean = True        ' True = Always enabled"""
        PRINT "    .AX ""Private Const mcClrSqlENB           As Boolean = False       ' True = Always enabled"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' List Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcEmptySql            As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcAddBlank            As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcNoBlank             As Boolean = False       ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcUseTplList          As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcUseStdList          As Boolean = False       ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Report Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrRowSrcRPT               As String                ' """
        PRINT "    .AX ""Private mintRowDefRPT               As Integer               ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Form Properties/Methods"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is opened"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Open(Cancel As Integer)"""
        PRINT "    .AX ""    ' Display form full screen"""
        PRINT "    .AX ""    DoCmd.Maximize"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is loaded"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Load()"""
        PRINT "    .AX ""    ' Initialize:  Form Properties"""
        PRINT "    .AX ""    Call Form_Setup"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when record becomes current"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' BeforeUpdate(frm) => AfterUpdate(frm) => Exit(ctl) => LostFocus(ctl) => Current(frm)"""
        PRINT "    .AX ""Private Sub Form_Current()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is unloaded"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Unload(Cancel As Integer)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is closed"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Close()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Redisplay underlying data values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Form_Refresh()"""
        PRINT "    .AX ""    Me.Refresh"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Form_Requery()"""
        PRINT "    .AX ""    Me.Requery"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Form Commands"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub cmdRefreshForm_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdAddNewRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdSaveRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdUndoRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdDeleteRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdCloseForm_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".cmdCloseForm_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Close the current form"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdClose"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize form properties and mechanisms"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Form_Setup()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".Form_Setup"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup form display values"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.Caption = mcModTtl"""
        PRINT "    .AX ""    Me.lblTitle01.Caption = mcModTtl"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup form process values"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.AllowFilters = True"""
        PRINT "    .AX ""    Me.AllowAdditions = True"""
        PRINT "    .AX ""    Me.AllowEdits = True"""
        PRINT "    .AX ""    Me.AllowDeletions = True"""
        PRINT "    .AX ""    Me.DataEntry = False"""
        PRINT "    .AX ""    'e.UniqueTable = """""""""""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Report mechanisms (with defaults - mcUseStdList mcUseTplList)"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Setup_Report("""""" & strDEF & """""", "" & IIf(mblnUseLst, ""mcUseTplList"", ""mcUseStdList"") & "")"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Reset the hourglass"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call DoCmd.Hourglass(False)"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Controls"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Controls_Setup"""
        PRINT "    .AX """""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Controls"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Controls_Setup()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Reset(Optional ByVal blnRunSQL As Boolean = False)"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = (blnRunSQL Or mcRunSqlENB)"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = ( _"""
        PRINT "    .AX ""           mcClrSqlENB _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Defaults()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Requery()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Clear()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Build SQL Statements"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub tglFndSQL_AfterUpdate()"""
        PRINT "    .AX ""'    Const pcMsgTtl = mcModNam & """".tglFndSQL_AfterUpdate"""""""
        PRINT "    .AX ""'    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""'    ' Set the toggle state"""
        PRINT "    .AX ""'    Me.tglFndSQL = True"""
        PRINT "    .AX ""'    Me.tglFndSQL.Enabled = True"""
        PRINT "    .AX ""'    ' Assign the SQL statement"""
        PRINT "    .AX ""'    Call ExecSQL"""
        PRINT "    .AX ""'Exit_Procedure:"""
        PRINT "    .AX ""'    ' Reset the toggle state"""
        PRINT "    .AX ""'    Me.tglFndSQL = False"""
        PRINT "    .AX ""'    Me.tglFndSQL.Enabled = mcFndSqlENB"""
        PRINT "    .AX ""'    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""'    Exit Sub"""
        PRINT "    .AX ""'Error_Handler:"""
        PRINT "    .AX ""'    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""'    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglRunSQL_AfterUpdate()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".tglRunSQL_AfterUpdate"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglRunSQL = True"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = True"""
        PRINT "    .AX ""    ' Assign the SQL statement"""
        PRINT "    .AX ""    Call ExecSQL"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglRunSQL = False"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = mcRunSqlENB"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglClrSQL_AfterUpdate()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".tglClrSQL_AfterUpdate"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglClrSQL = True"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = True"""
        PRINT "    .AX ""    ' Assign the SQL statement"""
        PRINT "    .AX ""    'Call SrtBySyncCap(mcClearSBY)"""
        PRINT "    .AX ""    'Call Vars_Defaults"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglClrSQL = False"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = mcClrSqlENB"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglWrtSQL_AfterUpdate()"""
        PRINT "    .AX ""'    Const pcMsgTtl = mcModNam & """".tglWrtSQL_AfterUpdate"""""""
        PRINT "    .AX ""'    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""'    ' Set the toggle state"""
        PRINT "    .AX ""'    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""'    ' Assign flags"""
        PRINT "    .AX ""'    mblnWrtSQL = Me.tglWrtSQL"""
        PRINT "    .AX ""'    RunRST.WrtSQL = mblnWrtSQL"""
        PRINT "    .AX ""'Exit_Procedure:"""
        PRINT "    .AX ""'    Exit Sub"""
        PRINT "    .AX ""'Error_Handler:"""
        PRINT "    .AX ""'    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""'    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SQL Criteria"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub AssignSQL()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".AssignSQL"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Assign current criteria"""
        PRINT "    .AX ""    With RunSQL"""
        PRINT "    .AX ""        ' System"""
        PRINT "    .AX ""        '.WrtSQL = mblnWrtSQL"""
        PRINT "    .AX ""        ' Criteria"""
        PRINT "    For Each vrnITM In vrnFrmPrp"
        PRINT "    .AX ""        ."" & vrnITM(mcPrpIdxNAM) & "" = "" & IIf(InStr(vrnITM(mcPrpIdxCTL), ""."") = 0, ""Me."", """") & vrnITM(mcPrpIdxCTL)"
        PRINT "    Next"
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub ExecSQL(Optional ByVal blnEmpty As Boolean)"""
        PRINT "    .AX ""    Call AssignSQL"""
        PRINT "    .AX ""    'Me.RecordSource = RunSQL.Empty_Text(blnEmpty)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize Control RowSource"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Records"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub SaveIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdSaveRecord"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub ReadIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""    Me.Refresh      ' Read form source values"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LoadIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""    Call Me.Requery ' Requery form source records"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Logical Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Function CanCMD() As Boolean"""
        PRINT "    .AX ""    CanCMD = (True _"""
        PRINT "    .AX ""        And (Me.Recordset.RecordCount > 0) _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function CanRPT() As Boolean"""
        PRINT "    .AX ""    CanRPT = (True _"""
        PRINT "    .AX ""        And (Me.Recordset.RecordCount > 0) _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SrtBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage GrpBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage FndOn Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Report Mechanism"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Setup_Report(ByVal strDefault As String, ByVal blnUseList As boolean)"""
        PRINT "    .AX ""    Dim RegRPT    As clsRegRPT"""
        PRINT "    .AX ""    Set RegRPT = New clsRegRPT"""
        PRINT "    .AX ""    Dim mvrnRptLst As Variant"""
        PRINT "    .AX ""    With RegRPT"""
        PRINT "    .AX ""        Call .Activate(blnUseList)  ' blnUseList mcUseStdList mcUseTplList"""
        PRINT "    .AX ""        mvrnRptLst = Array( _"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmRpt: intIDX = intIDX+1: strCMA = IIf(intIDX < intCNT, "","", """")"
        PRINT "        strRptNam = CStr(vrnITM)"
        PRINT "        .AX ""            .GetRptNum("""""" & strRptNam & """""")"" & strCMA & "" _"""
        PRINT "    Next"
        PRINT "    .AX ""        )"""
        PRINT "    .AX ""        mstrRowSrcRPT = .GetRptLst(mvrnRptLst, strDefault, mcNoBlank)"""
        PRINT "    .AX ""        mintRowDefRPT = .DefaultItem"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    Set RegRPT = Nothing"""
        PRINT "    .AX ""    Me.cboRptLst.RowSource = mstrRowSrcRPT"""
        PRINT "    .AX ""    Call Reset_ReportList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_ReportList()"""
        PRINT "    .AX ""    If CanRPT And Len(mstrRowSrcRPT) > 0 Then"""
        PRINT "    .AX ""        ' Set report list value to default"""
        PRINT "    .AX ""        Me.cboRptLst.Value = mintRowDefRPT"""
        PRINT "    .AX ""        ' Reset report buttons"""
        PRINT "    .AX ""        Call Reset_ReportButtons"""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        ' Disable report mechanism"""
        PRINT "    .AX ""        Call Disable_ReportButtons"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_ReportButtons()"""
        PRINT "    .AX ""    ' Reset report buttons"""
        PRINT "    .AX ""    Me.cboRptLst.Enabled = True"""
        PRINT "    .AX ""    Me.tglPrnRpt.Enabled = (Me.cboRptLst.Value > 0)"""
        PRINT "    .AX ""    Me.tglPrvRpt.Enabled = Me.tglPrnRpt.Enabled"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Disable_ReportButtons()"""
        PRINT "    .AX ""    ' Disable report mechanism"""
        PRINT "    .AX ""    Me.cboRptLst.Enabled = False"""
        PRINT "    .AX ""    Me.tglPrnRpt.Enabled = False"""
        PRINT "    .AX ""    Me.tglPrvRpt.Enabled = False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboRptLst_AfterUpdate()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset report buttons"""
        PRINT "    .AX ""    Call Reset_ReportButtons"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboRptLst_DblClick(Cancel As Integer)"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset report list value"""
        PRINT "    .AX ""    Call Reset_ReportList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglPrvRpt_Click()"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglPrvRpt.Value = True"""
        PRINT "    .AX ""    ' Print the report"""
        PRINT "    .AX ""    Call Run_Report(acViewPreview)"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglPrvRpt.Value = False"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglPrnRpt_Click()"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglPrnRpt.Value = True"""
        PRINT "    .AX ""    ' Print the report"""
        PRINT "    .AX ""    Call Run_Report(acViewNormal)"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglPrnRpt.Value = False"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Set_Report_Criteria(ByVal strRPT As String, ByRef rpt As clsRunRPT)"""
        PRINT "    .AX ""    ' Set report criteria"""
        PRINT "    .AX ""    Select Case strRPT"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmRpt: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strRptTtl = reg.GetRptTtl(reg.GetRptNum(CStr(vrnITM)))"
        PRINT "        .AX ""        'Case """""" & strIDX & """"""    ' "" & strRptTtl"
        PRINT "    Next"
        PRINT "    .AX ""        Case Else"""
        PRINT "    For Each vrnITM In vrnFrmPrp"
        PRINT "    .AX ""            rpt."" & vrnITM(mcPrpIdxNAM) & "" = "" & IIf(InStr(vrnITM(mcPrpIdxCTL), ""."") = 0, ""Me."", """") & vrnITM(mcPrpIdxCTL)"
        PRINT "    Next"
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Run_Report(ByVal lngViewType As Long)  ' acViewPreview acViewNormal"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".Run_Report"""""""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Get the report number"""
        PRINT "    .AX ""    Dim strRPT As String: strRPT = Format$(Me.cboRptLst.Value, """"00"""")"""
        PRINT "    .AX ""    ' Call the specified report"""
        PRINT "    .AX ""    Select Case strRPT"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmRpt: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strRptTtl = reg.GetRptTtl(reg.GetRptNum(CStr(vrnITM)))"
        PRINT "        .AX ""        Case """""" & strIDX & """""": Call Run_Report_"" & strIDX & ""(lngViewType)    ' "" & strRptTtl"
        PRINT "    Next"
        PRINT "    .AX ""        Case Else"""
        PRINT "    .AX ""            MsgBox """"This Report ("""" & strRPT & """") is not registered."""", vbInformation, pcMsgTtl"""
        PRINT "    .AX ""    End Select"""
        PRINT "    .AX ""End Sub"""
        PRINT "    intIDX = 0: For Each vrnITM In vrnFrmRpt: intIDX = intIDX+1: strIDX = Format$(intIDX, ""00"")"
        PRINT "        strRptNum = reg.GetRptNum(CStr(vrnITM))"
        PRINT "        strRptTtl = reg.GetRptTtl(strRptNum)"
        PRINT "        strRptNam = reg.GetRptNam(strRptNum)"
        PRINT "        strRunNam = mcRptTxtPFX & GenRpt_Clean(strRptNam)"
        PRINT "        Select Case strRptNam"
        PRINT "            Case mcRptTpl001: blnTplNam = True"
        PRINT "            Case mcRptTpl002: blnTplNam = True"
        PRINT "            Case mcRptTpl003: blnTplNam = True"
        PRINT "            Case Else:        blnTplNam = False"
        PRINT "        End Select"
        PRINT "        blnIsRprt = False: For Each obj In Application.CurrentProject.AllReports"
        PRINT "            blnIsRprt = (obj.Name = strRptNam Or blnIsRprt)"
        PRINT "        Next"
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        .AX ""' Run Report "" & strIDX & "":  "" & strRptTtl"
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        .AX ""Private Sub Run_Report_"" & strIDX & ""(ByVal lngViewType As Long)"""
        PRINT "        .AX ""    Const pcRptNum = """""" & strIDX & """""": Const pcMsgTtl = mcModNam & """".Run_Report_"""" & pcRptNum"""
        PRINT "        .AX ""    'On Error GoTo Error_Handler"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Hide the cursor"""
        PRINT "        .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Deactivate this procedure"""
        PRINT "        If blnTplNam Then"
        PRINT "        .AX ""    If True Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This report is not active."""", vbInformation, pcMsgTtl"""
        PRINT "        .AX ""        GoTo Exit_Procedure"""
        PRINT "        .AX ""    End If"""
        PRINT "        Else"
        PRINT "        .AX ""    If False Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This report is not active."""", vbInformation, pcMsgTtl"""
        PRINT "        .AX ""        GoTo Exit_Procedure"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Make sure there is a current active record"""
        PRINT "        .AX ""    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"""
        PRINT "        .AX ""        MsgBox """"This report requires an active record."""", vbInformation, mcModTtl"""
        PRINT "        .AX ""        Exit Sub"""
        PRINT "        .AX ""    End If"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Initialize the report object"""
        PRINT "        .AX ""    Dim rpt    As clsRunRPT"""
        PRINT "        .AX ""    Set rpt = New clsRunRPT"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Save current values"""
        PRINT "        .AX ""    If Me.Dirty Then Call SaveIt(0)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Set report criteria"""
        PRINT "        .AX ""    Call Set_Report_Criteria(pcRptNum, rpt)"""
        PRINT "        .AX """""
        PRINT "        .AX ""    ' Run the report"""
        PRINT "        .AX ""    Call rpt."" & strRunNam & ""(lngViewType)"""
        PRINT "        End If"
        PRINT "        .AX """""
        PRINT "        .AX ""Exit_Procedure:"""
        PRINT "        .AX ""    Exit Sub"""
        PRINT "        .AX ""Error_Handler:"""
        PRINT "        .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "        .AX ""    Resume Exit_Procedure"""
        PRINT "        .AX ""End Sub"""
        PRINT "    Next"
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenRpt_Clean"
        PRINT "'###################################################################################################"
        PRINT "Public Function GenRpt_Clean( _"
        PRINT "    ByVal strNAM As String _"
        PRINT ") As String"
        PRINT "    GenRpt_Clean = Replace$(strNAM, _"
        PRINT "        ""-"", ""_"")"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build run properties list"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_PrpRst()"
        PRINT "    Call GenPrp_RunCrt(mrstPRP)  ' vbaGen_IT"
        PRINT "    mrstPRP.Filter = """""
        PRINT "    mrstPRP.Sort = mcPrpNamNAM"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build current report list"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_RptRst(Optional ByVal blnNonReg As Boolean = True)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Init_RptRst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize report registration"
        PRINT "    Set reg = New clsRegRPT"
        PRINT "    Call reg.Activate(mblnUseLst)"
        PRINT ""
        PRINT "    ' Declare working objects"
        PRINT "    Dim obj As AccessObject"
        PRINT ""
        PRINT "    ' Initialize new report list"
        PRINT "    Set mrstRPT = New ADODB.Recordset"
        PRINT ""
        PRINT "    ' Create recordset fields"
        PRINT "    mvrnFldFmt = Array( _"
        PRINT "        mcRptNamNUM, _"
        PRINT "        mcRptNamNAM, _"
        PRINT "        mcRptNamTTL _"
        PRINT "    )"
        PRINT "    With mrstRPT"
        PRINT "        Call .Fields.Append(mcRptNamNUM, adVarChar, 4)"
        PRINT "        Call .Fields.Append(mcRptNamNAM, adVarChar, 200)"
        PRINT "        Call .Fields.Append(mcRptNamTTL, adVarChar, 200)"
        PRINT "    End With"
        PRINT ""
        PRINT "    ' Setup the recordset"
        PRINT "    With mrstRPT"
        PRINT "        .Open: .Sort = mcRptNamNUM & "" ASC"""
        PRINT "    End With"
        PRINT ""
        PRINT "    ' Declare Report variables"
        PRINT "    Dim strRptNum       As String"
        PRINT "    Dim strRptNam       As String"
        PRINT ""
        PRINT "    ' Add registered reports"
        PRINT "    For Each obj In Application.CurrentProject.AllReports"
        PRINT "        strRptNam = obj.Name"
        PRINT "        If Left$(strRptNam, 4) = ""rpt_"" Then"
        PRINT "            strRptNum = reg.GetRptNum(strRptNam)"
        PRINT "            If strRptNum <> ""0000"" Then"
        PRINT "                Call AddRptItm(strRptNam, FmtRptTtl(reg.GetRptTtl(strRptNum, strRptNam)))"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    Next"
        PRINT ""
        PRINT "    ' Add non-registered reports"
        PRINT "    If blnNonReg Then"
        PRINT "        For Each obj In Application.CurrentProject.AllReports"
        PRINT "            strRptNam = obj.Name"
        PRINT "            If Left$(strRptNam, 4) = ""rpt_"" Then"
        PRINT "                Call AddRptItm(strRptNam, FmtRptTtl(strRptNam))"
        PRINT "            End If"
        PRINT "        Next"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function FmtRptTtl(ByVal strTXT As String) As String"
        PRINT "    FmtRptTtl = Replace$(Replace$(strTXT, ""rpt_"", """"), ""_"", "" "")"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function NxtRptNum() As String"
        PRINT "    Dim intNUM As Integer"
        PRINT "    With mrstRPT"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveLast"
        PRINT "            intNUM = .Fields(mcRptIdxNUM)"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "    intNUM = intNUM+1"
        PRINT "    NxtRptNum = Right$(""0000"" & intNUM, 4)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasRptNam(ByVal strRptNam As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""RptNam = '"" & strRptNam & ""'"""
        PRINT "    With mrstRPT"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasRptNam = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddRptItm(ByVal strRptNam As String, ByVal strRptTtl As String)"
        PRINT "    If Not HasRptNam(strRptNam) Then"
        PRINT "        With mrstRPT"
        PRINT "            .AddNew mvrnFldFmt, Array(NxtRptNum, strRptNam, strRptTtl)"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetNumLen() As Integer"
        PRINT "    With mrstRPT"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                If Len(.Fields(mcRptIdxNUM)) > GetNumLen Then GetNumLen = Len(.Fields(mcRptIdxNUM))"
        PRINT "            .MoveNext: Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetNamLen() As Integer"
        PRINT "   With mrstRPT"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                If Len(.Fields(mcRptIdxNAM)) > GetNamLen Then GetNamLen = Len(.Fields(mcRptIdxNAM))"
        PRINT "            .MoveNext: Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetTtlLen() As Integer"
        PRINT "    With mrstRPT"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                If Len(.Fields(mcRptIdxTTL)) > GetTtlLen Then GetTtlLen = Len(.Fields(mcRptIdxTTL))"
        PRINT "            .MoveNext: Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub LstRptItm()"
        PRINT "    Dim strNUM As String"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTTL As String"
        PRINT "    mrstRPT.Filter = """""
        PRINT "    mrstRPT.Sort = mcRptNamNUM"
        PRINT "    If Not (mrstRPT.BOF And mrstRPT.EOF) Then mrstRPT.MoveFirst"
        PRINT "    Do While Not mrstRPT.EOF"
        PRINT "        strNUM = mrstRPT.Fields(mcRptIdxNUM)"
        PRINT "        strNAM = mrstRPT.Fields(mcRptIdxNAM)"
        PRINT "        strTTL = mrstRPT.Fields(mcRptIdxTTL)"
        PRINT "        wtx.AX ""RptNam="" & strNUM & "":"" & strNAM & "":"" & strTTL"
        PRINT "        mrstRPT.MoveNext"
        PRINT "    Loop"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENPTH = Build module:  vbaGenPTH
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENPTH
        EXEC ut_zzVBX GENPTH
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENPTH) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As New clsUtlWTX"
        PRINT "Private reg                         As New clsRegPTH"
        PRINT "'***************************************************************************************************"
        PRINT "Private mrstPTH                     As ADODB.Recordset"
        PRINT "Private mrstPRP                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPthIdxNUM           As Integer = 0"
        PRINT "Private Const mcPthIdxNAM           As Integer = 1"
        PRINT "Private Const mcPthIdxTTL           As Integer = 2"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPthNamNUM           As String = ""PthNum"""
        PRINT "Private Const mcPthNamNAM           As String = ""PthNam"""
        PRINT "Private Const mcPthNamTTL           As String = ""PthTtl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPthPrmREG           As String = ""REGPTH"""
        PRINT "Private Const mcPthPrmRUN           As String = ""RUNPTH"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpIdxTYP           As Integer = 0"
        PRINT "Private Const mcPrpIdxNAM           As Integer = 1"
        PRINT "Private Const mcPrpIdxTBL           As Integer = 2"
        PRINT "Private Const mcPrpIdxCTL           As Integer = 3"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpNamTYP           As String = ""PrpTyp"""
        PRINT "Private Const mcPrpNamNAM           As String = ""PrpNam"""
        PRINT "Private Const mcPrpNamTBL           As String = ""PrpTbl"""
        PRINT "Private Const mcPrpNamCTL           As String = ""PrpCtl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcIncRegYUP           As Boolean = True"
        PRINT "Private Const mcIncRegNOP           As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModPthLst           As Integer = 1"
        PRINT "Private Const mcModRegPth           As Integer = 2"
        PRINT "Private Const mcModRunPth           As Integer = 3"
        PRINT "Private Const mcModFrmPth           As Integer = 4"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcUseTplList          As Boolean = True"
        PRINT "Private Const mcUseStdList          As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPthTpl001           As String = ""Path_0001"""
        PRINT "Private Const mcPthTpl002           As String = ""Path_0002"""
        PRINT "Private Const mcPthTpl003           As String = ""Path_0003"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mSQL                        As String"
        PRINT "Private mTXT                        As String"
        PRINT "Private mTX1                        As String"
        PRINT "Private mTX2                        As String"
        PRINT "Private mTX3                        As String"
        PRINT "Private mSPC                        As String * 100"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldFmt                  As Variant"
        PRINT "Private mblnUseLst                  As Boolean"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Gen_PTH"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Gen_PTH()"
        PRINT "'    Const pcMsgTtl = mcModNam & "".Gen_PTH"""
        PRINT "'    'On Error GoTo Error_Handler"
        PRINT "'    Dim strOBJ As String    ' Form name"
        PRINT "'    Dim strDSC As String    ' Form description"
        PRINT "'    Dim strDEF As String    ' Default Path"
        PRINT "'    Dim blnLST As Boolean   ' Registration list"
        PRINT "'    Dim intTYP As Integer   ' Module type"
        PRINT "'    '***********************************************************************************************"
        PRINT "'    blnLST = mcUseTplList   ' mcUseStdList mcUseTplList"
        PRINT "'    intTYP = mcModRunPth    ' mcModPthLst mcModRegPth mcModRunPth mcModFrmPth"
        PRINT "'    '-----------------------------------------------------------------------------------------------"
        PRINT "'"
        PRINT "'    strOBJ = ""frm_FormName"": strDSC = ""Description"": strDEF = ""Path_0001"""
        PRINT "'"
        PRINT "'    '***********************************************************************************************"
        PRINT "'    Select Case intTYP"
        PRINT "'        Case mcModPthLst: Call GenPth_PthLst(blnLST, True)                   ' Report list for clsRegPTH.LodStdLst"
        PRINT "'        Case mcModRegPth: Call GenPth_RegPth(blnLST)                         ' Class module code for clsRegPTH"
        --INT "'        Case mcModRunPth: Call GenPth_RunPth(blnLST)                         ' Class module code for clsRunPTH"
        PRINT "'        Case mcModFrmPth: Call GenPth_FrmPth(strOBJ, strDSC, strDEF, blnLST) ' Form module code for report setup/execution"
        PRINT "'    End Select"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" - "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenPth_PthLst"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenPth_PthLst( _"
        PRINT "    ByVal blnLST As Boolean, _"
        PRINT "    Optional ByVal blnWTX As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenPth_PthLst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    Call Init_PthRst(mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Declare Report variables"
        PRINT "    Dim strPthNum       As String"
        PRINT "    Dim strPthNam       As String"
        PRINT "    Dim strPthTtl       As String"
        PRINT ""
        PRINT "    Dim intMaxNum       As Integer: intMaxNum = GetNumLen"
        PRINT "    Dim intMaxNam       As Integer: intMaxNam = GetNamLen"
        PRINT "    Dim intMaxTtl       As Integer: intMaxTtl = GetTtlLen"
        PRINT ""
        PRINT "    If blnWTX Then Call wtx.AX_Clear"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    mrstPTH.Filter = mcPthNamNUM & "" <> '0000'"""
        PRINT "    mrstPTH.Sort = mcPthNamNUM & "" ASC"""
        PRINT "    If blnLST = mcUseStdList And Not (mrstPTH.EOF And mrstPTH.EOF) Then"
        PRINT "        mrstPTH.MoveFirst"
        PRINT "        Do While Not mrstPTH.EOF"
        PRINT "            strPthNum = mrstPTH.Fields(mcPthIdxNUM)"
        PRINT "            strPthNam = mrstPTH.Fields(mcPthIdxNAM)"
        PRINT "            strPthTtl = mrstPTH.Fields(mcPthIdxTTL)"
        PRINT "            .AX ""    Call AddStdItm("" & Left$("""""""" & strPthNam & """""","" & mSPC, intMaxNam+3) & "" "" & Left$("""""""" & strPthTtl & """""""" & mSPC, intMaxTtl+2) & "")  ' "" & strPthNum"
        PRINT "            mrstPTH.MoveNext"
        PRINT "        Loop"
        PRINT "    Else"
        PRINT "        .AX ""    Call AddStdItm(""""Location 0001"""")  ' 0001"""
        PRINT "        .AX ""    Call AddStdItm(""""Location 0002"""")  ' 0002"""
        PRINT "        .AX ""    Call AddStdItm(""""Location 0003"""")  ' 0003"""
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenPth_RegPth"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenPth_RegPth( _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenPth_RegPth"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST"
        PRINT "    Call Init_PthRst(mcIncRegYUP)"
        PRINT ""
        PRINT "    ' Declare Report variables"
        PRINT "    Dim strPthNum       As String"
        PRINT "    Dim strPthNam       As String"
        PRINT "    Dim strPthTtl       As String"
        PRINT ""
        PRINT "    Dim intMaxNum       As Integer: intMaxNum = GetNumLen"
        PRINT "    Dim intMaxNam       As Integer: intMaxNam = GetNamLen"
        PRINT "    Dim intMaxTtl       As Integer: intMaxTtl = GetTtlLen"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(""clsRegPTH"", ""Register Report Information"", mcPthPrmREG, """", ""rrp"", wtx)"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mrstPTH                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstSTD                     As ADODB.Recordset"""
        PRINT "    .AX ""Private mrstTPL                     As ADODB.Recordset"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldIdxNUM           As Integer = 0"""
        PRINT "    .AX ""Private Const mcFldIdxNAM           As Integer = 1"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcFldNamNUM           As String = """"PthNum"""""""
        PRINT "    .AX ""Private Const mcFldNamNAM           As String = """"PthNam"""""""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrnFldLst                  As Variant"""
        PRINT "    .AX ""Private mstrDefItm                  As String"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize objects"""
        PRINT "    .AX ""    mvrnFldLst = Array(mcFldNamNUM, mcFldNamNAM)"""
        PRINT "    .AX ""    Call LodStdLst"""
        PRINT "    .AX ""    Call LodTplLst"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Class_Terminate()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Default list item"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Property Get DefaultItem() As String"""
        PRINT "    .AX ""    DefaultItem = mstrDefItm"""
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Activate the Registration Recordset"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Activate(Optional ByVal blnTPL As Boolean = False)"""
        PRINT "    .AX ""    ' Set active recordset"""
        PRINT "    .AX ""    If blnTPL Then"""
        PRINT "    .AX ""        Set mrstPTH = mrstTPL.Clone"""
        PRINT "    .AX ""    Else"""
        PRINT "    .AX ""        Set mrstPTH = mrstSTD.Clone"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Get the Registration RowSource List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Function GetPthLst( _"""
        PRINT "    .AX ""    ByVal vrnLST As Variant, _"""
        PRINT "    .AX ""    ByVal strDEF As String, _"""
        PRINT "    .AX ""    ByVal blnBLK As Boolean _"""
        PRINT "    .AX "") As String"""
        PRINT "    .AX ""    ' Declare working constants"""
        PRINT "    .AX ""    Const pDLM As String = """";"""""""
        PRINT "    .AX ""    ' Declare working variables"""
        PRINT "    .AX ""    Dim strNAM As String"""
        PRINT "    .AX ""    Dim strTTL As String"""
        PRINT "    .AX ""    Dim strSRC As String"""
        PRINT "    .AX ""    Dim strDLM As String"""
        PRINT "    .AX ""    Dim intIND As Integer"""
        PRINT "    .AX ""    Dim vrnITM As Variant"""
        PRINT "    .AX ""    ' Reset default selection"""
        PRINT "    .AX ""    mstrDefItm = """""""""""
        PRINT "    .AX ""    ' Prepend blank selection"""
        PRINT "    .AX ""    If blnBLK Then"""
        PRINT "    .AX ""        strSRC = """""""": strDLM = pDLM"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    ' Lookup the report values"""
        PRINT "    .AX ""    For Each vrnITM In vrnLST"""
        PRINT "    .AX ""        strNAM = GetPthNam(vrnITM)"""
        PRINT "    .AX ""        If Len(strNAM) > 0 Then"""
        PRINT "    .AX ""            intIND = intIND+1"""
        PRINT "    .AX ""            strSRC = strSRC & strDLM & strNAM: strDLM = pDLM"""
        PRINT "    .AX ""            If strNAM = strDEF Then"""
        PRINT "    .AX ""                mstrDefItm = strNAM"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    Next"""
        PRINT "    .AX ""    ' Return results"""
        PRINT "    .AX ""    GetPthLst = strSRC"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Name"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetPthNam(ByVal strPthNum As String, Optional ByVal strDefNam As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strPthNum = Right$(""""0000"""" & strPthNum, 4)"""
        PRINT "    .AX ""    strSQL = """"PthNum = '"""" & strPthNum & """"'"""""""
        PRINT "    .AX ""    GetPthNam = IIf(Len(strDefNam) > 0, strDefNam, """"Report """" & strPthNum & """" not found"""")"""
        PRINT "    .AX ""    With mrstPTH"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                GetPthNam = Trim$(.Fields(mcFldIdxNAM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' Get the Registration Number"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Function GetPthNum(ByVal strPthNam As String) As String"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"PthNam = '"""" & strPthNam & """"'"""""""
        PRINT "    .AX ""    GetPthNum = """"0000"""""""
        PRINT "    .AX ""    With mrstPTH"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            If Not (.BOF Or .EOF) Then"""
        PRINT "    .AX ""                GetPthNum = Trim$(.Fields(mcFldIdxNUM))"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Template Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Init_RstTPL()"""
        PRINT "    .AX ""    ' Initialize new report list"""
        PRINT "    .AX ""    Set mrstTPL = New ADODB.Recordset"""
        PRINT "    .AX ""    ' Create recordset fields"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNAM, adVarChar, 255)"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Initialize the recordset"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        .Open: .Sort = mcFldNamNUM & """" ASC"""""""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasTplNam(ByVal strPthNam As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"PthNam = '"""" & strPthNam & """"'"""""""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasTplNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtTplNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtTplNum = Right$(""""0000"""" & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub AddTplItm(ByVal strPthNam As String)"""
        PRINT "    .AX ""    If Not HasTplNam(strPthNam) Then"""
        PRINT "    .AX ""        With mrstTPL"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array(NxtTplNum, Trim$(strPthNam))"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub DbgTplLst()"""
        PRINT "    .AX ""    With mrstTPL"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                Debug.Print .Fields(mcFldIdxNUM) & """"|"""" & .Fields(mcFldIdxNAM): .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LodTplLst()"""
        PRINT "    .AX ""    Call Init_RstTPL"""
        PRINT "    .AX ""    Call AddTplItm(""""Path 0001"""")  ' 0001"""
        PRINT "    .AX ""    Call AddTplItm(""""Path 0002"""")  ' 0002"""
        PRINT "    .AX ""    Call AddTplItm(""""Path 0003"""")  ' 0003"""
        PRINT "    .AX ""    If False Then Call DbgTplLst  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Standard Registration List"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Init_RstSTD()"""
        PRINT "    .AX ""    ' Initialize new report list"""
        PRINT "    .AX ""    Set mrstSTD = New ADODB.Recordset"""
        PRINT "    .AX ""    ' Create recordset fields"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"""
        PRINT "    .AX ""        Call .Fields.Append(mcFldNamNAM, adVarChar, 255)"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Initialize the recordset"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        .Open: .Sort = mcFldNamNUM & """" ASC"""""""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function HasStdNam(ByVal strPthNam As String) As Boolean"""
        PRINT "    .AX ""    Dim strSQL As String"""
        PRINT "    .AX ""    strSQL = """"PthNam = '"""" & strPthNam & """"'"""""""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            Call .MoveFirst"""
        PRINT "    .AX ""            Call .Find(strSQL)"""
        PRINT "    .AX ""            HasStdNam = (Not (.BOF Or .EOF))"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Function NxtStdNum() As String"""
        PRINT "    .AX ""    Dim intNUM As Integer"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveLast"""
        PRINT "    .AX ""            intNUM = .Fields(mcFldIdxNUM)"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    intNUM = intNUM+1"""
        PRINT "    .AX ""    NxtStdNum = Right$(""""0000"""" & intNUM, 4)"""
        PRINT "    .AX ""End Function"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub AddStdItm(ByVal strPthNam As String)"""
        PRINT "    .AX ""    If Not HasStdNam(strPthNam) Then"""
        PRINT "    .AX ""        With mrstSTD"""
        PRINT "    .AX ""            .AddNew mvrnFldLst, Array(NxtStdNum, Trim$(strPthNam))"""
        PRINT "    .AX ""        End With"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub DbgStdLst()"""
        PRINT "    .AX ""    With mrstSTD"""
        PRINT "    .AX ""        If Not (.BOF And .EOF) Then"""
        PRINT "    .AX ""            .MoveFirst"""
        PRINT "    .AX ""            Do While Not .EOF"""
        PRINT "    .AX ""                Debug.Print .Fields(mcFldIdxNUM) & """"|"""" & .Fields(mcFldIdxNAM): .MoveNext"""
        PRINT "    .AX ""            Loop"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LodStdLst()"""
        PRINT "    .AX ""    Call Init_RstSTD"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    Call AddStdItm(""""Location 0001"""")  ' 0001"""
        PRINT "    .AX ""    Call AddStdItm(""""Location 0002"""")  ' 0002"""
        PRINT "    .AX ""    Call AddStdItm(""""Location 0003"""")  ' 0003"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    If False Then Call DbgStdLst  ' True False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run GenPth_FrmPth"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenPth_FrmPth( _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strDSC As String, _"
        PRINT "    ByVal strDEF As String, _"
        PRINT "    ByVal blnLST As Boolean _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenPth_FrmPth"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize module values"
        PRINT "    mblnUseLst = blnLST"
        PRINT ""
        PRINT "    ' Declare working objects"
        PRINT "    Dim obj As AccessObject"
        PRINT ""
        PRINT "    ' Initialize report registration"
        PRINT "    Set reg = New clsRegPTH"
        PRINT "    Call reg.Activate(mblnUseLst)"
        PRINT ""
        PRINT "    ' Initialize form property list"
        PRINT "    Dim vrnFrmPrp As Variant"
        PRINT "    vrnFrmPrp = GenPrp_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize form path list"
        PRINT "    Dim vrnFrmCmd As Variant"
        PRINT "    vrnFrmPth = GenPth_FrmLst(strOBJ)"
        PRINT ""
        PRINT "    ' Initialize working command list"
        PRINT "    Call Init_PthRst(mcIncRegNOP)"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnITM          As Variant"
        PRINT "    Dim intCNT          As Integer"
        PRINT "    Dim intIDX          As Integer"
        PRINT "    Dim strIDX          As String"
        PRINT "    Dim strCMA          As String"
        PRINT ""
        PRINT "    ' Declare Command variables"
        PRINT "    Dim strPthNum       As String"
        PRINT "    Dim strPthNam       As String"
        PRINT "    Dim strPthTtl       As String"
        PRINT "    Dim strRunNam       As String"
        PRINT "    Dim blnTplNam       As Boolean"
        PRINT "    Dim blnIsForm       As Boolean"
        PRINT ""
        PRINT "    ' How many commands in the list?"
        PRINT "    intCNT = UBound(vrnFrmPth)+1"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call GenStd_DevCmt(strOBJ, strDSC, """", """", """", wtx)"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Form/Report Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrOpenText                As String"""
        PRINT "    .AX ""Private mstrOpenName                As String"""
        PRINT "    .AX ""Private mintOpenView                As Integer"""
        PRINT "    .AX ""Private mstrFiltName                As String"""
        PRINT "    .AX ""Private mstrWhereTxt                As String"""
        PRINT "    .AX ""Private mintDataMode                As Integer"""
        PRINT "    .AX ""Private mintWindMode                As Integer"""
        PRINT "    .AX ""Private mstrOpenArgs                As String"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' RunSql Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcRunSqlENB           As Boolean = True        ' True = Always enabled"""
        PRINT "    .AX ""Private Const mcClrSqlENB           As Boolean = False       ' True = Always enabled"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' List Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcEmptySql            As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcAddBlank            As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcNoBlank             As Boolean = False       ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcUseTplList          As Boolean = True        ' """
        PRINT "    .AX ""Private Const mcUseStdList          As Boolean = False       ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Command Management"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mstrRowSrcPTH               As String                ' """
        PRINT "    .AX ""Private mintRowDefPTH               As Integer               ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Flags"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Variables"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrnOpenArgs                As Variant               ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Properties"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Form Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is opened"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Open(Cancel As Integer)"""
        PRINT "    .AX ""    ' Display form full screen"""
        PRINT "    .AX ""    DoPth.Maximize"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is loaded"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Load()"""
        PRINT "    .AX ""    ' Initialize:  Form Properties"""
        PRINT "    .AX ""    Call Form_Setup"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when record becomes current"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' BeforeUpdate(frm) => AfterUpdate(frm) => Exit(ctl) => LostFocus(ctl) => Current(frm)"""
        PRINT "    .AX ""Private Sub Form_Current()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is unloaded"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Unload(Cancel As Integer)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is closed"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Close()"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Redisplay underlying data values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Form_Requery()"""
        PRINT "    .AX ""    ' Requery form source"""
        PRINT "    .AX ""    Me.Requery"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Form Commands"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub cmdRefreshForm_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdAddNewRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdSaveRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdUndoRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdDeleteRecord_Click()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdCloseForm_Click()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".cmdCloseForm_Click"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Close the current form"""
        PRINT "    .AX ""    DoPth.RunCommand acPthClose"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize form properties and mechanisms"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Form_Setup()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".Form_Setup"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup form display values"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.Caption = mcModTtl"""
        PRINT "    .AX ""    Me.lblTitle01.Caption = mcModTtl"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup form process values"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.AllowFilters = True"""
        PRINT "    .AX ""    Me.AllowAdditions = True"""
        PRINT "    .AX ""    Me.AllowEdits = True"""
        PRINT "    .AX ""    Me.AllowDeletions = True"""
        PRINT "    .AX ""    Me.DataEntry = False"""
        PRINT "    .AX ""    'e.UniqueTable = """""""""""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Path mechanisms (with defaults - mcUseStdList mcUseTplList)"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Setup_Path("""""" & strDEF & """""", "" & IIf(mblnUseLst, ""mcUseTplList"", ""mcUseStdList"") & "")"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Reset the hourglass"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call DoPth.Hourglass(False)"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Setup Controls"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Controls_Setup"""
        PRINT "    .AX """""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Controls"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Controls_Setup()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Reset(Optional ByVal blnRunSQL As Boolean = False)"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = (blnRunSQL Or mcRunSqlENB)"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = ( _"""
        PRINT "    .AX ""           mcClrSqlENB _"""
        PRINT "    .AX ""    )"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Defaults()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Requery()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub Controls_Clear()"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Build SQL Statements"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub tglRunSQL_AfterUpdate()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".tglRunSQL_AfterUpdate"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglRunSQL = True"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = True"""
        PRINT "    .AX ""    ' Assign the SQL statement"""
        PRINT "    .AX ""    Call ExecSQL"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglRunSQL = False"""
        PRINT "    .AX ""    Me.tglRunSQL.Enabled = mcRunSqlENB"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub tglClrSQL_AfterUpdate()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".tglClrSQL_AfterUpdate"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Set the toggle state"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    Me.tglClrSQL = True"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = True"""
        PRINT "    .AX ""    ' Assign the SQL statement"""
        PRINT "    .AX ""    'Call SrtBySyncCap(mcClearSBY)"""
        PRINT "    .AX ""    'Call Vars_Defaults"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    ' Reset the toggle state"""
        PRINT "    .AX ""    Me.tglClrSQL = False"""
        PRINT "    .AX ""    Me.tglClrSQL.Enabled = mcClrSqlENB"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SQL Criteria"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub AssignSQL()"""
        PRINT "    .AX ""    Const pcMsgTtl = mcModNam & """".AssignSQL"""""""
        PRINT "    .AX ""    'On Error GoTo Error_Handler"""
        PRINT "    .AX ""    ' Assign current criteria"""
        PRINT "    .AX ""    With RunSQL"""
        PRINT "    .AX ""        ' System"""
        PRINT "    .AX ""        '.WrtSQL = mblnWrtSQL"""
        PRINT "    .AX ""        ' Criteria"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""Exit_Procedure:"""
        PRINT "    .AX ""    Exit Sub"""
        PRINT "    .AX ""Error_Handler:"""
        PRINT "    .AX ""    MsgBox pcMsgTtl & """" ERROR:"""" & Err.Number & """" """" & Err.Description, vbCritical, """"Error Messages"""""""
        PRINT "    .AX ""    Resume Exit_Procedure"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub ExecSQL(Optional ByVal blnEmpty As Boolean)"""
        PRINT "    .AX ""    Call AssignSQL"""
        PRINT "    .AX ""    'Me.RecordSource = RunSQL.Empty_Text(blnEmpty)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize Control RowSource"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Records"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub SaveIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    DoCmd.RunCommand acCmdSaveRecord"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub ReadIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""    Me.Refresh      ' Read form source values"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub LoadIt(Optional ByVal sglDUR As Single)"""
        PRINT "    .AX ""    Call PauseFor(sglDUR)"""
        PRINT "    .AX ""    Call Me.Requery ' Requery form source records"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Logical Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SrtBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage GrpBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage FndOn Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Path Mechanism"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Sub Setup_Path(ByVal strDefault As String, ByVal blnUseList As Boolean)"""
        PRINT "    .AX ""    Dim RegPTH    As clsRegPTH"""
        PRINT "    .AX ""    Set RegPTH = New clsRegPTH"""
        PRINT "    .AX ""    Dim mvrnPthLst As Variant"""
        PRINT "    .AX ""    With RegPTH"""
        PRINT "    .AX ""        Call .Activate(blnUseList)  ' blnUseList mcUseStdList mcUseTplList"""
        PRINT "    .AX ""        mvrnPthLst = Array( _"""
        PRINT "    .AX ""            .GetPthNum(""""Y:\Data\DEV\Projects\DBTools\ETL""""), _"""
        PRINT "    .AX ""            .GetPthNum(""""C:\Data\DEV\Projects\DBTools\ETL""""), _"""
        PRINT "    .AX ""            .GetPthNum(""""E:\Data\DEV\Projects\DBTools\ETL""""), _"""
        PRINT "    .AX ""        )"""
        PRINT "    .AX ""        mstrRowSrcPTH = .GetPthLst(mvrnPthLst, strDefault, mcNoBlank)"""
        PRINT "    .AX ""        mstrRowDefPTH = .DefaultItem"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    Set RegPTH = Nothing"""
        PRINT "    .AX ""    Me.cboPthList.RowSource = mstrRowSrcPTH"""
        PRINT "    .AX ""    Call Reset_PathList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_PathList()"""
        PRINT "    .AX ""    If Len(mstrRowSrcPTH) > 0 Then"""
        PRINT "    .AX ""        ' Set command list value to default"""
        PRINT "    .AX ""        Me.cboPthList.Value = mstrRowDefPTH"""
        PRINT "    .AX ""        ' Reset command buttons"""
        PRINT "    .AX ""        Call Reset_PathButtons"""
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    ' Assign profile information"""
        PRINT "    .AX ""    pfl.PrjDir = Me.cboPthList"""
        PRINT "    .AX ""    pfl.BasPth = Me.cboPthList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Reset_PathButtons()"""
        PRINT "    .AX ""    ' Reset command buttons"""
        PRINT "    .AX ""    Me.cboPthList.Enabled = True"""
        PRINT "    .AX ""    Me.cmdGetPth.Enabled = True"""
        PRINT "    .AX ""    ' Assign current path value"""
        PRINT "    .AX ""    mstrRowCurPTH = Trim$(Me.cboPthList)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Public Sub Disable_PathButtons()"""
        PRINT "    .AX ""    ' Disable command mechanism"""
        PRINT "    .AX ""    Me.cboPthList.Enabled = False"""
        PRINT "    .AX ""    Me.cmdGetPth.Enabled = False"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboPthList_AfterUpdate()"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset command buttons"""
        PRINT "    .AX ""    Call Reset_PathButtons"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cboPthList_DblClick(Cancel As Integer)"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    ' Reset command list value"""
        PRINT "    .AX ""    Call Reset_PathList"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""' NOTE: This requires setting a reference to Microsoft Office Object Library"""
        PRINT "    .AX ""' MsoFileDialogType:"""
        PRINT "    .AX ""'     msoFileDialogFolderPicker (returns value(s))"""
        PRINT "    .AX ""'     msoFileDialogFilePicker   (returns value(s))"""
        PRINT "    .AX ""'     msoFileDialogOpen         (requires execution of selection(s))"""
        PRINT "    .AX ""'     msoFileDialogSaveAs       (requires execution of selection(s))"""
        PRINT "    .AX ""' MsoFileDialogView: (there are more)"""
        PRINT "    .AX ""'     msoFileDialogViewList"""
        PRINT "    .AX ""'     msoFileDialogViewDetails"""
        PRINT "    .AX ""'     msoFileDialogViewSmallIcons"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub cmdGetPth_Click()"""
        PRINT "    .AX ""    ' Declare working variables"""
        PRINT "    .AX ""    Dim vrnITM          As Variant"""
        PRINT "    .AX ""    Dim strDRV          As String"""
        PRINT "    .AX ""    Dim strDIR          As String"""
        PRINT "    .AX ""    Dim strPTH          As String"""
        PRINT "    .AX ""    Const pcUserRespCAN As Long = 0   ' The user canceled"""
        PRINT "    .AX ""    Const pcUserRespPIK As Long = -1  ' The user picked value(s)"""
        PRINT "    .AX ""    ' Initialize the FileDailog type"""
        PRINT "    .AX ""    Dim dlg    As FileDialog"""
        PRINT "    .AX ""    Set dlg = Application.FileDialog(msoFileDialogFolderPicker)"""
        PRINT "    .AX ""    ' Open and evaluate the user response"""
        PRINT "    .AX ""    With dlg"""
        PRINT "    .AX ""        '-----------------------------------------------------------"""
        PRINT "    .AX ""        ' Assign properties"""
        PRINT "    .AX ""        '-----------------------------------------------------------"""
        PRINT "    .AX ""        .Title = """"Assign Project Directory"""""""
        PRINT "    .AX ""        .ButtonName = """"Assign"""""""
        PRINT "    .AX ""        .InitialView = msoFileDialogViewList"""
        PRINT "    .AX ""        '-----------------------------------------------------------"""
        PRINT "    .AX ""        .InitialFileName = """"C:\Data\DEV\Projects"""""""
        PRINT "    .AX ""        '.Filters.Add """"Images"""", """"*.gif; *.jpg; *.jpeg"""", 2  ' Number indictes position in list"""
        PRINT "    .AX ""        '.FilterIndex = 2"""
        PRINT "    .AX ""        '-----------------------------------------------------------"""
        PRINT "    .AX ""        .AllowMultiSelect = False"""
        PRINT "    .AX ""        '-----------------------------------------------------------"""
        PRINT "    .AX ""        If .Show = pcUserRespPIK Then"""
        PRINT "    .AX ""            For Each vrnITM In .SelectedItems"""
        PRINT "    .AX ""                Select Case .DialogType"""
        PRINT "    .AX ""                    Case msoFileDialogOpen:   .Execute"""
        PRINT "    .AX ""                    Case msoFileDialogSaveAs: .Execute"""
        PRINT "    .AX ""                End Select"""
        PRINT "    .AX ""                strPTH = CStr(vrnITM)"""
        PRINT "    .AX ""                strDRV = Left$(strPTH, 1)"""
        PRINT "    .AX ""                strDIR = Mid$(strPTH, 2, 999)"""
        PRINT "    .AX ""                strPTH = UCase$(strDRV) & strDIR"""
        PRINT "    .AX ""                Me.cboPthList = strPTH: Exit For"""
        PRINT "    .AX ""            Next"""
        PRINT "    .AX ""        End If"""
        PRINT "    .AX ""    End With"""
        PRINT "    .AX ""    ' Hide the cursor"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENSQL = Build module:  vbaGenSQL
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENSQL
        EXEC ut_zzVBX GENSQL
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENSQL) BEGIN
    ------------------------------------------------------------------------------------------------
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENSBY = Build module:  vbaGenSBY
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENSBY
        EXEC ut_zzVBX GENSBY
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENSBY) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private mrstCTL                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcListCTL             As Boolean = False  ' True False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlIdxSQN           As Integer = 0"
        PRINT "Private Const mcCtlIdxTBX           As Integer = 1"
        PRINT "Private Const mcCtlIdxVSB           As Integer = 2"
        PRINT "Private Const mcCtlIdxNAM           As Integer = 3"
        PRINT "Private Const mcCtlIdxPFX           As Integer = 4"
        PRINT "Private Const mcCtlIdxBAS           As Integer = 5"
        PRINT "Private Const mcCtlIdxHDR           As Integer = 6"
        PRINT "Private Const mcCtlIdxSFX           As Integer = 7"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlNamSQN           As String = ""CtlSqn"""
        PRINT "Private Const mcCtlNamTBX           As String = ""CtlTbx"""
        PRINT "Private Const mcCtlNamVSB           As String = ""CtlVsb"""
        PRINT "Private Const mcCtlNamNAM           As String = ""CtlNam"""
        PRINT "Private Const mcCtlNamPFX           As String = ""CtlPfx"""
        PRINT "Private Const mcCtlNamBAS           As String = ""CtlBas"""
        PRINT "Private Const mcCtlNamHDR           As String = ""CtlHdr"""
        PRINT "Private Const mcCtlNamSFX           As String = ""CtlSfx"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlPfxTXT           As String = ""txt"""
        PRINT "Private Const mcCtlPfxCBO           As String = ""cbo"""
        PRINT "Private Const mcCtlPfxCHK           As String = ""chk"""
        PRINT "Private Const mcCtlPfxCMD           As String = ""cmd"""
        PRINT "Private Const mcCtlPfxTGL           As String = ""tgl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlTypTXT           As Integer = acTextBox"
        PRINT "Private Const mcCtlTypCBO           As Integer = acComboBox"
        PRINT "Private Const mcCtlTypCHK           As Integer = acCheckBox"
        PRINT "Private Const mcCtlTypCMD           As Integer = acCommandButton"
        PRINT "Private Const mcCtlTypTGL           As Integer = acToggleButton"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmMch              As String = ""FrmMch"""
        PRINT "Private Const mcSbyCmd              As String = ""cmdSrtBy"""
        PRINT "Private Const mcGbyTgl              As String = ""tglGrpBy"""
        PRINT "Private Const mcSlnCbo              As String = ""cboSelOn"""
        PRINT "Private Const mcSlnTxt              As String = ""txtSelOn"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmSup              As String = ""FrmSup"""
        PRINT "Private Const mcFrmHcr              As String = ""cmdHideCursor"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmCmd              As String = ""FrmCmd"""
        PRINT "Private Const mcFrmRfh              As String = ""cmdRefreshForm"""
        PRINT "Private Const mcFrmAdn              As String = ""cmdAddNewRecord"""
        PRINT "Private Const mcFrmSav              As String = ""cmdSaveRecord"""
        PRINT "Private Const mcFrmUnd              As String = ""cmdUndoRecord"""
        PRINT "Private Const mcFrmDel              As String = ""cmdDeleteRecord"""
        PRINT "Private Const mcFrmCls              As String = ""cmdCloseForm"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMngSQL              As String = ""MngSQL"""
        PRINT "Private Const mcRunSQL              As String = ""tglRunSQL"""
        PRINT "Private Const mcClrSQL              As String = ""tglClrSQL"""
        PRINT "Private Const mcWrtSQL              As String = ""tglWrtSQL"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmdMch              As String = ""CmdMch"""
        PRINT "Private Const mcCmdLst              As String = ""cboCmdList"""
        PRINT "Private Const mcCmdRun              As String = ""tglRunCmd"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptMch              As String = ""RptMch"""
        PRINT "Private Const mcRptLst              As String = ""cboRptList"""
        PRINT "Private Const mcRptPrn              As String = ""tglPrnRpt"""
        PRINT "Private Const mcRptPrv              As String = ""tglPrvRpt"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpIdxTYP           As Integer = 0"
        PRINT "Private Const mcPrpIdxNAM           As Integer = 1"
        PRINT "Private Const mcPrpIdxTBL           As Integer = 2"
        PRINT "Private Const mcPrpIdxCTL           As Integer = 3"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPrpNamTYP           As String = ""PrpTyp"""
        PRINT "Private Const mcPrpNamNAM           As String = ""PrpNam"""
        PRINT "Private Const mcPrpNamTBL           As String = ""PrpTbl"""
        PRINT "Private Const mcPrpNamCTL           As String = ""PrpCtl"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldFmt                  As Variant"
        PRINT "'***************************************************************************************************"
        PRINT "Private mblnMchFlgSBY               As Boolean             ' mcSbyCmd"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTXT                        As String"
        PRINT "Private mSPC                        As String * 100"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  SrtBy Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Gen_SBY()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Gen_SBY"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    Dim strOBJ As String    ' Object name"
        PRINT "    Dim strABV As String    ' Object abbreviation"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "    strOBJ = ""frm_FormName"": strABV = ""ZZZ"""
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim prj As Object"
        PRINT "    Set prj = Application.CurrentProject"
        PRINT "    Dim obj As AccessObject"
        PRINT "    Dim frm As Form"
        PRINT "    Dim wtx As clsUtlWTX"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    For Each obj In prj.AllForms"
        PRINT "        If obj.Name = strOBJ Then"
        PRINT "            DoCmd.OpenForm strOBJ"
        PRINT "            For Each frm In Forms"
        PRINT "                If frm.Name = strOBJ Then"
        PRINT "                    Call wtx.AX_Clear"
        PRINT "                    Call GenSby_SBY(frm, wtx, strOBJ, strABV)"
        PRINT "                    Call wtx.AX_WrtTmp"
        PRINT "                End If"
        PRINT "            Next"
        PRINT "            DoCmd.Close acForm, strOBJ, acSaveYes"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" - "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  SrtBy Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenSby_SBY( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strABV As String _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenSby_SBY"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize working objects"
        PRINT "    Dim strSFX As String"
        PRINT "    Dim strALS As String: strALS = LCase$(strABV)"
        PRINT "    Dim strSBY As String: strSBY = ""SrtBy"" & strABV"
        PRINT ""
        PRINT "    ' Initialize control recordset"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT ""
        PRINT "    ' Declare Property variables"
        PRINT "    Dim strPrpNam       As String"
        PRINT "    Dim strPrpTyp       As String"
        PRINT "    Dim strPrpTbl       As String"
        PRINT "    Dim strPrpVar       As String"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""Form Statements"""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SrtBy Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private sby                         As clsRunSBY                          ' """
        PRINT "    .AX ""Private mvrnSrtBy()                 As Variant                            ' """
        PRINT "    .AX ""Private Const mcClearSBY            As Boolean = True                     ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SrtBy/GrpBy Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            .AX VBA_Sfx2Hdr(mrstCTL.Fields(mcCtlIdxSFX), ""FRM"")"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is opened"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Open(Cancel As Integer)"""
        PRINT "    .AX ""    ' Initialize:  SrtBy Objects"""
        PRINT "    .AX ""    Set sby = New clsRunSBY"""
        PRINT "    .AX ""    sby.SrtBy = RunRST."" & strSBY & ""  ' Load:  SrtBy Array"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is closed"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Close()"""
        PRINT "    .AX ""    RunRST."" & strSBY & "" = sby.SrtBy  ' Save:  SrtBy Array"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Controls"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Controls_Setup()"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Initialize:  SrtBy Objects"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call SrtBySyncCap"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage SrtBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' SrtBy:  Synchronize Captions"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX ""Private Sub SrtBySyncCap(Optional ByVal blnCLR As Boolean = False)"""
        PRINT "    .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "    .AX ""    If blnCLR Then Call sby.ClrCap"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            .AX ""    cmdSrtBy"" & strSFX & "".Caption = sby.GetCap(mcHdr"" & strSFX & "")"""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""    RunRST."" & strSBY & "" = sby.SrtBy"""
        PRINT "    .AX ""    RunSQL."" & strSBY & "" = sby.SrtBy"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "    mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            .AX ""Private Sub cmdSrtBy"" & strSFX & ""_Click()"""
        PRINT "            .AX ""    cmdSrtBy"" & strSFX & "".Caption = sby.NxtCap(mcHdr"" & strSFX & "", cmdSrtBy"" & strSFX & "".Caption): Call SrtBySyncCap"""
        PRINT "            .AX ""End Sub"""
        PRINT "            .AX ""'==================================================================================================="""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""RunRST:  Global Statements"""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SrtBy Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    '---------------------------------------------------------------------------------------"
        PRINT "    strPrpTyp = ""VRN"": strPrpNam = strSBY: strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "    .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "    '---------------------------------------------------------------------------------------"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Criteria"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strPrpTyp = ""LNG"""
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            strPrpVar = ""mlng"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strPrpTyp = ""STR"""
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            strPrpVar = ""mstr"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize SrtBy array"""
        PRINT "    .AX ""    ReDim mvrn"" & strSBY & ""(0)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Persist SrtBy arrays"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    '---------------------------------------------------------------------------------------"
        PRINT "    strPrpTyp = ""VRN"": strPrpNam = strSBY: strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "    .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "    '---------------------------------------------------------------------------------------"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Module Criteria Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strPrpTyp = ""LNG"""
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            strPrpVar = ""mlng"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strPrpTyp = ""STR"""
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            strPrpVar = ""mstr"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""RunSQL:  Global Statements"""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SrtBy Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcSrtByNAM            As Integer = 0  ' Object name/identifier"""
        PRINT "    .AX ""Private Const mcSrtByORD            As Integer = 1  ' Sort order value"""
        PRINT "    .AX ""Private Const mcSrtByDIR            As Integer = 2  ' Sort direction"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcSrtByAS1            As String = """">"""" ' Ascending"""
        PRINT "    .AX ""Private Const mcSrtByDS1            As String = """"<"""" ' Descending"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SrtBy Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    '---------------------------------------------------------------------------------------"
        PRINT "    strPrpTyp = ""VRN"": strPrpNam = strSBY: strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "    .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "    '---------------------------------------------------------------------------------------"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' Module Criteria"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strPrpTyp = ""LNG"""
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            strPrpVar = ""mlng"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strPrpTyp = ""STR"""
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            strPrpVar = ""mstr"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prv(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize SrtBy arrays"""
        PRINT "    .AX ""    ReDim mvrn"" & strSBY & ""(0)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Persist SrtBy arrays"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    '---------------------------------------------------------------------------------------"
        PRINT "    strPrpTyp = ""VRN"": strPrpNam = strSBY: strPrpVar = ""mvrn"" & strPrpNam"
        PRINT "    .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "    '---------------------------------------------------------------------------------------"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Module Criteria Properties"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strPrpTyp = ""LNG"""
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            strPrpVar = ""mlng"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strPrpTyp = ""STR"""
        PRINT "            strPrpNam = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            strPrpVar = ""mstr"" & strPrpNam"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            .AX VBA_Var2Prp(VBA_Pfx2Typ(strPrpTyp), strPrpNam, strPrpVar)"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""RunSQL:  Function Implementation"""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX ""Public Function SQLText() AS String"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Initialize SrtBy Objects"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            .AX VBA_Sfx2Hdr(mrstCTL.Fields(mcCtlIdxSFX), ""SQL"")"
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Dim strDIR        As String"""
        PRINT "    .AX ""    Dim vrnITM        As Variant"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Dim sby           As clsRunSBY"""
        PRINT "    .AX ""    Set sby = New clsRunSBY"""
        PRINT "    .AX ""    sby.SrtBy = SrtByTPL"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnCbo & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            .AX ""    If mlng"" & strSFX & "" > 0 Then"""
        PRINT "            .AX ""        If strWHR = mWHR Then"""
        PRINT "            .AX ""            .AX strWHR: strWHR = mcMTY"""
        PRINT "            .AX ""        End If"""
        PRINT "            .AX ""        .AX strAND & """"ttl."" & strSFX & "" = """" & mlng"" & strSFX & "" & """""""""""
        PRINT "            .AX ""        strAND = mAND"""
        PRINT "            .AX ""    End If"""
        PRINT "            .AX ""    '-----------------------------------------------------------"""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSlnTxt & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            .AX ""    If Len(mstr"" & strSFX & "") > 0 Then"""
        PRINT "            .AX ""        If strWHR = mWHR Then"""
        PRINT "            .AX ""            .AX strWHR: strWHR = mcMTY"""
        PRINT "            .AX ""        End If"""
        PRINT "            .AX ""        .AX strAND & """"ttl."" & strSFX & "" LIKE '"""" & mstr"" & strSFX & "" & """"'"""""""
        PRINT "            .AX ""        strAND = mAND"""
        PRINT "            .AX ""    End If"""
        PRINT "            .AX ""    '-----------------------------------------------------------"""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX """""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    .AX """"ORDER BY"""""""
        PRINT "    .AX ""    If sby.HasElm Then"""
        PRINT "    .AX ""        For Each vrnITM In sby.SrtBy"""
        PRINT "    .AX ""            If Not IsEmpty(vrnITM) Then"""
        PRINT "    .AX ""                strDIR = IIf(vrnITM(mcSrtByDIR) = mcSrtByDS1, """" DESC,"""", """","""")"""
        PRINT "    .AX ""                Select Case vrnITM(mcSrtByNAM)"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            .AX ""                    Case pcHdr"" & strSFX & "": .AX """"    "" & strALS & ""."" & strSFX & """""" & strDIR"""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""                End Select"""
        PRINT "    .AX ""            End If"""
        PRINT "    .AX ""        Next"""
        PRINT "    .AX ""    Else"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then"
        PRINT "        mrstCTL.MoveFirst"
        PRINT "        Do While Not mrstCTL.EOF"
        PRINT "            strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "            .AX ""        .AX """"    "" & strALS & ""."" & strSFX & "","""""""
        PRINT "            mrstCTL.MoveNext"
        PRINT "        Loop"
        PRINT "    End If"
        PRINT "    .AX ""    End If"""
        PRINT "    .AX ""    .AX_Chop ("""","""")"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX """""
        PRINT "    .AX ""End Function"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" - "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize:  Control List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_CtlRst(ByRef frm As Form, ByRef wtx As clsUtlWTX)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Init_CtlRst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize working objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim ctl As Control"
        PRINT "    Dim prp As Property"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize new report list"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Set mrstCTL = New ADODB.Recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Create recordset fields"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mvrnFldFmt = Array( _"
        PRINT "        mcCtlNamSQN, _"
        PRINT "        mcCtlNamTBX, _"
        PRINT "        mcCtlNamVSB, _"
        PRINT "        mcCtlNamNAM, _"
        PRINT "        mcCtlNamPFX, _"
        PRINT "        mcCtlNamBAS, _"
        PRINT "        mcCtlNamHDR, _"
        PRINT "        mcCtlNamSFX _"
        PRINT "    )"
        PRINT "    With mrstCTL"
        PRINT "        Call .Fields.Append(mcCtlNamSQN, adInteger, 4)"
        PRINT "        Call .Fields.Append(mcCtlNamTBX, adInteger, 4)"
        PRINT "        Call .Fields.Append(mcCtlNamVSB, adBoolean, 1)"
        PRINT "        Call .Fields.Append(mcCtlNamNAM, adVarChar, 99)"
        PRINT "        Call .Fields.Append(mcCtlNamPFX, adVarChar, 3)"
        PRINT "        Call .Fields.Append(mcCtlNamBAS, adVarChar, 99)"
        PRINT "        Call .Fields.Append(mcCtlNamHDR, adVarChar, 8)"
        PRINT "        Call .Fields.Append(mcCtlNamSFX, adVarChar, 99)"
        PRINT "    End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup the recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    With mrstCTL"
        PRINT "        .Open: .Sort = mcCtlNamSQN & "" ASC"""
        PRINT "    End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Declare Report variables"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim lngCtlSqn       As Long"
        PRINT "    Dim lngCtlTbx       As Long"
        PRINT "    Dim blnCtlVsb       As Boolean"
        PRINT "    Dim strCtlNam       As String"
        PRINT "    Dim strCtlPfx       As String"
        PRINT "    Dim strCtlBas       As String"
        PRINT "    Dim strCtlHdr       As String"
        PRINT "    Dim strCtlSfx       As String"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Add registered reports"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Visible:True"
        PRINT "    ' TabIndex: 23"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each ctl In frm.Controls"
        PRINT "        With ctl"
        PRINT "            For Each prp In ctl.Properties"
        PRINT "                On Error Resume Next"
        PRINT "                Debug.Print ctl.Name & "": "" & prp.Name & ""="" & prp.Value"
        PRINT "                'On Error GoTo Error_Handler"
        PRINT "            Next"
        PRINT "            lngCtlSqn = lngCtlSqn+1"
        PRINT "            For Each prp In ctl.Properties"
        PRINT "                If prp.Name = ""TabIndex"" Then lngCtlTbx = prp.Value"
        PRINT "                If prp.Name = ""Visible"" Then blnCtlVsb = prp.Value"
        PRINT "            Next"
        PRINT "            strCtlNam = .Name"
        PRINT "            strCtlPfx = """""
        PRINT "            strCtlBas = """""
        PRINT "            strCtlHdr = """""
        PRINT "            strCtlSfx = """""
        PRINT "            Select Case .ControlType"
        PRINT "                Case mcCtlTypTXT: strCtlPfx = mcCtlPfxTXT: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCBO: strCtlPfx = mcCtlPfxCBO: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCHK: strCtlPfx = mcCtlPfxCHK: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCMD: strCtlPfx = mcCtlPfxCMD: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypTGL: strCtlPfx = mcCtlPfxTGL: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "            End Select"
        PRINT "            Select Case Left$(strCtlNam, 8)"
        PRINT "                Case mcSbyCmd: strCtlHdr = mcSbyCmd: strCtlSfx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcGbyTgl: strCtlHdr = mcGbyTgl: strCtlSfx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcSlnTxt: strCtlHdr = mcSlnTxt: strCtlSfx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcSlnCbo: strCtlHdr = mcSlnCbo: strCtlSfx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "            End Select"
        PRINT "            Select Case strCtlNam"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcFrmHcr: strCtlHdr = mcFrmSup: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcFrmRfh: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmAdn: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmSav: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmUnd: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmDel: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmCls: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcRunSQL: strCtlHdr = mcMngSQL: strCtlSfx = """""
        PRINT "                Case mcClrSQL: strCtlHdr = mcMngSQL: strCtlSfx = """""
        PRINT "                Case mcWrtSQL: strCtlHdr = mcMngSQL: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcCmdLst: strCtlHdr = mcCmdMch: strCtlSfx = """""
        PRINT "                Case mcCmdRun: strCtlHdr = mcCmdMch: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcRptLst: strCtlHdr = mcRptMch: strCtlSfx = """""
        PRINT "                Case mcRptPrn: strCtlHdr = mcRptMch: strCtlSfx = """""
        PRINT "                Case mcRptPrv: strCtlHdr = mcRptMch: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "            End Select"
        PRINT "        End With"
        PRINT "        If Len(strCtlPfx) > 0 Then"
        PRINT "            Call AddCtlItm(lngCtlSqn, lngCtlTbx, blnCtlVsb, strCtlNam, strCtlPfx, strCtlBas, strCtlHdr, strCtlSfx)"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    Call Init_CtlFlg"
        PRINT "    If mcListCTL Then Call List_CtlItm(wtx)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddCtlItm( _"
        PRINT "    ByVal lngCtlSqn As Long, _"
        PRINT "    ByVal lngCtlTbx As Long, _"
        PRINT "    ByVal blnCtlVsb As Boolean, _"
        PRINT "    ByVal strCtlNam As String, _"
        PRINT "    ByVal strCtlPfx As String, _"
        PRINT "    ByVal strCtlBas As String, _"
        PRINT "    ByVal strCtlHdr As String, _"
        PRINT "    ByVal strCtlSfx As String _"
        PRINT ")"
        PRINT "    If Not HasCtlNam(strCtlNam) Then"
        PRINT "        With mrstCTL"
        PRINT "            .AddNew mvrnFldFmt, Array(lngCtlSqn, lngCtlTbx, blnCtlVsb, strCtlNam, strCtlPfx, strCtlBas, strCtlHdr, strCtlSfx)"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasCtlNam(ByVal strCtlNam As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""CtlNam = '"" & strCtlNam & ""'"""
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasCtlNam = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasCtlHdr(ByVal strCtlHdr As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""CtlHdr = '"" & strCtlHdr & ""'"""
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasCtlHdr = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub List_CtlItm(ByRef wtx As clsUtlWTX)"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strPFX As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHDR As String"
        PRINT "    Dim strSFX As String"
        PRINT "    mrstCTL.Filter = """": mrstCTL.Sort = mcCtlNamTBX"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then mrstCTL.MoveFirst"
        PRINT "    Do While Not mrstCTL.EOF"
        PRINT "        lngSQN = mrstCTL.Fields(mcCtlIdxSQN)"
        PRINT "        lngTBX = mrstCTL.Fields(mcCtlIdxTBX)"
        PRINT "        blnVSB = mrstCTL.Fields(mcCtlIdxVSB)"
        PRINT "        strNAM = mrstCTL.Fields(mcCtlIdxNAM)"
        PRINT "        strPFX = mrstCTL.Fields(mcCtlIdxPFX)"
        PRINT "        strBAS = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "        strHDR = mrstCTL.Fields(mcCtlIdxHDR)"
        PRINT "        strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "        wtx.AX ""CtlNam="" & Format$(lngSQN, ""00"") & "":"" & Format$(lngTBX, ""00"") & "":"" & blnVSB & "":"" & strNAM & "":"" & strPFX & "":"" & strBAS & "":"" & strHDR & "":"" & strSFX"
        PRINT "        mrstCTL.MoveNext"
        PRINT "    Loop"
        PRINT "    Call List_CtlFlg(wtx)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Init_CtlFlg()"
        PRINT "    mblnMchFlgSBY = (HasCtlHdr(mcSbyCmd))"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub List_CtlFlg(ByRef wtx As clsUtlWTX)"
        PRINT "    wtx.AX ""mblnMchFlgSBY="" & mblnMchFlgSBY"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENGBY = Build module:  vbaGenGBY
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENGBY
        EXEC ut_zzVBX GENGBY
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENGBY) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private mrstCTL                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcListCTL             As Boolean = False  ' True False"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlIdxSQN           As Integer = 0"
        PRINT "Private Const mcCtlIdxTBX           As Integer = 1"
        PRINT "Private Const mcCtlIdxVSB           As Integer = 2"
        PRINT "Private Const mcCtlIdxNAM           As Integer = 3"
        PRINT "Private Const mcCtlIdxPFX           As Integer = 4"
        PRINT "Private Const mcCtlIdxBAS           As Integer = 5"
        PRINT "Private Const mcCtlIdxHDR           As Integer = 6"
        PRINT "Private Const mcCtlIdxSFX           As Integer = 7"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlNamSQN           As String = ""CtlSqn"""
        PRINT "Private Const mcCtlNamTBX           As String = ""CtlTbx"""
        PRINT "Private Const mcCtlNamVSB           As String = ""CtlVsb"""
        PRINT "Private Const mcCtlNamNAM           As String = ""CtlNam"""
        PRINT "Private Const mcCtlNamPFX           As String = ""CtlPfx"""
        PRINT "Private Const mcCtlNamBAS           As String = ""CtlBas"""
        PRINT "Private Const mcCtlNamHDR           As String = ""CtlHdr"""
        PRINT "Private Const mcCtlNamSFX           As String = ""CtlSfx"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlPfxTXT           As String = ""txt"""
        PRINT "Private Const mcCtlPfxCBO           As String = ""cbo"""
        PRINT "Private Const mcCtlPfxCHK           As String = ""chk"""
        PRINT "Private Const mcCtlPfxCMD           As String = ""cmd"""
        PRINT "Private Const mcCtlPfxTGL           As String = ""tgl"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlTypTXT           As Integer = acTextBox"
        PRINT "Private Const mcCtlTypCBO           As Integer = acComboBox"
        PRINT "Private Const mcCtlTypCHK           As Integer = acCheckBox"
        PRINT "Private Const mcCtlTypCMD           As Integer = acCommandButton"
        PRINT "Private Const mcCtlTypTGL           As Integer = acToggleButton"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmMch              As String = ""FrmMch"""
        PRINT "Private Const mcSbyCmd              As String = ""cmdSrtBy"""
        PRINT "Private Const mcGbyTgl              As String = ""tglGrpBy"""
        PRINT "Private Const mcSlnCbo              As String = ""cboSelOn"""
        PRINT "Private Const mcSlnTxt              As String = ""txtSelOn"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmSup              As String = ""FrmSup"""
        PRINT "Private Const mcFrmHcr              As String = ""cmdHideCursor"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmCmd              As String = ""FrmCmd"""
        PRINT "Private Const mcFrmRfh              As String = ""cmdRefreshForm"""
        PRINT "Private Const mcFrmAdn              As String = ""cmdAddNewRecord"""
        PRINT "Private Const mcFrmSav              As String = ""cmdSaveRecord"""
        PRINT "Private Const mcFrmUnd              As String = ""cmdUndoRecord"""
        PRINT "Private Const mcFrmDel              As String = ""cmdDeleteRecord"""
        PRINT "Private Const mcFrmCls              As String = ""cmdCloseForm"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMngSQL              As String = ""MngSQL"""
        PRINT "Private Const mcRunSQL              As String = ""tglRunSQL"""
        PRINT "Private Const mcClrSQL              As String = ""tglClrSQL"""
        PRINT "Private Const mcWrtSQL              As String = ""tglWrtSQL"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCmdMch              As String = ""CmdMch"""
        PRINT "Private Const mcCmdLst              As String = ""cboCmdList"""
        PRINT "Private Const mcCmdRun              As String = ""tglRunCmd"""
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcRptMch              As String = ""RptMch"""
        PRINT "Private Const mcRptLst              As String = ""cboRptList"""
        PRINT "Private Const mcRptPrn              As String = ""tglPrnRpt"""
        PRINT "Private Const mcRptPrv              As String = ""tglPrvRpt"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldFmt                  As Variant"
        PRINT "'***************************************************************************************************"
        PRINT "Private mblnMchFlgGBY               As Boolean             ' mcGbyTgl"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTXT                        As String"
        PRINT "Private mSPC                        As String * 100"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  GrpBy Statements"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Gen_GBY()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Gen_GBY"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    Dim strOBJ As String    ' Object name"
        PRINT "    Dim strABV As String    ' Object abbreviation"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "    strOBJ = ""frm_FormName"": strABV = ""ZZZ"""
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Dim prj As Object"
        PRINT "    Set prj = Application.CurrentProject"
        PRINT "    Dim obj As AccessObject"
        PRINT "    Dim frm As Form"
        PRINT "    Dim wtx As clsUtlWTX"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    For Each obj In prj.AllForms"
        PRINT "        If obj.Name = strOBJ Then"
        PRINT "            DoCmd.OpenForm strOBJ"
        PRINT "            For Each frm In Forms"
        PRINT "                If frm.Name = strOBJ Then"
        PRINT "                    Call wtx.AX_Clear"
        PRINT "                    Call GenGby_GBY(frm, wtx, strOBJ, strABV)"
        PRINT "                    Call wtx.AX_WrtTmp"
        PRINT "                End If"
        PRINT "            Next"
        PRINT "            DoCmd.Close acForm, strOBJ, acSaveYes"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" - "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Generate:  GrpBy Statements"
        PRINT "'###################################################################################################"
        PRINT "Public Sub GenGby_GBY( _"
        PRINT "    ByRef frm As Form, _"
        PRINT "    ByRef wtx As clsUtlWTX, _"
        PRINT "    ByVal strOBJ As String, _"
        PRINT "    ByVal strABV As String _"
        PRINT ")"
        PRINT "    Const pcMsgTtl = mcModNam & "".GenGby_GBY"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize working objects"
        PRINT "    Dim strSFX As String"
        PRINT "    Dim strGBY As String: strGBY = ""GrpBy"" & strABV"
        PRINT "    ' Initialize control recordset"
        PRINT "    Call Init_CtlRst(frm, wtx)"
        PRINT "    '***********************************************************************************************"
        PRINT "    With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""Form Statements"""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' GrpBy Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private gby                         As clsRunGBY             ' """
        PRINT "    .AX ""Private mvrnGrpBy()                 As Variant               ' """
        PRINT "    .AX ""Private Const mcClearGBY            As Boolean = True        ' """
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' SrtBy/GrpBy Constants"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then mrstCTL.MoveFirst"
        PRINT "    Do While Not mrstCTL.EOF"
        PRINT "        strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "        .AX ""Private Const mcHdr"" & strSFX & ""           As String = """""" & strSFX & """"""     ' """
        PRINT "        mrstCTL.MoveNext"
        PRINT "    Loop"
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is opened"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Open => Load => Resize => Activate => Current"""
        PRINT "    .AX ""Private Sub Form_Open(Cancel As Integer)"""
        PRINT "    .AX ""    ' Initialize:  GrpBy Objects"""
        PRINT "    .AX ""    Set gby = New clsRunGBY"""
        PRINT "    .AX ""    gby.GrpBy = RunRST."" & strGBY & ""  ' Load:  GrpBy Array"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Actions to perform when form is closed"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Unload => Deactivate => Close"""
        PRINT "    .AX ""Private Sub Form_Close()"""
        PRINT "    .AX ""    RunRST."" & strGBY & "" = gby.GrpBy  ' Save:  GrpBy Array"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage Controls"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Controls_Setup()"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    ' Initialize:  GrpBy Objects"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call GrpBySyncCap"""
        PRINT "    .AX ""    '-----------------------------------------------------------------------------------------------"""
        PRINT "    .AX ""    Call Controls_Reset"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Manage GrpBy Selections"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    mrstCTL.Filter = mcCtlNamHDR & "" = '"" & mcSbyCmd & ""'"": mrstCTL.Sort = mcCtlNamSQN"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then mrstCTL.MoveFirst"
        PRINT "    Do While Not mrstCTL.EOF"
        PRINT "        strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "        .AX ""Private Sub tglGrpBy"" & strSFX & ""_AfterUpdate()"""
        PRINT "        .AX ""    Me.cmdHideCursor.SetFocus"""
        PRINT "        .AX ""    Me.tglGrpBy"" & strSFX & "" = False"""
        PRINT "        .AX ""End Sub"""
        PRINT "        .AX ""'==================================================================================================="""
        PRINT "        mrstCTL.MoveNext"
        PRINT "    Loop"
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""RunRST:  Global Statements"""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' GrpBy Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrn"" & strGBY & ""()              As Variant"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize GrpBy array"""
        PRINT "    .AX ""    ReDim mvrn"" & strGBY & ""(0)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Persist GrpBy array"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Property Let "" & strGBY & ""(ByVal vNewVal As Variant)"""
        PRINT "    .AX ""    mvrn"" & strGBY & "" = vNewVal"""
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""Public Property Get "" & strGBY & ""() As Variant"""
        PRINT "    .AX ""    "" & strGBY & "" = mvrn"" & strGBY"
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX ""RunSQL:  Global Statements"""
        PRINT "    .AX ""@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' GrpBy Tracking"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcGrpByNAM            As Integer = 0  ' Object name/identifier"""
        PRINT "    .AX ""Private Const mcGrpByORD            As Integer = 1  ' Sort order value"""
        PRINT "    .AX ""Private Const mcGrpByDIR            As Integer = 2  ' Sort direction"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private Const mcGrpByAS1            As String = """">"""" ' Ascending"""
        PRINT "    .AX ""Private Const mcGrpByDS1            As String = """"<"""" ' Descending"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""' GrpBy Objects"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX ""Private mvrn"" & strGBY & ""()              As Variant"""
        PRINT "    .AX ""'***************************************************************************************************"""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Initialize module objects and default values"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Private Sub Class_Initialize()"""
        PRINT "    .AX ""    ' Initialize GrpBy arrays"""
        PRINT "    .AX ""    ReDim mvrn"" & strGBY & ""(0)"""
        PRINT "    .AX ""End Sub"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    .AX """""
        PRINT "    .AX """""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""' Persist GrpBy arrays"""
        PRINT "    .AX ""'###################################################################################################"""
        PRINT "    .AX ""Public Property Let "" & strGBY & ""(ByVal vNewVal As Variant)"""
        PRINT "    .AX ""    mvrn"" & strGBY & "" = vNewVal"""
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""Public Property Get "" & strGBY & ""() As Variant"""
        PRINT "    .AX ""    "" & strGBY & "" = mvrn"" & strGBY"
        PRINT "    .AX ""End Property"""
        PRINT "    .AX ""'==================================================================================================="""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" - "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize:  Control List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_CtlRst(ByRef frm As Form, ByRef wtx As clsUtlWTX)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Init_CtlRst"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize working objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim ctl As Control"
        PRINT "    Dim prp As Property"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize new report list"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Set mrstCTL = New ADODB.Recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Create recordset fields"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mvrnFldFmt = Array( _"
        PRINT "        mcCtlNamSQN, _"
        PRINT "        mcCtlNamTBX, _"
        PRINT "        mcCtlNamVSB, _"
        PRINT "        mcCtlNamNAM, _"
        PRINT "        mcCtlNamPFX, _"
        PRINT "        mcCtlNamBAS, _"
        PRINT "        mcCtlNamHDR, _"
        PRINT "        mcCtlNamSFX _"
        PRINT "    )"
        PRINT "    With mrstCTL"
        PRINT "        Call .Fields.Append(mcCtlNamSQN, adInteger, 4)"
        PRINT "        Call .Fields.Append(mcCtlNamTBX, adInteger, 4)"
        PRINT "        Call .Fields.Append(mcCtlNamVSB, adBoolean, 1)"
        PRINT "        Call .Fields.Append(mcCtlNamNAM, adVarChar, 99)"
        PRINT "        Call .Fields.Append(mcCtlNamPFX, adVarChar, 3)"
        PRINT "        Call .Fields.Append(mcCtlNamBAS, adVarChar, 99)"
        PRINT "        Call .Fields.Append(mcCtlNamHDR, adVarChar, 8)"
        PRINT "        Call .Fields.Append(mcCtlNamSFX, adVarChar, 99)"
        PRINT "    End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup the recordset"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    With mrstCTL"
        PRINT "        .Open: .Sort = mcCtlNamSQN & "" ASC"""
        PRINT "    End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Declare Report variables"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim lngCtlSqn       As Long"
        PRINT "    Dim lngCtlTbx       As Long"
        PRINT "    Dim blnCtlVsb       As Boolean"
        PRINT "    Dim strCtlNam       As String"
        PRINT "    Dim strCtlPfx       As String"
        PRINT "    Dim strCtlBas       As String"
        PRINT "    Dim strCtlHdr       As String"
        PRINT "    Dim strCtlSfx       As String"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Add registered reports"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Visible:True"
        PRINT "    ' TabIndex: 23"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    For Each ctl In frm.Controls"
        PRINT "        With ctl"
        PRINT "            For Each prp In ctl.Properties"
        PRINT "                On Error Resume Next"
        PRINT "                Debug.Print ctl.Name & "": "" & prp.Name & ""="" & prp.Value"
        PRINT "                'On Error GoTo Error_Handler"
        PRINT "            Next"
        PRINT "            lngCtlSqn = lngCtlSqn+1"
        PRINT "            For Each prp In ctl.Properties"
        PRINT "                If prp.Name = ""TabIndex"" Then lngCtlTbx = prp.Value"
        PRINT "                If prp.Name = ""Visible"" Then blnCtlVsb = prp.Value"
        PRINT "            Next"
        PRINT "            strCtlNam = .Name"
        PRINT "            strCtlPfx = """""
        PRINT "            strCtlBas = """""
        PRINT "            strCtlHdr = """""
        PRINT "            strCtlSfx = """""
        PRINT "            Select Case .ControlType"
        PRINT "                Case mcCtlTypTXT: strCtlPfx = mcCtlPfxTXT: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCBO: strCtlPfx = mcCtlPfxCBO: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCHK: strCtlPfx = mcCtlPfxCHK: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypCMD: strCtlPfx = mcCtlPfxCMD: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "                Case mcCtlTypTGL: strCtlPfx = mcCtlPfxTGL: strCtlBas = Right$(strCtlNam, Len(strCtlNam) - 3)"
        PRINT "            End Select"
        PRINT "            Select Case Left$(strCtlNam, 8)"
        PRINT "                Case mcSbyCmd: strCtlHdr = mcSbyCmd: strCtlSfx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcGbyTgl: strCtlHdr = mcGbyTgl: strCtlSfx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcSlnTxt: strCtlHdr = mcSlnTxt: strCtlSfx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "                Case mcSlnCbo: strCtlHdr = mcSlnCbo: strCtlSfx = Right$(strCtlNam, Len(strCtlNam) - 8)"
        PRINT "            End Select"
        PRINT "            Select Case strCtlNam"
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcFrmHcr: strCtlHdr = mcFrmSup: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcFrmRfh: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmAdn: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmSav: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmUnd: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmDel: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                Case mcFrmCls: strCtlHdr = mcFrmCmd: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcRunSQL: strCtlHdr = mcMngSQL: strCtlSfx = """""
        PRINT "                Case mcClrSQL: strCtlHdr = mcMngSQL: strCtlSfx = """""
        PRINT "                Case mcWrtSQL: strCtlHdr = mcMngSQL: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcCmdLst: strCtlHdr = mcCmdMch: strCtlSfx = """""
        PRINT "                Case mcCmdRun: strCtlHdr = mcCmdMch: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "                Case mcRptLst: strCtlHdr = mcRptMch: strCtlSfx = """""
        PRINT "                Case mcRptPrn: strCtlHdr = mcRptMch: strCtlSfx = """""
        PRINT "                Case mcRptPrv: strCtlHdr = mcRptMch: strCtlSfx = """""
        PRINT "                '-----------------------------------------------------------------------------------"
        PRINT "            End Select"
        PRINT "        End With"
        PRINT "        If Len(strCtlPfx) > 0 Then"
        PRINT "            Call AddCtlItm(lngCtlSqn, lngCtlTbx, blnCtlVsb, strCtlNam, strCtlPfx, strCtlBas, strCtlHdr, strCtlSfx)"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    Call Init_CtlFlg"
        PRINT "    If mcListCTL Then Call List_CtlItm(wtx)"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddCtlItm( _"
        PRINT "    ByVal lngCtlSqn As Long, _"
        PRINT "    ByVal lngCtlTbx As Long, _"
        PRINT "    ByVal blnCtlVsb As Boolean, _"
        PRINT "    ByVal strCtlNam As String, _"
        PRINT "    ByVal strCtlPfx As String, _"
        PRINT "    ByVal strCtlBas As String, _"
        PRINT "    ByVal strCtlHdr As String, _"
        PRINT "    ByVal strCtlSfx As String _"
        PRINT ")"
        PRINT "    If Not HasCtlNam(strCtlNam) Then"
        PRINT "        With mrstCTL"
        PRINT "            .AddNew mvrnFldFmt, Array(lngCtlSqn, lngCtlTbx, blnCtlVsb, strCtlNam, strCtlPfx, strCtlBas, strCtlHdr, strCtlSfx)"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasCtlNam(ByVal strCtlNam As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""CtlNam = '"" & strCtlNam & ""'"""
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasCtlNam = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasCtlHdr(ByVal strCtlHdr As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""CtlHdr = '"" & strCtlHdr & ""'"""
        PRINT "    With mrstCTL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasCtlHdr = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub List_CtlItm(ByRef wtx As clsUtlWTX)"
        PRINT "    Dim lngSQN As Long"
        PRINT "    Dim lngTBX As Long"
        PRINT "    Dim blnVSB As Boolean"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strPFX As String"
        PRINT "    Dim strBAS As String"
        PRINT "    Dim strHDR As String"
        PRINT "    Dim strSFX As String"
        PRINT "    mrstCTL.Filter = """": mrstCTL.Sort = mcCtlNamTBX"
        PRINT "    If Not (mrstCTL.BOF And mrstCTL.EOF) Then mrstCTL.MoveFirst"
        PRINT "    Do While Not mrstCTL.EOF"
        PRINT "        lngSQN = mrstCTL.Fields(mcCtlIdxSQN)"
        PRINT "        lngTBX = mrstCTL.Fields(mcCtlIdxTBX)"
        PRINT "        blnVSB = mrstCTL.Fields(mcCtlIdxVSB)"
        PRINT "        strNAM = mrstCTL.Fields(mcCtlIdxNAM)"
        PRINT "        strPFX = mrstCTL.Fields(mcCtlIdxPFX)"
        PRINT "        strBAS = mrstCTL.Fields(mcCtlIdxBAS)"
        PRINT "        strHDR = mrstCTL.Fields(mcCtlIdxHDR)"
        PRINT "        strSFX = mrstCTL.Fields(mcCtlIdxSFX)"
        PRINT "        wtx.AX ""CtlNam="" & Format$(lngSQN, ""00"") & "":"" & Format$(lngTBX, ""00"") & "":"" & blnVSB & "":"" & strNAM & "":"" & strPFX & "":"" & strBAS & "":"" & strHDR & "":"" & strSFX"
        PRINT "        mrstCTL.MoveNext"
        PRINT "    Loop"
        PRINT "    Call List_CtlFlg(wtx)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Init_CtlFlg()"
        PRINT "    mblnMchFlgGBY = (HasCtlHdr(mcSbyCmd))"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub List_CtlFlg(ByRef wtx As clsUtlWTX)"
        PRINT "    wtx.AX ""mblnMchFlgGBY="" & mblnMchFlgGBY"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- GENSLO = Build module:  vbaGenSLO
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA GENSLO
        EXEC ut_zzVBX GENSLO
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecGENSLO) BEGIN
    ------------------------------------------------------------------------------------------------
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- CLSAPC = Build module:  clsAppCons
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA CLSAPC,clsAppCons,'Standard Application Constants',apc
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSAPC) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSAPV = Build module:  clsAppVals
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA CLSAPV,clsAppVals,'Standard Application Values'   ,apv
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSAPV) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- BASCMG = Build module:  bas_CmgCons
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA BASCMG,bas_CmgCons,'Control Manager Constants'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecBASCMG) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Initialize lookup value constants"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'            Oup Stx        Lft Spc Ttl Bat  BAS,VAR,SFX,VAL,COD,DSC,OBY                           Tx2 Tx3 Trn Idn Erm"
        PRINT "' ut_zzVBX LKC,zzz_TEST01,1  ,0  ,0  ,0  ,'VbaTyp,VbaTyp,VbaPfx,VbaTypID,VbaPfx,VbaDtp,VbaTypID','' ,'' ,0  ,0  ,0"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcVbaTypNON            As Long = 0                            ' non - No type"
        PRINT "Public Const gcVbaTypBYT            As Long = 1                            ' byt - Byte"
        PRINT "Public Const gcVbaTypBLN            As Long = 2                            ' bln - Boolean"
        PRINT "Public Const gcVbaTypINT            As Long = 3                            ' int - Integer"
        PRINT "Public Const gcVbaTypLNG            As Long = 4                            ' lng - Long"
        PRINT "Public Const gcVbaTypSGL            As Long = 5                            ' sgl - Single"
        PRINT "Public Const gcVbaTypDBL            As Long = 6                            ' dbl - Double"
        PRINT "Public Const gcVbaTypCUR            As Long = 7                            ' cur - Currency"
        PRINT "Public Const gcVbaTypDEC            As Long = 8                            ' dec - Decimal"
        PRINT "Public Const gcVbaTypDAT            As Long = 9                            ' dat - Date"
        PRINT "Public Const gcVbaTypSTR            As Long = 10                           ' str - String"
        PRINT "Public Const gcVbaTypVRN            As Long = 11                           ' vrn - Variant"
        PRINT "Public Const gcVbaTypOBJ            As Long = 12                           ' obj - Object"
        PRINT "'***************************************************************************************************"
        PRINT "' Control Types"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlTypOBJ           As Integer = acBoundObjectFrame"
        PRINT "Private Const mcCtlTypCHK           As Integer = acCheckBox"
        PRINT "Private Const mcCtlTypCBO           As Integer = acComboBox"
        PRINT "Private Const mcCtlTypCMD           As Integer = acCommandButton"
        PRINT "Private Const mcCtlTypCUS           As Integer = acCustomControl"
        PRINT "Private Const mcCtlTypIMG           As Integer = acImage"
        PRINT "Private Const mcCtlTypLBL           As Integer = acLabel"
        PRINT "Private Const mcCtlTypLIN           As Integer = acLine"
        PRINT "Private Const mcCtlTypLST           As Integer = acListBox"
        PRINT "Private Const mcCtlTypFRA           As Integer = acObjectFrame"
        PRINT "Private Const mcCtlTypOPT           As Integer = acOptionButton"
        PRINT "Private Const mcCtlTypGRP           As Integer = acOptionGroup"
        PRINT "Private Const mcCtlTypPAG           As Integer = acPage"
        PRINT "Private Const mcCtlTypBRK           As Integer = acPageBreak"
        PRINT "Private Const mcCtlTypBOX           As Integer = acRectangle"
        PRINT "Private Const mcCtlTypSFM           As Integer = acSubform"
        PRINT "Private Const mcCtlTypTAB           As Integer = acTabCtl"
        PRINT "Private Const mcCtlTypTXT           As Integer = acTextBox"
        PRINT "Private Const mcCtlTypTGL           As Integer = acToggleButton"
        PRINT "'***************************************************************************************************"
        PRINT "' Control Alignment"
        PRINT "'***************************************************************************************************"
        PRINT "Public Const gcFldAlnGEN            As Integer = 0"
        PRINT "Public Const gcFldAlnLFT            As Integer = 1"
        PRINT "Public Const gcFldAlnCTR            As Integer = 2"
        PRINT "Public Const gcFldAlnRGT            As Integer = 3"
        PRINT "Public Const gcFldAlnDST            As Integer = 4"
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- CLSCMG = Build module:  clsCtlMgr
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA CLSCMG,clsCtlMgr,'Manage Form Controls',cmg
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSCMG) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Standard text string list delimiters"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSPC                 As String = "" ""         ' Single space"
        PRINT "Private Const mcDLM                 As String = "";""         ' Separate items"
        PRINT "Private Const mcDLG                 As String = "":""         ' Separate groups"
        PRINT "Private Const mcDLX                 As String = ""`""         ' Separate lines"
        PRINT "'***************************************************************************************************"
        PRINT "' Initialize class objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private mFRM                        As Form"
        PRINT "Private mCTL                        As Control"
        PRINT "Private mNAM                        As String"
        PRINT "Private mTYP                        As Long"
        PRINT "'***************************************************************************************************"
        PRINT "' Declare user defined types"
        PRINT "'***************************************************************************************************"
        PRINT "Private Type ClmDef"
        PRINT "    intCtlIdx As Integer"
        PRINT "    intCtlWid As Integer"
        PRINT "    lngCtlClr As Long"
        PRINT "    strSqlTbl As String"
        PRINT "    strSqlClm As String"
        PRINT "    lngSqlTyp As Long"
        PRINT "    lngWhrTyp As Integer"
        PRINT "    strWhrSrc As String"
        PRINT "    strWhrDef As String"
        PRINT "    intSrtSqn As Integer"
        PRINT "    intSrtDir As Integer"
        PRINT "    strLblTtl As String"
        PRINT "    blnLblFlg As Boolean"
        PRINT "    lngFldTyp As Integer"
        PRINT "    strFldSrc As String"
        PRINT "    strFldDef As String"
        PRINT "    blnFldEnb As Boolean"
        PRINT "    blnFldLok As Boolean"
        PRINT "    intFldAln As Integer"
        PRINT "    strFldFmt As String"
        PRINT "    strFldDec As String"
        PRINT "    strFldSbr As String"
        PRINT "    strSumSrc As String"
        PRINT "    intSrtIdx As Integer"
        PRINT "End Type"
        PRINT "Private mudtClmDef()                As ClmDef"
        PRINT "Private Type SrtDef"
        PRINT "    intCtlIdx As Integer"
        PRINT "    intSrtDir As Integer"
        PRINT "End Type"
        PRINT "Private mudtSrtDef()                As SrtDef"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Control size anagement"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFrmSizGRD           As Single = 0.0417  ' In inches"
        PRINT "Private Const mcFrmSizTWP           As Integer = 1440   ' Twips Per inch"
        PRINT "'***************************************************************************************************"
        PRINT "' Color schemes"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcColorsBLK           As Long = 0"
        PRINT "Private Const mcColorsWHT           As Long = 16777215"
        PRINT "'***************************************************************************************************"
        PRINT "' Control Types"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlTypOBJ           As Integer = acBoundObjectFrame"
        PRINT "Private Const mcCtlTypCHK           As Integer = acCheckBox"
        PRINT "Private Const mcCtlTypCBO           As Integer = acComboBox"
        PRINT "Private Const mcCtlTypCMD           As Integer = acCommandButton"
        PRINT "Private Const mcCtlTypCUS           As Integer = acCustomControl"
        PRINT "Private Const mcCtlTypIMG           As Integer = acImage"
        PRINT "Private Const mcCtlTypLBL           As Integer = acLabel"
        PRINT "Private Const mcCtlTypLIN           As Integer = acLine"
        PRINT "Private Const mcCtlTypLST           As Integer = acListBox"
        PRINT "Private Const mcCtlTypFRA           As Integer = acObjectFrame"
        PRINT "Private Const mcCtlTypOPT           As Integer = acOptionButton"
        PRINT "Private Const mcCtlTypGRP           As Integer = acOptionGroup"
        PRINT "Private Const mcCtlTypPAG           As Integer = acPage"
        PRINT "Private Const mcCtlTypBRK           As Integer = acPageBreak"
        PRINT "Private Const mcCtlTypBOX           As Integer = acRectangle"
        PRINT "Private Const mcCtlTypSFM           As Integer = acSubform"
        PRINT "Private Const mcCtlTypTAB           As Integer = acTabCtl"
        PRINT "Private Const mcCtlTypTXT           As Integer = acTextBox"
        PRINT "Private Const mcCtlTypTGL           As Integer = acToggleButton"
        PRINT "'***************************************************************************************************"
        PRINT "' Control Prefixes"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFldPfxWHR           As String = ""Whr"""
        PRINT "Private Const mcFldPfxSRT           As String = ""Srt"""
        PRINT "Private Const mcFldPfxFLD           As String = ""Fld"""
        PRINT "Private Const mcFldPfxCHK           As String = ""Chk"""
        PRINT "Private Const mcFldPfxBGR           As String = ""Bgr"""
        PRINT "Private Const mcFldPfxSUM           As String = ""Sum"""
        PRINT "'***************************************************************************************************"
        PRINT "' SrtBy tracking constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrtSqlNON           As String = """""
        PRINT "Private Const mcSrtSqlASC           As String = ""ASC"""
        PRINT "Private Const mcSrtSqlDSC           As String = ""DESC"""
        PRINT "Private Const mcSrtDirNON           As Integer = 0"
        PRINT "Private Const mcSrtDirASC           As Integer = 1"
        PRINT "Private Const mcSrtDirDSC           As Integer = 2"
        PRINT "Private Const mcSrtIndNON           As String = """""
        PRINT "Private Const mcSrtIndASC           As String = "">"""
        PRINT "Private Const mcSrtIndDSC           As String = ""<"""
        PRINT "Private Const mcSrtIdxNON           As Integer = 0"
        PRINT "'***************************************************************************************************"
        PRINT "' Track form level values"
        PRINT "'***************************************************************************************************"
        PRINT "Private mintFrmTwp                  As Integer"
        PRINT "Private mintCurTwp                  As Integer"
        PRINT "Private mintRgtTwp                  As Integer"
        PRINT "Private mintCurIdx                  As Integer"
        PRINT "Private mintSrtIdx                  As Integer"
        PRINT "'***************************************************************************************************"
        PRINT "Private mblnWhrCUR                  As Boolean"
        PRINT "Private mstrWhrCUR                  As String"
        PRINT "Private mblnWhrDEF                  As Boolean"
        PRINT "Private mstrWhrDEF                  As String"
        PRINT "Private mstrWhrSql                  As String"
        PRINT "'***************************************************************************************************"
        PRINT "Private mblnSrtCUR                  As Boolean"
        PRINT "Private mstrSrtCUR                  As String"
        PRINT "Private mblnSrtDEF                  As Boolean"
        PRINT "Private mstrSrtDEF                  As String"
        PRINT "Private mstrSrtSQL                  As String"
        PRINT "'***************************************************************************************************"
        PRINT "' Public properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrRowSrcRPT               As String"
        PRINT "Private mintRowDefRPT               As Integer"
        PRINT "Private mstrRowSrcCMD               As String"
        PRINT "Private mintRowDefCMD               As Integer"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Objects"
        PRINT "    ' Initialize Flags"
        PRINT "    ' Initialize Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "    ReDim Preserve mudtClmDef(0)"
        PRINT "    ReDim Preserve mudtSrtDef(0)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Setup Report Mechanism"
        PRINT "'###################################################################################################"
        PRINT "Public Property Set CurrentForm(ByRef vNewVal As Form)"
        PRINT "    Set mFRM = vNewVal"
        PRINT "    mintFrmTwp = mFRM.Width"
        PRINT "    mintCurTwp = 0"
        PRINT "    mintRgtTwp = 0"
        PRINT "    mintCurIdx = 0"
        PRINT "    mstrWhrDEF = """""
        PRINT "    mstrWhrCUR = """""
        PRINT "    mstrWhrSql = """""
        PRINT "    mstrSrtDEF = """""
        PRINT "    mstrSrtCUR = """""
        PRINT "    mstrSrtSQL = """""
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Construct the control name"
        PRINT "'###################################################################################################"
        PRINT "Private Function GetCtlName( _"
        PRINT "    ByVal lngTYP As Long, _"
        PRINT "    ByVal strPFX As String, _"
        PRINT "    ByVal intIND As Integer _"
        PRINT ") As Boolean"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strCTL As String"
        PRINT "    Dim ctl    As Control"
        PRINT ""
        PRINT "    ' Assign control name"
        PRINT "    Select Case intTYP"
        PRINT "        Case mcCtlTypTXT: strCTL = ""txt"" & strPFX & Format$(intIND, ""000""): mTYP = lngTYP"
        PRINT "        Case mcCtlTypCBO: strCTL = ""cbo"" & strPFX & Format$(intIND, ""000""): mTYP = lngTYP"
        PRINT "        Case mcCtlTypCHK: strCTL = ""chk"" & strPFX & Format$(intIND, ""000""): mTYP = lngTYP"
        PRINT "        Case mcCtlTypCMD: strCTL = ""cmd"" & strPFX & Format$(intIND, ""000""): mTYP = lngTYP"
        PRINT "        Case mcCtlTypTGL: strCTL = ""tgl"" & strPFX & Format$(intIND, ""000""): mTYP = lngTYP"
        PRINT "        Case mcCtlTypLBL: strCTL = ""lbl"" & strPFX & Format$(intIND, ""000""): mTYP = lngTYP"
        PRINT "        Case mcCtlTypLIN: strCTL = ""lin"" & strPFX & Format$(intIND, ""000""): mTYP = lngTYP"
        PRINT "        Case Else:        strCTL = strPFX & Format$(intIND, ""000""):         mTYP = 0"
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Verify control name"
        PRINT "    Set mCTL = Nothing"
        PRINT "    For Each ctl In mFRM.Controls"
        PRINT "        If ctl.Name = strCTL Then"
        PRINT "            mNAM = strCTL"
        PRINT "            GetCtlName = True"
        PRINT "            Exit Function"
        PRINT "        End If"
        PRINT "    Next"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Setup Column Controls"
        PRINT "'###################################################################################################"
        PRINT "Public Sub AddCLM( _"
        PRINT "    ByVal intCtlIdx As Integer, _"
        PRINT "    ByVal intCtlWid As Integer, _"
        PRINT "    ByVal lngCtlClr As Long, _"
        PRINT "    ByVal strSqlTbl As String, _"
        PRINT "    ByVal strSqlClm As String, _"
        PRINT "    ByVal lngSqlTyp As Long, _"
        PRINT "    ByVal lngWhrTyp As Long, _"
        PRINT "    ByVal strWhrSrc As String, _"
        PRINT "    ByVal strWhrDef As String, _"
        PRINT "    ByVal intSrtSqn As Integer, _"
        PRINT "    ByVal intSrtDir As Integer, _"
        PRINT "    ByVal strLblTtl As String, _"
        PRINT "    ByVal blnLblFlg As Boolean, _"
        PRINT "    ByVal lngFldTyp As Long, _"
        PRINT "    ByVal strFldSrc As String, _"
        PRINT "    ByVal strFldDef As String, _"
        PRINT "    ByVal blnFldEnb As Boolean, _"
        PRINT "    ByVal blnFldLok As Boolean, _"
        PRINT "    ByVal intFldAln As Integer, _"
        PRINT "    ByVal strFldFmt As String, _"
        PRINT "    ByVal strFldDec As String, _"
        PRINT "    ByVal strFldSbr As String, _"
        PRINT "    ByVal strSumSrc As String _"
        PRINT ")"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize ComboBox source"
        PRINT "    Dim cbo    As clsRegSRC"
        PRINT "    Set cbo = New clsRegSRC"
        PRINT ""
        PRINT "    ' Initialize working objects"
        PRINT "    Dim mCTL    As Control"
        PRINT ""
        PRINT "    ' Initialize working variables"
        PRINT "    Dim blnHasWHR As Boolean: blnHasWHR = True"
        PRINT "    Dim blnHasSRT As Boolean: blnHasSRT = True"
        PRINT "    Dim blnHasFLD As Boolean: blnHasFLD = True"
        PRINT "    Dim blnHasSUM As Boolean: blnHasSUM = (Len(strSumSrc) > 0)"
        PRINT ""
        PRINT "    ' Initialize working variables"
        PRINT "    Dim intTopTwp As Integer   ' Twips: Top position"
        PRINT "    Dim intHgtTwp As Integer   ' Twips: Control Height"
        PRINT "    Dim intLftTwp As Integer   ' Twips: Left position"
        PRINT "    Dim intWidTwp As Integer   ' Twips: Control Width"
        PRINT "    Dim intRgtTwp As Integer   ' Twips: Right position"
        PRINT ""
        PRINT "    ' Initialize the column definition array"
        PRINT "    ReDim Preserve mudtSrtDef(intCtlIdx)"
        PRINT "    ReDim Preserve mudtClmDef(intCtlIdx)"
        PRINT "    mudtClmDef(intCtlIdx).lngWhrTyp = lngWhrTyp"
        PRINT "    mudtClmDef(intCtlIdx).strSqlTbl = strSqlTbl"
        PRINT "    mudtClmDef(intCtlIdx).strSqlClm = strSqlClm"
        PRINT "    mudtClmDef(intCtlIdx).lngSqlTyp = lngSqlTyp"
        PRINT "    mudtClmDef(intCtlIdx).strWhrDef = strWhrDef"
        PRINT "    mudtClmDef(intCtlIdx).strFldDef = strFldDef"
        PRINT "    mudtClmDef(intCtlIdx).intSrtSqn = intSrtSqn"
        PRINT "    mudtClmDef(intCtlIdx).intSrtDir = intSrtDir"
        PRINT ""
        PRINT "    ' Increment form level values"
        PRINT "    mintCurIdx = intCtlIdx"
        PRINT ""
        PRINT "    ' Convert grid units to inches then twips"
        PRINT "    intLftTwp = mintRgtTwp+IIf(mintRgtTwp > 0, 1, 0)"
        PRINT "    intWidTwp = CLng(intCtlWid * mcFrmSizGRD * mcFrmSizTWP)"
        PRINT "    intRgtTwp = intLftTwp+intWidTwp"
        PRINT ""
        PRINT "    ' Adjust control width"
        PRINT "    If intWidTwp = 0 Then"
        PRINT "        intWidTwp = mintFrmTwp - intLftTwp"
        PRINT "        blnLblFlg = True"
        PRINT "    ElseIf intRgtTwp > mintFrmTwp Then"
        PRINT "        intWidTwp = mintFrmTwp - intLftTwp"
        PRINT "    End If"
        PRINT "    mintCurTwp = mintCurTwp+intWidTwp"
        PRINT ""
        PRINT "    ' Manage label width"
        PRINT "    If Not blnLblFlg Then"
        PRINT "        blnHasWHR = False"
        PRINT "        blnHasSRT = False"
        PRINT "        blnHasSUM = False"
        PRINT "        ' Extend previous controls"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Declare working property variables"
        PRINT "    Dim strSRC As String"
        PRINT "    Dim strTYP As String"
        PRINT "    Dim intCNT As Integer"
        PRINT "    Dim strCWD As String"
        PRINT "    Dim sglLWD As Single"
        PRINT "    Dim intBND As Integer"
        PRINT "    Dim strSBR As String"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize control:  Filter"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnHasWHR Then"
        PRINT "        If GetCtlName(lngWhrTyp, mcFldPfxWHR, intCtlIdx) Then"
        PRINT "            With mFRM.Controls(mNAM)"
        PRINT "                Select Case lngWhrTyp"
        PRINT "                    Case mcCtlTypTXT"
        PRINT "                        .BackColor = lngCtlClr"
        PRINT "                        .ForeColor = mcColorsWHT"
        PRINT "                        strSBR = ""Enter the value you wish to locate (Double-click to clear)"""
        PRINT "                    Case mcCtlTypCBO"
        PRINT "                        .BackColor = lngCtlClr"
        PRINT "                        .ForeColor = mcColorsWHT"
        PRINT "                        .LimitToList = True"
        PRINT "                        .AutoExpand = True"
        PRINT "                        .ListRows = 20"
        PRINT "                        ' Row source values"
        PRINT "                        Call cbo.GetRowSrc( _"
        PRINT "                            strWhrSrc, _"
        PRINT "                            strSRC, _"
        PRINT "                            strTYP, _"
        PRINT "                            intCNT, _"
        PRINT "                            strCWD, _"
        PRINT "                            sglLWD, _"
        PRINT "                            intBND, _"
        PRINT "                            strSBR _"
        PRINT "                        )"
        PRINT "                        .RowSource = strSRC"
        PRINT "                        .RowSourceType = strTYP"
        PRINT "                        .ColumnCount = intCNT"
        PRINT "                        .ColumnWidths = strCWD"
        PRINT "                        .ListWidth = sglLWD"
        PRINT "                        .BoundColumn = intBND"
        PRINT "                End Select"
        PRINT "                .Left = intLftTwp"
        PRINT "                .Width = intWidTwp"
        PRINT "                .Visible = True"
        PRINT "                '.Value = strWhrDef"
        PRINT "                .StatusBarText = strSBR"
        PRINT "            End With"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize control:  SrtBy"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnHasSRT Then"
        PRINT "        If GetCtlName(mcCtlTypCMD, mcFldPfxSRT, intCtlIdx) Then"
        PRINT "            With mFRM.Controls(mNAM)"
        PRINT "                .Caption = """" 'Format$(intCtlIdx, ""000"")"
        PRINT "                .ForeColor = lngCtlClr"
        PRINT "                .Left = intLftTwp"
        PRINT "                .Width = intWidTwp"
        PRINT "                .Visible = True"
        PRINT "            End With"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize group:  Data"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnHasFLD Then"
        PRINT "        ' Initialize control:  Label"
        PRINT "        If GetCtlName(mcCtlTypLBL, mcFldPfxFLD, intCtlIdx) Then"
        PRINT "            With mFRM.Controls(mNAM)"
        PRINT "                .Caption = strLblTtl"
        PRINT "                .BackColor = lngCtlClr"
        PRINT "                .ForeColor = mcColorsWHT"
        PRINT "                .BorderColor = mcColorsBLK"
        PRINT "                .Left = intLftTwp"
        PRINT "                .Width = intWidTwp"
        PRINT "                .Visible = True"
        PRINT "            End With"
        PRINT "        End If"
        PRINT "        ' Initialize control:  Field"
        PRINT "        If GetCtlName(lngFldTyp, mcFldPfxFLD, intCtlIdx) Then"
        PRINT "            With mFRM.Controls(mNAM)"
        PRINT "                Select Case lngFldTyp"
        PRINT "                    Case mcCtlTypTXT"
        PRINT "                        .ControlSource = strFldSrc"
        PRINT "                        .ForeColor = lngCtlClr"
        PRINT "                        .BorderColor = mcColorsBLK"
        PRINT "                        .StatusBarText = strFldSbr"
        PRINT "                        .TextAlign = intFldAln"
        PRINT "                        .Left = intLftTwp"
        PRINT "                        .Width = intWidTwp"
        PRINT "                        .Enabled = blnFldEnb"
        PRINT "                        .Locked = blnFldLok"
        PRINT "                        .Visible = True"
        PRINT "                    Case mcCtlTypCBO"
        PRINT "                        .ControlSource = strFldSrc"
        PRINT "                        .ForeColor = lngCtlClr"
        PRINT "                        .BorderColor = mcColorsBLK"
        PRINT "                        .LimitToList = True"
        PRINT "                        .AutoExpand = True"
        PRINT "                        .ListRows = 20"
        PRINT "                        ' Row source values"
        PRINT "                        Call cbo.GetRowSrc( _"
        PRINT "                            strFldSrc, _"
        PRINT "                            strSRC, _"
        PRINT "                            strTYP, _"
        PRINT "                            intCNT, _"
        PRINT "                            strCWD, _"
        PRINT "                            sglLWD, _"
        PRINT "                            intBND, _"
        PRINT "                            strSBR _"
        PRINT "                        )"
        PRINT "                        .RowSource = strSRC"
        PRINT "                        .RowSourceType = strTYP"
        PRINT "                        .ColumnCount = intCNT"
        PRINT "                        .ColumnWidths = strCWD"
        PRINT "                        .ListWidth = sglLWD"
        PRINT "                        .BoundColumn = intBND"
        PRINT "                        .StatusBarText = strFldSbr"
        PRINT "                        .TextAlign = intFldAln"
        PRINT "                        .Left = intLftTwp"
        PRINT "                        .Width = intWidTwp"
        PRINT "                        .Enabled = blnFldEnb"
        PRINT "                        .Locked = blnFldLok"
        PRINT "                        .Visible = True"
        PRINT "                    Case mcCtlTypCHK"
        PRINT "                        If GetCtlName(mcCtlTypLBL, mcFldPfxBGR, intCtlIdx) Then"
        PRINT "                            With mFRM.Controls(mNAM)"
        PRINT "                                .Left = intLftTwp"
        PRINT "                                .Width = intWidTwp"
        PRINT "                                .Visible = True"
        PRINT "                                intTopTwp = .Top"
        PRINT "                                intHgtTwp = .Height"
        PRINT "                            End With"
        PRINT "                        End If"
        PRINT "                        .ControlSource = strFldSrc"
        PRINT "                        .StatusBarText = strFldSbr"
        PRINT "                        .Top = intTopTwp+((intHgtTwp - .Height) / 2)+10"
        PRINT "                        .Left = intLftTwp+((intWidTwp - .Width) / 2)+20"
        PRINT "                        .Enabled = blnFldEnb"
        PRINT "                        .Locked = blnFldLok"
        PRINT "                        .Visible = True"
        PRINT "                End Select"
        PRINT "            End With"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize group:  Summary"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnHasSUM Then"
        PRINT "        ' Initialize control:  Line"
        PRINT "        If GetCtlName(mcCtlTypLIN, mcFldPfxSUM, intCtlIdx) Then"
        PRINT "            With mFRM.Controls(mNAM)"
        PRINT "                .BorderColor = lngCtlClr"
        PRINT "                .Left = intLftTwp"
        PRINT "                .Width = intWidTwp"
        PRINT "                .Visible = True"
        PRINT "            End With"
        PRINT "        End If"
        PRINT "        ' Initialize control:  Summary"
        PRINT "        If GetCtlName(mcCtlTypTXT, mcFldPfxSUM, intCtlIdx) Then"
        PRINT "            With mFRM.Controls(mNAM)"
        PRINT "                .BackColor = mcColorsWHT"
        PRINT "                .ForeColor = lngCtlClr"
        PRINT "                .BorderColor = mcColorsBLK"
        PRINT "                .ControlSource = """""
        PRINT "                .Left = intLftTwp"
        PRINT "                .Width = intWidTwp"
        PRINT "                .Visible = True"
        PRINT "            End With"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Advance left margin"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mintRgtTwp = mintRgtTwp+intWidTwp"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' WHERE Mechanism:  Build current value list"
        PRINT "'###################################################################################################"
        PRINT "Public Function WHR_List() As String"
        PRINT "    ' Initialize definition boundaries"
        PRINT "    Dim intIND As Integer"
        PRINT "    Dim intBEG As Integer: intBEG = 1"
        PRINT "    Dim intEND As Integer: intEND = UBound(mudtClmDef)"
        PRINT "    Dim strVAL As String"
        PRINT "    Dim strTXT As String"
        PRINT "    ' Loop through the definitions"
        PRINT "    For intIND = intBEG To intEND"
        PRINT "        If GetCtlName(mudtClmDef(intIND).lngWhrTyp, mcFldPfxWHR, intIND) Then"
        PRINT "            strVAL = mcSPC & CStr(Nz(mFRM.Controls(mNAM).Value, """")): strTXT = strTXT & strVAL"
        PRINT "            'Debug.Print mNAM & ""="" & strVAL"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    ' Return the value list"
        PRINT "    WHR_List = strTXT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' WHERE Mechanism:  Are current criteria values different from defaults?"
        PRINT "'==================================================================================================="
        PRINT "Public Function WHR_ClrSQL() As Boolean"
        PRINT "    ' Compare current values with default values"
        PRINT "    WHR_ClrSQL = (mstrWhrCUR <> mstrWhrDEF Or Len(Trim$(mstrWhrDEF)) > 0)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' WHERE Mechanism:  Are current criteria values different from last SQL query?"
        PRINT "'==================================================================================================="
        PRINT "Public Function WHR_RunSQL() As Boolean"
        PRINT "    ' Compare current values with last values"
        PRINT "    WHR_RunSQL = (mstrWhrCUR <> mstrWhrSql)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' WHERE Mechanism:  Set the default criteria values"
        PRINT "'==================================================================================================="
        PRINT "Public Sub SetWhrDEF()"
        PRINT "    ' Assign default values"
        PRINT "    mstrWhrDEF = WHR_List"
        PRINT "    mstrWhrCUR = mstrWhrDEF"
        PRINT "    mstrWhrSql = mstrWhrDEF"
        PRINT "    mblnWhrDEF = (Len(Trim$(mstrWhrDEF)) > 0)"
        PRINT "    mblnWhrCUR = (Len(Trim$(mstrWhrCUR)) > 0)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' WHERE Mechanism:  Set the current criteria values"
        PRINT "'==================================================================================================="
        PRINT "Public Sub SetWhrCUR()"
        PRINT "    ' Assign current values"
        PRINT "    mstrWhrCUR = WHR_List"
        PRINT "    mblnWhrCUR = (Len(Trim$(mstrWhrCUR)) > 0)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' WHERE Mechanism:  Set the SQL query criteria values"
        PRINT "'==================================================================================================="
        PRINT "Public Sub SetWhrSQL()"
        PRINT "    ' Assign current values"
        PRINT "    mstrWhrSql = mstrWhrCUR"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' WHERE Mechanism:  Reset the criteria values to defaults"
        PRINT "'==================================================================================================="
        PRINT "Public Function ResetWHR( _"
        PRINT "    Optional ByVal intCTL As Integer = 0 _"
        PRINT ") As String"
        PRINT "    ' Initialize definition boundaries"
        PRINT "    Dim intBEG As Integer: intBEG = intCTL"
        PRINT "    Dim intEND As Integer: intEND = intCTL"
        PRINT "    Dim blnALL As Boolean: blnALL = (intCTL = 0 And Not mblnWhrCUR)"
        PRINT "    ' Reset boundaries for all definitions"
        PRINT "    If intCTL = 0 Then"
        PRINT "        intBEG = 1: intEND = UBound(mudtClmDef)"
        PRINT "    End If"
        PRINT "    ' Loop through the definitions"
        PRINT "    For intCTL = intBEG To intEND"
        PRINT "        If GetCtlName(mudtClmDef(intCTL).lngWhrTyp, mcFldPfxWHR, intCTL) Then"
        PRINT "            Select Case mTYP"
        PRINT "                Case mcCtlTypTXT"
        PRINT "                    If Len(Nz(mFRM.Controls(mNAM).Value, """")) = 0 Or blnALL Then"
        PRINT "                        mFRM.Controls(mNAM).Value = mudtClmDef(intCTL).strWhrDef"
        PRINT "                    Else"
        PRINT "                        mFRM.Controls(mNAM).Value = """""
        PRINT "                    End If"
        PRINT "                Case mcCtlTypCBO"
        PRINT "                    If Len(Nz(mFRM.Controls(mNAM).Value, """")) = 0 Or blnALL Then"
        PRINT "                        mFRM.Controls(mNAM).Value = mudtClmDef(intCTL).strWhrDef"
        PRINT "                    Else"
        PRINT "                        mFRM.Controls(mNAM).Value = """""
        PRINT "                    End If"
        PRINT "                Case Else"
        PRINT "                    mFRM.Controls(mNAM).Value = mudtClmDef(intCTL).strWhrDef"
        PRINT "            End Select"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    ' Assign current WHERE values"
        PRINT "    Call SetWhrCUR"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' SORT Mechanism:  Build current value list"
        PRINT "'###################################################################################################"
        PRINT "Public Function SRT_List() As String"
        PRINT "    ' Initialize definition boundaries"
        PRINT "    Dim intIND As Integer"
        PRINT "    Dim intBEG As Integer: intBEG = 1"
        PRINT "    Dim intEND As Integer: intEND = UBound(mudtClmDef)"
        PRINT "    Dim strVAL As String"
        PRINT "    Dim strTXT As String"
        PRINT "    ' Loop through the definitions"
        PRINT "    For intIND = intBEG To intEND"
        PRINT "        If GetCtlName(mcCtlTypCMD, mcFldPfxSRT, intIND) Then"
        PRINT "            strVAL = mcSPC & CStr(Nz(mFRM.Controls(mNAM).Caption, """")): strTXT = strTXT & strVAL"
        PRINT "            'Debug.Print mNAM & ""="" & strVAL"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    ' Return the value list"
        PRINT "    SRT_List = strTXT"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' SORT Mechanism:  Are current criteria values different from defaults?"
        PRINT "'==================================================================================================="
        PRINT "Public Function SRT_ClrSQL() As Boolean"
        PRINT "    ' Compare current values with default values"
        PRINT "    SRT_ClrSQL = (mstrSrtCUR <> mstrSrtDEF Or Len(Trim$(mstrSrtDEF)) > 0)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' SORT Mechanism:  Are current criteria values different from last SQL query?"
        PRINT "'==================================================================================================="
        PRINT "Public Function SRT_RunSQL() As Boolean"
        PRINT "    ' Compare current values with last values"
        PRINT "    SRT_RunSQL = (mstrSrtCUR <> mstrSrtSQL)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' SORT Mechanism:  Set the default criteria values"
        PRINT "'==================================================================================================="
        PRINT "Public Sub SetSrtDEF()"
        PRINT "    ' Assign default values"
        PRINT "    mstrSrtDEF = SRT_List"
        PRINT "    mstrSrtCUR = mstrSrtDEF"
        PRINT "    mstrSrtSQL = mstrSrtDEF"
        PRINT "    mblnSrtDEF = (Len(Trim$(mstrSrtDEF)) > 0)"
        PRINT "    mblnSrtCUR = (Len(Trim$(mstrSrtCUR)) > 0)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' SORT Mechanism:  Set the current criteria values"
        PRINT "'==================================================================================================="
        PRINT "Public Sub SetSrtCUR()"
        PRINT "    ' Assign current values"
        PRINT "    mstrSrtCUR = SRT_List"
        PRINT "    mblnSrtCUR = (Len(Trim$(mstrSrtCUR)) > 0)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' SORT Mechanism:  Set the SQL query criteria values"
        PRINT "'==================================================================================================="
        PRINT "Public Sub SetSrtSQL()"
        PRINT "    ' Assign current values"
        PRINT "    mstrSrtSQL = mstrSrtCUR"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' SORT Mechanism:  Reset the criteria values to defaults"
        PRINT "'==================================================================================================="
        PRINT "Public Function ResetSRT() As String"
        PRINT "    ' Initialize definition boundaries"
        PRINT "    Dim intBEG As Integer"
        PRINT "    Dim intEND As Integer"
        PRINT "    Dim intIND As Integer"
        PRINT "    Dim blnWHR As Boolean"
        PRINT "    Dim blnCLR As Boolean"
        PRINT "    ' Set the clear flag"
        PRINT "    blnWHR = (mblnWhrDEF And Not mblnWhrCUR)"
        PRINT "    blnCLR = (mintSrtIdx > 0 Or blnWHR)"
        PRINT "    ' Clear the sort array"
        PRINT "    intBEG = 1: intEND = UBound(mudtSrtDef): mintSrtIdx = 0"
        PRINT "    For intIND = intBEG To intEND"
        PRINT "        mudtSrtDef(intIND).intCtlIdx = 0"
        PRINT "        mudtSrtDef(intIND).intSrtDir = 0"
        PRINT "    Next"
        PRINT "    ' Loop through the definitions"
        PRINT "    intBEG = 1: intEND = UBound(mudtClmDef)"
        PRINT "    For intIND = intBEG To intEND"
        PRINT "        If GetCtlName(mcCtlTypCMD, mcFldPfxSRT, intIND) Then"
        PRINT "            If mudtClmDef(intIND).intSrtSqn = 0 Or blnCLR Then"
        PRINT "                mudtClmDef(intIND).intSrtIdx = mcSrtIdxNON"
        PRINT "                mFRM.Controls(mNAM).Caption = """""
        PRINT "            Else"
        PRINT "                Call AssignSRT(intIND, mudtClmDef(intIND).intSrtSqn, mudtClmDef(intIND).intSrtDir)"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    ' Assign current sort values"
        PRINT "    Call SetSrtCUR"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Requery the criteria ComboBoxes"
        PRINT "'###################################################################################################"
        PRINT "Public Function RequeryWHR( _"
        PRINT "    Optional ByVal intIND As Integer = 0 _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Initialize definition boundaries"
        PRINT "    Dim intBEG As Integer: intBEG = intIND"
        PRINT "    Dim intEND As Integer: intEND = intIND"
        PRINT ""
        PRINT "    ' Reset boundaries for all definitions"
        PRINT "    If intIND = 0 Then"
        PRINT "        intBEG = 1: intEND = UBound(mudtClmDef)"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Loop through the definitions"
        PRINT "    For intIND = intBEG To intEND"
        PRINT "        If GetCtlName(mudtClmDef(intIND).lngWhrTyp, mcFldPfxWHR, intIND) Then"
        PRINT "            Call mFRM.Controls(mNAM).Requery"
        PRINT "        End If"
        PRINT "    Next"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build the SQL WHERE clause"
        PRINT "'###################################################################################################"
        PRINT "Public Function BuildWHR( _"
        PRINT "    Optional ByVal strWHR As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Initialize working objects"
        PRINT "    Dim whr    As clsRunWHR"
        PRINT "    Set whr = New clsRunWHR"
        PRINT ""
        PRINT "    ' Initialize definition boundaries"
        PRINT "    Dim intIND As Integer"
        PRINT "    Dim intBEG As Integer: intBEG = 1"
        PRINT "    Dim intEND As Integer: intEND = UBound(mudtClmDef)"
        PRINT ""
        PRINT "    ' Build the WHERE statement"
        PRINT "    If Len(strWHR) > 0 Then"
        PRINT "        Call whr.AddItem("""", """", gcVbaTypNON, strWHR)"
        PRINT "    Else"
        PRINT "        For intIND = intBEG To intEND"
        PRINT "            If GetCtlName(mudtClmDef(intIND).lngWhrTyp, mcFldPfxWHR, intIND) Then"
        PRINT "                Call whr.AddItem( _"
        PRINT "                    mudtClmDef(intIND).strSqlTbl, _"
        PRINT "                    mudtClmDef(intIND).strSqlClm, _"
        PRINT "                    mudtClmDef(intIND).lngSqlTyp, _"
        PRINT "                    mFRM.Controls(mNAM).Value _"
        PRINT "                )"
        PRINT "            End If"
        PRINT "        Next"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Return the clause"
        PRINT "    BuildWHR = whr.WhrSql"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build the SQL GROUP BY clause"
        PRINT "'###################################################################################################"
        PRINT "Public Function BuildGBY( _"
        PRINT "    Optional ByVal strGBY As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Return default statement"
        PRINT "    If Len(strGBY) > 0 Then"
        PRINT "        BuildGBY = strGBY: Exit Function"
        PRINT "    End If"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build the SQL HAVING clause"
        PRINT "'###################################################################################################"
        PRINT "Public Function BuildHAV( _"
        PRINT "    Optional ByVal strHAV As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Return default statement"
        PRINT "    If Len(strHAV) > 0 Then"
        PRINT "        BuildHAV = strHAV: Exit Function"
        PRINT "    End If"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build the SQL ORDER BY clause"
        PRINT "'###################################################################################################"
        PRINT "Public Function BuildOBY( _"
        PRINT "    Optional ByVal strOBY As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Initialize working objects"
        PRINT "    Dim oby    As clsSqlOBY"
        PRINT "    Set oby = New clsSqlOBY"
        PRINT ""
        PRINT "    ' Initialize definition boundaries"
        PRINT "    Dim intIND As Integer"
        PRINT "    Dim intBEG As Integer: intBEG = 1"
        PRINT "    Dim intEND As Integer: intEND = mintSrtIdx 'UBound(mudtSrtDef)"
        PRINT "    Dim intCTL As Integer"
        PRINT "    Dim strTBL As String"
        PRINT "    Dim strCLM As String"
        PRINT "    Dim strDIR As String"
        PRINT ""
        PRINT "    ' Build the ORDER BY text"
        PRINT "    If Len(strOBY) > 0 Then"
        PRINT "        oby.ObyTxt = strOBY"
        PRINT "    Else"
        PRINT "        For intIND = intBEG To intEND"
        PRINT "            intCTL = mudtSrtDef(intIND).intCtlIdx"
        PRINT "            strTBL = mudtClmDef(intCTL).strSqlTbl"
        PRINT "            strCLM = mudtClmDef(intCTL).strSqlClm"
        PRINT "            strDIR = IIf(mudtSrtDef(intIND).intSrtDir = mcSrtDirDSC, mcSrtSqlDSC, mcSrtSqlNON)"
        PRINT "            Call oby.AddItem(strTBL, strCLM, strDIR)"
        PRINT "        Next"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Return the clause"
        PRINT "    BuildOBY = oby.ObyTxt"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage sort sequences"
        PRINT "'###################################################################################################"
        PRINT "Public Sub IncSortIndex()"
        PRINT "    mintSrtIdx = mintSrtIdx+1"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub MaxSortIndex(ByVal intIND As Integer)"
        PRINT "    mintSrtIdx = IIf(mintSrtIdx < intIND, intIND, mintSrtIdx)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub DecSortIndex( _"
        PRINT "    ByVal intDEC As Integer _"
        PRINT ")"
        PRINT ""
        PRINT "    ' Initialize index boundaries"
        PRINT "    Dim intIND As Integer"
        PRINT "    Dim intBEG As Integer: intBEG = intDEC"
        PRINT "    Dim intEND As Integer: intEND = mintSrtIdx - 1"
        PRINT "    Dim strTXT As String"
        PRINT ""
        PRINT "    ' Only process valid index boundaries"
        PRINT "    If mintSrtIdx > 0 Then"
        PRINT ""
        PRINT "        ' Shift sort values and display captions"
        PRINT "        For intIND = intBEG To intEND"
        PRINT "            mudtSrtDef(intIND).intCtlIdx = mudtSrtDef(intIND+1).intCtlIdx"
        PRINT "            mudtSrtDef(intIND).intSrtDir = mudtSrtDef(intIND+1).intSrtDir"
        PRINT "            mudtClmDef(mudtSrtDef(intIND).intCtlIdx).intSrtIdx = intIND"
        PRINT "            Call DisplaySort(intIND)"
        PRINT "        Next"
        PRINT ""
        PRINT "        ' Clear the upper boundary"
        PRINT "        mudtSrtDef(mintSrtIdx).intCtlIdx = 0"
        PRINT "        mudtSrtDef(mintSrtIdx).intSrtDir = 0"
        PRINT ""
        PRINT "        ' Decrement the sort boundary"
        PRINT "        mintSrtIdx = mintSrtIdx - 1"
        PRINT ""
        PRINT "    End If"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub DisplaySort( _"
        PRINT "    ByVal intSRT As Integer _"
        PRINT ")"
        PRINT "    ' Initialize index boundaries"
        PRINT "    Dim strTXT As String"
        PRINT ""
        PRINT "    ' Only process positive indexes"
        PRINT "    If mudtSrtDef(intSRT).intCtlIdx > 0 Then"
        PRINT "        If GetCtlName(mcCtlTypCMD, mcFldPfxSRT, mudtSrtDef(intSRT).intCtlIdx) Then"
        PRINT "            strTXT = intSRT & IIf(mudtSrtDef(intSRT).intSrtDir = mcSrtDirDSC, mcSrtIndDSC, mcSrtIndASC)"
        PRINT "            mFRM.Controls(mNAM).Caption = strTXT"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub ClearSRT( _"
        PRINT "    ByVal intCTL As Integer _"
        PRINT ")"
        PRINT "    ' Initialize index boundaries"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strCAP As String"
        PRINT "    Dim intSRT As Integer"
        PRINT "    intSRT = mudtClmDef(intCTL).intSrtIdx"
        PRINT ""
        PRINT "    ' Do not clear empty sort"
        PRINT "    If intSRT = 0 Then Exit Sub"
        PRINT ""
        PRINT "    ' Clear definition values"
        PRINT "    If GetCtlName(mcCtlTypCMD, mcFldPfxSRT, intCTL) Then"
        PRINT "        strNAM = mNAM"
        PRINT "        Call DecSortIndex(intSRT)"
        PRINT "        mudtClmDef(intCTL).intSrtIdx = mcSrtIdxNON"
        PRINT "        mFRM.Controls(strNAM).Caption = """""
        PRINT "    End If"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub AssignSRT( _"
        PRINT "    ByVal intCTL As Integer, _"
        PRINT "    Optional ByVal intIND As Integer = 0, _"
        PRINT "    Optional ByVal intDIR As Integer = 0 _"
        PRINT ")"
        PRINT "    ' Initialize index boundaries"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strCAP As String"
        PRINT "    Dim intSRT As Integer"
        PRINT ""
        PRINT "    ' Assign definition values"
        PRINT "    If GetCtlName(mcCtlTypCMD, mcFldPfxSRT, intCTL) Then"
        PRINT "        strNAM = mNAM"
        PRINT ""
        PRINT "        ' Assign initial sort index"
        PRINT "        If intIND > 0 Then"
        PRINT "            Call MaxSortIndex(intIND): intSRT = intIND"
        PRINT "            mudtClmDef(intCTL).intSrtIdx = intSRT"
        PRINT "            mudtSrtDef(intSRT).intCtlIdx = intCTL"
        PRINT "        ElseIf mudtClmDef(intCTL).intSrtIdx = 0 Then"
        PRINT "            Call IncSortIndex: intSRT = mintSrtIdx"
        PRINT "            mudtClmDef(intCTL).intSrtIdx = intSRT"
        PRINT "            mudtSrtDef(intSRT).intCtlIdx = intCTL"
        PRINT "        Else"
        PRINT "            intSRT = mudtClmDef(intCTL).intSrtIdx"
        PRINT "        End If"
        PRINT ""
        PRINT "        ' Set sort direction: ASC"
        PRINT "        If intDIR = mcSrtDirASC Then"
        PRINT "            mudtSrtDef(intSRT).intSrtDir = mcSrtDirASC"
        PRINT "            strCAP = intSRT & mcSrtIndASC"
        PRINT ""
        PRINT "        ' Set sort direction: DESC"
        PRINT "        ElseIf intDIR = mcSrtDirDSC Then"
        PRINT "            mudtSrtDef(intSRT).intSrtDir = mcSrtDirDSC"
        PRINT "            strCAP = intSRT & mcSrtIndDSC"
        PRINT ""
        PRINT "        ' Promote sort direction: ASC"
        PRINT "        ElseIf mudtSrtDef(intSRT).intSrtDir = mcSrtDirNON Then"
        PRINT "            mudtSrtDef(intSRT).intSrtDir = mcSrtDirASC"
        PRINT "            strCAP = intSRT & mcSrtIndASC"
        PRINT ""
        PRINT "        ' Promote sort direction: DESC"
        PRINT "        ElseIf mudtSrtDef(intSRT).intSrtDir = mcSrtDirASC Then"
        PRINT "            mudtSrtDef(intSRT).intSrtDir = mcSrtDirDSC"
        PRINT "            strCAP = intSRT & mcSrtIndDSC"
        PRINT ""
        PRINT "        ' Clear sort index"
        PRINT "        Else"
        PRINT "            Call DecSortIndex(intSRT)"
        PRINT "            mudtClmDef(intCTL).intSrtIdx = mcSrtIdxNON"
        PRINT "            strCAP = """""
        PRINT ""
        PRINT "        End If"
        PRINT ""
        PRINT "        ' Assign initial sort index"
        PRINT "        mFRM.Controls(strNAM).Caption = strCAP"
        PRINT ""
        PRINT "    End If"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- REGTBL = Build module:  clsRegTBL
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA REGTBL
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecREGTBL) BEGIN
    ------------------------------------------------------------------------------------------------
        IF 9=9 BEGIN
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_TBL to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    intTYP = mcModRegTbl"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Setup vbaGen_IT.GenTbl_RegAls Alias list"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END ELSE BEGIN
        IF LEN(@InpTxt) = 0 SET @InpTxt = '%'
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Get the registered table alias"
        PRINT "'###################################################################################################"
        PRINT "Public Function GetAls(ByVal strTBL As String) As String"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strALS As String"
        PRINT ""
        PRINT "    ' Lookup the standard table alias"
        PRINT "    Select Case strTBL"
        PRINT ""
        PRINT "        '*******************************************************************************************"
        PRINT "        ' Run basGenReg.Gen_RegCmd to generate Table Alias list"
        PRINT "        '*******************************************************************************************"
        PRINT ""
        SET @LEN = (
            SELECT
                MAX(LEN(obj.name))
            FROM
                SysObjects obj
            WHERE
                obj.type = 'U'
            AND obj.name NOT LIKE 'dt%'
            AND obj.name NOT LIKE 'sys%'
            AND obj.name     LIKE @InpTxt
        )
        IF @LEN < LEN('pfx_TblNam') SET @LEN = LEN('pfx_TblNam')
        SET @LEN = @LEN+6
        DECLARE cur_TblLst CURSOR LOCAL FAST_FORWARD FOR
            SELECT
                ObjNam = obj.name
            FROM
                SysObjects obj
            WHERE
                obj.type = 'U'
            AND obj.name NOT LIKE 'dt%'
            AND obj.name NOT LIKE 'sys%'
            AND obj.name     LIKE @InpTxt
            ORDER BY
                obj.name
        OPEN cur_TblLst
        WHILE 1=1 BEGIN
            FETCH NEXT FROM cur_TblLst INTO @ObjNam
            IF @@FETCH_STATUS <> 0 BREAK
            PRINT "        Case """+LEFT(@ObjNam+             '":'+@ITX,@LEN)+"strALS = ""zzz"""
        END
        DEALLOCATE cur_TblLst
        PRINT "        Case """+LEFT('pfx_TblNam'+             '":'+@ITX,@LEN)+"strALS = ""zzz"""
        PRINT ""
        PRINT "        Case """+LEFT('Else'+             '":'+@ITX,@LEN)+"strALS = ""zzz"""
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Return results"
        PRINT "    GetAls = LCase$(strALS)"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- REGPRP = Build module:  clsRegPRP
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA REGPRP
        EXEC ut_zzVBX REGPRP
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecREGPRP) BEGIN
    ------------------------------------------------------------------------------------------------
        IF 9=9 BEGIN
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_PRP to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    blnLST = mcUseStdList"
        PRINT "'    intTYP = mcModRegPrp"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Setup vbaGen_IT.GenPrp_RunCrt property list"
        PRINT "' Setup vbaGen_IT.GenCmd_SetPrp criteria lists"
        PRINT "' Setup vbaGen_IT.GenCmd_AsnPrp assignment lists"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- REGCMD = Build module:  clsRegCMD
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA REGCMD
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecREGCMD) BEGIN
    ------------------------------------------------------------------------------------------------
        IF 9=9 BEGIN
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_CMD to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    blnLST = mcUseTplList"
        PRINT "'    intTYP = mcModRegCmd"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Setup vbaGen_IT.GenPrp_RunCrt property list"
        PRINT "' Setup vbaGen_IT.GenCmd_SetPrp criteria lists"
        PRINT "' Setup vbaGen_IT.GenCmd_AsnPrp assignment lists"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END ELSE BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private mrstCMD                     As ADODB.Recordset"
        PRINT "Private mrstSTD                     As ADODB.Recordset"
        PRINT "Private mrstTPL                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFldIdxNUM           As Integer = 0"
        PRINT "Private Const mcFldIdxNAM           As Integer = 1"
        PRINT "Private Const mcFldIdxTTL           As Integer = 2"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFldNamNUM           As String = ""CmdNum"""
        PRINT "Private Const mcFldNamNAM           As String = ""CmdNam"""
        PRINT "Private Const mcFldNamTTL           As String = ""CmdTtl"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldLst                  As Variant"
        PRINT "Private mintDefItm                  As Integer"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize objects"
        PRINT "    mvrnFldLst = Array(mcFldNamNUM, mcFldNamNAM, mcFldNamTTL)"
        PRINT "    Call LodStdLst"
        PRINT "    Call LodTplLst"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Default list item"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DefaultItem() As Integer"
        PRINT "    DefaultItem = mintDefItm"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Activate the Registration Recordset"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Activate(Optional ByVal blnTPL As Boolean = False)"
        PRINT "    ' Set active recordset"
        PRINT "    If blnTPL Then"
        PRINT "        Set mrstCMD = mrstTPL.Clone"
        PRINT "    Else"
        PRINT "        Set mrstCMD = mrstSTD.Clone"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Get the Registration RowSource List"
        PRINT "'###################################################################################################"
        PRINT "Public Function GetCmdLst( _"
        PRINT "    ByVal vrnLST As Variant, _"
        PRINT "    ByVal strDEF As String, _"
        PRINT "    ByVal blnBLK As Boolean _"
        PRINT ") As String"
        PRINT "    ' Declare working constants"
        PRINT "    Const pDLM As String = "";"""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTTL As String"
        PRINT "    Dim strSRC As String"
        PRINT "    Dim strDLM As String"
        PRINT "    Dim intIND As Integer"
        PRINT "    Dim vrnITM As Variant"
        PRINT "    ' Reset default selection"
        PRINT "    mintDefItm = 0"
        PRINT "    ' Prepend blank selection"
        PRINT "    If blnBLK Then"
        PRINT "        strSRC = "";0"": strDLM = pDLM"
        PRINT "    End If"
        PRINT "    ' Lookup the report values"
        PRINT "    For Each vrnITM In vrnLST"
        PRINT "        strNAM = GetCmdNam(vrnITM)"
        PRINT "        strTTL = GetCmdTtl(vrnITM)"
        PRINT "        If Len(strNAM) > 0 Then"
        PRINT "            intIND = intIND+1"
        PRINT "            strSRC = strSRC & strDLM & strTTL & pDLM & intIND: strDLM = pDLM"
        PRINT "            If strNAM = strDEF Then"
        PRINT "                mintDefItm = intIND"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    ' Return results"
        PRINT "    GetCmdLst = strSRC"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get the Registration Name"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetCmdNam(ByVal strCmdNum As String, Optional ByVal strDefNam As String) As String"
        PRINT "    Dim strSQL As String"
        PRINT "    strCmdNum = Right$(""0000"" & strCmdNum, 4)"
        PRINT "    strSQL = ""CmdNum = '"" & strCmdNum & ""'"""
        PRINT "    GetCmdNam = IIf(Len(strDefNam) > 0, strDefNam, ""Command "" & strCmdNum & "" not found"")"
        PRINT "    With mrstCMD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            If Not (.BOF Or .EOF) Then"
        PRINT "                GetCmdNam = Trim$(.Fields(mcFldIdxNAM))"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get the Registration Title"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetCmdTtl(ByVal strCmdNum As String, Optional ByVal strDefTtl As String) As String"
        PRINT "    Dim strSQL As String"
        PRINT "    strCmdNum = Right$(""0000"" & strCmdNum, 4)"
        PRINT "    strSQL = ""CmdNum = '"" & strCmdNum & ""'"""
        PRINT "    GetCmdTtl = IIf(Len(strDefTtl) > 0, strDefTtl, ""Command "" & strCmdNum & "" not found"")"
        PRINT "    With mrstCMD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            If Not (.BOF Or .EOF) Then"
        PRINT "                GetCmdTtl = Trim$(.Fields(mcFldIdxTTL))"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get the Registration Number"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetCmdNum(ByVal strCmdNam As String) As String"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""CmdNam = '"" & strCmdNam & ""'"""
        PRINT "    GetCmdNum = ""0000"""
        PRINT "    With mrstCMD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            If Not (.BOF Or .EOF) Then"
        PRINT "                GetCmdNum = Trim$(.Fields(mcFldIdxNUM))"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Template Registration List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_RstTPL()"
        PRINT "    ' Initialize new report list"
        PRINT "    Set mrstTPL = New ADODB.Recordset"
        PRINT "    ' Create recordset fields"
        PRINT "    With mrstTPL"
        PRINT "        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"
        PRINT "        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"
        PRINT "        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"
        PRINT "    End With"
        PRINT "    ' Initialize the recordset"
        PRINT "    With mrstTPL"
        PRINT "        .Open: .Sort = mcFldNamNUM & "" ASC"""
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasTplNam(ByVal strCmdNam As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""CmdNam = '"" & strCmdNam & ""'"""
        PRINT "    With mrstTPL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasTplNam = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function NxtTplNum() As String"
        PRINT "    Dim intNUM As Integer"
        PRINT "    With mrstTPL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveLast"
        PRINT "            intNUM = .Fields(mcFldIdxNUM)"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "    intNUM = intNUM+1"
        PRINT "    NxtTplNum = Right$(""0000"" & intNUM, 4)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddTplItm(ByVal strCmdNam As String, ByVal strCmdTtl As String)"
        PRINT "    If Not HasTplNam(strCmdNam) Then"
        PRINT "        With mrstTPL"
        PRINT "            .AddNew mvrnFldLst, Array(NxtTplNum, Trim$(strCmdNam), Trim$(strCmdTtl))"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub DbgTplLst()"
        PRINT "    With mrstTPL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                Debug.Print .Fields(mcFldIdxNUM) & ""|"" & .Fields(mcFldIdxNAM) & ""|"" & .Fields(mcFldIdxTTL): .MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub LodTplLst()"
        PRINT "    Call Init_RstTPL"
        PRINT "    Call AddTplItm(""ProcessName_01"", ""Process 0001"")  ' 0001"
        PRINT "    Call AddTplItm(""ProcessName_02"", ""Process 0002"")  ' 0002"
        PRINT "    Call AddTplItm(""ProcessName_03"", ""Process 0003"")  ' 0003"
        PRINT "    If False Then Call DbgTplLst  ' True False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Standard Registration List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_RstSTD()"
        PRINT "    ' Initialize new report list"
        PRINT "    Set mrstSTD = New ADODB.Recordset"
        PRINT "    ' Create recordset fields"
        PRINT "    With mrstSTD"
        PRINT "        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"
        PRINT "        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"
        PRINT "        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"
        PRINT "    End With"
        PRINT "    ' Initialize the recordset"
        PRINT "    With mrstSTD"
        PRINT "        .Open: .Sort = mcFldNamNUM & "" ASC"""
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasStdNam(ByVal strCmdNam As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""CmdNam = '"" & strCmdNam & ""'"""
        PRINT "    With mrstSTD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasStdNam = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function NxtStdNum() As String"
        PRINT "    Dim intNUM As Integer"
        PRINT "    With mrstSTD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveLast"
        PRINT "            intNUM = .Fields(mcFldIdxNUM)"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "    intNUM = intNUM+1"
        PRINT "    NxtStdNum = Right$(""0000"" & intNUM, 4)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddStdItm(ByVal strCmdNam As String, ByVal strCmdTtl As String)"
        PRINT "    If Not HasStdNam(strCmdNam) Then"
        PRINT "        With mrstSTD"
        PRINT "            .AddNew mvrnFldLst, Array(NxtStdNum, Trim$(strCmdNam), Trim$(strCmdTtl))"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub DbgStdLst()"
        PRINT "    With mrstSTD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                Debug.Print .Fields(mcFldIdxNUM) & ""|"" & .Fields(mcFldIdxNAM) & ""|"" & .Fields(mcFldIdxTTL): .MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub LodStdLst()"
        PRINT "    Call Init_RstSTD"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    Call AddTplItm(""ProcessName_01"", ""Process 0001"")  ' 0001"
        PRINT "    Call AddTplItm(""ProcessName_02"", ""Process 0002"")  ' 0002"
        PRINT "    Call AddTplItm(""ProcessName_03"", ""Process 0003"")  ' 0003"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call DbgStdLst  ' True False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- REGRPT = Build module:  clsRegRPT
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA REGRPT
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecREGRPT) BEGIN
    ------------------------------------------------------------------------------------------------
        IF 9=9 BEGIN
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_RPT to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    blnLST = mcUseStdList"
        PRINT "'    intTYP = mcModRegRpt"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Setup vbaGen_IT.GenPrp_RunCrt property list"
        PRINT "' Setup vbaGen_IT.GenRpt_SetPrp criteria lists"
        PRINT "' Setup vbaGen_IT.GenRpt_RptPrp assignment lists"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END ELSE BEGIN
        PRINT "'###################################################################################################"
        PRINT "' Name:                                                                          2008-01-18 04:23:07"
        PRINT "'   clsRegRPT"
        PRINT "'###################################################################################################"
        PRINT "' Purpose:"
        PRINT "'   Register Report Information"
        PRINT "'###################################################################################################"
        PRINT "' Regen:"
        PRINT "'   EXEC ut_zzVBA REGRPT,clsRegRPT,""Register Report Information"""
        PRINT "'###################################################################################################"
        PRINT "' Developer    Date     Action"
        PRINT "' ------------ -------- ----------------------------------------------------------------------------"
        PRINT "' SCowden      01/18/08 Created the script"
        PRINT "'###################################################################################################"
        PRINT "'# Templates:"
        PRINT "'"
        PRINT "'    ' Initialize working objects"
        PRINT "'    Dim rrp    As clsRegRPT"
        PRINT "'    Set rrp = New clsRegRPT"
        PRINT "'"
        PRINT "'    ' Process working objects"
        PRINT "'    With rrp"
        PRINT "'    End With"
        PRINT "'"
        PRINT "'###################################################################################################"
        PRINT "Option Compare Database"
        PRINT "Option Explicit"
        PRINT "Option Base 0"
        PRINT "'***************************************************************************************************"
        PRINT "' Initialize module message constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModNam              As String = ""clsRegRPT"""
        PRINT "Private Const mcModTtl              As String = ""Register Report Information"""
        PRINT "Private Const mcModErr              As String = mcModNam"
        PRINT "Private Const mcModMsg              As String = mcModTtl & "" - """
        PRINT "'***************************************************************************************************"
        PRINT "' Public Class Events"
        PRINT "'***************************************************************************************************"
        PRINT "Public Event Error(ByVal Message As String)"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private mrstRPT                     As ADODB.Recordset"
        PRINT "Private mrstSTD                     As ADODB.Recordset"
        PRINT "Private mrstTPL                     As ADODB.Recordset"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFldIdxNUM           As Integer = 0"
        PRINT "Private Const mcFldIdxNAM           As Integer = 1"
        PRINT "Private Const mcFldIdxTTL           As Integer = 2"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFldNamNUM           As String = ""RptNum"""
        PRINT "Private Const mcFldNamNAM           As String = ""RptNam"""
        PRINT "Private Const mcFldNamTTL           As String = ""RptTtl"""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFldLst                  As Variant"
        PRINT "Private mintDefItm                  As Integer"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize objects"
        PRINT "    mvrnFldLst = Array(mcFldNamNUM, mcFldNamNAM, mcFldNamTTL)"
        PRINT "    Call LodStdLst"
        PRINT "    Call LodTplLst"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Default list item"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DefaultItem() As Integer"
        PRINT "    DefaultItem = mintDefItm"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Activate the Registration Recordset"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Activate(Optional ByVal blnTPL As Boolean = False)"
        PRINT "    ' Set active recordset"
        PRINT "    If blnTPL Then"
        PRINT "        Set mrstRPT = mrstTPL.Clone"
        PRINT "    Else"
        PRINT "        Set mrstRPT = mrstSTD.Clone"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Get the Registration RowSource List"
        PRINT "'###################################################################################################"
        PRINT "Public Function GetRptLst( _"
        PRINT "    ByVal vrnLST As Variant, _"
        PRINT "    ByVal strDEF As String, _"
        PRINT "    ByVal blnBLK As Boolean _"
        PRINT ") As String"
        PRINT "    ' Declare working constants"
        PRINT "    Const pDLM As String = "";"""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strNAM As String"
        PRINT "    Dim strTTL As String"
        PRINT "    Dim strSRC As String"
        PRINT "    Dim strDLM As String"
        PRINT "    Dim intIND As Integer"
        PRINT "    Dim vrnITM As Variant"
        PRINT "    ' Reset default selection"
        PRINT "    mintDefItm = 0"
        PRINT "    ' Prepend blank selection"
        PRINT "    If blnBLK Then"
        PRINT "        strSRC = "";0"": strDLM = pDLM"
        PRINT "    End If"
        PRINT "    ' Lookup the report values"
        PRINT "    For Each vrnITM In vrnLST"
        PRINT "        strNAM = GetRptNam(vrnITM)"
        PRINT "        strTTL = GetRptTtl(vrnITM)"
        PRINT "        If Len(strNAM) > 0 Then"
        PRINT "            intIND = intIND+1"
        PRINT "            strSRC = strSRC & strDLM & strTTL & pDLM & intIND: strDLM = pDLM"
        PRINT "            If strNAM = strDEF Then"
        PRINT "                mintDefItm = intIND"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    ' Return results"
        PRINT "    GetRptLst = strSRC"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get the Registration Name"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetRptNam(ByVal strRptNum As String, Optional ByVal strDefNam As String) As String"
        PRINT "    Dim strSQL As String"
        PRINT "    strRptNum = Right$(""0000"" & strRptNum, 4)"
        PRINT "    strSQL = ""RptNum = '"" & strRptNum & ""'"""
        PRINT "    GetRptNam = IIf(Len(strDefNam) > 0, strDefNam, ""Report "" & strRptNum & "" not found"")"
        PRINT "    With mrstRPT"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            If Not (.BOF Or .EOF) Then"
        PRINT "                GetRptNam = Trim$(.Fields(mcFldIdxNAM))"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get the Registration Title"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetRptTtl(ByVal strRptNum As String, Optional ByVal strDefTtl As String) As String"
        PRINT "    Dim strSQL As String"
        PRINT "    strRptNum = Right$(""0000"" & strRptNum, 4)"
        PRINT "    strSQL = ""RptNum = '"" & strRptNum & ""'"""
        PRINT "    GetRptTtl = IIf(Len(strDefTtl) > 0, strDefTtl, ""Report "" & strRptNum & "" not found"")"
        PRINT "    With mrstRPT"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            If Not (.BOF Or .EOF) Then"
        PRINT "                GetRptTtl = Trim$(.Fields(mcFldIdxTTL))"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get the Registration Number"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetRptNum(ByVal strRptNam As String) As String"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""RptNam = '"" & strRptNam & ""'"""
        PRINT "    GetRptNum = ""0000"""
        PRINT "    With mrstRPT"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            If Not (.BOF Or .EOF) Then"
        PRINT "                GetRptNum = Trim$(.Fields(mcFldIdxNUM))"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Template Registration List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_RstTPL()"
        PRINT "    ' Initialize new report list"
        PRINT "    Set mrstTPL = New ADODB.Recordset"
        PRINT "    ' Create recordset fields"
        PRINT "    With mrstTPL"
        PRINT "        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"
        PRINT "        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"
        PRINT "        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"
        PRINT "    End With"
        PRINT "    ' Initialize the recordset"
        PRINT "    With mrstTPL"
        PRINT "        .Open: .Sort = mcFldNamNUM & "" ASC"""
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasTplNam(ByVal strRptNam As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""RptNam = '"" & strRptNam & ""'"""
        PRINT "    With mrstTPL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasTplNam = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function NxtTplNum() As String"
        PRINT "    Dim intNUM As Integer"
        PRINT "    With mrstTPL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveLast"
        PRINT "            intNUM = .Fields(mcFldIdxNUM)"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "    intNUM = intNUM+1"
        PRINT "    NxtTplNum = Right$(""0000"" & intNUM, 4)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddTplItm(ByVal strRptNam As String, ByVal strRptTtl As String)"
        PRINT "    If Not HasTplNam(strRptNam) Then"
        PRINT "        With mrstTPL"
        PRINT "            .AddNew mvrnFldLst, Array(NxtTplNum, Trim$(strRptNam), Trim$(strRptTtl))"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub DbgTplLst()"
        PRINT "    With mrstTPL"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                Debug.Print .Fields(mcFldIdxNUM) & ""|"" & .Fields(mcFldIdxNAM) & ""|"" & .Fields(mcFldIdxTTL): .MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub LodTplLst()"
        PRINT "    Call Init_RstTPL"
        PRINT "    Call AddTplItm(""ReportName_01"", ""Report 0001"")  ' 0001"
        PRINT "    Call AddTplItm(""ReportName_02"", ""Report 0002"")  ' 0002"
        PRINT "    Call AddTplItm(""ReportName_03"", ""Report 0003"")  ' 0003"
        PRINT "    If False Then Call DbgTplLst  ' True False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Standard Registration List"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Init_RstSTD()"
        PRINT "    ' Initialize new report list"
        PRINT "    Set mrstSTD = New ADODB.Recordset"
        PRINT "    ' Create recordset fields"
        PRINT "    With mrstSTD"
        PRINT "        Call .Fields.Append(mcFldNamNUM, adVarChar, 4)"
        PRINT "        Call .Fields.Append(mcFldNamNAM, adVarChar, 200)"
        PRINT "        Call .Fields.Append(mcFldNamTTL, adVarChar, 200)"
        PRINT "    End With"
        PRINT "    ' Initialize the recordset"
        PRINT "    With mrstSTD"
        PRINT "        .Open: .Sort = mcFldNamNUM & "" ASC"""
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasStdNam(ByVal strRptNam As String) As Boolean"
        PRINT "    Dim strSQL As String"
        PRINT "    strSQL = ""RptNam = '"" & strRptNam & ""'"""
        PRINT "    With mrstSTD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            Call .MoveFirst"
        PRINT "            Call .Find(strSQL)"
        PRINT "            HasStdNam = (Not (.BOF Or .EOF))"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function NxtStdNum() As String"
        PRINT "    Dim intNUM As Integer"
        PRINT "    With mrstSTD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveLast"
        PRINT "            intNUM = .Fields(mcFldIdxNUM)"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "    intNUM = intNUM+1"
        PRINT "    NxtStdNum = Right$(""0000"" & intNUM, 4)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddStdItm(ByVal strRptNam As String, ByVal strRptTtl As String)"
        PRINT "    If Not HasStdNam(strRptNam) Then"
        PRINT "        With mrstSTD"
        PRINT "            .AddNew mvrnFldLst, Array(NxtStdNum, Trim$(strRptNam), Trim$(strRptTtl))"
        PRINT "        End With"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub DbgStdLst()"
        PRINT "    With mrstSTD"
        PRINT "        If Not (.BOF And .EOF) Then"
        PRINT "            .MoveFirst"
        PRINT "            Do While Not .EOF"
        PRINT "                Debug.Print .Fields(mcFldIdxNUM) & ""|"" & .Fields(mcFldIdxNAM) & ""|"" & .Fields(mcFldIdxTTL): .MoveNext"
        PRINT "            Loop"
        PRINT "        End If"
        PRINT "    End With"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub LodStdLst()"
        PRINT "    Call Init_RstSTD"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    Call AddStdItm(""ReportName_01"", ""Report 0001"")  ' 0001"
        PRINT "    Call AddStdItm(""ReportName_02"", ""Report 0002"")  ' 0002"
        PRINT "    Call AddStdItm(""ReportName_03"", ""Report 0003"")  ' 0003"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If False Then Call DbgStdLst  ' True False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- REGPTH = Build module:  clsRegPTH
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA REGPTH
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecREGPTH) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_PTH to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    *** UNDER CONSTRUCTION ***"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- REGSRC = Build module:  clsRegSRC
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA REGSRC,clsRegSRC,'Register SQL Source Information',rsc
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecREGSRC) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrcTypQRY           As String = ""Table/View/StoredProc"""
        PRINT "Private Const mcSrcTypVAL           As String = ""Value List"""
        PRINT "Private Const mcFrmSizTWP           As Integer = 1440   ' Twips Per inch"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Add an element to the ORDER BY clause"
        PRINT "'###################################################################################################"
        PRINT "Public Function GetRowSrc( _"
        PRINT "    ByVal strNAM As String, _"
        PRINT "    ByRef strSRC As String, _"
        PRINT "    ByRef strTYP As String, _"
        PRINT "    ByRef intCNT As Integer, _"
        PRINT "    ByRef strCWD As String, _"
        PRINT "    ByRef lngLWD As Long, _"
        PRINT "    ByRef intBND As Integer, _"
        PRINT "    ByRef strSBR As String _"
        PRINT ") As String"
        PRINT "    Dim strERR As String: Const pcPrcNam As String = ""GetRowSrc"""
        PRINT "    strERR = ""ERROR in "" & pcPrcNam & "": Invalid Source Name."""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim sglLWD As Single"
        PRINT ""
        PRINT "    ' Assign defaults"
        PRINT "    strSBR = ""Select the value you wish to locate (Double-click to clear)"""
        PRINT ""
        PRINT "    ' Assign SQL statement"
        PRINT "    Select Case strNAM"
        PRINT ""
        PRINT "        '*******************************************************************************************"
        PRINT "        ' Run basGenReg.Gen_RegSrc to generate ComboBox Row Source list"
        PRINT "        '*******************************************************************************************"
        PRINT ""
        PRINT "        '*******************************************************************************************"
        PRINT "        ' Standard row source values"
        PRINT "        '*******************************************************************************************"
        PRINT "        Case ""TestNUM"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = "";1;2;3;4;5"""
        PRINT "            strTYP = mcSrcTypVAL"
        PRINT "            intCNT = 1"
        PRINT "            strCWD = """""
        PRINT "            sglLWD = 0"
        PRINT "            intBND = 1"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""TestTXT"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = "";Text01;Text02;Text03;Text04;Text05"""
        PRINT "            strTYP = mcSrcTypVAL"
        PRINT "            intCNT = 1"
        PRINT "            strCWD = """""
        PRINT "            sglLWD = 0"
        PRINT "            intBND = 1"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""TestBLN"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = "";True;False"""
        PRINT "            strTYP = mcSrcTypVAL"
        PRINT "            intCNT = 1"
        PRINT "            strCWD = """""
        PRINT "            sglLWD = 0"
        PRINT "            intBND = 1"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""BooleanTFChar"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = "";T;F"""
        PRINT "            strTYP = mcSrcTypVAL"
        PRINT "            intCNT = 1"
        PRINT "            strCWD = """""
        PRINT "            sglLWD = 0"
        PRINT "            intBND = 1"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""BooleanTFText"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = "";True;False"""
        PRINT "            strTYP = mcSrcTypVAL"
        PRINT "            intCNT = 1"
        PRINT "            strCWD = """""
        PRINT "            sglLWD = 0"
        PRINT "            intBND = 1"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""BooleanYNChar"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = "";Y;N"""
        PRINT "            strTYP = mcSrcTypVAL"
        PRINT "            intCNT = 1"
        PRINT "            strCWD = """""
        PRINT "            sglLWD = 0"
        PRINT "            intBND = 1"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""BooleanYNText"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = "";Yes;No"""
        PRINT "            strTYP = mcSrcTypVAL"
        PRINT "            intCNT = 1"
        PRINT "            strCWD = """""
        PRINT "            sglLWD = 0"
        PRINT "            intBND = 1"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT ""
        PRINT "        '*******************************************************************************************"
        PRINT "        ' Custom row source values"
        PRINT "        '*******************************************************************************************"
        PRINT "        Case ""ref_TblNam_Desc"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = ""SELECT Column_List FROM pfx_TblNam ORDER BY TblNam"""
        PRINT "            strTYP = mcSrcTypQRY"
        PRINT "            intCNT = 2"
        PRINT "            strCWD = ""1"""";0"""""""
        PRINT "            sglLWD = 1"
        PRINT "            intBND = 2"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        Case ""ref_TblNam_Desc"""
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "            strSRC = ""SELECT Column_List FROM pfx_TblNam ORDER BY TblNam"""
        PRINT "            strTYP = mcSrcTypQRY"
        PRINT "            intCNT = 2"
        PRINT "            strCWD = ""1"""";0"""""""
        PRINT "            sglLWD = 1"
        PRINT "            intBND = 2"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT ""
        PRINT "        '*******************************************************************************************"
        PRINT "        Case Else: strSRC = """""
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Convert inches to twips"
        PRINT "    lngLWD = sglLWD * mcFrmSizTWP"
        PRINT ""
        PRINT "    ' Review SQL statement"
        PRINT "    If False Then Debug.Print strSRC  ' True False"
        PRINT ""
        PRINT "    ' Return SQL string"
        PRINT "    GetRowSrc = strSRC"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    RaiseEvent Error(strERR)"
        PRINT "    GetRowSrc = """""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- SQLSTM = Build module:  clsSqlSTM
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA SQLSTM
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSQLSTM) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' SQL Statement:  Default empty string"
        PRINT "'###################################################################################################"
        PRINT "Public Function GetSql__Empty( _"
        PRINT "    Optional strWHR As String = """", _"
        PRINT "    Optional strGBY As String = """", _"
        PRINT "    Optional strHAV As String = """", _"
        PRINT "    Optional strOBY As String = """" _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Return SQL string"
        PRINT "    GetSql__Empty = """""
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        IF LEN(@InpTxt) = 0 BEGIN
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "'EXEC ut_zzVBA SQLSTM,"""
        PRINT "'    tbl_StmtList"
        PRINT "'"""
        PRINT "'***************************************************************************************************"
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- SQLOBY = Build module:  clsSqlOBY
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA SQLOBY,clsSqlOBY  ,'Build SQL ORDER BY clause',oby
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecSQLOBY) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Standard class services"
        PRINT "'***************************************************************************************************"
        PRINT "Private rtb                         As clsRegTBL"
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Statement construction constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMG1                 As String = ""    """
        PRINT "Private Const mcCMA                 As String = "","""
        PRINT "Private Const mcRT1                 As String = vbCrLf & mcMG1"
        PRINT "Private Const mcCM1                 As String = mcCMA & vbCrLf & mcMG1"
        PRINT "Private Const mcOB1                 As String = ""ORDER BY"" & mcRT1"
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' SrtBy tracking constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrtTxtNON           As String = """""
        PRINT "Private Const mcSrtTxtASC           As String = ""ASC"""
        PRINT "Private Const mcSrtTxtDSC           As String = ""DESC"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Statement construction variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrObyTxt                  As String"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Objects"
        PRINT "    Set rtb = New clsRegTBL"
        PRINT "    ' Initialize Flags"
        PRINT "    ' Initialize Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text concatenation methods"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let ObyTxt(ByVal vNewVal As String)"
        PRINT "    ' Declare working variables"
        PRINT "    Dim strSTM As String"
        PRINT "    Dim strCMA As String"
        PRINT "    ' Truncate 'ASC' since it is unnecessary"
        PRINT "    strSTM = Trim$(Replace$(vNewVal, "" "" & mcSrtTxtASC, """"))"
        PRINT "    ' Truncate comma since it is added later"
        PRINT "    strSTM = Trim$(Replace$(strSTM, "","", """"))"
        PRINT "    ' Append to the ORDER BY statement"
        PRINT "    strCMA = IIf(Len(mstrObyTxt) = 0, mcOB1, mcCM1)"
        PRINT "    mstrObyTxt = mstrObyTxt & strCMA & strSTM"
        PRINT "End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get ObyTxt() As String"
        PRINT "    ObyTxt = mstrObyTxt"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Add an element to the ORDER BY clause"
        PRINT "'###################################################################################################"
        PRINT "Public Function AddItem( _"
        PRINT "    ByVal strTBL As String, _"
        PRINT "    ByVal strCLM As String, _"
        PRINT "    ByVal strDIR As String _"
        PRINT ") As Boolean"
        PRINT "    Dim strERR As String: Const pcPrcNam As String = ""AddItem"""
        PRINT "    strERR = ""ERROR in "" & pcPrcNam & "": Invalid ORDER BY."""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strSTM As String"
        PRINT "    Dim strCMA As String"
        PRINT "    Dim strALS As String"
        PRINT ""
        PRINT "    ' Initialize alias value"
        PRINT "    strALS = rtb.GetAls(strTBL)"
        PRINT ""
        PRINT "    ' Translate direction value"
        PRINT "    strDIR = IIf(strDIR = mcSrtTxtDSC, strDIR, """")"
        PRINT ""
        PRINT "    ' Construct the current statement"
        PRINT "    strSTM = Trim$(strALS & ""."" & strCLM & "" "" & strDIR)"
        PRINT ""
        PRINT "    ' Append to the ORDER BY statement"
        PRINT "    ObyTxt = strSTM"
        PRINT ""
        PRINT "    ' Review ORDER BY statement"
        PRINT "    If False Then Debug.Print ObyTxt  ' True False"
        PRINT ""
        PRINT "    ' Return SQL string"
        PRINT "    AddItem = True"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    RaiseEvent Error(strERR)"
        PRINT "    AddItem = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNWHR = Build module:  clsRunWHR
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNWHR,clsRunWHR  ,'Build SQL WHERE clause',whr
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNWHR) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Standard Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private soj                         As clsRegTBL"
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcZRO                 As Long = 0                           ' BTX: Empty Number"
        PRINT "Private Const mcMTY                 As String = """"                        ' BTX: Empty String"
        PRINT "Private Const mcSPC                 As String = "" ""                       ' BTX: Single Space"
        PRINT "Private Const mcDOT                 As String = "".""                       ' BTX: Period/Dot"
        PRINT "Private Const mcCMA                 As String = "",""                       ' BTX: Comma Constant"
        PRINT "Private Const mcDSH                 As String = ""-""                       ' BTX: Dash"
        PRINT "Private Const mcUBR                 As String = ""_""                       ' BTX: Underbar"
        PRINT "Private Const mcPIP                 As String = ""|""                       ' BTX: Pipe"
        PRINT "Private Const mcBKS                 As String = ""\\""                       ' BTX: Backslash"
        PRINT "Private Const mcFWS                 As String = ""/""                       ' BTX: Forwardslash"
        PRINT "Private Const mcSCN                 As String = "";""                       ' BTX: Semi-Colon"
        PRINT "Private Const mcCLN                 As String = "":""                       ' BTX: Colon"
        PRINT "Private Const mcTLD                 As String = ""~""                       ' BTX: Tilde"
        PRINT "Private Const mcTIK                 As String = ""`""                       ' BTX: Backtick"
        PRINT "Private Const mcSQT                 As String = ""'""                       ' BTX: Single Quote"
        PRINT "Private Const mcDQT                 As String = """"""""                      ' BTX: Double Quote"
        PRINT "Private Const mcCLF                 As String = vbCrLf                    ' BTX: CarrRtn/LineFeed"
        PRINT "Private Const mcNUL                 As Variant = Null                     ' BTX: Null Value"
        PRINT "Private Const mcYUP                 As Boolean = True                     ' BTX: Standard True"
        PRINT "Private Const mcNOP                 As Boolean = False                    ' BTX: Standard False"
        PRINT "Private Const mcALL                 As String = ""ALL""                     ' BTX: Standard ALL"
        PRINT "'***************************************************************************************************"
        PRINT "' VBA DataType Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVbaTypNON           As Long = 0                            ' non - No type"
        PRINT "Private Const mcVbaTypBYT           As Long = 1                            ' byt - Byte"
        PRINT "Private Const mcVbaTypBLN           As Long = 2                            ' bln - Boolean"
        PRINT "Private Const mcVbaTypINT           As Long = 3                            ' int - Integer"
        PRINT "Private Const mcVbaTypLNG           As Long = 4                            ' lng - Long"
        PRINT "Private Const mcVbaTypSGL           As Long = 5                            ' sgl - Single"
        PRINT "Private Const mcVbaTypDBL           As Long = 6                            ' dbl - Double"
        PRINT "Private Const mcVbaTypCUR           As Long = 7                            ' cur - Currency"
        PRINT "Private Const mcVbaTypDEC           As Long = 8                            ' dec - Decimal"
        PRINT "Private Const mcVbaTypDAT           As Long = 9                            ' dat - Date"
        PRINT "Private Const mcVbaTypSTR           As Long = 10                           ' str - String"
        PRINT "Private Const mcVbaTypVRN           As Long = 11                           ' vrn - Variant"
        PRINT "Private Const mcVbaTypOBJ           As Long = 12                           ' obj - Object"
        PRINT "'***************************************************************************************************"
        PRINT "' Standard Operator Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVbaOprGEQ           As String = "">=""                       ' GEQ - GreaterThan or EqualTo"
        PRINT "Private Const mcVbaOprLEQ           As String = ""<=""                       ' LEQ - LessThan or EqualTo"
        PRINT "Private Const mcVbaOprGTN           As String = "">""                        ' GTN - GreaterThan"
        PRINT "Private Const mcVbaOprLTN           As String = ""<""                        ' LTN - LessThan"
        PRINT "Private Const mcVbaOprEQL           As String = ""=""                        ' EQL - EqualTo"
        PRINT "Private Const mcVbaOprNEQ           As String = ""<>""                       ' NEQ - Not EqualTo"
        PRINT "Private Const mcVbaOprNOT           As String = ""!""                        ' NOT - Not EqualTo"
        PRINT "Private Const mcVbaOprLIK           As String = ""~""                        ' LIK - Like"
        PRINT "Private Const mcVbaOprBTW           As String = "":""                        ' BTW - Between"
        PRINT "Private Const mcVbaOprFZY           As String = ""~""                        ' FZY - Fuzzy"
        PRINT "'***************************************************************************************************"
        PRINT "' Wildcard Character Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWldAnyJET           As String = ""*""                        ' WildANY: JET"
        PRINT "Private Const mcWldAnySQL           As String = ""%""                        ' WildANY: SQL"
        PRINT "Private Const mcWldAnyCUR           As String = mcWldAnyJET                ' WildANY: Current"
        PRINT "'***************************************************************************************************"
        PRINT "' Wildcard Escape Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWldEscJET           As String = """"                         ' WildESC: JET"
        PRINT "Private Const mcWldEscSQL           As String = "" ESCAPE '!'""              ' WildESC: SQL"
        PRINT "Private Const mcWldEscCUR           As String = mcWldEscJET                ' WildESC: Current"
        PRINT "'***************************************************************************************************"
        PRINT "' Boolean Text Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcBlnYupJET           As String = ""True""                     ' Boolean  True: JET"
        PRINT "Private Const mcBlnYupSQL           As String = ""1""                        ' Boolean  True: SQL"
        PRINT "Private Const mcBlnYupCUR           As String = mcBlnYupJET                ' Boolean  True: Current"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcBlnNopJET           As String = ""False""                    ' Boolean False: JET"
        PRINT "Private Const mcBlnNopSQL           As String = ""0""                        ' Boolean False: SQL"
        PRINT "Private Const mcBlnNopCUR           As String = mcBlnNopJET                ' Boolean False: Current"
        PRINT "'***************************************************************************************************"
        PRINT "' Statement Construction Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSP1                 As String = "" """
        PRINT "Private Const mcMG1                 As String = ""    """
        PRINT "Private Const mcAND                 As String = ""AND """
        PRINT "Private Const mcRT1                 As String = vbCrLf & mcMG1"
        PRINT "Private Const mcWH1                 As String = ""WHERE"" & mcRT1"
        PRINT "'***************************************************************************************************"
        PRINT "' Statement Construction Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrWhrSql                  As String"
        PRINT "Private mstrWhrFlt                  As String"
        PRINT "Private mstrWhrStm                  As String"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Objects"
        PRINT "    Set soj = New clsRegTBL"
        PRINT "    ' Initialize Flags"
        PRINT "    ' Initialize Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA DataType Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaTypNON() As Long:                       VbaTypNON = mcVbaTypNON: End Property"
        PRINT "Public Property Get VbaTypBYT() As Long:                       VbaTypBYT = mcVbaTypBYT: End Property"
        PRINT "Public Property Get VbaTypBLN() As Long:                       VbaTypBLN = mcVbaTypBLN: End Property"
        PRINT "Public Property Get VbaTypINT() As Long:                       VbaTypINT = mcVbaTypINT: End Property"
        PRINT "Public Property Get VbaTypLNG() As Long:                       VbaTypLNG = mcVbaTypLNG: End Property"
        PRINT "Public Property Get VbaTypSGL() As Long:                       VbaTypSGL = mcVbaTypSGL: End Property"
        PRINT "Public Property Get VbaTypDBL() As Long:                       VbaTypDBL = mcVbaTypDBL: End Property"
        PRINT "Public Property Get VbaTypCUR() As Long:                       VbaTypCUR = mcVbaTypCUR: End Property"
        PRINT "Public Property Get VbaTypDEC() As Long:                       VbaTypDEC = mcVbaTypDEC: End Property"
        PRINT "Public Property Get VbaTypDAT() As Long:                       VbaTypDAT = mcVbaTypDAT: End Property"
        PRINT "Public Property Get VbaTypSTR() As Long:                       VbaTypSTR = mcVbaTypSTR: End Property"
        PRINT "Public Property Get VbaTypVRN() As Long:                       VbaTypVRN = mcVbaTypVRN: End Property"
        PRINT "Public Property Get VbaTypOBJ() As Long:                       VbaTypOBJ = mcVbaTypOBJ: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Text concatenation methods"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let WhrSql(ByVal vNewVal As String)"
        PRINT "    ' Declare working variables"
        PRINT "    Dim strSTM As String"
        PRINT "    Dim strAND As String"
        PRINT "    ' Prep value for processing"
        PRINT "    strSTM = LTrim$(vNewVal)"
        PRINT "    ' Do not process empty values"
        PRINT "    If Len(strSTM) > 0 Then"
        PRINT "        ' Truncate 'AND ' phrase since it is added later"
        PRINT "        If Left$(strSTM & Space(Len(mcAND)), Len(mcAND)) = mcAND Then"
        PRINT "            strSTM = Right$(strSTM, Len(strSTM) - Len(mcAND))"
        PRINT "        End If"
        PRINT "        ' Append to the WHERE statement"
        PRINT "        strAND = IIf(Len(mstrWhrSql) = 0, mcWH1, vbCrLf & mcAND)"
        PRINT "        mstrWhrSql = mstrWhrSql & strAND & strSTM"
        PRINT "    End If"
        PRINT "End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get WhrSql() As String"
        PRINT "    WhrSql = mstrWhrSql"
        PRINT "End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Let WhrFlt(ByVal vNewVal As String)"
        PRINT "    ' Declare working variables"
        PRINT "    Dim strSTM As String"
        PRINT "    Dim strAND As String"
        PRINT "    ' Prep value for processing"
        PRINT "    strSTM = LTrim$(vNewVal)"
        PRINT "    ' Do not process empty values"
        PRINT "    If Len(strSTM) > 0 Then"
        PRINT "        ' Truncate 'AND ' phrase since it is added later"
        PRINT "        If Left$(strSTM & Space(Len(mcAND)), Len(mcAND)) = mcAND Then"
        PRINT "            strSTM = Right$(strSTM, Len(strSTM) - Len(mcAND))"
        PRINT "        End If"
        PRINT "        ' Append to the WHERE statement"
        PRINT "        strAND = IIf(Len(mstrWhrFlt) = 0, """", mcSP1 & mcAND)"
        PRINT "        mstrWhrFlt = mstrWhrFlt & strAND & strSTM"
        PRINT "    End If"
        PRINT "End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get WhrFlt() As String"
        PRINT "    WhrFlt = mstrWhrFlt"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let WhrStm(ByVal vNewVal As String)"
        PRINT "    ' Declare working variables"
        PRINT "    Dim strSTM As String"
        PRINT "    Dim strAND As String"
        PRINT "    ' Prep value for processing"
        PRINT "    strSTM = LTrim$(vNewVal)"
        PRINT "    ' Do not process empty values"
        PRINT "    If Len(strSTM) > 0 Then"
        PRINT "        ' Truncate 'AND ' phrase since it is added later"
        PRINT "        If Left$(strSTM & Space(Len(mcAND)), Len(mcAND)) = mcAND Then"
        PRINT "            strSTM = Right$(strSTM, Len(strSTM) - Len(mcAND))"
        PRINT "        End If"
        PRINT "        ' Append to the WHERE statement"
        PRINT "        strAND = IIf(Len(mstrWhrStm) = 0, """", mcSP1 & mcAND)"
        PRINT "        mstrWhrStm = mstrWhrStm & strAND & strSTM"
        PRINT "    End If"
        PRINT "End Property"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "Public Property Get WhrStm() As String"
        PRINT "    WhrStm = mstrWhrStm"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Add an element to the WHERE clause"
        PRINT "'###################################################################################################"
        PRINT "Public Function AddItem( _"
        PRINT "    ByVal strTBL As String, _"
        PRINT "    ByVal strCLM As String, _"
        PRINT "    ByVal lngTYP As Long, _"
        PRINT "    ByVal vrnVAL As Variant _"
        PRINT ") As Boolean"
        PRINT "    Dim strERR As String: Const pcPrcNam As String = ""AddItem"""
        PRINT "    strERR = ""ERROR in "" & pcPrcNam & "": Invalid Criteria."""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Do not process empty values"
        PRINT "    If Len(Trim$(CStr(Nz(vrnVAL, """")))) = 0 Then GoTo Exit_Procedure"
        PRINT ""
        PRINT "    ' Command custom statement"
        PRINT "    If lngTYP = mcVbaTypNON Then"
        PRINT "        WhrSql = CStr(vrnVAL)"
        PRINT "        WhrFlt = CStr(vrnVAL)"
        PRINT "        AddItem = True"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strSQL As String"
        PRINT "    Dim strFLT As String"
        PRINT "    Dim strSTM As String"
        PRINT "    Dim strAND As String"
        PRINT "    Dim strALS As String"
        PRINT "    Dim strOPR As String"
        PRINT "    Dim strSQT As String"
        PRINT "    Dim strESC As String"
        PRINT "    Dim strBEG As String"
        PRINT "    Dim strEND As String"
        PRINT ""
        PRINT "    ' Initialize alias value"
        PRINT "    strALS = soj.GetTblAls(strTBL)"
        PRINT ""
        PRINT "    ' Process the elements based on data type"
        PRINT "    If Not ProcessTYP(lngTYP, vrnVAL, strOPR, strSQT, strBEG, strEND, strESC) Then GoTo Exit_Procedure"
        PRINT ""
        PRINT "    ' Append dot to alias"
        PRINT "    If Len(strALS) > 0 Then strALS = Replace$(strALS, ""."", """") & ""."""
        PRINT ""
        PRINT "    ' Resolve equal range values"
        PRINT "    If strBEG = strEND Then"
        PRINT "        strOPR = "" "" & mcVbaOprEQL & "" "": strEND = """""
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Construct the SQL statement"
        PRINT "    strSQL = strALS & strCLM & strOPR & strSQT & strBEG & strSQT & strESC"
        PRINT "    If Len(strEND) > 0 Then"
        PRINT "        strSQL = strSQL & "" AND "" & strSQT & strEND & strSQT"
        PRINT "    End If"
        PRINT "    WhrSql = strSQL"
        PRINT ""
        PRINT "    ' Construct the Filter statement"
        PRINT "    strFLT = strCLM & strOPR & strSQT & strBEG & strSQT & strESC"
        PRINT "    If Len(strEND) > 0 Then"
        PRINT "        strFLT = strFLT & "" AND "" & strSQT & strEND & strSQT"
        PRINT "    End If"
        PRINT "    WhrFlt = strFLT"
        PRINT ""
        PRINT "    ' Construct the Alias statement"
        PRINT "    strSTM = strALS & strCLM & strOPR & strSQT & strBEG & strSQT & strESC"
        PRINT "    If Len(strEND) > 0 Then"
        PRINT "        strSTM = strSTM & "" AND "" & strSQT & strEND & strSQT"
        PRINT "    End If"
        PRINT "    WhrStm = strSTM"
        PRINT ""
        PRINT "    ' Review WHERE statement"
        PRINT "    If False Then Debug.Print WhrSql  ' True False"
        PRINT ""
        PRINT "    ' Return SQL string"
        PRINT "    AddItem = True"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    RaiseEvent Error(strERR)"
        PRINT "    AddItem = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Add an element to the WHERE clause"
        PRINT "'###################################################################################################"
        PRINT "Public Function GetCrit( _"
        PRINT "    ByVal lngTYP As Long, _"
        PRINT "    ByVal vrnVAL As Variant, _"
        PRINT "    Optional ByVal strFLD As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Do not process empty values"
        PRINT "    If Len(Trim$(CStr(Nz(vrnVAL, """")))) = 0 Then GoTo Exit_Procedure"
        PRINT ""
        PRINT "    ' Command custom statement"
        PRINT "    If lngTYP = mcVbaTypNON Then"
        PRINT "        GetCrit = True"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strSQL As String"
        PRINT "    Dim strOPR As String"
        PRINT "    Dim strSQT As String"
        PRINT "    Dim strESC As String"
        PRINT "    Dim strBEG As String"
        PRINT "    Dim strEND As String"
        PRINT ""
        PRINT "    ' Process the elements based on data type"
        PRINT "    If Not ProcessTYP(lngTYP, vrnVAL, strOPR, strSQT, strBEG, strEND, strESC) Then GoTo Exit_Procedure"
        PRINT ""
        PRINT "    ' Resolve equal range values"
        PRINT "    If strBEG = strEND Then"
        PRINT "        strOPR = "" "" & mcVbaOprEQL & "" "": strEND = """""
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Construct the SQL statement"
        PRINT "    strSQL = LTrim$(strFLD & mcSPC) & Trim$(strOPR & strSQT & strBEG & strSQT & strESC)"
        PRINT "    If Len(strEND) > 0 Then"
        PRINT "        strSQL = strSQL & "" AND "" & strSQT & strEND & strSQT"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Review criteria statement"
        PRINT "    If False Then Debug.Print strSQL  ' True False"
        PRINT ""
        PRINT "    ' Return SQL string"
        PRINT "    GetCrit = strSQL"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Process Criteria Elements based on Type"
        PRINT "'###################################################################################################"
        PRINT "Private Function ProcessTYP( _"
        PRINT "    ByVal lngTYP As Long, _"
        PRINT "    ByVal vrnVAL As Variant, _"
        PRINT "    ByRef strOPR As String, _"
        PRINT "    ByRef strSQT As String, _"
        PRINT "    ByRef strBEG As String, _"
        PRINT "    ByRef strEND As String, _"
        PRINT "    ByRef strESC As String _"
        PRINT ") As Boolean"
        PRINT "    Dim strERR As String: Const pcPrcNam As String = ""ProcessTYP"""
        PRINT "    strERR = ""ERROR in "" & pcPrcNam & "": Invalid Criteria."""
        PRINT ""
        PRINT "    ' Process the value based on data type"
        PRINT "    Select Case lngTYP"
        PRINT ""
        PRINT "        Case mcVbaTypBYT"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckBYT(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypBLN"
        PRINT "            Call ParseBLN(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckBLN(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypINT"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckINT(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypLNG"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckLNG(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypSGL"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckSGL(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypDBL"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckDBL(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypCUR"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckCUR(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypDEC"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckDEC(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypDAT"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckDAT(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypSTR"
        PRINT "            Call ParseTXT(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckSTR(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case mcVbaTypVRN"
        PRINT "            Call ParseNBR(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckVRN(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "        Case Else"
        PRINT "            Call ParseTXT(vrnVAL, strOPR, strSQT, strBEG, strEND, strESC)"
        PRINT "            If Not CheckSTR(strBEG, strEND) Then GoTo Error_Handler"
        PRINT ""
        PRINT "    End Select"
        PRINT ""
        PRINT "    ' Return success"
        PRINT "    ProcessTYP = True"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    RaiseEvent Error(strERR)"
        PRINT "    ProcessTYP = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Parse Criteria:  Boolean"
        PRINT "'###################################################################################################"
        PRINT "Public Function ParseBLN( _"
        PRINT "    ByVal vrnVAL As Variant, _"
        PRINT "    ByRef strOPR As String, _"
        PRINT "    ByRef strSQT As String, _"
        PRINT "    ByRef strBEG As String, _"
        PRINT "    ByRef strEND As String, _"
        PRINT "    ByRef strESC As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strCHK As String"
        PRINT "    Dim intPOS As Integer"
        PRINT ""
        PRINT "    ' Convert to string"
        PRINT "    strCHK = LTrim$(CStr(vrnVAL))"
        PRINT ""
        PRINT "    ' Assign default operator"
        PRINT "    strOPR = mcVbaOprEQL"
        PRINT ""
        PRINT "    ' Translate boolean representations"
        PRINT "    Select Case strCHK"
        PRINT "        Case ""1"", ""-1"", ""True"", ""T"", ""Yes"", ""Y"": strBEG = mcBlnYupCUR"
        PRINT "        Case Else:                               strBEG = mcBlnNopCUR"
        PRINT "    End Select"
        PRINT ""
        PRINT ""
        PRINT "    ' Assign default quote"
        PRINT "    strOPR = "" "" & Trim$(strOPR) & "" """
        PRINT "    strSQT = """""
        PRINT "    strESC = """""
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Parse Criteria:  Numeric"
        PRINT "'###################################################################################################"
        PRINT "Public Function ParseNBR( _"
        PRINT "    ByVal vrnVAL As Variant, _"
        PRINT "    ByRef strOPR As String, _"
        PRINT "    ByRef strSQT As String, _"
        PRINT "    ByRef strBEG As String, _"
        PRINT "    ByRef strEND As String, _"
        PRINT "    ByRef strESC As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strNUM As String"
        PRINT "    Dim strCHK As String"
        PRINT "    Dim intPOS As Integer"
        PRINT "    Dim intFZY As Integer"
        PRINT ""
        PRINT "    ' Convert to string"
        PRINT "    strCHK = LTrim$(CStr(vrnVAL))"
        PRINT ""
        PRINT "    ' Prep fuzzy logic value"
        PRINT "    intFZY = GetNbrFZN(strCHK)"
        PRINT "    strCHK = GetNbrFZX(strCHK, intFZY)"
        PRINT ""
        PRINT "    ' Locate standard operator"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprGEQ)) = mcVbaOprGEQ Then strOPR = mcVbaOprGEQ"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprLEQ)) = mcVbaOprLEQ Then strOPR = mcVbaOprLEQ"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprGTN)) = mcVbaOprGTN Then strOPR = mcVbaOprGTN"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprLTN)) = mcVbaOprLTN Then strOPR = mcVbaOprLTN"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprEQL)) = mcVbaOprEQL Then strOPR = mcVbaOprEQL"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprNEQ)) = mcVbaOprNEQ Then strOPR = mcVbaOprNEQ"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprNOT)) = mcVbaOprNOT Then strOPR = mcVbaOprNOT"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprFZY)) = mcVbaOprFZY Then strOPR = mcVbaOprFZY"
        PRINT ""
        PRINT "    ' Extract standard operator"
        PRINT "    If Len(strOPR) > 0 Then"
        PRINT "        Select Case strOPR"
        PRINT "            Case mcVbaOprFZY"
        PRINT "                strNUM = GetNbrNUM(Right$(strCHK, Len(strCHK) - Len(strOPR)))"
        PRINT "                strBEG = strNUM - intFZY"
        PRINT "                strEND = strNUM+intFZY"
        PRINT "                strOPR = ""BETWEEN"""
        PRINT "            Case mcVbaOprNOT"
        PRINT "                strBEG = GetNbrNUM(Right$(strCHK, Len(strCHK) - Len(strOPR)))"
        PRINT "                strOPR = mcVbaOprNEQ"
        PRINT "            Case Else"
        PRINT "                strBEG = GetNbrNUM(Right$(strCHK, Len(strCHK) - Len(strOPR)))"
        PRINT "        End Select"
        PRINT ""
        PRINT "    ' Extract range operator"
        PRINT "    ElseIf InStr(strCHK, mcVbaOprBTW) > 0 Then"
        PRINT "        intPOS = InStr(strCHK, mcVbaOprBTW)"
        PRINT "        strBEG = GetNbrNUM(Left$(strCHK, intPOS - 1))"
        PRINT "        strEND = GetNbrNUM(Right$(strCHK, Len(strCHK) - intPOS))"
        PRINT "        strOPR = ""BETWEEN"""
        PRINT ""
        PRINT "    ' Assign default operator"
        PRINT "    Else"
        PRINT "        strBEG = GetNbrNUM(strCHK)"
        PRINT "        strOPR = mcVbaOprEQL"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Assign default quote"
        PRINT "    strOPR = "" "" & Trim$(strOPR) & "" """
        PRINT "    strSQT = """""
        PRINT "    strESC = """""
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetNbrFZN(ByVal strTXT As String) As Integer"
        PRINT "    Dim strTMP As String"
        PRINT "    Dim strCHR As String"
        PRINT "    Dim strNUM As String"
        PRINT "    Dim intPOS As Integer"
        PRINT "    strTXT = Trim$(strTXT)"
        PRINT "    intPOS = InStr(strTXT, ""/"")"
        PRINT "    If intPOS > 0 Then"
        PRINT "        strTMP = Mid$(strTXT, intPOS+1, 999)"
        PRINT "        Do While Len(strTMP) > 0"
        PRINT "            strCHR = Left$(strTMP, 1): strTMP = Mid$(strTMP, 2, 999)"
        PRINT "            If IsNumeric(strCHR) Then strNUM = strNUM & strCHR"
        PRINT "        Loop"
        PRINT "        If Len(strNUM) > 0 Then GetNbrFZN = Abs(CInt(strNUM))"
        PRINT "    End If"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetNbrFZX(ByVal strTXT As String, Optional ByVal intFZY As Integer) As String"
        PRINT "    Dim intPOS As Integer"
        PRINT "    strTXT = Trim$(strTXT)"
        PRINT "    intPOS = InStr(strTXT, ""/"")"
        PRINT "    If intPOS > 0 Then"
        PRINT "        GetNbrFZX = mcVbaOprFZY & Replace$(Mid$(strTXT, 1, intPOS - 1), mcVbaOprFZY, mcMTY)"
        PRINT "    ElseIf intFZY > 0 Then"
        PRINT "        GetNbrFZX = mcVbaOprFZY & Replace$(strTXT, mcVbaOprFZY, mcMTY)"
        PRINT "    Else"
        PRINT "        GetNbrFZX = strTXT"
        PRINT "    End If"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function GetNbrNUM(ByVal strTXT As String) As String"
        PRINT "    Dim strTMP As String"
        PRINT "    Dim strCHR As String"
        PRINT "    Dim strNUM As String"
        PRINT "    strTMP = Trim$(strTXT)"
        PRINT "    Do While Len(strTMP) > 0"
        PRINT "        strCHR = Left$(strTMP, 1): strTMP = Mid$(strTMP, 2, 9999)"
        PRINT "        If IsNumeric(strCHR) Then strNUM = strNUM & strCHR"
        PRINT "    Loop"
        PRINT "    GetNbrNUM = IIf(Len(strNUM) > 0, strNUM, ""0"")"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Parse Criteria:  Date"
        PRINT "'###################################################################################################"
        PRINT "Public Function ParseDAT( _"
        PRINT "    ByVal vrnVAL As Variant, _"
        PRINT "    ByRef strOPR As String, _"
        PRINT "    ByRef strSQT As String, _"
        PRINT "    ByRef strBEG As String, _"
        PRINT "    ByRef strEND As String, _"
        PRINT "    ByRef strESC As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strCHK As String"
        PRINT "    Dim intPOS As Integer"
        PRINT ""
        PRINT "    ' Convert to string"
        PRINT "    strCHK = LTrim$(CStr(vrnVAL))"
        PRINT ""
        PRINT "    ' Locate standard operator"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprGEQ)) = mcVbaOprGEQ Then strOPR = mcVbaOprGEQ"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprLEQ)) = mcVbaOprLEQ Then strOPR = mcVbaOprLEQ"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprGTN)) = mcVbaOprGTN Then strOPR = mcVbaOprGTN"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprLTN)) = mcVbaOprLTN Then strOPR = mcVbaOprLTN"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprEQL)) = mcVbaOprEQL Then strOPR = mcVbaOprEQL"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprNEQ)) = mcVbaOprNEQ Then strOPR = mcVbaOprNEQ"
        PRINT ""
        PRINT "    ' Extract standard operator"
        PRINT "    If Len(strOPR) > 0 Then"
        PRINT "        strBEG = Right$(strCHK, Len(strCHK) - Len(strOPR))"
        PRINT ""
        PRINT "    ' Extract range operator"
        PRINT "    ElseIf InStr(strCHK, mcVbaOprBTW) > 0 Then"
        PRINT "        intPOS = InStr(strCHK, mcVbaOprBTW)"
        PRINT "        strBEG = Left$(strCHK, intPOS - 1)"
        PRINT "        strEND = Right$(strCHK, Len(strCHK) - intPOS+1)"
        PRINT "        strOPR = ""BETWEEN"""
        PRINT ""
        PRINT "    ' Assign default operator"
        PRINT "    Else"
        PRINT "        strBEG = strCHK"
        PRINT "        strOPR = mcVbaOprEQL"
        PRINT ""
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Assign default quote"
        PRINT "    strOPR = "" "" & Trim$(strOPR) & "" """
        PRINT "    strSQT = ""'"""
        PRINT "    strESC = """""
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Parse Criteria:  Text"
        PRINT "'###################################################################################################"
        PRINT "Public Function ParseTXT( _"
        PRINT "    ByVal vrnVAL As Variant, _"
        PRINT "    ByRef strOPR As String, _"
        PRINT "    ByRef strSQT As String, _"
        PRINT "    ByRef strBEG As String, _"
        PRINT "    ByRef strEND As String, _"
        PRINT "    ByRef strESC As String _"
        PRINT ") As String"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strCHK As String"
        PRINT "    Dim intPOS As Integer"
        PRINT ""
        PRINT "    ' Convert to string"
        PRINT "    strCHK = LTrim$(CStr(vrnVAL))"
        PRINT ""
        PRINT "    ' Locate standard operator"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprGEQ)) = mcVbaOprGEQ Then strOPR = mcVbaOprGEQ"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprLEQ)) = mcVbaOprLEQ Then strOPR = mcVbaOprLEQ"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprGTN)) = mcVbaOprGTN Then strOPR = mcVbaOprGTN"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprLTN)) = mcVbaOprLTN Then strOPR = mcVbaOprLTN"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprEQL)) = mcVbaOprEQL Then strOPR = mcVbaOprEQL"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprNEQ)) = mcVbaOprNEQ Then strOPR = mcVbaOprNEQ"
        PRINT "    If Len(strOPR) = 0 And Left$(strCHK, Len(mcVbaOprLIK)) = mcVbaOprLIK Then strOPR = mcVbaOprLIK"
        PRINT ""
        PRINT "    ' Assign inferred LIKE operator"
        PRINT "    If InStr(strCHK, mcWldAnyJET) > 0 Or InStr(strCHK, mcWldAnySQL) > 0 Then strOPR = mcVbaOprLIK"
        PRINT ""
        PRINT "    ' Extract standard operator"
        PRINT "    If Len(strOPR) > 0 Then"
        PRINT "        Select Case strOPR"
        PRINT "            Case mcVbaOprLIK"
        PRINT "                strBEG = Replace$(Replace$(strCHK, mcWldAnyJET, mcWldAnyCUR), mcWldAnySQL, mcWldAnyCUR)"
        PRINT "                strESC = mcWldEscCUR"
        PRINT "                strOPR = ""LIKE"""
        PRINT "            Case Else"
        PRINT "                strBEG = Right$(strCHK, Len(strCHK) - Len(strOPR))"
        PRINT "                strESC = """""
        PRINT "        End Select"
        PRINT ""
        PRINT "    ' Assign default operator"
        PRINT "    Else"
        PRINT "        strBEG = strCHK"
        PRINT "        strOPR = mcVbaOprEQL"
        PRINT ""
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Assign default quote"
        PRINT "    strOPR = "" "" & Trim$(strOPR) & "" """
        PRINT "    strSQT = ""'"""
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Check data types"
        PRINT "'###################################################################################################"
        PRINT "Private Function CheckBYT(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim bytVAL1 As Byte"
        PRINT "    Dim bytVAL2 As Byte"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then bytVAL1 = CByte(strBEG)"
        PRINT "    If Len(strEND) > 0 Then bytVAL2 = CByte(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And bytVAL1 > bytVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckBYT = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckBYT = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckBLN(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim blnVAL1 As Boolean"
        PRINT "    Dim blnVAL2 As Boolean"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then blnVAL1 = CBool(strBEG)"
        PRINT "    If Len(strEND) > 0 Then blnVAL2 = CBool(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And blnVAL1 > blnVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckBLN = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckBLN = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckINT(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim intVAL1 As Integer"
        PRINT "    Dim intVAL2 As Integer"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then intVAL1 = CInt(strBEG)"
        PRINT "    If Len(strEND) > 0 Then intVAL2 = CInt(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And intVAL1 > intVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckINT = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckINT = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckLNG(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngVAL1 As Long"
        PRINT "    Dim lngVAL2 As Long"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then lngVAL1 = CLng(strBEG)"
        PRINT "    If Len(strEND) > 0 Then lngVAL2 = CLng(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And lngVAL1 > lngVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckLNG = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckLNG = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckSGL(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim sglVAL1 As Single"
        PRINT "    Dim sglVAL2 As Single"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then sglVAL1 = CSng(strBEG)"
        PRINT "    If Len(strEND) > 0 Then sglVAL2 = CSng(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And sglVAL1 > sglVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckSGL = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckSGL = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckDBL(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim dblVAL1 As Double"
        PRINT "    Dim dblVAL2 As Double"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then dblVAL1 = CDbl(strBEG)"
        PRINT "    If Len(strEND) > 0 Then dblVAL2 = CDbl(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And dblVAL1 > dblVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckDBL = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckDBL = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckCUR(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim curVAL1 As Currency"
        PRINT "    Dim curVAL2 As Currency"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then curVAL1 = CCur(strBEG)"
        PRINT "    If Len(strEND) > 0 Then curVAL2 = CCur(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And curVAL1 > curVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckCUR = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckCUR = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckDEC(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim decVAL1 As Variant"
        PRINT "    Dim decVAL2 As Variant"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then decVAL1 = CDec(strBEG)"
        PRINT "    If Len(strEND) > 0 Then decVAL2 = CDec(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And decVAL1 > decVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckDEC = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckDEC = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckDAT(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim datVAL1 As Date"
        PRINT "    Dim datVAL2 As Date"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then datVAL1 = CDate(strBEG)"
        PRINT "    If Len(strEND) > 0 Then datVAL2 = CDate(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And datVAL1 > datVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckDAT = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckDAT = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckSTR(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim strVAL1 As String"
        PRINT "    Dim strVAL2 As String"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then strVAL1 = CStr(strBEG)"
        PRINT "    If Len(strEND) > 0 Then strVAL2 = CStr(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And strVAL1 > strVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckSTR = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckSTR = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Private Function CheckVRN(ByVal strBEG As String, ByVal strEND As String) As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Declare working variables"
        PRINT "    Dim vrnVAL1 As Variant"
        PRINT "    Dim vrnVAL2 As Variant"
        PRINT "    ' Verify values"
        PRINT "    If Len(strBEG) > 0 Then vrnVAL1 = CVar(strBEG)"
        PRINT "    If Len(strEND) > 0 Then vrnVAL2 = CVar(strEND)"
        PRINT "    ' Verify range"
        PRINT "    If Len(strEND) > 0 And vrnVAL1 > vrnVAL2 Then GoTo Error_Handler"
        PRINT "    ' Return success"
        PRINT "    CheckVRN = True"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    CheckVRN = False"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- RUNCMD = Build module:  clsRunCMD
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNCMD
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNCMD) BEGIN
    ------------------------------------------------------------------------------------------------
        IF 9=9 BEGIN
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_CMD to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    blnLST = mcUseTplList"
        PRINT "'    intTYP = mcModRunCmd"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Setup vbaGen_IT.GenPrp_RunCrt property list"
        PRINT "' Setup vbaGen_IT.GenCmd_SetPrp criteria lists"
        PRINT "' Setup vbaGen_IT.GenCmd_AsnPrp assignment lists"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END ELSE BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private whr                         As clsRunWHR"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVbaTypNON           As Long = 0                            ' non - No type"
        PRINT "Private Const mcVbaTypBYT           As Long = 1                            ' byt - Byte"
        PRINT "Private Const mcVbaTypBLN           As Long = 2                            ' bln - Boolean"
        PRINT "Private Const mcVbaTypINT           As Long = 3                            ' int - Integer"
        PRINT "Private Const mcVbaTypLNG           As Long = 4                            ' lng - Long"
        PRINT "Private Const mcVbaTypSGL           As Long = 5                            ' sgl - Single"
        PRINT "Private Const mcVbaTypDBL           As Long = 6                            ' dbl - Double"
        PRINT "Private Const mcVbaTypCUR           As Long = 7                            ' cur - Currency"
        PRINT "Private Const mcVbaTypDEC           As Long = 8                            ' dec - Decimal"
        PRINT "Private Const mcVbaTypDAT           As Long = 9                            ' dat - Date"
        PRINT "Private Const mcVbaTypSTR           As Long = 10                           ' str - String"
        PRINT "Private Const mcVbaTypVRN           As Long = 11                           ' vrn - Variant"
        PRINT "Private Const mcVbaTypOBJ           As Long = 12                           ' obj - Object"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_CMD to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    blnLST = mcUseStdList"
        PRINT "'    intTYP = mcModRunCmd"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Setup vbaGen_IT.GenPrp_RunCrt property list"
        PRINT "' Setup vbaGen_IT.GenCmd_SetPrp criteria lists"
        PRINT "' Setup vbaGen_IT.GenCmd_AsnPrp assignment lists"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Criteria Variables"
        PRINT "'###################################################################################################"
        PRINT "Private mvrnClmName                 As Variant"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    Set whr = New clsRunWHR"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Criteria Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let ClmName(ByVal vNewVal As Variant):           mvrnClmName = vNewVal: End Property"
        PRINT "Public Property Get ClmName() As Variant:                        ClmName = mvrnClmName: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Assign WHERE Criteria Phrases"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Set_ClmName(Optional ByVal strTBL As String = ""TblName"")"
        PRINT "    If Not IsNull(ClmName) Then Call whr.AddItem(strTBL, ""ClmName"", mcVbaTypSTR, ClmName)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Command:  Command_Name"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Run_Command_Name()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Run_Command_Name"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Build the WHERE statement"
        PRINT "    Dim strWHR As String"
        PRINT "    Call Set_ClmName"
        PRINT "    strWHR = whr.WhrStm"
        PRINT ""
        PRINT "    ' Command Logic"""
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNCMM = Build module:  Run_Process_0000 (CALL cls_Method)
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNCMM,0001,ThisMethod
        EXEC ut_zzVBA RUNCMM,0002,ThatMethod
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNCMM) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@InpTxt) = 0 SET @InpTxt = "0000"
        IF LEN(@StdTx1) = 0 SET @StdTx1 = "cls_Method"
        SET @TX1 = RIGHT("0000"+@InpTxt,2)
        SET @TX2 = "Run_Command_"+@TX1
        PRINT "' Run Command "+@TX1+":  CALL cmd."+@StdTx1
        PRINT "'==================================================================================================="
        PRINT "Private Sub "+@TX2+"()"
        PRINT "    Const pcCmdNum = "+@TX1+": Const pcMsgTtl = mcModNam & "".Run_Command_"" & pcCmdNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This command is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Make sure there is a current active record"
        PRINT "    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"
        PRINT "        MsgBox ""This command requires an active record."", vbInformation, mcModTtl"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Initialize the report object"
        PRINT "    Dim cmd    As clsRunCMD"
        PRINT "    Set cmd = New clsRunCMD"
        PRINT ""
        PRINT "    ' Save current values"
        PRINT "    If Me.Dirty Then Call SaveIt(0)"
        PRINT ""
        PRINT "    ' Set report criteria"
        PRINT "    Call Set_Command_Criteria(pcCmdNum, cmd)"
        PRINT ""
        PRINT "    ' Run the report"
        PRINT "    'Call cmd."+@StdTx1+""
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNCMF = Build module:  Run_Process_0000 (OPEN frm_FrmNam)
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNCMF,0001,frm_ThisFrmNam
        EXEC ut_zzVBA RUNCMF,0002,frm_ThatFrmNam
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNCMF) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@InpTxt) = 0 SET @InpTxt = "0000"
        IF LEN(@StdTx1) = 0 SET @StdTx1 = "frm_FormName"
        SET @TX1 = RIGHT("0000"+@InpTxt,2)
        SET @TX2 = "Run_Command_"+@TX1
        PRINT "' Run Command "+@TX1+":  OPEN "+@StdTx1
        PRINT "'==================================================================================================="
        PRINT "Private Sub "+@TX2+"()"
        PRINT "    Const pcCmdNum = "+@TX1+": Const pcMsgTtl = mcModNam & "".Run_Command_"" & pcCmdNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This command is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Make sure there is a current active record"
        PRINT "    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"
        PRINT "        MsgBox ""This command requires an active record."", vbInformation, mcModTtl"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Assign parameters"
        PRINT "    mstrOpenText = """+@StdTx1+""""
        PRINT "    mstrOpenName = mstrOpenText"
        PRINT "    mstrFiltName = """""
        PRINT "    mstrWhereTxt = """""
        PRINT "    mstrOpenArgs = Me.Name"
        PRINT "    mintOpenView = acNormal"
        PRINT "    mintDataMode = acFormPropertySettings"
        PRINT "    mintWindMode = acWindowNormal"
        PRINT ""
        PRINT "    ' Open the form ignoring any error conditions"
        PRINT "    If Len(mstrOpenName) > 0 Then"
        PRINT "        On Error Resume Next"
        PRINT "        DoCmd.OpenForm mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt, mintDataMode, mintWindMode, mstrOpenArgs"
        PRINT "        'On Error GoTo Error_Handler"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- RUNRPT = Build module:  clsRunRPT
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNRPT
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNRPT) BEGIN
    ------------------------------------------------------------------------------------------------
        IF 9=9 BEGIN
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_RPT to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    blnLST = mcUseTplList"
        PRINT "'    intTYP = mcModRunRpt"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Setup vbaGen_IT.GenPrp_RunCrt property list"
        PRINT "' Setup vbaGen_IT.GenRpt_SetPrp criteria lists"
        PRINT "' Setup vbaGen_IT.GenRpt_RptPrp assignment lists"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END ELSE BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private whr                         As clsRunWHR"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVbaTypNON           As Long = 0                            ' non - No type"
        PRINT "Private Const mcVbaTypBYT           As Long = 1                            ' byt - Byte"
        PRINT "Private Const mcVbaTypBLN           As Long = 2                            ' bln - Boolean"
        PRINT "Private Const mcVbaTypINT           As Long = 3                            ' int - Integer"
        PRINT "Private Const mcVbaTypLNG           As Long = 4                            ' lng - Long"
        PRINT "Private Const mcVbaTypSGL           As Long = 5                            ' sgl - Single"
        PRINT "Private Const mcVbaTypDBL           As Long = 6                            ' dbl - Double"
        PRINT "Private Const mcVbaTypCUR           As Long = 7                            ' cur - Currency"
        PRINT "Private Const mcVbaTypDEC           As Long = 8                            ' dec - Decimal"
        PRINT "Private Const mcVbaTypDAT           As Long = 9                            ' dat - Date"
        PRINT "Private Const mcVbaTypSTR           As Long = 10                           ' str - String"
        PRINT "Private Const mcVbaTypVRN           As Long = 11                           ' vrn - Variant"
        PRINT "Private Const mcVbaTypOBJ           As Long = 12                           ' obj - Object"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' Run vbaGen_IT.Gen_RPT to generate current module code"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "'    blnLST = mcUseStdList"
        PRINT "'    intTYP = mcModRunCmd"
        PRINT "'---------------------------------------------------------------------------------------------------"
        PRINT "' Setup vbaGen_IT.GenPrp_RunCrt property list"
        PRINT "' Setup vbaGen_IT.GenRpt_SetPrp criteria lists"
        PRINT "' Setup vbaGen_IT.GenRpt_RptPrp assignment lists"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Criteria Variables"
        PRINT "'###################################################################################################"
        PRINT "Private mvrnClmName                 As Variant"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    Set whr = New clsRunWHR"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Criteria Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let ClmName(ByVal vNewVal As Variant):           mvrnClmName = vNewVal: End Property"
        PRINT "Public Property Get ClmName() As Variant:                        ClmName = mvrnClmName: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Assign WHERE Criteria Phrases"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Set_ClmName(Optional ByVal strTBL As String = ""TblName"")"
        PRINT "    If Not IsNull(ClmName) Then Call whr.AddItem(strTBL, ""ClmName"", mcVbaTypSTR, ClmName)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Print Report:  rpt_Report_Name"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Print_rpt_Report_Name(ByVal lngViewType As Long)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Print_rpt_Report_Name"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Build the WHERE statement"
        PRINT "    Dim strWHR As String"
        PRINT "    Call Set_ClmName"
        PRINT "    strWHR = whr.WhrStm"
        PRINT ""
        PRINT "    ' Open a report"""
        PRINT "    mstrOpenName = ""rpt_Report_Name"""
        PRINT "    mstrFiltName = """""
        PRINT "    mstrWhereTxt = strWHR"
        PRINT "    mintOpenView = lngViewType  ' acViewPreview acViewNormal"
        PRINT ""
        PRINT "    ' Call the report ignoring any error conditions"""
        PRINT "    If Len(mstrOpenName) > 0 Then"
        PRINT "        On Error Resume Next"
        PRINT "        DoCmd.OpenReport mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt"
        PRINT "        'On Error GoTo Error_Handler"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNRPR = Build module:  Run_Report_0000
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNRPR,0001,rpt_Type_Compare_Base  --rpt_NewReport
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNRPR) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@InpTxt) = 0 SET @InpTxt = "0000"
        IF LEN(@StdTx1) = 0 SET @StdTx1 = "rpt_ReportName"
        SET @TX1 = RIGHT("0000"+@InpTxt,2)
        SET @TX2 = REPLACE(REPLACE(@StdTx1,'rpt_',''),'_',' ')
        PRINT "'==================================================================================================="
        PRINT "' Run report "+@TX1+":  "+@TX2
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Report_"+@TX1+"(ByVal lngViewType As Long)"
        PRINT "    Const pcRptNum = """+@TX1+""": Const pcMsgTtl = mcModNam & "".Run_Report_"" & pcRptNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If False Then  ' False True"
        PRINT "        MsgBox ""This report is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Make sure there is a current active record"
        PRINT "    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"
        PRINT "        MsgBox ""This report requires an active record."", vbInformation, mcModTtl"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Initialize the report object"
        PRINT "    Dim rpt    As clsRunRPT"
        PRINT "    Set rpt = New clsRunRPT"
        PRINT ""
        PRINT "    ' Save current values"
        PRINT "    If Me.Dirty Then Call SaveIt(0)"
        PRINT ""
        PRINT "    ' Set report criteria"
        PRINT "    Call Set_Report_Criteria(pcRptNum, rpt)"
        PRINT ""
        PRINT "    ' Run the report"
        PRINT "    'Call rpt.Print_"+@StdTx1+"(lngViewType)"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNRPX = Build module:  Print_rpt_ReportName
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNRPX,rpt_RunOff_Comparisons  --rpt_NewReport
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNRPX) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@InpTxt) = 0 SET @InpTxt = "rpt_ReportName"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Print Report:  "+@InpTxt
        PRINT "'###################################################################################################"
        PRINT "Public Sub Print_"+@InpTxt+"(ByVal lngViewType As Long)"
        PRINT "    Const pcMsgTtl = mcModNam & "".Print_"+@InpTxt+""""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Build the WHERE statement"
        PRINT "    Dim strWHR As String"
        PRINT "    'If Not IsNull(ClmNam) Then Call whr.AddItem(""pfx_TblNam"", ""ClmNam"", gcVbaTypXXX, ClmNam)"
        PRINT "    strWHR = whr.WhrStm"
        PRINT ""
        PRINT "    ' Open a report"""
        PRINT "    mstrOpenText = """+@InpTxt+""""
        PRINT "    mstrOpenName = mstrOpenText"
        PRINT "    mstrFiltName = """""
        PRINT "    mstrWhereTxt = strWHR"
        PRINT "    mintOpenView = lngViewType  ' acViewPreview acViewNormal"
        PRINT ""
        PRINT "    ' Call the report ignoring any error conditions"""
        PRINT "    If Len(mstrOpenName) > 0 Then"
        PRINT "        On Error Resume Next"
        PRINT "        DoCmd.OpenReport mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt"
        PRINT "        'On Error GoTo Error_Handler"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- RUNUSP = Build module:  clsRunUSP
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNUSP
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNUSP) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "'EXEC ut_zzVBA RUNUSX,usp_ProcedureName"
        PRINT "'***************************************************************************************************"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNUSR = Build module:  Run_Process_0000 (EXEC PROC)
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNUSR,0002,usp_NewProcName
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNUSR) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@InpTxt) = 0 SET @InpTxt = "0000"
        IF LEN(@StdTx1) = 0 SET @StdTx1 = "usp_ProcedureName"
        SET @InpTxt = RIGHT("0000"+@InpTxt,4)
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run process "+@InpTxt+":  EXEC "+@StdTx1
        PRINT "'###################################################################################################"
        PRINT "Private Sub Run_Process_"+@InpTxt+"()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Run_Process_"+@InpTxt+""""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This process is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Make sure there is a current active record"
        PRINT "    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"
        PRINT "        MsgBox ""This process requires an active record."", vbInformation, mcModTtl"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Initialize the process class object"
        PRINT "    Dim usp    As clsRunUSP"
        PRINT "    Set usp = New clsRunUSP"
        PRINT ""
        PRINT "    ' Save current values"
        PRINT "    Call SaveIt(0)"
        PRINT ""
        PRINT "    ' Set process criteria"
        PRINT "    'usp.Parameter = Me.Field.Value"
        PRINT ""
        PRINT "    ' Run the process"
        PRINT "    'Call usp.Execute_"+@StdTx1
        PRINT ""
        PRINT "    ' Refresh the screen"
        PRINT "    'Call Form_Requery"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNUSF = Build module:  Run_Process_0000 (OPEN FORM)
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNUSF,0002,frm_NewFormName
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNUSF) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@InpTxt) = 0 SET @InpTxt = "0000"
        IF LEN(@StdTx1) = 0 SET @StdTx1 = "frm_FormName"
        SET @InpTxt = RIGHT("0000"+@InpTxt,4)
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run process "+@InpTxt+":  OPEN "+@StdTx1
        PRINT "'###################################################################################################"
        PRINT "Private Sub Run_Process_"+@InpTxt+"()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Run_Process_"+@InpTxt+""""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This process is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Make sure there is a current active record"
        PRINT "    If (Me.NewRecord Or Me.Count = 0) And True Then  ' False True"
        PRINT "        MsgBox ""This process requires an active record."", vbInformation, mcModTtl"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Assign parameters"
        PRINT "    mstrOpenText = """+@StdTx1+""""
        PRINT "    mstrOpenName = mstrOpenText"
        PRINT "    mstrFiltName = """""
        PRINT "    mstrWhereTxt = """""
        PRINT "    mstrOpenArgs = Me.Name"
        PRINT "    mintOpenView = acNormal"
        PRINT "    mintDataMode = acFormPropertySettings"
        PRINT "    mintWindMode = acWindowNormal"
        PRINT ""
        PRINT "    ' Open the form ignoring any error conditions"
        PRINT "    If Len(mstrOpenName) > 0 Then"
        PRINT "        On Error Resume Next"
        PRINT "        DoCmd.OpenForm mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt, mintDataMode, mintWindMode, mstrOpenArgs"
        PRINT "        'On Error GoTo Error_Handler"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- RUNRST = Build module:  clsRunRST
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNRST
        EXEC ut_zzVBX RUNRST
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNRST) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMTY                 As String = """""
        PRINT "Private Const mcSPC                 As String = "" """
        PRINT "Private Const mcDOT                 As String = ""."""
        PRINT "Private Const mcCMA                 As String = "","""
        PRINT "Private Const mcDSH                 As String = ""-"""
        PRINT "Private Const mcUBR                 As String = ""_"""
        PRINT "Private Const mcPIP                 As String = ""|"""
        PRINT "Private Const mcBKS                 As String = ""\\"""
        PRINT "Private Const mcFWS                 As String = ""/"""
        PRINT "Private Const mcSCN                 As String = "";"""
        PRINT "Private Const mcCLN                 As String = "":"""
        PRINT "Private Const mcTLD                 As String = ""~"""
        PRINT "Private Const mcTIK                 As String = ""`"""
        PRINT "Private Const mcSQT                 As String = ""'"""
        PRINT "Private Const mcDQT                 As String = """""""""
        PRINT "Private Const mcCLF                 As String = vbCrLf"
        PRINT "'***************************************************************************************************"
        PRINT "Private mXTS                        As String * 1000"
        PRINT "Private mSQL                        As String"
        PRINT "'***************************************************************************************************"
        PRINT "' SQL Construction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWHR                 As String = ""WHERE""                   ' SQL: Where statement"
        PRINT "Private Const mcFST                 As String = ""    ""                    ' SQL: First criteria"
        PRINT "Private Const mcAND                 As String = ""AND ""                    ' SQL: Append criteria"
        PRINT "Private Const mcORR                 As String = ""OR  ""                    ' SQL: Append criteria"
        PRINT "Private Const mcNON                 As String = ""0=9""                     ' SQL: Records = None"
        PRINT "Private Const mcANY                 As String = ""1=1""                     ' SQL: Records = All/Any"
        PRINT "Private mWHR                        As String                             ' SQL: Margin 0"
        PRINT "Private mMG0                        As String                             ' SQL: Margin 0"
        PRINT "Private mMG1                        As String * 4                         ' SQL: Margin 1"
        PRINT "Private mAND                        As String * 4                         ' SQL: Separater AND"
        PRINT "Private mCMA                        As String                             ' SQL: Separater Comma"
        PRINT "'***************************************************************************************************"
        PRINT "' SortBy Mechanism"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnSrtByTPL()              As Variant                            ' SBY: SrtBy Template"
        PRINT "'***************************************************************************************************"
        PRINT "' Process Tracking"
        PRINT "'***************************************************************************************************"
        PRINT "Private mblnWrtSQL                  As Boolean                            ' FLG: Write SQL statement"
        PRINT "Private mblnClrSQL                  As Boolean                            ' FLG: Clear SQL temp file"
        PRINT "Private mblnAplFLT                  As Boolean                            ' FLG: Apply Criteria Filter"
        PRINT "'***************************************************************************************************"
        PRINT "' Template Criteria"
        PRINT "'***************************************************************************************************"
        PRINT "Private mlngNumVal                  As Long                               ' TPL: Numeric value"
        PRINT "Private mstrTxtVal                  As String                             ' TPL: Text value"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFld001                  As Variant                            ' TPL: Field001"
        PRINT "Private mvrnFld002                  As Variant                            ' TPL: Field002"
        PRINT "Private mvrnFld003                  As Variant                            ' TPL: Field003"
        PRINT "Private mvrnFld004                  As Variant                            ' TPL: Field004"
        PRINT "Private mvrnFld005                  As Variant                            ' TPL: Field005"
        PRINT "Private mvrnFld006                  As Variant                            ' TPL: Field006"
        PRINT "Private mvrnFld007                  As Variant                            ' TPL: Field007"
        PRINT "Private mvrnFld008                  As Variant                            ' TPL: Field008"
        PRINT "Private mvrnFld009                  As Variant                            ' TPL: Field009"
        PRINT "Private mvrnFld010                  As Variant                            ' TPL: Field010"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As clsUtlWTX"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' GroupBy Arrays (initialize to (0))"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnGrpByZZZ()              As Variant                            ' GBY: GrpBy object"
        PRINT "'***************************************************************************************************"
        PRINT "' SortBy Arrays  (initialize to (0))"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnSrtByZZZ()              As Variant                            ' SBY: SrtBy object"
        PRINT "'***************************************************************************************************"
        PRINT "' Common Criteria:  Identities"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Common Criteria:  Zzzzz"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Object Criteria:  Zzzzz"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize objects"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    ' Initialize Working Objects"
        PRINT "    mXTS = mcMTY"
        PRINT "    mMG1 = mcMTY"
        PRINT "    mAND = mcMTY"
        PRINT "    ' Initialize SortBy Template"
        PRINT "    ReDim mvrnSrtByTPL(0)"
        PRINT "    ' Initialize Tracking Flags"
        PRINT "    mblnWrtSQL = False"
        PRINT "    mblnClrSQL = True"
        PRINT "    mblnAplFLT = False"
        PRINT "    ' Initialize Module Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "    ' Initialize GroupBy Arrays"
        PRINT "    ReDim mvrnGrpByZZZ(0)"
        PRINT "    ' Initialize SortBy Arrays"
        PRINT "    ReDim mvrnSrtByZZZ(0)"
        PRINT "    ' Initialize Module Flags"
        PRINT "    ' Initialize Module Properties"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage SQL Text"
        PRINT "'###################################################################################################"
        PRINT "Public Sub WriteTXT()"
        PRINT "    Call wtx.AX_WrtTmp(mcModNam)"
        PRINT "End Sub"
        PRINT "'###################################################################################################"
        PRINT "' Empty Source Text"
        PRINT "'###################################################################################################"
        PRINT "Public Function Empty_Text(Optional ByVal blnEmpty As Boolean) As String"
        PRINT "End Function"
        PRINT "'###################################################################################################"
        PRINT "' Manage SortBy Mechanism"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let SrtByTPL(ByVal vNewVal As Variant):         mvrnSrtByTPL = vNewVal: End Property"
        PRINT "Public Property Get SrtByTPL() As Variant:                     SrtByTPL = mvrnSrtByTPL: End Property"
        PRINT "'###################################################################################################"
        PRINT "' Manage Process Tracking"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let WrtSQL(ByVal vNewVal As Boolean):             mblnWrtSQL = vNewVal: End Property"
        PRINT "Public Property Get WrtSQL() As Boolean:                           WrtSQL = mblnWrtSQL: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let ClrSQL(ByVal vNewVal As Boolean):             mblnClrSQL = vNewVal: End Property"
        PRINT "Public Property Get ClrSQL() As Boolean:                           ClrSQL = mblnClrSQL: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let AplFLT(ByVal vNewVal As Boolean):             mblnAplFLT = vNewVal: End Property"
        PRINT "Public Property Get AplFLT() As Boolean:                           AplFLT = mblnAplFLT: End Property"
        PRINT "'==================================================================================================="
        PRINT "'###################################################################################################"
        PRINT "' Manage Template Criteria"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let NumVal(ByVal vNewVal As Long):                mlngNumVal = vNewVal: End Property"
        PRINT "Public Property Get NumVal() As Long:                              NumVal = mlngNumVal: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let TxtVal(ByVal vNewVal As String):              mstrTxtVal = vNewVal: End Property"
        PRINT "Public Property Get TxtVal() As String:                            TxtVal = mstrTxtVal: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld001(ByVal vNewVal As Variant):             mvrnFld001 = vNewVal: End Property"
        PRINT "Public Property Get Fld001() As Variant:                           Fld001 = mvrnFld001: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld002(ByVal vNewVal As Variant):             mvrnFld002 = vNewVal: End Property"
        PRINT "Public Property Get Fld002() As Variant:                           Fld002 = mvrnFld002: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld003(ByVal vNewVal As Variant):             mvrnFld003 = vNewVal: End Property"
        PRINT "Public Property Get Fld003() As Variant:                           Fld003 = mvrnFld003: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld004(ByVal vNewVal As Variant):             mvrnFld004 = vNewVal: End Property"
        PRINT "Public Property Get Fld004() As Variant:                           Fld004 = mvrnFld004: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld005(ByVal vNewVal As Variant):             mvrnFld005 = vNewVal: End Property"
        PRINT "Public Property Get Fld005() As Variant:                           Fld005 = mvrnFld005: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld006(ByVal vNewVal As Variant):             mvrnFld006 = vNewVal: End Property"
        PRINT "Public Property Get Fld006() As Variant:                           Fld006 = mvrnFld006: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld007(ByVal vNewVal As Variant):             mvrnFld007 = vNewVal: End Property"
        PRINT "Public Property Get Fld007() As Variant:                           Fld007 = mvrnFld007: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld008(ByVal vNewVal As Variant):             mvrnFld008 = vNewVal: End Property"
        PRINT "Public Property Get Fld008() As Variant:                           Fld008 = mvrnFld008: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld009(ByVal vNewVal As Variant):             mvrnFld009 = vNewVal: End Property"
        PRINT "Public Property Get Fld009() As Variant:                           Fld009 = mvrnFld009: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld010(ByVal vNewVal As Variant):             mvrnFld010 = vNewVal: End Property"
        PRINT "Public Property Get Fld010() As Variant:                           Fld010 = mvrnFld010: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Module Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Persist GroupBy Arrays"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let GrpByZZZ(ByVal vNewVal As Variant):         mvrnGrpByZZZ = vNewVal: End Property"
        PRINT "Public Property Get GrpByZZZ() As Variant:                     GrpByZZZ = mvrnGrpByZZZ: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Persist SortBy Arrays"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let SrtByZZZ(ByVal vNewVal As Variant):         mvrnSrtByZZZ = vNewVal: End Property"
        PRINT "Public Property Get SrtByZZZ() As Variant:                     SrtByZZZ = mvrnSrtByZZZ: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Common Criteria:  Identities"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Common Criteria:  Zzzzz"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Object Criteria:  Zzzzz"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' FND:  Current"
        PRINT "'###################################################################################################"
        PRINT "Public Function FndFlt_Current( _"
        PRINT "    Optional ByVal strALS As String, _"
        PRINT "    Optional ByVal blnEmpty As Boolean _"
        PRINT ") As String: Const pcSubTtl As String = ""FndSql_Current"""
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize SQL variables"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    strALS = Trim$(strALS): If Len(strALS) > 0 Then strALS = Replace$(strALS, ""."", mcMTY) & ""."""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim strAND        As String: strAND = mcMTY"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    'AX strWHR: strWHR = mcMTY: strAND = mcAND"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnEmpty Then"
        PRINT "        .AX strAND & mcNON"
        PRINT "        strAND = mcAND"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If mlngNumVal > 0 Then"
        PRINT "        .AX strAND & strALS & ""Column = "" & mlngNumVal & """""
        PRINT "        strAND = mcAND"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Len(mstrTxtVal) > 0 Then"
        PRINT "        .AX strAND & strALS & ""Column = '"" & mstrTxtVal & ""'"""
        PRINT "        strAND = mcAND"
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If mblnWrtSQL Then Call wtx.AX_WrtSql(mblnClrSQL, pcSubTtl): mblnClrSQL = False"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Assign text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    FndFlt_Current = wtx.Text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' OBY:  Current"
        PRINT "'###################################################################################################"
        PRINT "Public Function ObyFlt_Current( _"
        PRINT "    Optional ByVal strALS As String _"
        PRINT ") As String: Const pcSubTtl As String = ""ObyFlt_Current"""
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize SQL variables"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    strALS = Trim$(strALS): If Len(strALS) > 0 Then strALS = Replace$(strALS, ""."", mcMTY) & ""."""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim strCMA        As String: strCMA = mcMTY"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    'AX strWHR: strWHR = mcMTY: strCMA = mcCMA"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If mlngNumVal > 0 Then"
        PRINT "        .AX strCMA & strALS & ""Column"""
        PRINT "        strCMA = mcCMA"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Len(mstrTxtVal) > 0 Then"
        PRINT "        .AX strCMA & strALS & ""Column"""
        PRINT "        strCMA = mcCMA"
        PRINT "    End If"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If mblnWrtSQL Then Call wtx.AX_WrtSql(mblnClrSQL, pcSubTtl): mblnClrSQL = False"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Assign text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ObyFlt_Current = wtx.Text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Module Procedures"
        PRINT "'###################################################################################################"
        PRINT "Public Sub AnyProc()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNSQL = Build module:  clsRunSQL
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RUNSQL
        EXEC ut_zzVBX RUNSQL
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNSQL) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Basic Text"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcMTY                 As String = """""
        PRINT "Private Const mcSPC                 As String = "" """
        PRINT "Private Const mcDOT                 As String = ""."""
        PRINT "Private Const mcCMA                 As String = "","""
        PRINT "Private Const mcDSH                 As String = ""-"""
        PRINT "Private Const mcUBR                 As String = ""_"""
        PRINT "Private Const mcPIP                 As String = ""|"""
        PRINT "Private Const mcBKS                 As String = ""\\"""
        PRINT "Private Const mcFWS                 As String = ""/"""
        PRINT "Private Const mcSCN                 As String = "";"""
        PRINT "Private Const mcCLN                 As String = "":"""
        PRINT "Private Const mcTLD                 As String = ""~"""
        PRINT "Private Const mcTIK                 As String = ""`"""
        PRINT "Private Const mcSQT                 As String = ""'"""
        PRINT "Private Const mcDQT                 As String = """""""""
        PRINT "Private Const mcCLF                 As String = vbCrLf"
        PRINT "'***************************************************************************************************"
        PRINT "Private mXTS                        As String * 1000"
        PRINT "Private mSQL                        As String"
        PRINT "'***************************************************************************************************"
        PRINT "' SQL Construction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcWHR                 As String = ""WHERE""                   ' SQL: Where statement"
        PRINT "Private Const mcFST                 As String = ""    ""                    ' SQL: First criteria"
        PRINT "Private Const mcAND                 As String = ""AND ""                    ' SQL: Append criteria"
        PRINT "Private Const mcORR                 As String = ""OR  ""                    ' SQL: Append criteria"
        PRINT "Private Const mcNON                 As String = ""0=9""                     ' SQL: Records = None"
        PRINT "Private Const mcANY                 As String = ""1=1""                     ' SQL: Records = All/Any"
        PRINT "Private mWHR                        As String                             ' SQL: Margin 0"
        PRINT "Private mMG0                        As String                             ' SQL: Margin 0"
        PRINT "Private mMG1                        As String * 4                         ' SQL: Margin 1"
        PRINT "Private mAND                        As String * 4                         ' SQL: Separater AND"
        PRINT "Private mCMA                        As String                             ' SQL: Separater Comma"
        PRINT "'***************************************************************************************************"
        PRINT "' SortBy Mechanism"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrtByNAM            As Integer = 0                        ' SBY: Object name/identifier"
        PRINT "Private Const mcSrtByORD            As Integer = 1                        ' SBY: Sort order value"
        PRINT "Private Const mcSrtByDIR            As Integer = 2                        ' SBY: Sort direction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrtByAS1            As String = "">""                       ' SBY: Sort Ascending flag"
        PRINT "Private Const mcSrtByDS1            As String = ""<""                       ' SBY: Sort Descending flag"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnSrtByTPL()              As Variant                            ' SBY: SrtBy Template"
        PRINT "'***************************************************************************************************"
        PRINT "' SQL Strings"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrSql00                   As String                             ' SQL: Default current value"
        PRINT "Private mstrSql01                   As String                             ' SQL: Level01 persist value"
        PRINT "Private mstrSql02                   As String                             ' SQL: Level02 persist value"
        PRINT "Private mstrSql03                   As String                             ' SQL: Level03 persist value"
        PRINT "Private mstrSql04                   As String                             ' SQL: Level04 persist value"
        PRINT "'***************************************************************************************************"
        PRINT "' Report Titles"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrTitle01                 As String                             ' TXT: Report Title 01"
        PRINT "Private mstrTitle02                 As String                             ' TXT: Report Title 02"
        PRINT "Private mstrTitle03                 As String                             ' TXT: Report Title 03"
        PRINT "'***************************************************************************************************"
        PRINT "' Process Tracking"
        PRINT "'***************************************************************************************************"
        PRINT "Private mblnWrtSQL                  As Boolean                            ' FLG: Write SQL statement"
        PRINT "Private mblnClrSQL                  As Boolean                            ' FLG: Clear SQL temp file"
        PRINT "'***************************************************************************************************"
        PRINT "' Template Criteria"
        PRINT "'***************************************************************************************************"
        PRINT "Private mlngNumVal                  As Long                               ' TPL: Numeric value"
        PRINT "Private mstrTxtVal                  As String                             ' TPL: Text value"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnFld001                  As Variant                            ' TPL: Field001"
        PRINT "Private mvrnFld002                  As Variant                            ' TPL: Field002"
        PRINT "Private mvrnFld003                  As Variant                            ' TPL: Field003"
        PRINT "Private mvrnFld004                  As Variant                            ' TPL: Field004"
        PRINT "Private mvrnFld005                  As Variant                            ' TPL: Field005"
        PRINT "Private mvrnFld006                  As Variant                            ' TPL: Field006"
        PRINT "Private mvrnFld007                  As Variant                            ' TPL: Field007"
        PRINT "Private mvrnFld008                  As Variant                            ' TPL: Field008"
        PRINT "Private mvrnFld009                  As Variant                            ' TPL: Field009"
        PRINT "Private mvrnFld010                  As Variant                            ' TPL: Field010"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As clsUtlWTX"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' GroupBy Arrays (initialize to (0))"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnGrpByZZZ()              As Variant                            ' GBY: GrpBy object"
        PRINT "'***************************************************************************************************"
        PRINT "' SortBy Arrays  (initialize to (0))"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnSrtByZZZ()              As Variant                            ' SBY: SrtBy object"
        PRINT "'***************************************************************************************************"
        PRINT "' Common Criteria:  Identities"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Common Criteria:  Zzzzz"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Object Criteria:  Zzzzz"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Module Objects"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    ' Initialize Working Objects"
        PRINT "    mXTS = mcMTY"
        PRINT "    mMG1 = mcMTY"
        PRINT "    mAND = mcMTY"
        PRINT "    ' Initialize SortBy Template"
        PRINT "    ReDim mvrnSrtByTPL(0)"
        PRINT "    ' Initialize SQL Strings"
        PRINT "    mstrSql00 = """""
        PRINT "    mstrSql01 = """""
        PRINT "    mstrSql02 = """""
        PRINT "    mstrSql03 = """""
        PRINT "    mstrSql04 = """""
        PRINT "    ' Initialize Report Titles"
        PRINT "    mstrTitle01 = """""
        PRINT "    mstrTitle02 = """""
        PRINT "    mstrTitle03 = """""
        PRINT "    ' Initialize Tracking Flags"
        PRINT "    mblnWrtSQL = False"
        PRINT "    mblnClrSQL = True"
        PRINT "    ' Initialize Module Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "    ' Initialize SortBy Arrays"
        PRINT "    ReDim mvrnSrtByZZZ(0)"
        PRINT "    ' Initialize Module Flags"
        PRINT "    ' Initialize Module Properties"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage SQL Text"
        PRINT "'###################################################################################################"
        PRINT "Public Sub WriteTXT()"
        PRINT "    Call wtx.AX_WrtTmp(mcModNam)"
        PRINT "End Sub"
        PRINT "'###################################################################################################"
        PRINT "' Empty Source Text"
        PRINT "'###################################################################################################"
        PRINT "Public Function Empty_Text(Optional ByVal blnEmpty As Boolean) As String"
        PRINT "End Function"
        PRINT "'###################################################################################################"
        PRINT "' Manage SortBy Mechanism"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let SrtByTPL(ByVal vNewVal As Variant):         mvrnSrtByTPL = vNewVal: End Property"
        PRINT "Public Property Get SrtByTPL() As Variant:                     SrtByTPL = mvrnSrtByTPL: End Property"
        PRINT "'###################################################################################################"
        PRINT "' Manage SQL Strings"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let Sql00(ByVal vNewVal As String):                mstrSql00 = vNewVal: End Property"
        PRINT "Public Property Get Sql00() As String:                               Sql00 = mstrSql00: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get Sql01() As String:                               Sql01 = mstrSql01: End Property"
        PRINT "Public Property Get Sql02() As String:                               Sql02 = mstrSql02: End Property"
        PRINT "Public Property Get Sql03() As String:                               Sql03 = mstrSql03: End Property"
        PRINT "Public Property Get Sql04() As String:                               Sql04 = mstrSql04: End Property"
        PRINT "'###################################################################################################"
        PRINT "' Manage Report Titles"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let Title01(ByVal vNewVal As String):            mstrTitle01 = vNewVal: End Property"
        PRINT "Public Property Get Title01() As String:                         Title01 = mstrTitle01: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Title02(ByVal vNewVal As String):            mstrTitle02 = vNewVal: End Property"
        PRINT "Public Property Get Title02() As String:                         Title02 = mstrTitle02: End Property"
        PRINT "'###################################################################################################"
        PRINT "' Manage Process Tracking"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let WrtSQL(ByVal vNewVal As Boolean):             mblnWrtSQL = vNewVal: End Property"
        PRINT "Public Property Get WrtSQL() As Boolean:                           WrtSQL = mblnWrtSQL: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let ClrSQL(ByVal vNewVal As Boolean):             mblnClrSQL = vNewVal: End Property"
        PRINT "Public Property Get ClrSQL() As Boolean:                           ClrSQL = mblnClrSQL: End Property"
        PRINT "'###################################################################################################"
        PRINT "' Manage Template Criteria"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let NumVal(ByVal vNewVal As Long):                mlngNumVal = vNewVal: End Property"
        PRINT "Public Property Get NumVal() As Long:                              NumVal = mlngNumVal: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let TxtVal(ByVal vNewVal As String):              mstrTxtVal = vNewVal: End Property"
        PRINT "Public Property Get TxtVal() As String:                            TxtVal = mstrTxtVal: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld001(ByVal vNewVal As Variant):             mvrnFld001 = vNewVal: End Property"
        PRINT "Public Property Get Fld001() As Variant:                           Fld001 = mvrnFld001: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld002(ByVal vNewVal As Variant):             mvrnFld002 = vNewVal: End Property"
        PRINT "Public Property Get Fld002() As Variant:                           Fld002 = mvrnFld002: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld003(ByVal vNewVal As Variant):             mvrnFld003 = vNewVal: End Property"
        PRINT "Public Property Get Fld003() As Variant:                           Fld003 = mvrnFld003: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld004(ByVal vNewVal As Variant):             mvrnFld004 = vNewVal: End Property"
        PRINT "Public Property Get Fld004() As Variant:                           Fld004 = mvrnFld004: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld005(ByVal vNewVal As Variant):             mvrnFld005 = vNewVal: End Property"
        PRINT "Public Property Get Fld005() As Variant:                           Fld005 = mvrnFld005: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld006(ByVal vNewVal As Variant):             mvrnFld006 = vNewVal: End Property"
        PRINT "Public Property Get Fld006() As Variant:                           Fld006 = mvrnFld006: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld007(ByVal vNewVal As Variant):             mvrnFld007 = vNewVal: End Property"
        PRINT "Public Property Get Fld007() As Variant:                           Fld007 = mvrnFld007: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld008(ByVal vNewVal As Variant):             mvrnFld008 = vNewVal: End Property"
        PRINT "Public Property Get Fld008() As Variant:                           Fld008 = mvrnFld008: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld009(ByVal vNewVal As Variant):             mvrnFld009 = vNewVal: End Property"
        PRINT "Public Property Get Fld009() As Variant:                           Fld009 = mvrnFld009: End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let Fld010(ByVal vNewVal As Variant):             mvrnFld010 = vNewVal: End Property"
        PRINT "Public Property Get Fld010() As Variant:                           Fld010 = mvrnFld010: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Module Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Persist GroupBy Arrays"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let GrpByZZZ(ByVal vNewVal As Variant):         mvrnGrpByZZZ = vNewVal: End Property"
        PRINT "Public Property Get GrpByZZZ() As Variant:                     GrpByZZZ = mvrnGrpByZZZ: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage SortBy Arrays"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let SrtByZZZ(ByVal vNewVal As Variant):         mvrnSrtByZZZ = vNewVal: End Property"
        PRINT "Public Property Get SrtByZZZ() As Variant:                     SrtByZZZ = mvrnSrtByZZZ: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Common Criteria:  Identities"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Common Criteria:  Zzzzz"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Object Criteria:  Zzzzz"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' CBO:  SelOn_ZzzNAM"
        PRINT "'###################################################################################################"
        PRINT "Public Function CboSql_SelOn_ZzzNAM( _"
        PRINT "    Optional ByVal blnEmpty As Boolean _"
        PRINT ") As String: Const pcSubTtl As String = ""CboSql_SelOn_ZzzNAM"""
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize SQL variables"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim strWHR        As String: strWHR = mcWHR"
        PRINT "    Dim strAND        As String: strAND = mcFST"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""SELECT DISTINCT"""
        PRINT "    .AX ""    tbl.ColumnList  AS ColumnName"""
        PRINT "    .AX ""FROM"""
        PRINT "    .AX ""    tbl_TableName tbl"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    'AX strWHR: strWHR = mcMTY: strAND = mAND"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnEmpty Then"
        PRINT "        If strWHR = mWHR Then"
        PRINT "            .AX strWHR: strWHR = mcMTY"
        PRINT "        End If"
        PRINT "        .AX strAND & mcNON"
        PRINT "        strAND = mAND"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If mlngNumVal > 0 Then"
        PRINT "        If strWHR = mWHR Then"
        PRINT "            .AX strWHR: strWHR = mcMTY"
        PRINT "        End If"
        PRINT "        .AX strAND & ""tbl.Column = "" & mlngNumVal & """""
        PRINT "        strAND = mAND"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Len(mstrTxtVal) > 0 Then"
        PRINT "        If strWHR = mWHR Then"
        PRINT "            .AX strWHR: strWHR = mcMTY"
        PRINT "        End If"
        PRINT "        .AX strAND & ""tbl.Column = '"" & mstrTxtVal & ""'"""
        PRINT "        strAND = mAND"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    .AX ""ORDER BY"""
        PRINT "    .AX ""    tbl.ColumnList"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If mblnWrtSQL Then Call wtx.AX_WrtSql(mblnClrSQL, pcSubTtl): mblnClrSQL = False"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Assign text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    CboSql_SelOn_ZzzNAM = wtx.Text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' FRM:  zzz_FrmNam"
        PRINT "'###################################################################################################"
        PRINT "Public Function FrmSql_zzz_FrmNam( _"
        PRINT "    Optional ByVal blnEmpty As Boolean, _"
        PRINT "    Optional ByVal intSqlIdx As Integer = 1 _"
        PRINT ") As String: Const pcSubTtl As String = ""FrmSql_zzz_FrmNam"""
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize SrtBy Objects"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Const mcHdrFld001 As String = ""Fld001"""
        PRINT "    Const mcHdrFld002 As String = ""Fld002"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim sby           As clsRunSBY: Set sby = New clsRunSBY: sby.SrtBy = SrtByZZZ"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim strDIR        As String"
        PRINT "    Dim vrnITM        As Variant"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize SQL variables"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Dim strWHR        As String: strWHR = mcWHR"
        PRINT "    Dim strAND        As String: strAND = mcFST"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""SELECT DISTINCT"""
        PRINT "    .AX ""    tbl.ColumnList  AS ColumnName"""
        PRINT "    .AX ""FROM"""
        PRINT "    .AX ""    dbo.TableName tbl"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    'AX strWHR: strWHR = mcMTY: strAND = mAND"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnEmpty Then"
        PRINT "        If strWHR = mWHR Then"
        PRINT "            .AX strWHR: strWHR = mcMTY"
        PRINT "        End If"
        PRINT "        .AX strAND & mcNON: strAND = mAND"
        PRINT "    ElseIf True Then"
        PRINT "        If strWHR = mWHR Then"
        PRINT "            .AX strWHR: strWHR = mcMTY"
        PRINT "        End If"
        PRINT "        .AX strAND & ""tbl.TableID >= 1001"": strAND = mAND"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If mlngNumVal > 0 Then"
        PRINT "        If strWHR = mWHR Then"
        PRINT "            .AX strWHR: strWHR = mcMTY"
        PRINT "        End If"
        PRINT "        .AX strAND & ""tbl.Column = "" & mlngNumVal & """""
        PRINT "        strAND = mAND"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If Len(mstrTxtVal) > 0 Then"
        PRINT "        If strWHR = mWHR Then"
        PRINT "            .AX strWHR: strWHR = mcMTY"
        PRINT "        End If"
        PRINT "        .AX strAND & ""tbl.Column = '"" & mstrTxtVal & ""'"""
        PRINT "        strAND = mAND"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    .AX ""ORDER BY"""
        PRINT "    If sby.HasElm Then"
        PRINT "        For Each vrnITM In sby.SrtBy"
        PRINT "            If Not IsEmpty(vrnITM) Then"
        PRINT "                strDIR = IIf(vrnITM(mcSrtByDIR) = mcSrtByDS1, "" DESC,"", "","")"
        PRINT "                Select Case vrnITM(mcSrtByNAM)"
        PRINT "                    Case mcHdrFld001: .AX ""    tbl.Fld001"" & strDIR"
        PRINT "                    Case mcHdrFld002: .AX ""    tbl.Fld002"" & strDIR"
        PRINT "                End Select"
        PRINT "            End If"
        PRINT "        Next"
        PRINT "    Else"
        PRINT "        .AX ""    tbl.ColumnList,"""
        PRINT "    End If"
        PRINT "    .AX_Chop ("","")"
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If mblnWrtSQL Then Call wtx.AX_WrtSql(mblnClrSQL, pcSubTtl): mblnClrSQL = False"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Assign text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    FrmSql_zzz_FrmNam = wtx.Text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Store text"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Select Case intSqlIdx"
        PRINT "        Case 2:    mstrSql02 = FrmSql_zzz_FrmNam"
        PRINT "        Case 3:    mstrSql03 = FrmSql_zzz_FrmNam"
        PRINT "        Case 4:    mstrSql04 = FrmSql_zzz_FrmNam"
        PRINT "        Case Else: mstrSql01 = FrmSql_zzz_FrmNam"
        PRINT "    End Select"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNSBY = Build module:  clsRunSBY
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX RUNSBY
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNSBY) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrtByNAM            As Integer = 0  ' Object name/identifier"
        PRINT "Private Const mcSrtByORD            As Integer = 1  ' Sort order value"
        PRINT "Private Const mcSrtByDIR            As Integer = 2  ' Sort direction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrtByAS0            As String = """""
        PRINT "Private Const mcSrtByAS1            As String = "">"""
        PRINT "Private Const mcSrtByAS2            As String = mcSrtByAS1 & mcSrtByAS1"
        PRINT "Private Const mcSrtByASX            As String = mcSrtByAS1"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrtByDS0            As String = """""
        PRINT "Private Const mcSrtByDS1            As String = ""<"""
        PRINT "Private Const mcSrtByDS2            As String = mcSrtByDS1 & mcSrtByDS1"
        PRINT "Private Const mcSrtByDSX            As String = mcSrtByDS1"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSrtBySPC            As String = """""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnSrtBy()                 As Variant"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize objects"
        PRINT "    ReDim mvrnSrtBy(0)"
        PRINT "    ' Initialize Flags"
        PRINT "    ' Initialize Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage array persistence"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let SrtBy(ByVal vNewVal As Variant)"
        PRINT "    mvrnSrtBy = vNewVal"
        PRINT "End Property"
        PRINT "Public Property Get SrtBy() As Variant"
        PRINT "    SrtBy = mvrnSrtBy"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get HasElm() As Boolean"
        PRINT "    HasElm = (MaxOrd > 0)"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Maintain Sort Array"
        PRINT "'###################################################################################################"
        PRINT "' Clear the caption list"
        PRINT "'==================================================================================================="
        PRINT "Public Sub ClrCap()"
        PRINT "    ReDim mvrnSrtBy(0)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Retrieve the next caption value for the object (cycles through 1-Empty 2-ASC 3-DESC 4-Empty ...)"
        PRINT "'==================================================================================================="
        PRINT "Public Function NxtCap(ByVal strNAM As String, ByVal strCAP As String) As String"
        PRINT "    Dim intORD   As Integer"
        PRINT "    Dim strDIR   As String"
        PRINT "    ' Determine sort direction"
        PRINT "    If InStr(strCAP, mcSrtByAS1) > 0 Then strDIR = mcSrtByAS1"
        PRINT "    If InStr(strCAP, mcSrtByDS1) > 0 Then strDIR = mcSrtByDS1"
        PRINT "    ' Determine sort level"
        PRINT "    strCAP = Replace$(strCAP, mcSrtByAS1, """")"
        PRINT "    strCAP = Replace$(strCAP, mcSrtByDS1, """")"
        PRINT "    strCAP = Trim$(Replace$(strCAP, "" "", """"))"
        PRINT "    intORD = CInt(""0"" & strCAP)"
        PRINT "    ' Process sort request"
        PRINT "    If NamIdx(strNAM) > 0 Then"
        PRINT "        Call UpdElm(strNAM, intORD, strDIR)"
        PRINT "    Else"
        PRINT "        Call AddElm(strNAM, intORD, strDIR)"
        PRINT "    End If"
        PRINT "    ' Compress the list"
        PRINT "    Call CmpLst"
        PRINT "    ' Assign the new caption value"
        PRINT "    NxtCap = GetCap(strNAM)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get the current caption value for the name"
        PRINT "'==================================================================================================="
        PRINT "Public Function GetCap(ByVal strNAM As String) As String"
        PRINT "    Dim strCAP   As String"
        PRINT "    Dim vrnITM   As Variant"
        PRINT "    For Each vrnITM In mvrnSrtBy"
        PRINT "        If Not IsEmpty(vrnITM) Then"
        PRINT "            If vrnITM(mcSrtByNAM) = strNAM Then"
        PRINT "                If InStr(vrnITM(mcSrtByDIR), mcSrtByAS1) > 0 Then strCAP = vrnITM(mcSrtByORD) & mcSrtBySPC & mcSrtByASX"
        PRINT "                If InStr(vrnITM(mcSrtByDIR), mcSrtByDS1) > 0 Then strCAP = mcSrtByDSX & mcSrtBySPC & vrnITM(mcSrtByORD)"
        PRINT "                Exit For"
        PRINT "            End If"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    GetCap = strCAP"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Display the current array list values for debugging"
        PRINT "'==================================================================================================="
        PRINT "Public Sub DbgCap(Optional ByVal strPFX As String = ""DBG"")"
        PRINT "    Dim vrnITM   As Variant"
        PRINT "    Debug.Print UBound(mvrnSrtBy)"
        PRINT "    For Each vrnITM In mvrnSrtBy"
        PRINT "        If Not IsEmpty(vrnITM) Then"
        PRINT "            Debug.Print strPFX & ""="" & vrnITM(mcSrtByNAM) & "":"" & vrnITM(mcSrtByORD) & "":"" & vrnITM(mcSrtByDIR)"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Get a delimited caption list"
        PRINT "'==================================================================================================="
        PRINT "Public Function CapTxt() As String"
        PRINT "    Const pcDLM  As String = ""|"""
        PRINT "    Dim strDLM   As String"
        PRINT "    Dim vrnITM   As Variant"
        PRINT "    For Each vrnITM In mvrnSrtBy"
        PRINT "        If Not IsEmpty(vrnITM) Then"
        PRINT "            CapTxt = CapTxt & strDLM & vrnITM(mcSrtByNAM) & "":"" & vrnITM(mcSrtByORD) & "":"" & vrnITM(mcSrtByDIR): strDLM = pcDLM"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Compress the array list a) Deleting unused names, and b) Renumbering sort order consecutively"
        PRINT "'==================================================================================================="
        PRINT "Private Sub CmpLst()"
        PRINT "    Dim vrnTMP() As Variant: ReDim vrnTMP(0)"
        PRINT "    Dim vrnITM   As Variant"
        PRINT "    Dim intIDX   As Integer"
        PRINT "    Dim intOFS   As Integer  ' Offset: Manages gaps in the intORD sequence"
        PRINT "    Dim intORD   As Integer"
        PRINT "    ' Process up to the the maximum ordinal"
        PRINT "    For intORD = 1 To MaxOrd"
        PRINT "        ' Anticipate a gap"
        PRINT "        intOFS = intOFS+1"
        PRINT "        ' Loop through the SrtBy list looking for the current ordinal"
        PRINT "        For Each vrnITM In mvrnSrtBy"
        PRINT "            If Not IsEmpty(vrnITM) Then"
        PRINT "                If vrnITM(mcSrtByORD) = intORD Then"
        PRINT "                    ' Rollback the anticipated gap"
        PRINT "                    intOFS = intOFS - 1"
        PRINT "                    ' Apply accumulated gap offset"
        PRINT "                    vrnITM(mcSrtByORD) = vrnITM(mcSrtByORD) - intOFS"
        PRINT "                    ' Transfer the entry"
        PRINT "                    intIDX = UBound(vrnTMP)+1"
        PRINT "                    ReDim Preserve vrnTMP(intIDX)"
        PRINT "                    vrnTMP(intIDX) = vrnITM"
        PRINT "                End If"
        PRINT "            End If"
        PRINT "        Next"
        PRINT "    Next"
        PRINT "    mvrnSrtBy = vrnTMP"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Increment the caption values (cycles through 1-Empty 2-ASC 3-DESC 4-Empty ...)"
        PRINT "'==================================================================================================="
        PRINT "Private Sub IncLvl(ByRef intORD As Integer, ByRef strDIR As String)"
        PRINT "    ' Increment sort values"
        PRINT "    If Len(strDIR) = 0 Then          ' No previous value     => Ascending"
        PRINT "        intORD = MaxOrd+1"
        PRINT "        strDIR = mcSrtByAS1"
        PRINT "    ElseIf strDIR = mcSrtByAS1 Then  ' Previous = Ascending  => Descending"
        PRINT "        intORD = intORD"
        PRINT "        strDIR = mcSrtByDS1"
        PRINT "    Else                             ' Previous = Descending => Empty"
        PRINT "        intORD = 0"
        PRINT "        strDIR = mcSrtByAS0"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Update a current caption element in the array"
        PRINT "'==================================================================================================="
        PRINT "Private Sub UpdElm(ByVal strNAM As String, ByVal intORD As Integer, ByVal strDIR As String)"
        PRINT "    Dim intIDX   As Integer"
        PRINT "    Dim vrnITM   As Variant"
        PRINT "    ' Increment sort direction"
        PRINT "    Call IncLvl(intORD, strDIR)"
        PRINT "    ' Assign new values"
        PRINT "    vrnITM = Array(strNAM, intORD, strDIR)"
        PRINT "    mvrnSrtBy(NamIdx(strNAM)) = vrnITM"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Add a new caption element to the array"
        PRINT "'==================================================================================================="
        PRINT "Private Sub AddElm(ByVal strNAM As String, ByVal intORD As Integer, ByVal strDIR As String)"
        PRINT "    Dim intIDX   As Integer"
        PRINT "    Dim vrnITM   As Variant"
        PRINT "    ' Extend object array"
        PRINT "    intIDX = UBound(mvrnSrtBy)+1"
        PRINT "    ReDim Preserve mvrnSrtBy(intIDX)"
        PRINT "    ' Initialize sort direction"
        PRINT "    strDIR = """""
        PRINT "    ' Increment sort direction"
        PRINT "    Call IncLvl(intORD, strDIR)"
        PRINT "    ' Assign new values"
        PRINT "    vrnITM = Array(strNAM, intORD, strDIR)"
        PRINT "    mvrnSrtBy(intIDX) = vrnITM"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Get the array index for the name"
        PRINT "'==================================================================================================="
        PRINT "Private Function NamIdx(ByVal strNAM As String) As Integer"
        PRINT "    Dim intIDX   As Integer"
        PRINT "    Dim vrnITM   As Variant"
        PRINT "    For Each vrnITM In mvrnSrtBy"
        PRINT "        If Not IsEmpty(vrnITM) Then"
        PRINT "            If vrnITM(mcSrtByNAM) = strNAM Then Exit For"
        PRINT "        End If"
        PRINT "        intIDX = intIDX+1"
        PRINT "    Next"
        PRINT "    NamIdx = IIf(intIDX > UBound(mvrnSrtBy), 0, intIDX)"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "' Get the maximum sort order value"
        PRINT "'==================================================================================================="
        PRINT "Private Function MaxOrd() As Integer"
        PRINT "    Dim intMAX   As Integer"
        PRINT "    Dim vrnITM   As Variant"
        PRINT "    For Each vrnITM In mvrnSrtBy"
        PRINT "        If Not IsEmpty(vrnITM) Then"
        PRINT "            If vrnITM(mcSrtByORD) > intMAX Then intMAX = vrnITM(mcSrtByORD)"
        PRINT "        End If"
        PRINT "    Next"
        PRINT "    MaxOrd = intMAX"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "''###################################################################################################"
        PRINT "'' Test Code SBY"
        PRINT "''###################################################################################################"
        PRINT "'Public Sub TestSBY()"
        PRINT "'    Const pcMsgTtl = mcModNam & "".TestSBY"""
        PRINT "'    'On Error GoTo Error_Handler"
        PRINT "'"
        PRINT "'    ' Initialize working variables"
        PRINT "'    Dim strNAM   As String"
        PRINT "'    Dim strCAP   As String"
        PRINT "'    Dim vrnITM   As Variant"
        PRINT "'"
        PRINT "'    ' Initialize working objects"
        PRINT "'    Dim sby    As clsRunSBY"
        PRINT "'    Set sby = New clsRunSBY"
        PRINT "'"
        PRINT "'    ' Process working objects"
        PRINT "'    With sby"
        PRINT "'        strNAM = ""Name01"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name02"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name03"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name04"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name01"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name01"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name03"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name03"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        vrnITM = .SrtBy"
        PRINT "'    End With"
        PRINT "'    Set sby = New clsRunSBY"
        PRINT "'    With sby"
        PRINT "'        .SrtBy = vrnITM"
        PRINT "'        strNAM = ""Name01"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name02"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name03"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name04"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name01"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name01"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name03"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'        strNAM = ""Name03"": strCAP = sby.GetCap(strNAM): strCAP = sby.NxtCap(strNAM, strCAP): Debug.Print strNAM & ""="" & strCAP"
        PRINT "'    End With"
        PRINT "'"
        PRINT "'Exit_Procedure:"
        PRINT "'    Exit Sub"
        PRINT "'Error_Handler:"
        PRINT "'    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "'    Resume Exit_Procedure"
        PRINT "'End Sub"
        PRINT "''==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- RUNGBY = Build module:  clsRunGBY
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX RUNGBY
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRUNGBY) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcGrpByNAM            As Integer = 0  ' Object name/identifier"
        PRINT "Private Const mcGrpByORD            As Integer = 1  ' Sort order value"
        PRINT "Private Const mcGrpByDIR            As Integer = 2  ' Sort direction"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcGrpByAS0            As String = """""
        PRINT "Private Const mcGrpByAS1            As String = "">"""
        PRINT "Private Const mcGrpByAS2            As String = mcGrpByAS1 & mcGrpByAS1"
        PRINT "Private Const mcGrpByASX            As String = mcGrpByAS1"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcGrpByDS0            As String = """""
        PRINT "Private Const mcGrpByDS1            As String = ""<"""
        PRINT "Private Const mcGrpByDS2            As String = mcGrpByDS1 & mcGrpByDS1"
        PRINT "Private Const mcGrpByDSX            As String = mcGrpByDS1"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcGrpBySPC            As String = """""
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnGrpBy()                 As Variant"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize module objects and default values"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize objects"
        PRINT "    ReDim mvrnGrpBy(0)"
        PRINT "    ' Initialize Flags"
        PRINT "    ' Initialize Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage array persistence"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let GrpBy(ByVal vNewVal As Variant)"
        PRINT "    mvrnGrpBy = vNewVal"
        PRINT "End Property"
        PRINT "Public Property Get GrpBy() As Variant"
        PRINT "    GrpBy = mvrnGrpBy"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get HasElm() As Boolean"
        PRINT "    HasElm = False"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- FRMCLR = Build module:  sys_Colors
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA FRMCLR,sys_Colors,'Manage Color Schemes','frm'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecFRMCLR) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is opened"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Open(Cancel As Integer)"
        PRINT "    DoCmd.Maximize"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is loaded"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Load()"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Call Form_Setup"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Commands"
        PRINT "'###################################################################################################"
        PRINT "Private Sub cmdListCons_Click()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' List the constants"
        PRINT "    Call Write_Constants  'List_Constants"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdCloseForm_Click()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Setup color scheme controls"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Form_Setup()"
        PRINT ""
        PRINT "    ' Color schemes:  Basic"
        PRINT "    Me.txtWHT = Me.lblWHT.BackColor: Me.txtWHT.ForeColor = Me.txtWHT"
        PRINT "    Me.txtBLK = Me.lblBLK.BackColor: Me.txtBLK.ForeColor = Me.txtBLK"
        PRINT ""
        PRINT "    ' Color schemes:  Grey"
        PRINT "    Me.txtGY1 = Me.lblGY1.BackColor: Me.txtGY1.ForeColor = Me.txtGY1"
        PRINT "    Me.txtGY2 = Me.lblGY2.BackColor: Me.txtGY2.ForeColor = Me.txtGY2"
        PRINT "    Me.txtGY3 = Me.lblGY3.BackColor: Me.txtGY3.ForeColor = Me.txtGY3"
        PRINT "    Me.txtGY4 = Me.lblGY4.BackColor: Me.txtGY4.ForeColor = Me.txtGY4"
        PRINT "    Me.txtGY5 = Me.lblGY5.BackColor: Me.txtGY5.ForeColor = Me.txtGY5"
        PRINT "    Me.txtGY6 = Me.lblGY6.BackColor: Me.txtGY6.ForeColor = Me.txtGY6"
        PRINT ""
        PRINT "    ' Color schemes:  Blue"
        PRINT "    Me.txtBL1 = Me.lblBL1.BackColor: Me.txtBL1.ForeColor = Me.txtBL1"
        PRINT "    Me.txtBL2 = Me.lblBL2.BackColor: Me.txtBL2.ForeColor = Me.txtBL2"
        PRINT "    Me.txtBL3 = Me.lblBL3.BackColor: Me.txtBL3.ForeColor = Me.txtBL3"
        PRINT "    Me.txtBL4 = Me.lblBL4.BackColor: Me.txtBL4.ForeColor = Me.txtBL4"
        PRINT "    Me.txtBL5 = Me.lblBL5.BackColor: Me.txtBL5.ForeColor = Me.txtBL5"
        PRINT "    Me.txtBL6 = Me.lblBL6.BackColor: Me.txtBL6.ForeColor = Me.txtBL6"
        PRINT ""
        PRINT "    ' Color schemes:  Acqua"
        PRINT "    Me.txtAQ1 = Me.lblAQ1.BackColor: Me.txtAQ1.ForeColor = Me.txtAQ1"
        PRINT "    Me.txtAQ2 = Me.lblAQ2.BackColor: Me.txtAQ2.ForeColor = Me.txtAQ2"
        PRINT "    Me.txtAQ3 = Me.lblAQ3.BackColor: Me.txtAQ3.ForeColor = Me.txtAQ3"
        PRINT "    Me.txtAQ4 = Me.lblAQ4.BackColor: Me.txtAQ4.ForeColor = Me.txtAQ4"
        PRINT "    Me.txtAQ5 = Me.lblAQ5.BackColor: Me.txtAQ5.ForeColor = Me.txtAQ5"
        PRINT "    Me.txtAQ6 = Me.lblAQ6.BackColor: Me.txtAQ6.ForeColor = Me.txtAQ6"
        PRINT ""
        PRINT "    ' Color schemes:  Green"
        PRINT "    Me.txtGN1 = Me.lblGN1.BackColor: Me.txtGN1.ForeColor = Me.txtGN1"
        PRINT "    Me.txtGN2 = Me.lblGN2.BackColor: Me.txtGN2.ForeColor = Me.txtGN2"
        PRINT "    Me.txtGN3 = Me.lblGN3.BackColor: Me.txtGN3.ForeColor = Me.txtGN3"
        PRINT "    Me.txtGN4 = Me.lblGN4.BackColor: Me.txtGN4.ForeColor = Me.txtGN4"
        PRINT "    Me.txtGN5 = Me.lblGN5.BackColor: Me.txtGN5.ForeColor = Me.txtGN5"
        PRINT "    Me.txtGN6 = Me.lblGN6.BackColor: Me.txtGN6.ForeColor = Me.txtGN6"
        PRINT ""
        PRINT "    ' Color schemes:  Brown"
        PRINT "    Me.txtBR1 = Me.lblBR1.BackColor: Me.txtBR1.ForeColor = Me.txtBR1"
        PRINT "    Me.txtBR2 = Me.lblBR2.BackColor: Me.txtBR2.ForeColor = Me.txtBR2"
        PRINT "    Me.txtBR3 = Me.lblBR3.BackColor: Me.txtBR3.ForeColor = Me.txtBR3"
        PRINT "    Me.txtBR4 = Me.lblBR4.BackColor: Me.txtBR4.ForeColor = Me.txtBR4"
        PRINT "    Me.txtBR5 = Me.lblBR5.BackColor: Me.txtBR5.ForeColor = Me.txtBR5"
        PRINT "    Me.txtBR6 = Me.lblBR6.BackColor: Me.txtBR6.ForeColor = Me.txtBR6"
        PRINT ""
        PRINT "    ' Color schemes:  Red"
        PRINT "    Me.txtRD1 = Me.lblRD1.BackColor: Me.txtRD1.ForeColor = Me.txtRD1"
        PRINT "    Me.txtRD2 = Me.lblRD2.BackColor: Me.txtRD2.ForeColor = Me.txtRD2"
        PRINT "    Me.txtRD3 = Me.lblRD3.BackColor: Me.txtRD3.ForeColor = Me.txtRD3"
        PRINT "    Me.txtRD4 = Me.lblRD4.BackColor: Me.txtRD4.ForeColor = Me.txtRD4"
        PRINT "    Me.txtRD5 = Me.lblRD5.BackColor: Me.txtRD5.ForeColor = Me.txtRD5"
        PRINT "    Me.txtRD6 = Me.lblRD6.BackColor: Me.txtRD6.ForeColor = Me.txtRD6"
        PRINT ""
        PRINT "    ' Color schemes:  Maroon"
        PRINT "    Me.txtMR1 = Me.lblMR1.BackColor: Me.txtMR1.ForeColor = Me.txtMR1"
        PRINT "    Me.txtMR2 = Me.lblMR2.BackColor: Me.txtMR2.ForeColor = Me.txtMR2"
        PRINT "    Me.txtMR3 = Me.lblMR3.BackColor: Me.txtMR3.ForeColor = Me.txtMR3"
        PRINT "    Me.txtMR4 = Me.lblMR4.BackColor: Me.txtMR4.ForeColor = Me.txtMR4"
        PRINT "    Me.txtMR5 = Me.lblMR5.BackColor: Me.txtMR5.ForeColor = Me.txtMR5"
        PRINT "    Me.txtMR6 = Me.lblMR6.BackColor: Me.txtMR6.ForeColor = Me.txtMR6"
        PRINT ""
        PRINT "    ' Color schemes:  Lavender"
        PRINT "    Me.txtLV1 = Me.lblLV1.BackColor: Me.txtLV1.ForeColor = Me.txtLV1"
        PRINT "    Me.txtLV2 = Me.lblLV2.BackColor: Me.txtLV2.ForeColor = Me.txtLV2"
        PRINT "    Me.txtLV3 = Me.lblLV3.BackColor: Me.txtLV3.ForeColor = Me.txtLV3"
        PRINT "    Me.txtLV4 = Me.lblLV4.BackColor: Me.txtLV4.ForeColor = Me.txtLV4"
        PRINT "    Me.txtLV5 = Me.lblLV5.BackColor: Me.txtLV5.ForeColor = Me.txtLV5"
        PRINT "    Me.txtLV6 = Me.lblLV6.BackColor: Me.txtLV6.ForeColor = Me.txtLV6"
        PRINT ""
        PRINT ""
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' List constants"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Write_Constants()"
        PRINT "    ' Initialize text management objects"
        PRINT "    Dim wtx    As clsUtlWTX"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT ""
        PRINT "    .AX ""' Color schemes:  Basic"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblWHT.Caption & ""            As Long = "" & Me.txtWHT"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBLK.Caption & ""            As Long = "" & Me.txtBLK"
        PRINT "    .AX ""' Color schemes:  Grey"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGY1.Caption & ""            As Long = "" & Me.txtGY1"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGY2.Caption & ""            As Long = "" & Me.txtGY2"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGY3.Caption & ""            As Long = "" & Me.txtGY3"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGY4.Caption & ""            As Long = "" & Me.txtGY4"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGY5.Caption & ""            As Long = "" & Me.txtGY5"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGY6.Caption & ""            As Long = "" & Me.txtGY6"
        PRINT "    .AX ""' Color schemes:  Blue"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBL1.Caption & ""            As Long = "" & Me.txtBL1"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBL2.Caption & ""            As Long = "" & Me.txtBL2"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBL3.Caption & ""            As Long = "" & Me.txtBL3"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBL4.Caption & ""            As Long = "" & Me.txtBL4"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBL5.Caption & ""            As Long = "" & Me.txtBL5"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBL6.Caption & ""            As Long = "" & Me.txtBL6"
        PRINT "    .AX ""' Color schemes:  Acqua"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblAQ1.Caption & ""            As Long = "" & Me.txtAQ1"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblAQ2.Caption & ""            As Long = "" & Me.txtAQ2"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblAQ3.Caption & ""            As Long = "" & Me.txtAQ3"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblAQ4.Caption & ""            As Long = "" & Me.txtAQ4"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblAQ5.Caption & ""            As Long = "" & Me.txtAQ5"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblAQ6.Caption & ""            As Long = "" & Me.txtAQ6"
        PRINT "    .AX ""' Color schemes:  Green"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGN1.Caption & ""            As Long = "" & Me.txtGN1"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGN2.Caption & ""            As Long = "" & Me.txtGN2"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGN3.Caption & ""            As Long = "" & Me.txtGN3"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGN4.Caption & ""            As Long = "" & Me.txtGN4"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGN5.Caption & ""            As Long = "" & Me.txtGN5"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblGN6.Caption & ""            As Long = "" & Me.txtGN6"
        PRINT "    .AX ""' Color schemes:  Brown"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBR1.Caption & ""            As Long = "" & Me.txtBR1"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBR2.Caption & ""            As Long = "" & Me.txtBR2"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBR3.Caption & ""            As Long = "" & Me.txtBR3"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBR4.Caption & ""            As Long = "" & Me.txtBR4"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBR5.Caption & ""            As Long = "" & Me.txtBR5"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblBR6.Caption & ""            As Long = "" & Me.txtBR6"
        PRINT "    .AX ""' Color schemes:  Red"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblRD1.Caption & ""            As Long = "" & Me.txtRD1"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblRD2.Caption & ""            As Long = "" & Me.txtRD2"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblRD3.Caption & ""            As Long = "" & Me.txtRD3"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblRD4.Caption & ""            As Long = "" & Me.txtRD4"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblRD5.Caption & ""            As Long = "" & Me.txtRD5"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblRD6.Caption & ""            As Long = "" & Me.txtRD6"
        PRINT "    .AX ""' Color schemes:  Maroon"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblMR1.Caption & ""            As Long = "" & Me.txtMR1"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblMR2.Caption & ""            As Long = "" & Me.txtMR2"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblMR3.Caption & ""            As Long = "" & Me.txtMR3"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblMR4.Caption & ""            As Long = "" & Me.txtMR4"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblMR5.Caption & ""            As Long = "" & Me.txtMR5"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblMR6.Caption & ""            As Long = "" & Me.txtMR6"
        PRINT "    .AX ""' Color schemes:  Lavender"""
        PRINT "    .AX ""Public Const gcColors"" & Me.lblLV1.Caption & ""            As Long = "" & Me.txtLV1"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblLV2.Caption & ""            As Long = "" & Me.txtLV2"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblLV3.Caption & ""            As Long = "" & Me.txtLV3"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblLV4.Caption & ""            As Long = "" & Me.txtLV4"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblLV5.Caption & ""            As Long = "" & Me.txtLV5"
        PRINT "    .AX ""Public Const gcColors"" & Me.lblLV6.Caption & ""            As Long = "" & Me.txtLV6"
        PRINT "    .LX"
        PRINT "    .AX ""' Color schemes:  Standard"""
        PRINT "    .AX ""Public Const gcColorsBLN            As Long = gcColorsLV4"""
        PRINT "    .AX ""Public Const gcColorsNUM            As Long = gcColorsGN4"""
        PRINT "    .AX ""Public Const gcColorsDAT            As Long = gcColorsRD4"""
        PRINT "    .AX ""Public Const gcColorsTXT            As Long = gcColorsBL4"""
        PRINT ""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: Call wtx.AX_WrtTmp"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    -- FRMLNK = Build module:  sys_LinkAPP
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA FRMLNK,sys_LinkAPP,'Link Data Objects','lnk'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecFRMLNK) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Prefix constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcPfxAPP              As String = gcMdbPFX"
        PRINT "'***************************************************************************************************"
        PRINT "' Suffix constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcSfxDEV              As String = ""Dev"""
        PRINT "Private Const mcSfxAPP              As String = ""Apps"""
        PRINT "Private Const mcSfxTST              As String = ""Test"""
        PRINT "Private Const mcSfxDAT              As String = ""Data"""
        PRINT "'***************************************************************************************************"
        PRINT "' Table lists"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvarTBLLst()                As Variant"
        PRINT "'***************************************************************************************************"
        PRINT "' Working variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrAppDir                  As String"
        PRINT "Private mstrAppMdb                  As String"
        PRINT "Private mstrAppPth                  As String"
        PRINT "Private mstrAppNam                  As String"
        PRINT "Private mstrAppCod                  As String"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub Form_Open(Cancel As Integer)"
        PRINT "'###################################################################################################"
        PRINT ""
        PRINT "    ' Reset environment"
        PRINT "    Call DoCmd.Hourglass(False)"
        PRINT ""
        PRINT "    ' Set paths"
        PRINT "    mstrAppDir = CurrentProject.Path"
        PRINT "    mstrAppMdb = CurrentProject.Name"
        PRINT "    mstrAppNam = Left$(mstrAppMdb, Len(mstrAppMdb) - 4)"
        PRINT "    mstrAppCod = Left$(mstrAppNam, Len(mstrAppNam) - 3)"
        PRINT "    mstrAppPth = mstrAppDir & ""\"" & mstrAppMdb"
        PRINT ""
        PRINT "    ' Assign defaults"
        PRINT "    Me.txtAppName = mcPfxAPP  ' mstrAppCod mcPfxAPP"
        PRINT "    Me.txtDatPath = """""
        PRINT "    Call cmdDefaults_Click"
        PRINT ""
        PRINT "    ' Set the form controls"
        PRINT "    Call ResetFormControls"
        PRINT ""
        PRINT "    ' Set the focus"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub ResetFormControls()"
        PRINT "'###################################################################################################"
        PRINT "    Me.tglClearCurrentLinks.Enabled = (Me.txtDatPath > """")"
        PRINT "    Me.tglReLinkTables.Enabled = (Me.txtDatPath > """")"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub txtAppName_AfterUpdate()"
        PRINT "'###################################################################################################"
        PRINT "    Me.txtAppName = Trim$(Nz(Me.txtAppName, """"))"
        PRINT "    Call cmdDefaults_Click"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub txtDatPath_AfterUpdate()"
        PRINT "'###################################################################################################"
        PRINT "    Me.txtDatPath = Nz(Me.txtDatPath, """")"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub cmdDefaults_Click()"
        PRINT "'###################################################################################################"
        PRINT "    ' Declare Working Variables"
        PRINT "    Dim strSFX As String"
        PRINT "    ' Set defaults"
        PRINT "    If Len(Me.txtAppName) > 0 Then"
        PRINT "        strSFX = IIf(Right$(mstrAppNam, Len(mcSfxDEV)) = mcSfxDEV, mcSfxTST, mcSfxDAT)"
        PRINT "        Me.txtDatPath = mstrAppDir & ""\"" & Me.txtAppName & strSFX & "".mdb"""
        PRINT "    Else"
        PRINT "        Me.txtDatPath = """""
        PRINT "    End If"
        PRINT "    ' Reset controls"
        PRINT "    Call ResetFormControls"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Function FormatAppCode(ByVal strCode As String) As String"
        PRINT "'###################################################################################################"
        PRINT "    ' Declare Working Variables"
        PRINT "    Dim intCNT As Integer"
        PRINT "    Dim strRTN As String"
        PRINT "    Dim strCHR As String"
        PRINT "    ' Reformat the code"
        PRINT "    strCode = strCode & Space(6)"
        PRINT "    intCNT = 1"
        PRINT "    Do While intCNT <= 6"
        PRINT "        strCHR = Mid$(strCode, intCNT, 1)"
        PRINT "        If intCNT = 1 Or intCNT = 4 Then"
        PRINT "            strCHR = UCase$(strCHR)"
        PRINT "        Else"
        PRINT "            strCHR = LCase$(strCHR)"
        PRINT "        End If"
        PRINT "        strRTN = strRTN & strCHR"
        PRINT "        intCNT = intCNT+1"
        PRINT "    Loop"
        PRINT "    FormatAppCode = strRTN"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub ClearProgressText()"
        PRINT "'###################################################################################################"
        PRINT "    Me.txtClearCurrentLinks = """""
        PRINT "    Me.txtReLinkTables = """""
        PRINT "    Me.Repaint"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Use Table as info source"
        PRINT "'###################################################################################################"
        PRINT "Private Sub tglUseTable_AfterUpdate()"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub tglClearCurrentLinks_AfterUpdate()"
        PRINT "'###################################################################################################"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    If MsgBox(""Are you sure you want to clear the linked tables?"", vbYesNo, ""Clear Current Links"") = vbYes Then"
        PRINT "        Call DoCmd.Hourglass(True)"
        PRINT "        Call ClearProgressText"
        PRINT "        Me.txtClearCurrentLinks.Enabled = True"
        PRINT "        Me.txtClearCurrentLinks.Locked = True"
        PRINT "        Me.txtClearCurrentLinks = """""
        PRINT "        Call ClearCurrentLinks"
        PRINT "        Me.txtClearCurrentLinks.Enabled = False"
        PRINT "        Me.txtClearCurrentLinks.Locked = False"
        PRINT "        Call DoCmd.Hourglass(False)"
        PRINT "    End If"
        PRINT "    Me.tglClearCurrentLinks = False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub tglClearALLLinks_AfterUpdate()"
        PRINT "'###################################################################################################"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    If MsgBox(""Are you sure you want to clear the linked tables?"", vbYesNo, ""Clear ALL Links"") = vbYes Then"
        PRINT "        Call DoCmd.Hourglass(True)"
        PRINT "        Call ClearProgressText"
        PRINT "        Me.txtClearALLLinks.Enabled = True"
        PRINT "        Me.txtClearALLLinks.Locked = True"
        PRINT "        Me.txtClearALLLinks = """""
        PRINT "        Call ClearALLLinks"
        PRINT "        Me.txtClearALLLinks.Enabled = False"
        PRINT "        Me.txtClearALLLinks.Locked = False"
        PRINT "        Call DoCmd.Hourglass(False)"
        PRINT "    End If"
        PRINT "    Me.tglClearALLLinks = False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub tglReLinkTables_AfterUpdate()"
        PRINT "'###################################################################################################"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    If MsgBox(""Are you sure you want to relink the tables?"", vbYesNo, ""ReLink Tables"") = vbYes Then"
        PRINT "        Call DoCmd.Hourglass(True)"
        PRINT "        Call ClearProgressText"
        PRINT "        Me.txtReLinkTables.Enabled = True"
        PRINT "        Me.txtReLinkTables.Locked = True"
        PRINT "        Me.txtReLinkTables = """""
        PRINT "        Call ReLinkTables"
        PRINT "        Me.txtReLinkTables.Enabled = False"
        PRINT "        Me.txtReLinkTables.Locked = False"
        PRINT "        Call DoCmd.Hourglass(False)"
        PRINT "    End If"
        PRINT "    Me.tglReLinkTables = False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub cmdCloseForm_Click()"
        PRINT "'###################################################################################################"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    DoCmd.Close"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox Err.Description"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Public Sub ClearCurrentLinks()"
        PRINT "'###################################################################################################"
        PRINT "    ' Manage errors"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize object variables"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb()"
        PRINT "    ' Declare Working Variables"
        PRINT "    Dim mUbd1 As Integer"
        PRINT "    Dim mCnt1 As Integer"
        PRINT "    Dim strTab0 As String"
        PRINT "    Dim strTab1 As String"
        PRINT "    Dim strTab2 As String"
        PRINT "    ' Initialize table lists"
        PRINT "    Call AssignTableList"
        PRINT "    ' Clear Application links"
        PRINT "    mUbd1 = UBound(mvarTBLLst)"
        PRINT "    For mCnt1 = 0 To mUbd1"
        PRINT "        ' Assign multiple versions of the table"
        PRINT "        strTab0 = mvarTBLLst(mCnt1)"
        PRINT "        strTab1 = strTab0 & ""1"""
        PRINT "        strTab2 = strTab0 & ""2"""
        PRINT "        ' Display progress to the screen"
        PRINT "        Me.txtClearCurrentLinks = strTab0"
        PRINT "        Me.Repaint"
        PRINT "        ' Delete multiple versions of the table"
        PRINT "        On Error Resume Next"
        PRINT "        dbs.TableDefs.Delete strTab0"
        PRINT "        dbs.TableDefs.Delete strTab1"
        PRINT "        dbs.TableDefs.Delete strTab2"
        PRINT "        On Error GoTo 0"
        PRINT "    Next mCnt1"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox Err.Description"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Public Sub ClearALLLinks()"
        PRINT "'###################################################################################################"
        PRINT "    ' Manage errors"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize object variables"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb()"
        PRINT "    ' Declare Working Variables"
        PRINT "    Dim mUbd1 As Integer"
        PRINT "    Dim mCnt1 As Integer"
        PRINT "    Dim strTab0 As String"
        PRINT "    Dim strTab1 As String"
        PRINT "    Dim strTab2 As String"
        PRINT "    ' Initialize table lists"
        PRINT "    Call AssignTableList(True)"
        PRINT "    ' Clear Application links"
        PRINT "    mUbd1 = UBound(mvarTBLLst)"
        PRINT "    For mCnt1 = 0 To mUbd1"
        PRINT "        ' Assign multiple versions of the table"
        PRINT "        strTab0 = mvarTBLLst(mCnt1)"
        PRINT "        strTab1 = strTab0 & ""1"""
        PRINT "        strTab2 = strTab0 & ""2"""
        PRINT "        ' Display progress to the screen"
        PRINT "        Me.txtClearALLLinks = strTab0"
        PRINT "        Me.Repaint"
        PRINT "        ' Delete multiple versions of the table"
        PRINT "        On Error Resume Next"
        PRINT "        dbs.TableDefs.Delete strTab0"
        PRINT "        dbs.TableDefs.Delete strTab1"
        PRINT "        dbs.TableDefs.Delete strTab2"
        PRINT "        On Error GoTo 0"
        PRINT "    Next mCnt1"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox Err.Description"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Public Sub ReLinkTables()"
        PRINT "'###################################################################################################"
        PRINT "    ' Manage errors"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Initialize object variables"
        PRINT "    Dim dbs As Database"
        PRINT "    Dim tdf As TableDef"
        PRINT "    Set dbs = CurrentDb()"
        PRINT "    ' Initialize procedure constants"
        PRINT "    Const pcJET As String = ""Microsoft Access"""
        PRINT "    ' Declare Working Variables"
        PRINT "    Dim mUbd1 As Integer"
        PRINT "    Dim mCnt1 As Integer"
        PRINT "    Dim strSrcTab As String"
        PRINT "    Dim strTrgTab As String"
        PRINT "    ' Initialize table lists"
        PRINT "    Call AssignTableList"
        PRINT "    ' Link the Application tables"
        PRINT "    mUbd1 = UBound(mvarTBLLst)"
        PRINT "    For mCnt1 = 0 To mUbd1"
        PRINT "        ' Assign table names"
        PRINT "        strSrcTab = mvarTBLLst(mCnt1)"
        PRINT "        strTrgTab = mvarTBLLst(mCnt1)"
        PRINT "        If Len(strSrcTab) > 0 And Len(strSrcTab) > 0 Then"
        PRINT "            ' Display progress to the screen"
        PRINT "            Me.txtReLinkTables = strTrgTab"
        PRINT "            Me.Repaint"
        PRINT "            ' We do not care about errors - just slam it in!"
        PRINT "            On Error Resume Next"
        PRINT "            dbs.TableDefs.Delete strSrcTab"
        PRINT "            'On Error GoTo Error_Handler"
        PRINT "            DoCmd.TransferDatabase acLink, pcJET, Me.txtDatPath, acTable, strSrcTab, strTrgTab"
        PRINT "        End If"
        PRINT "    Next mCnt1"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox Err.Description"
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Public Sub AssignTableList(Optional ByVal blnALL As Boolean = False)"
        PRINT "'###################################################################################################"
        PRINT "    ' Access2K connection"
        PRINT "    Dim acc       As Access.Application"
        PRINT "    Dim obj       As Object"
        PRINT "    Dim atb       As AccessObject"
        PRINT "    Dim dbs       As DAO.Database"
        PRINT "    Dim tdf       As DAO.TableDef"
        PRINT "    Dim prp       As DAO.Property"
        PRINT "    ' Declare Working Variables"
        PRINT "    Dim intIDX    As Integer"
        PRINT "    Dim strTBL    As String"
        PRINT "    Dim strPRP    As String"
        PRINT "    Dim strVAL    As String"
        PRINT "    ' Declare working constants"
        PRINT "    Const pcMTY   As String = ""[empty]"""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Populate with linked tables only"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    If blnALL Then"
        PRINT "        ' Initialize DB connections"
        PRINT "        Set dbs = CurrentDb()"
        PRINT "        ' Enumerate the tables"
        PRINT "        intIDX = 0: ReDim mvarTBLLst(intIDX)"
        PRINT "        With dbs"
        PRINT "            For Each tdf In .TableDefs"
        PRINT "                strTBL = tdf.Name"
        PRINT "                With tdf"
        PRINT "                    For Each prp In .Properties"
        PRINT "                        strPRP = prp.Name"
        PRINT "                        If strPRP = ""Connect"" Then"
        PRINT "                            strVAL = Trim$(IIf(CStr(prp.Value) = """", pcMTY, CStr(prp.Value)))"
        PRINT "                            If strVAL <> pcMTY Then"
        PRINT "                                ReDim Preserve mvarTBLLst(intIDX)"
        PRINT "                                mvarTBLLst(intIDX) = strTBL"
        PRINT "                                intIDX = intIDX+1"
        PRINT "                            End If"
        PRINT "                            Exit For"
        PRINT "                        End If"
        PRINT "                    Next prp"
        PRINT "                End With"
        PRINT "            Next tdf"
        PRINT "        End With"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Populate from hard coded list"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ElseIf Me.tglUseTable.Value Then    ' True False"
        PRINT "        mvarTBLLst = Array( _"
        PRINT "            """" _"
        PRINT "        )"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Populate from reference table"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Else"
        PRINT "        ' Initialize DB connections"
        PRINT "        Set acc = New Access.Application"
        PRINT "        acc.OpenCurrentDatabase Me.txtDatPath"
        PRINT "        Set obj = acc.CurrentData"
        PRINT "        ' Enumerate the tables"
        PRINT "        intIDX = 0: ReDim mvarTBLLst(intIDX)"
        PRINT "        For Each atb In obj.AllTables"
        PRINT "            If Left$(atb.Name, 4) <> ""MSys"" _"
        PRINT "            And Mid$(atb.Name, Len(atb.Name) - 2, 2) <> ""_X"" _"
        PRINT "            Then"
        PRINT "                ReDim Preserve mvarTBLLst(intIDX)"
        PRINT "                mvarTBLLst(intIDX) = atb.Name"
        PRINT "                intIDX = intIDX+1"
        PRINT "            End If"
        PRINT "        Next atb"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- RPTNAR = Build module:  tpl_NARROW
    -- RPTWID = Build module:  tpl_WIDE
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA RPTNAR,tpl_NARROW,'Report_Description','rpt'
        EXEC ut_zzVBA RPTWID,tpl_WIDE  ,'Report_Description','rpt'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecRPTNAR,@SecRPTWID) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when report is activated"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_Activate()"
        PRINT "    'Me.lblTitle01.Caption = RunSQL.Title01"
        PRINT "    'Me.lblTitle02.Caption = RunSQL.Title02"
        PRINT "End Sub"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when report is opened"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_Open(Cancel As Integer)"
        PRINT "    'Me.RecordSource = RunSQL.Sql01"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is loaded"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_NoData(Cancel As Integer)"
        PRINT "    MsgBox ""There is not any data which meets the specified criteria."", _"
        PRINT "        vbInformation, Me.lblTitle01.Caption & "" Report"""
        PRINT "    Cancel = True"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- ANYFRM = Build module:  frm_FrmName
    -- ANYTAB = Build module:  frm_FrmName
    -- ANYLST = Build module:  lst_FrmName
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA ANYFRM,frm_FrmName,'StdForm Module'
        EXEC ut_zzVBA ANYFRM,tpl_FrmStd ,'StdForm Template'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzVBA ANYTAB,tab_FrmName,'TabForm Module'
        EXEC ut_zzVBA ANYTAB,tpl_FrmTab ,'TabForm Template'
        --------------------------------------------------------------------------------------------
        EXEC ut_zzVBA ANYLST,lst_FrmName,'ListForm Module'
        EXEC ut_zzVBA ANYLST,tpl_Lst010 ,'ListForm Template'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecANYFRM,@SecANYTAB,@SecANYLST) BEGIN
        SET @StdTx3 = LEFT(@StdTx3+REPLICATE('X',LEN(@StdTx2)),LEN(@StdTx2))
        PRINT "'***************************************************************************************************"
        PRINT "' RunSql Tracking"
        PRINT "'***************************************************************************************************"
        IF @BldCOD IN (@SecANYFRM,@SecANYTAB) BEGIN
        PRINT "Private Const mcFndSqlENB           As Boolean = False                    ' True = Always enabled"
        END
        PRINT "Private Const mcRunSqlENB           As Boolean = True                     ' True = Always enabled"
        PRINT "Private Const mcClrSqlENB           As Boolean = False                    ' True = Always enabled"
        PRINT "'***************************************************************************************************"
        PRINT "Private mblnWrtSQL                  As Boolean                            ' Write SQL statement to temp file"
        PRINT "'***************************************************************************************************"
        PRINT "' SrtBy Tracking"
        PRINT "'***************************************************************************************************"
        PRINT "Private sby                         As clsRunSBY                          '"
        PRINT "Private mvrnSrtBy()                 As Variant                            '"
        PRINT "Private Const mcClearSBY            As Boolean = True                     '"
        IF @BldCOD IN (@SecANYLST) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' GrpBy Tracking"
        PRINT "'***************************************************************************************************"
        PRINT "Private gby                         As clsRunGBY                          '"
        PRINT "Private mvrnGrpBy()                 As Variant                            '"
        PRINT "Private Const mcClearGBY            As Boolean = True                     '"
        END
        PRINT "'***************************************************************************************************"
        PRINT "' SrtBy/GrpBy Constants"
        PRINT "'***************************************************************************************************"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "Private Const mcHdrFld"+@SFX+"           As String = ""Fld"+@SFX+"""                  '"
        END
        PRINT "'***************************************************************************************************"
        PRINT "' SelOn Variables"
        PRINT "'***************************************************************************************************"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "Private mvrnFld"+@SFX+"                  As Variant                            '"
        END
        PRINT "'***************************************************************************************************"
        PRINT "' List Management"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcEmptySql            As Boolean = True                     '"
        PRINT "Private Const mcAddBlank            As Boolean = True                     '"
        PRINT "Private Const mcNoBlank             As Boolean = False                    '"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcUseTplList          As Boolean = True                     '"
        PRINT "Private Const mcUseStdList          As Boolean = False                    '"
        PRINT "'***************************************************************************************************"
        PRINT "' Command Management"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrRowSrcCMD               As String                             '"
        PRINT "Private mintRowDefCMD               As Integer                            '"
        PRINT "'***************************************************************************************************"
        PRINT "' Report Management"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrRowSrcRPT               As String                             '"
        PRINT "Private mintRowDefRPT               As Integer                            '"
        IF @BldCOD IN (@SecANYTAB) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Tab Control"
        PRINT "'***************************************************************************************************"
        SET @IDN = 1; SET @CNT = 10
        WHILE @IDN <= @CNT BEGIN
            SET @NUX = CAST(@IDN AS varchar(10))
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "Private Const mcTabNbr"+@SFX+"           As Integer = "+@NUX+"                        '"
        END
        END
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is opened"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Open(Cancel As Integer)"
        PRINT "    ' Display form full screen"
        PRINT "    DoCmd.Maximize"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is loaded"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Load()"
        PRINT "    ' Initialize:  SrtBy Objects"
        PRINT "    Set sby = New clsRunSBY"
        IF @BldCOD IN (@SecANYLST) BEGIN
        PRINT "    ' Initialize:  GrpBy Objects"
        PRINT "    Set gby = New clsRunGBY"
        END
        PRINT "    ' Initialize:  Form Properties"
        PRINT "    Call Form_Setup"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when record becomes current"
        PRINT "'###################################################################################################"
        PRINT "' BeforeUpdate(frm) => AfterUpdate(frm) => Exit(ctl) => LostFocus(ctl) => Current(frm)"
        PRINT "Private Sub Form_Current()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is unloaded"
        PRINT "'###################################################################################################"
        PRINT "' Unload => Deactivate => Close"
        PRINT "Private Sub Form_Unload(Cancel As Integer)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is closed"
        PRINT "'###################################################################################################"
        PRINT "' Unload => Deactivate => Close"
        PRINT "Private Sub Form_Close()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Commands"
        PRINT "'###################################################################################################"
        PRINT "Private Sub cmdRefreshForm_Click()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdAddNewRecord_Click()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdSaveRecord_Click()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdUndoRecord_Click()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdDeleteRecord_Click()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdCloseForm_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdCloseForm_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Open the corresponding form"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Form_DblClick(Cancel As Integer)"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Assign parameters"
        PRINT "    mstrOpenText = """""
        PRINT "    mstrOpenName = mstrOpenText"
        PRINT "    mstrFiltName = """""
        PRINT "    mstrWhereTxt = """""
        PRINT "    mstrOpenArgs = """""
        PRINT "    mintOpenView = acNormal"
        PRINT "    mintDataMode = acFormPropertySettings"
        PRINT "    mintWindMode = acWindowNormal"
        PRINT "    ' Open the form ignoring any error conditions"
        PRINT "    If Len(mstrOpenName) > 0 Then"
        PRINT "        If Me.Dirty Then Call SaveIt"
        PRINT "        On Error Resume Next"
        PRINT "        DoCmd.OpenForm mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt, mintDataMode, mintWindMode, mstrOpenArgs"
        PRINT "        On Error GoTo 0"
        PRINT "    Else"
        PRINT "        MsgBox ""This form is not available."", vbOKOnly, ""Open "" & mstrOpenText"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize form properties and mechanisms"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Form_Setup()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Form_Setup"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup form display values"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Me.Caption = mcModTtl"
        PRINT "    Me.lblTitle01.Caption = mcModTtl"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup form process values"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Me.AllowFilters = True"
        PRINT "    Me.AllowAdditions = True"
        PRINT "    Me.AllowEdits = True"
        PRINT "    Me.AllowDeletions = True"
        PRINT "    Me.DataEntry = False"
        PRINT "    'e.UniqueTable = """""
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup Command mechanisms (with defaults - mcUseStdList mcUseTplList)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Setup_Command(""ProcessName_02"", mcUseTplList)"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup Report mechanisms (with defaults - mcUseStdList mcUseTplList)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Setup_Report(""ReportName_02"", mcUseTplList)"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Reset the hourglass"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call DoCmd.Hourglass(False)"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Hide the cursor"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup Controls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Controls_Setup"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Controls"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Controls_Setup()"
        PRINT "    Call Vars_Defaults"
        PRINT "    Call SrtBySyncCap(mcClearSBY)"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Reset(Optional ByVal blnRunSQL As Boolean = False)"
        PRINT "    Me.tglRunSQL.Enabled = (blnRunSQL Or mcRunSqlENB)"
        PRINT "    Me.tglClrSQL.Enabled = ( _"
        PRINT "           sby.HasElm _"
        IF @BldCOD IN (@SecANYLST) BEGIN
        PRINT "        Or gby.HasElm _"
        END
        PRINT "        Or HasCriteria _"
        PRINT "        Or mcClrSqlENB _"
        PRINT "    )"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Defaults()"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Requery()"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Clear()"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        IF @BldCOD IN (@SecANYTAB) BEGIN
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Tab Control"
        PRINT "'###################################################################################################"
        PRINT "Private Sub tbcTab001_Setup()"
        SET @IDN = 1; SET @CNT = 10; SET @TX1 = "True"
        WHILE @IDN <= @CNT BEGIN
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "    With Me.tbcTab001.Pages(mcTabNbr"+@SFX+")"
            PRINT "        .Caption = """+@SFX+""":   .ControlTipText = ""Tab Page "+@SFX+""":                        .Visible = "+@TX1; SET @TX1 = "False"
            PRINT "    End With"
        END
        PRINT "    Me.tbcTab001.Value = mcTabNbr001"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub tbcTab001_Change()"
        PRINT "    Const pcMsgTtl = mcModNam & "".tbcTab001_Change"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    Select Case Me.tbcTab001.Value"
        SET @IDN = 1; SET @CNT = 10; SET @TX1 = "True"
        WHILE @IDN <= @CNT BEGIN
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "        Case mcTabNbr"+@SFX
        END
        PRINT "        Case Else"
        PRINT "            MsgBox ""Unregistered Tab ("" & Me.tbcTab001.Value & "")"", vbCritical, pcMsgTtl"
        PRINT "    End Select"
        PRINT "    Call Controls_Reset"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Build SQL Statements"
        PRINT "'###################################################################################################"
        IF @BldCOD IN (@SecANYFRM,@SecANYTAB) BEGIN
        PRINT "Private Sub tglFndSQL_AfterUpdate()"
        PRINT "    Const pcMsgTtl = mcModNam & "".tglFndSQL_AfterUpdate"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Set the toggle state"
        PRINT "    Me.tglFndSQL = True"
        PRINT "    Me.tglFndSQL.Enabled = True"
        PRINT "    ' Assign the SQL statement"
        PRINT "    Call ExecSQL"
        PRINT "Exit_Procedure:"
        PRINT "    ' Reset the toggle state"
        PRINT "    Me.tglFndSQL = False"
        PRINT "    Me.tglFndSQL.Enabled = mcFndSqlENB"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        END
        PRINT "Private Sub tglRunSQL_AfterUpdate()"
        PRINT "    Const pcMsgTtl = mcModNam & "".tglRunSQL_AfterUpdate"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Set the toggle state"
        PRINT "    Me.tglRunSQL = True"
        PRINT "    Me.tglRunSQL.Enabled = True"
        PRINT "    ' Assign the SQL statement"
        PRINT "    Call ExecSQL"
        PRINT "Exit_Procedure:"
        PRINT "    ' Reset the toggle state"
        PRINT "    Me.tglRunSQL = False"
        PRINT "    Me.tglRunSQL.Enabled = mcRunSqlENB"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub tglClrSQL_AfterUpdate()"
        PRINT "    Const pcMsgTtl = mcModNam & "".tglClrSQL_AfterUpdate"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Set the toggle state"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.tglClrSQL = True"
        PRINT "    Me.tglClrSQL.Enabled = True"
        PRINT "    ' Assign the SQL statement"
        PRINT "    Call SrtBySyncCap(mcClearSBY)"
        PRINT "    Call Vars_Defaults"
        PRINT "Exit_Procedure:"
        PRINT "    ' Reset the toggle state"
        PRINT "    Me.tglClrSQL = False"
        PRINT "    Me.tglClrSQL.Enabled = mcClrSqlENB"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        IF @BldCOD IN (@SecANYTAB,@SecANYLST) BEGIN
        PRINT "Private Sub tglWrtSQL_AfterUpdate()"
        PRINT "    Const pcMsgTtl = mcModNam & "".tglWrtSQL_AfterUpdate"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Set the toggle state"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Assign flags"
        PRINT "    mblnWrtSQL = Me.tglWrtSQL"
        PRINT "    RunRST.WrtSQL = mblnWrtSQL"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        END
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage SQL Criteria"
        PRINT "'###################################################################################################"
        PRINT "Private Sub AssignSQL()"
        PRINT "    Const pcMsgTtl = mcModNam & "".AssignSQL"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Assign current criteria"
        PRINT "    With RunSQL"
        PRINT "        ' System"
        PRINT "        .WrtSQL = mblnWrtSQL"
        PRINT "        ' Criteria"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "        .Fld"+@SFX+" = mvrnFld"+@SFX
        END
        PRINT "    End With"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub ExecSQL(Optional ByVal blnEmpty As Boolean)"
        PRINT "    Call AssignSQL"
        PRINT "    Me.RecordSource = RunSQL.Empty_Text(blnEmpty)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Variables"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Vars_Load()"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @NUX = CASE @IsCbox WHEN 1 THEN 'NBR'  ELSE 'TXT'  END
            SET @CVX = CASE @IsCbox WHEN 1 THEN 'CLng' ELSE 'CStr' END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "    mvrnFld"+@SFX+" = RunRST.Fld"+@SFX+": Me."+@PFX+"SelOnFld"+@SFX+" = mvrnFld"+@SFX
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Vars_Defaults()"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @NUX = CASE @IsCbox WHEN 1 THEN 'NBR'  ELSE 'TXT'  END
            SET @CVX = CASE @IsCbox WHEN 1 THEN 'CLng' ELSE 'CStr' END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "    mvrnFld"+@SFX+" = gcNul"+@NUX+": RunRST.Fld"+@SFX+" = mvrnFld"+@SFX+": Me."+@PFX+"SelOnFld"+@SFX+" = mvrnFld"+@SFX
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Vars_Ctl2Var()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Vars_Var2Ctl()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Function HasCriteria() As Boolean"
        PRINT "    HasCriteria = ( _"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2); SET @ORR = "  "
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @BLN = CASE @IsCbox WHEN 1 THEN 'Len(' ELSE '    ' END
            SET @ELN = CASE @IsCbox WHEN 1 THEN ')'    ELSE ' '    END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "        "+@ORR+" "+@BLN+"mvrnFld"+@SFX+@ELN+" > 0 _"; SET @ORR = "Or"
        END
        PRINT "    )"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize Control RowSource"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Records"
        PRINT "'###################################################################################################"
        PRINT "Private Sub SaveIt(Optional ByVal sglDUR As Single)"
        PRINT "    DoCmd.RunCommand acCmdSaveRecord"
        PRINT "    Call PauseFor(sglDUR)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub ReadIt(Optional ByVal sglDUR As Single)"
        PRINT "    Call PauseFor(sglDUR)"
        PRINT "    Me.Refresh      ' Read form source values"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub LoadIt(Optional ByVal sglDUR As Single)"
        PRINT "    Call PauseFor(sglDUR)"
        PRINT "    Call Me.Requery ' Requery form source records"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Logical Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage SrtBy Selections"
        PRINT "'###################################################################################################"
        PRINT "' SrtBy:  Synchronize Captions"
        PRINT "'==================================================================================================="
        PRINT "Private Sub SrtBySyncCap(Optional ByVal blnCLR As Boolean = False)"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    If blnCLR Then Call sby.ClrCap"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "    cmdSrtByFld"+@SFX+".Caption = sby.GetCap(mcHdrFld"+@SFX+")"
        END
        PRINT "    RunRST.SrtByTPL = sby.SrtBy"
        PRINT "    RunSQL.SrtByTPL = sby.SrtBy"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "Private Sub cmdSrtByFld"+@SFX+"_Click()"
            PRINT "    cmdSrtByFld"+@SFX+".Caption = sby.NxtCap(mcHdrFld"+@SFX+", cmdSrtByFld"+@SFX+".Caption): Call SrtBySyncCap"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
        END
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        IF @BldCOD IN (@SecANYLST) BEGIN
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage GrpBy Selections"
        PRINT "'###################################################################################################"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT "Private Sub tglGrpByFld"+@SFX+"_AfterUpdate()"
            PRINT "    Me.cmdHideCursor.SetFocus"
            PRINT "    Me.tglGrpByFld"+@SFX+" = False"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
        END
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END
        IF @BldCOD IN (@SecANYFRM,@SecANYTAB) BEGIN
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage FndOn Selections"
        PRINT "'###################################################################################################"
        PRINT "Private Sub cboFndOn01_AfterUpdate()"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.cboFndOn01 = Nz(Me.cboFndOn01, gcNulNBR)"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cboFndOn01_DblClick(Cancel As Integer)"
        PRINT "    Me.cboFndOn01 = gcNulNBR"
        PRINT "    Call cboFndOn01_AfterUpdate"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        END
        /*------------------------------------------------------------------------------------------
            EXEC ut_zzVBA ANYFRM,frm_FrmName,'StdForm Module' ,'CTCT','XXII'
            EXEC ut_zzVBA ANYTAB,tab_FrmName,'TabForm Module' ,'CTCT','XXII'
            EXEC ut_zzVBA ANYLST,lst_FrmName,'ListForm Module','CTCT','XXII'
        ------------------------------------------------------------------------------------------*/
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' EXEC ut_zzVBA "+@BldCOD+","+@InpTxt+",'"+@StdTx1+"','"+@StdTx2+"','"+@StdTx3+"'"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @IncDup = CASE SUBSTRING(@StdTx3,@IDN,1) WHEN 'I' THEN 1 WHEN 'D' THEN 1 ELSE 0 END
            SET @IncFld = CASE SUBSTRING(@StdTx3,@IDN,1) WHEN 'I' THEN 1 ELSE 0 END
            SET @NUX = CASE @IsCbox WHEN 1 THEN 'NBR'  ELSE 'TXT'  END
            SET @CVX = CASE @IsCbox WHEN 1 THEN 'CLng' ELSE 'CStr' END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT ""
            PRINT ""
            PRINT "'###################################################################################################"
            PRINT "' Manage Fld"+@SFX+""
            PRINT "'###################################################################################################"
            PRINT "Private Sub "+@PFX+"SelOnFld"+@SFX+"_AfterUpdate()"
            PRINT "    Const pcMsgTtl = mcModNam & ""."+@PFX+"SelOnFld"+@SFX+"_AfterUpdate"""
            PRINT "    'On Error GoTo Error_Handler"
            PRINT "    Me."+@PFX+"SelOnFld"+@SFX+" = Nz(Me."+@PFX+"SelOnFld"+@SFX+", gcNul"+@NUX+")"
            PRINT "    mvrnFld"+@SFX+" = Me."+@PFX+"SelOnFld"+@SFX+": RunRST.Fld"+@SFX+" = mvrnFld"+@SFX+""
            PRINT "    Call Controls_Reset"
            PRINT "Exit_Procedure:"
            PRINT "    Exit Sub"
            PRINT "Error_Handler:"
            PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
            PRINT "    Resume Exit_Procedure"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            PRINT "Private Sub "+@PFX+"SelOnFld"+@SFX+"_DblClick(Cancel As Integer)"
            PRINT "    Const pcMsgTtl = mcModNam & ""."+@PFX+"SelOnFld"+@SFX+"_DblClick"""
            PRINT "    'On Error GoTo Error_Handler"
            IF @IncDup = 1 BEGIN
            PRINT "    Me."+@PFX+"SelOnFld"+@SFX+" = Nz(Me."+@PFX+"SelOnFld"+@SFX+", gcNul"+@NUX+")"
            IF @IsCbox = 1 BEGIN
            PRINT "    If Len(Trim$(Me."+@PFX+"SelOnFld"+@SFX+".Text)) = 0 And Nz(Me."+@PFX+"Fld"+@SFX+", gcNul"+@NUX+") > 0 Then"
            END ELSE BEGIN
            PRINT "    If Len(Trim$(Me."+@PFX+"SelOnFld"+@SFX+".Text)) = 0 And Len(Nz(Me."+@PFX+"Fld"+@SFX+", gcNul"+@NUX+")) > 0 Then"
            END
            PRINT "        Me."+@PFX+"SelOnFld"+@SFX+" = Nz(Me."+@PFX+"Fld"+@SFX+", gcNul"+@NUX+")"
            PRINT "    Else"
            PRINT "        Me."+@PFX+"SelOnFld"+@SFX+" = gcNul"+@NUX+""
            PRINT "    End If"
            END ELSE BEGIN
            PRINT "    Me."+@PFX+"SelOnFld"+@SFX+" = gcNul"+@NUX+""
            END
            PRINT "    mvrnFld"+@SFX+" = Me."+@PFX+"SelOnFld"+@SFX+": RunRST.Fld"+@SFX+" = mvrnFld"+@SFX+""
            PRINT "    Call Controls_Reset: Me.cmdHideCursor.SetFocus"
            PRINT "Exit_Procedure:"
            PRINT "    Exit Sub"
            PRINT "Error_Handler:"
            PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
            PRINT "    Resume Exit_Procedure"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            IF @IncFld = 1 BEGIN
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_Enter()"
            PRINT "    If Me.NewRecord And Len(Trim$(Nz(Me."+@PFX+"Fld"+@SFX+".Text, gcNul"+@NUX+"))) = 0 And Len(Trim$(Nz(Me."+@PFX+"SelOnFld"+@SFX+", gcNul"+@NUX+"))) > 0 Then"
            PRINT "        Me."+@PFX+"Fld"+@SFX+" = Me."+@PFX+"SelOnFld"+@SFX+""
            PRINT "        Call "+@PFX+"Fld"+@SFX+"_AfterUpdate"
            PRINT "    End If"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_AfterUpdate()"
            PRINT "    Me."+@PFX+"Fld"+@SFX+" = Nz(Me."+@PFX+"Fld"+@SFX+", gcNul"+@NUX+")"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_DblClick(Cancel As Integer)"
            PRINT "    Const pcMsgTtl = mcModNam & ""."+@PFX+"Fld"+@SFX+"_DblClick"""
            PRINT "    'On Error GoTo Error_Handler"
            PRINT "    Me."+@PFX+"Fld"+@SFX+" = Nz(Me."+@PFX+"Fld"+@SFX+", gcNul"+@NUX+")"
            PRINT "    Me."+@PFX+"SelOnFld"+@SFX+" = Nz(Me."+@PFX+"SelOnFld"+@SFX+", gcNul"+@NUX+")"
            PRINT "    '-----------------------------------------------------------------------------------------------"
            PRINT "    If Me."+@PFX+"Fld"+@SFX+" <> "+@CVX+"(Me."+@PFX+"SelOnFld"+@SFX+") And Me."+@PFX+"SelOnFld"+@SFX+" > gcNul"+@NUX+" Then"
            PRINT "        Me."+@PFX+"Fld"+@SFX+" = Me."+@PFX+"SelOnFld"+@SFX+""
            PRINT "    Else"
            PRINT "        Me."+@PFX+"Fld"+@SFX+" = gcNul"+@NUX+""
            PRINT "    End If"
            PRINT "    Call "+@PFX+"Fld"+@SFX+"_AfterUpdate"
            PRINT "Exit_Procedure:"
            PRINT "    Exit Sub"
            PRINT "Error_Handler:"
            PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
            PRINT "    Resume Exit_Procedure"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            IF @IsCbox = 0 BEGIN
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_KeyPress(KeyAscii As Integer)"
            PRINT "    'If kys.Get_Any_Mixed(KeyAscii) Then Beep"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            END
            END
        END
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Command Mechanism"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Setup_Command(ByVal strDefault As String, ByVal blnUseList As Boolean)"
        PRINT "    Dim RegCMD    As clsRegCMD"
        PRINT "    Set RegCMD = New clsRegCMD"
        PRINT "    Dim mvrnCmdLst As Variant"
        PRINT "    With RegCMD"
        PRINT "        Call .Activate(blnUseList)  ' blnUseList mcUseStdList mcUseTplList"
        PRINT "        mvrnCmdLst = Array( _"
        PRINT "            .GetCmdNum(""ProcessName_01""), _"
        PRINT "            .GetCmdNum(""ProcessName_02""), _"
        PRINT "            .GetCmdNum(""ProcessName_03"") _"
        PRINT "        )"
        PRINT "        mstrRowSrcCMD = .GetCmdLst(mvrnCmdLst, strDefault, mcNoBlank)"
        PRINT "        mintRowDefCMD = .DefaultItem"
        PRINT "    End With"
        PRINT "    Set RegCMD = Nothing"
        PRINT "    Me.cboCmdList.RowSource = mstrRowSrcCMD"
        PRINT "    Call Reset_CommandList"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Reset_CommandList()"
        PRINT "    If Len(mstrRowSrcCMD) > 0 Then"
        PRINT "        ' Set command list value to default"
        PRINT "        Me.cboCmdList.Value = mintRowDefCMD"
        PRINT "        ' Reset command buttons"
        PRINT "        Call Reset_CommandButtons"
        PRINT "    Else"
        PRINT "        ' Disable command mechanism"
        PRINT "        Call Disable_CommandButtons"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Reset_CommandButtons()"
        PRINT "    ' Reset command buttons"
        PRINT "    Me.cboCmdList.Enabled = True"
        PRINT "    Me.tglRunCmd.Enabled = (Me.cboCmdList.Value > 0)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Disable_CommandButtons()"
        PRINT "    ' Disable command mechanism"
        PRINT "    Me.cboCmdList.Enabled = False"
        PRINT "    Me.tglRunCmd.Enabled = False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cboCmdList_AfterUpdate()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Reset command buttons"
        PRINT "    Call Reset_CommandButtons"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cboCmdList_DblClick(Cancel As Integer)"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Reset command list value"
        PRINT "    Call Reset_CommandList"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub tglRunCmd_Click()"
        PRINT "    ' Set the toggle state"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.tglRunCmd.Value = True"
        PRINT "    ' Print the command"
        PRINT "    Call Run_Command(acViewNormal)"
        PRINT "    ' Reset the toggle state"
        PRINT "    Me.tglRunCmd.Value = False"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Command_Criteria(ByVal strCMD As String, ByRef mrstCMD As clsRunCMD)"
        PRINT "    ' Set command criteria"
        PRINT "    Select Case strCMD"
        PRINT "        'Case ""01""    ' Process 0001"
        PRINT "        'Case ""02""    ' Process 0002"
        PRINT "        'Case ""03""    ' Process 0003"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Command(ByVal lngViewType As Long)  ' acViewPreview acViewNormal"
        PRINT "    Const pcMsgTtl = mcModNam & "".Run_Command"""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Get the command number"
        PRINT "    Dim strCMD As String: strCMD = Format$(Me.cboCmdList.Value, ""00"")"
        PRINT "    ' Call the specified command"
        PRINT "    Select Case strCMD"
        PRINT "        Case ""01"": Call Run_Command_01(lngViewType)    ' Process 0001"
        PRINT "        Case ""02"": Call Run_Command_02(lngViewType)    ' Process 0002"
        PRINT "        Case ""03"": Call Run_Command_03(lngViewType)    ' Process 0003"
        PRINT "        Case Else"
        PRINT "            MsgBox ""This Command ("" & strCMD & "") is not registered."", vbInformation, pcMsgTtl"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Run Command 01:  Process 0001"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Command_01(ByVal lngViewType As Long)"
        PRINT "    Const pcCmdNum = ""01"": Const pcMsgTtl = mcModNam & "".Run_Command_"" & pcCmdNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This command is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Run Command 02:  Process 0002"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Command_02(ByVal lngViewType As Long)"
        PRINT "    Const pcCmdNum = ""02"": Const pcMsgTtl = mcModNam & "".Run_Command_"" & pcCmdNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This command is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Run Command 03:  Process 0003"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Command_03(ByVal lngViewType As Long)"
        PRINT "    Const pcCmdNum = ""03"": Const pcMsgTtl = mcModNam & "".Run_Command_"" & pcCmdNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This command is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Report Mechanism"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Setup_Report(ByVal strDefault As String, ByVal blnUseList As Boolean)"
        PRINT "    Dim RegRPT    As clsRegRPT"
        PRINT "    Set RegRPT = New clsRegRPT"
        PRINT "    Dim mvrnRptLst As Variant"
        PRINT "    With RegRPT"
        PRINT "        Call .Activate(blnUseList)  ' blnUseList mcUseStdList mcUseTplList"
        PRINT "        mvrnRptLst = Array( _"
        PRINT "            .GetRptNum(""ReportName_01""), _"
        PRINT "            .GetRptNum(""ReportName_02""), _"
        PRINT "            .GetRptNum(""ReportName_03"") _"
        PRINT "        )"
        PRINT "        mstrRowSrcRPT = .GetRptLst(mvrnRptLst, strDefault, mcNoBlank)"
        PRINT "        mintRowDefRPT = .DefaultItem"
        PRINT "    End With"
        PRINT "    Set RegRPT = Nothing"
        PRINT "    Me.cboRptList.RowSource = mstrRowSrcRPT"
        PRINT "    Call Reset_ReportList"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Reset_ReportList()"
        PRINT "    If Len(mstrRowSrcRPT) > 0 Then"
        PRINT "        ' Set report list value to default"
        PRINT "        Me.cboRptList.Value = mintRowDefRPT"
        PRINT "        ' Reset report buttons"
        PRINT "        Call Reset_ReportButtons"
        PRINT "    Else"
        PRINT "        ' Disable report mechanism"
        PRINT "        Call Disable_ReportButtons"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Reset_ReportButtons()"
        PRINT "    ' Reset report buttons"
        PRINT "    Me.cboRptList.Enabled = True"
        PRINT "    Me.tglPrnRpt.Enabled = (Me.cboRptList.Value > 0)"
        PRINT "    Me.tglPrvRpt.Enabled = Me.tglPrnRpt.Enabled"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Public Sub Disable_ReportButtons()"
        PRINT "    ' Disable report mechanism"
        PRINT "    Me.cboRptList.Enabled = False"
        PRINT "    Me.tglPrnRpt.Enabled = False"
        PRINT "    Me.tglPrvRpt.Enabled = False"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cboRptList_AfterUpdate()"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Reset report buttons"
        PRINT "    Call Reset_ReportButtons"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cboRptList_DblClick(Cancel As Integer)"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Reset report list value"
        PRINT "    Call Reset_ReportList"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub tglPrvRpt_Click()"
        PRINT "    ' Set the toggle state"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.tglPrvRpt.Value = True"
        PRINT "    ' Print the report"
        PRINT "    Call Run_Report(acViewPreview)"
        PRINT "    ' Reset the toggle state"
        PRINT "    Me.tglPrvRpt.Value = False"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub tglPrnRpt_Click()"
        PRINT "    ' Set the toggle state"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.tglPrnRpt.Value = True"
        PRINT "    ' Print the report"
        PRINT "    Call Run_Report(acViewNormal)"
        PRINT "    ' Reset the toggle state"
        PRINT "    Me.tglPrnRpt.Value = False"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Set_Report_Criteria(ByVal strRPT As String, ByRef mrstRPT As clsRunRPT)"
        PRINT "    ' Set report criteria"
        PRINT "    Select Case strRPT"
        PRINT "        'Case ""01""    ' Report 0001"
        PRINT "        'Case ""02""    ' Report 0002"
        PRINT "        'Case ""03""    ' Report 0003"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Report(ByVal lngViewType As Long)  ' acViewPreview acViewNormal"
        PRINT "    Const pcMsgTtl = mcModNam & "".Run_Report"""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Get the report number"
        PRINT "    Dim strRPT As String: strRPT = Format$(Me.cboRptList.Value, ""00"")"
        PRINT "    ' Call the specified report"
        PRINT "    Select Case strRPT"
        PRINT "        Case ""01"": Call Run_Report_01(lngViewType)    ' Report 0001"
        PRINT "        Case ""02"": Call Run_Report_02(lngViewType)    ' Report 0002"
        PRINT "        Case ""03"": Call Run_Report_03(lngViewType)    ' Report 0003"
        PRINT "        Case Else"
        PRINT "            MsgBox ""This Report ("" & strRPT & "") is not registered."", vbInformation, pcMsgTtl"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Run Report 01:  Report 0001"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Report_01(ByVal lngViewType As Long)"
        PRINT "    Const pcRptNum = ""01"": Const pcMsgTtl = mcModNam & "".Run_Report_"" & pcRptNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This report is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Run Report 02:  Report 0002"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Report_02(ByVal lngViewType As Long)"
        PRINT "    Const pcRptNum = ""02"": Const pcMsgTtl = mcModNam & "".Run_Report_"" & pcRptNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This report is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "' Run Report 03:  Report 0003"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Run_Report_03(ByVal lngViewType As Long)"
        PRINT "    Const pcRptNum = ""03"": Const pcMsgTtl = mcModNam & "".Run_Report_"" & pcRptNum"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This report is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ANYPOP = Build module:  pop_FrmName
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA ANYPOP,pop_FrmName ,'Popup Module'
        EXEC ut_zzVBA ANYPOP,tpl_PopAdd  ,"Add New Data"
        EXEC ut_zzVBA ANYPOP,tpl_TestPops,'Test Popup Forms'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecANYPOP) BEGIN
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnOpenArgs                As Variant"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is opened"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Open(Cancel As Integer)"
        PRINT "    ' Read calling arguments"
        PRINT "    mvrnOpenArgs = Nz(Me.OpenArgs, """")"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is loaded"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Load()"
        PRINT "    ' Initialize:  Form Properties"
        PRINT "    Call Form_Setup"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when record becomes current"
        PRINT "'###################################################################################################"
        PRINT "' BeforeUpdate(frm) => AfterUpdate(frm) => Exit(ctl) => LostFocus(ctl) => Current(frm)"
        PRINT "Private Sub Form_Current()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is unloaded"
        PRINT "'###################################################################################################"
        PRINT "' Unload => Deactivate => Close"
        PRINT "Private Sub Form_Unload(Cancel As Integer)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is closed"
        PRINT "'###################################################################################################"
        PRINT "' Unload => Deactivate => Close"
        PRINT "Private Sub Form_Close()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Commands"
        PRINT "'###################################################################################################"
        PRINT "Private Sub cmdSave_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdSave_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        PRINT "    'oCmd.Close acForm, Me.Name"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdQuit_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdQuit_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        PRINT "    'oCmd.Close acForm, Me.Name"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdAccept_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdAccept_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        PRINT "    'oCmd.Close acForm, Me.Name"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdCancel_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdCancel_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        PRINT "    'oCmd.Close acForm, Me.Name"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize form properties and mechanisms"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Form_Setup()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Form_Setup"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup form display values"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Me.Caption = mcModTtl"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup form process values"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Me.AllowFilters = True"
        PRINT "    Me.AllowAdditions = True"
        PRINT "    Me.AllowEdits = True"
        PRINT "    Me.AllowDeletions = True"
        PRINT "    Me.DataEntry = False"
        PRINT "    'e.UniqueTable = """""
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Reset the hourglass"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call DoCmd.Hourglass(False)"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Hide the cursor"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup Controls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Controls_Setup"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Controls"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Controls_Setup()"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Reset()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Requery()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Clear()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        SET @IDN = 1; SET @CNT = 2
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @IncDup = CASE SUBSTRING(@StdTx3,@IDN,1) WHEN 'I' THEN 1 WHEN 'D' THEN 1 ELSE 0 END
            SET @IncFld = CASE SUBSTRING(@StdTx3,@IDN,1) WHEN 'I' THEN 1 ELSE 0 END
            SET @NUX = CASE @IsCbox WHEN 1 THEN 'NBR'  ELSE 'TXT'  END
            SET @CVX = CASE @IsCbox WHEN 1 THEN 'CLng' ELSE 'CStr' END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT ""
            PRINT ""
            PRINT "'###################################################################################################"
            PRINT "' Manage Fld"+@SFX+""
            PRINT "'###################################################################################################"
            IF @IncFld = 1 BEGIN
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_AfterUpdate()"
            PRINT "    Me.cmdHideCursor.SetFocus"
            PRINT "    Me."+@PFX+"Fld"+@SFX+" = Nz(Me."+@PFX+"Fld"+@SFX+", gcNul"+@NUX+")"
            PRINT "    Call Controls_Reset"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_DblClick(Cancel As Integer)"
            PRINT "    Me."+@PFX+"Fld"+@SFX+" = gcNul"+@NUX
            PRINT "    Call "+@PFX+"Fld"+@SFX+"_AfterUpdate"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            IF @IsCbox = 0 BEGIN
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_KeyPress(KeyAscii As Integer)"
            PRINT "    'If kys.Get_Any_Mixed(KeyAscii) Then Beep"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            END
            END
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ANYSUB = Build module:  sub_FrmName
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA ANYSUB,sub_FrmName,'SubForm Module'
        EXEC ut_zzVBA ANYSUB,tpl_Sub010 ,'SubForm Template'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecANYSUB) BEGIN
        SET @StdTx3 = LEFT(@StdTx3+REPLICATE('X',LEN(@StdTx2)),LEN(@StdTx2))
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is opened"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Open(Cancel As Integer)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is loaded"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Load()"
        PRINT "    ' Initialize:  Form Properties"
        PRINT "    Call Form_Setup"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when record becomes current"
        PRINT "'###################################################################################################"
        PRINT "' BeforeUpdate(frm) => AfterUpdate(frm) => Exit(ctl) => LostFocus(ctl) => Current(frm)"
        PRINT "Private Sub Form_Current()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Open the corresponding form"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Form_DblClick(Cancel As Integer)"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Assign parameters"
        PRINT "    mstrOpenText = """""
        PRINT "    mstrOpenName = mstrOpenText"
        PRINT "    mstrFiltName = """""
        PRINT "    mstrWhereTxt = """""
        PRINT "    mstrOpenArgs = """""
        PRINT "    mintOpenView = acNormal"
        PRINT "    mintDataMode = acFormPropertySettings"
        PRINT "    mintWindMode = acWindowNormal"
        PRINT "    ' Open the form ignoring any error conditions"
        PRINT "    If Len(mstrOpenName) > 0 Then"
        PRINT "        If Me.Dirty Then Call SaveIt"
        PRINT "        On Error Resume Next"
        PRINT "        DoCmd.OpenForm mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt, mintDataMode, mintWindMode, mstrOpenArgs"
        PRINT "        On Error GoTo 0"
        PRINT "    Else"
        PRINT "        MsgBox ""This form is not available."", vbOKOnly, ""Open "" & mstrOpenText"
        PRINT "    End If"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Records"
        PRINT "'###################################################################################################"
        PRINT "Private Sub SaveIt(Optional ByVal sglDUR As Single)"
        PRINT "    DoCmd.RunCommand acCmdSaveRecord"
        PRINT "    Call PauseFor(sglDUR)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub ReadIt(Optional ByVal sglDUR As Single)"
        PRINT "    Call PauseFor(sglDUR)"
        PRINT "    Me.Refresh      ' Read form source values"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub LoadIt(Optional ByVal sglDUR As Single)"
        PRINT "    Call PauseFor(sglDUR)"
        PRINT "    Call Me.Requery ' Requery form source records"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize form properties and mechanisms"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Form_Setup()"
        PRINT "    Const pcMsgTtl = mcModNam & "".Form_Setup"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup form process values"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Me.AllowFilters = True"
        PRINT "    Me.AllowAdditions = True"
        PRINT "    Me.AllowEdits = True"
        PRINT "    Me.AllowDeletions = True"
        PRINT "    Me.DataEntry = False"
        PRINT "    'e.UniqueTable = """""
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Reset the hourglass"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call DoCmd.Hourglass(False)"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Hide the cursor"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Setup Controls"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Controls_Setup"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Manage Controls"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Controls_Setup()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Reset()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Defaults()"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Requery()"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Controls_Clear()"
        PRINT "    Call Controls_Reset"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        /*------------------------------------------------------------------------------------------
            EXEC ut_zzVBA ANYFRM,frm_FrmName,'StdForm Module' ,'CTCT','XXII'
            EXEC ut_zzVBA ANYTAB,tab_FrmName,'TabForm Module' ,'CTCT','XXII'
            EXEC ut_zzVBA ANYLST,lst_FrmName,'ListForm Module','CTCT','XXII'
        ------------------------------------------------------------------------------------------*/
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        PRINT "' EXEC ut_zzVBA "+@BldCOD+","+@InpTxt+",'"+@StdTx1+"','"+@StdTx2+"','"+@StdTx3+"'"
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        SET @IDN = 1; SET @CNT = LEN(@StdTx2)
        WHILE @IDN <= @CNT BEGIN
            SET @IsCbox = CASE SUBSTRING(@StdTx2,@IDN,1) WHEN 'C' THEN 1 ELSE 0 END
            SET @IncDup = CASE SUBSTRING(@StdTx3,@IDN,1) WHEN 'I' THEN 1 WHEN 'D' THEN 1 ELSE 0 END
            SET @IncFld = CASE SUBSTRING(@StdTx3,@IDN,1) WHEN 'I' THEN 1 ELSE 0 END
            SET @NUX = CASE @IsCbox WHEN 1 THEN 'NBR'  ELSE 'TXT'  END
            SET @CVX = CASE @IsCbox WHEN 1 THEN 'CLng' ELSE 'CStr' END
            SET @PFX = CASE @IsCbox WHEN 1 THEN 'cbo'  ELSE 'txt'  END
            SET @SFX = RIGHT('000'+CAST(@IDN AS varchar(10)),3)
            SET @IDN = @IDN+1
            PRINT ""
            PRINT ""
            PRINT "'###################################################################################################"
            PRINT "' Manage Fld"+@SFX+""
            PRINT "'###################################################################################################"
            IF @IncFld = 1 BEGIN
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_AfterUpdate()"
            PRINT "    Me.cmdHideCursor.SetFocus"
            PRINT "    Me."+@PFX+"Fld"+@SFX+" = Nz(Me."+@PFX+"Fld"+@SFX+", gcNul"+@NUX+")"
            PRINT "    Call Controls_Reset"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_DblClick(Cancel As Integer)"
            PRINT "    Me."+@PFX+"Fld"+@SFX+" = gcNul"+@NUX
            PRINT "    Call "+@PFX+"Fld"+@SFX+"_AfterUpdate"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            IF @IsCbox = 0 BEGIN
            PRINT "Private Sub "+@PFX+"Fld"+@SFX+"_KeyPress(KeyAscii As Integer)"
            PRINT "    'If kys.Get_Any_Mixed(KeyAscii) Then Beep"
            PRINT "End Sub"
            PRINT "'==================================================================================================="
            END
            END
        END
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ANYBAS = Build module:  basBasName
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA ANYBAS,basBasName,'Manage AnyBase'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecANYBAS) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As New clsUtlWTX"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mTXT                        As String"
        PRINT "Private mTX1                        As String"
        PRINT "Private mTX2                        As String"
        PRINT "Private mTX3                        As String"
        PRINT "Private mSPC                        As String * 100"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Test Code"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Run_Test()"
        PRINT "    Call Test01"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Test Code XX"
        PRINT "'###################################################################################################"
        PRINT "Public Sub TestXX()"
        PRINT "    Const pcMsgTtl = mcModNam & "".TestXX"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "'    ' Initialize current database"
        PRINT "'    Dim dbs    As Database"
        PRINT "'    Set dbs = CurrentDb"
        PRINT ""
        PRINT "'    ' Initialize recordset objects"
        PRINT "'    Dim rst    As Recordset"
        PRINT ""
        PRINT "'    ' Initialize query objects"
        PRINT "'    Dim qdf    As QueryDef"
        PRINT "'    Set qdf = dbs.CreateQueryDef("""")"
        PRINT ""
        PRINT "'    ' Initialize table objects"
        PRINT "'    Dim tdf    As TableDef"
        PRINT "'    Dim tds    As TableDefs"
        PRINT "'    Set tds = dbs.TableDefs"
        PRINT ""
        PRINT "'    ' Initialize current project"
        PRINT "'    Dim prj As Object"
        PRINT "'    Set prj = Application.CurrentProject"
        PRINT ""
        PRINT "'    ' Initialize access object"
        PRINT "'    Dim obj As AccessObject"
        PRINT ""
        PRINT "'    ' Display object list"
        PRINT "'    For Each obj In prj.AllReports   ' AllReports AllForms AllModules"
        PRINT "'    '    Debug.Print obj.Name"
        PRINT "'    Next obj"
        PRINT ""
        PRINT "'    ' Declare working variables"
        PRINT ""
        PRINT "'    ' Define working constants"
        PRINT ""
        PRINT "'    ' Initialize working objects"
        PRINT "'    Dim cls    As clsXxxZzz"
        PRINT "'    Set cls = New clsXxxZzz"
        PRINT ""
        PRINT "'    ' Process working objects"
        PRINT "'    With cls"
        PRINT "'    End With"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Test Code ZZ"
        PRINT "'###################################################################################################"
        PRINT "Public Sub TestZZ()"
        PRINT "    Const pcMsgTtl = mcModNam & "".TestZZ"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Initialize working objects"
        PRINT "    Dim cls    As Application"
        PRINT "    Set cls = New Application"
        PRINT ""
        PRINT "    ' Initialize working constants"
        PRINT "    Const pCMA   As String = "","""
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim strSQL   As String"
        PRINT "    Dim intIDX   As Integer"
        PRINT "    Dim intCNT   As Integer"
        PRINT "    Dim vrnLST() As Variant"
        PRINT "    Dim vrnITM   As Variant"
        PRINT ""
        PRINT "    ' Process the class"
        PRINT "    With cls"
        PRINT "    End With"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ANYCLS = Build module:  clsClsName
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA ANYCLS,clsClsNam,'Manage Any Class',cls
        EXEC ut_zzVBA ANYCLS,clsSptRcm,'Manage Spot Reclamation',spt
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecANYCLS) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "Private wtx                         As clsUtlWTX                          ' Write Text"
        PRINT "'rivate wtz                         As clsUtlWTX                          ' Write Text"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "Private mblnWrtSQL                  As Boolean                            ' Write SQL statement to temp file"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnSKeyID                  As Variant                            '"
        PRINT "Private mvrnFKeyID                  As Variant                            '"
        PRINT "Private mvrnTxtVal                  As Variant                            '"
        PRINT "Private mvrnNumVal                  As Variant                            '"
        PRINT "'***************************************************************************************************"
        PRINT "Private mvrnIKeyID                  As Variant                            '"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Initialize Module Objects"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Class_Initialize()"
        PRINT "    ' Initialize Objects"
        PRINT "    Set wtx = New clsUtlWTX"
        PRINT "    'et wtz = New clsUtlWTX"
        PRINT "    ' Initialize Flags"
        PRINT "    mblnWrtSQL = False"
        PRINT "    ' Initialize Properties"
        PRINT "    Call Class_Defaults"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Terminate()"
        PRINT "    If mblnWrtSQL Then Call wtx.AX_WrtTmp"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub Class_Defaults()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Standard Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let WrtSQL(ByVal vNewVal As Boolean):             mblnWrtSQL = vNewVal: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Default Properties"
        PRINT "'###################################################################################################"
        PRINT "Private Property Get NulTXT() As String:                               NulTXT = ""Null"": End Property"
        PRINT "Private Property Get NulVAL() As Variant:                                NulVAL = Null: End Property"
        PRINT "Private Property Get ZeroVAL() As Long:                                    ZeroVAL = 0: End Property"
        PRINT "Private Property Get EmptyID() As Long:                                    EmptyID = 0: End Property"
        PRINT "Private Property Get UnknownID() As Long:                                UnknownID = 1: End Property"
        PRINT "Private Property Get FirstID() As Long:                                 FirstID = 1001: End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Module Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Column Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let SKeyID(ByVal vNewVal As Variant)"
        PRINT "    mvrnSKeyID = Null"
        PRINT "    If IsNumeric(vNewVal) Then"
        PRINT "        If vNewVal > 0 Then mvrnSKeyID = CLng(vNewVal)"
        PRINT "    End If"
        PRINT "End Property"
        PRINT "Public Property Get SKeyID() As Variant"
        PRINT "    SKeyID = Nz(mvrnSKeyID, EmptyID)"
        PRINT "End Property"
        PRINT "Public Property Get SKeyID_TX() As Variant"
        PRINT "    SKeyID_TX = Nz(mvrnSKeyID, EmptyID)"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let FKeyID(ByVal vNewVal As Variant)"
        PRINT "    mvrnFKeyID = Null"
        PRINT "    If IsNumeric(vNewVal) Then"
        PRINT "        If vNewVal > 0 Then mvrnFKeyID = CLng(vNewVal)"
        PRINT "    End If"
        PRINT "End Property"
        PRINT "Public Property Get FKeyID() As Variant"
        PRINT "    FKeyID = Nz(mvrnFKeyID, UnknownID)"
        PRINT "End Property"
        PRINT "Public Property Get FKeyID_TX() As Variant"
        PRINT "    FKeyID_TX = Nz(mvrnFKeyID, UnknownID)"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let TxtVal(ByVal vNewVal As Variant)"
        PRINT "    mvrnTxtVal = Null"
        PRINT "    If Not IsNull(vNewVal) Then"
        PRINT "        mvrnTxtVal = Trim$(Replace$(CStr(vNewVal), """""""", """"))"
        PRINT "    End If"
        PRINT "End Property"
        PRINT "Public Property Get TxtVal() As Variant"
        PRINT "    TxtVal = Trim$(Nz(mvrnTxtVal, """"))"
        PRINT "End Property"
        PRINT "Public Property Get TxtVal_TX() As Variant"
        PRINT "    TxtVal_TX = """""""" & Trim$(Nz(mvrnTxtVal, """")) & """""""""
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "Public Property Let NumVal(ByVal vNewVal As Variant)"
        PRINT "    mvrnNumVal = Null"
        PRINT "    If IsNumeric(vNewVal) Then"
        PRINT "        If vNewVal > 0 Then mvrnNumVal = CLng(vNewVal)"
        PRINT "    End If"
        PRINT "End Property"
        PRINT "Public Property Get NumVal() As Variant"
        PRINT "    NumVal = Nz(mvrnNumVal, EmptyID)"
        PRINT "End Property"
        PRINT "Public Property Get NumVal_TX() As Variant"
        PRINT "    NumVal_TX = Nz(mvrnNumVal, NulTXT)"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Sync Properties"
        PRINT "'###################################################################################################"
        PRINT "Public Property Let IKeyID(ByVal vNewVal As Variant)"
        PRINT "    mvrnIKeyID = Null"
        PRINT "    If IsNumeric(vNewVal) Then"
        PRINT "        If vNewVal > 0 Then mvrnIKeyID = CLng(vNewVal)"
        PRINT "    End If"
        PRINT "End Property"
        PRINT "Public Property Get IKeyID() As Variant"
        PRINT "    IKeyID = Nz(mvrnIKeyID, EmptyID)"
        PRINT "End Property"
        PRINT "Public Property Get IKeyID_TX() As Variant"
        PRINT "    IKeyID_TX = Nz(mvrnIKeyID, EmptyID)"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Custom Properties"
        PRINT "'###################################################################################################"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' CLEAR:  Clear Property Variables"
        PRINT "'###################################################################################################"
        PRINT "Public Function Clear() As Boolean"
        PRINT "    Const pcMsgTtl = mcModNam & "".Clear"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    mvrnSKeyID = mcNulNBR"
        PRINT "    mvrnFKeyID = mcNulNBR"
        PRINT "    mvrnIKeyID = mcNulNBR"
        PRINT "    mvrnTxtVal = mcNulTXT"
        PRINT "    mvrnNumVal = mcNulNBR"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' EXISTS:  Check to see if the specified record exists"
        PRINT "'###################################################################################################"
        PRINT "Public Function Exists( _"
        PRINT "    Optional ByVal strTxtVal As String, _"
        PRINT "    Optional ByVal lngNumVal As Long _"
        PRINT ") As Boolean"
        PRINT "    Const pcMsgTtl = mcModNam & "".Exists"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Resolve criteria values"
        PRINT "    strTxtVal = Trim$(strTxtVal)"
        PRINT "    If Len(strTxtVal) = 0 Then"
        PRINT "        strTxtVal = TxtVal"
        PRINT "    End If"
        PRINT "    If lngNumVal = 0 Then"
        PRINT "        lngNumVal = NumVal"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize current database"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Dim rst As Recordset"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""SELECT"""
        PRINT "    .AX ""    COUNT(*) As RecCnt"""
        PRINT "    .AX ""FROM"""
        PRINT "    .AX ""    pfx_TblNam tbl"""
        PRINT "    .AX ""WHERE """
        PRINT "    .AX ""    tbl.TxtVal = '"" & strTxtVal & ""'"""
        PRINT "    .AX ""AND tbl.NumVal = "" & lngNumVal & """""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If False Then Call wtx.AX_WrtTmp  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set rst = dbs.OpenRecordset(wtx.Text)"
        PRINT "    With rst"
        PRINT "        Exists = (.Fields(""RecCnt"") > 0)"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' READ:  Read data from the specified record"
        PRINT "'###################################################################################################"
        PRINT "Public Function Read( _"
        PRINT "    ByVal lngSKeyID As Long _"
        PRINT ") As Boolean"
        PRINT "    Const pcMsgTtl = mcModNam & "".Read"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Resolve criteria values"
        PRINT "    If lngSKeyID = 0 Then"
        PRINT "        lngSKeyID = SKeyID"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    Call Clear"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize current database"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Dim rst As Recordset"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""SELECT"""
        PRINT "    .AX ""    tbl.*"""
        PRINT "    .AX ""FROM"""
        PRINT "    .AX ""    pfx_TblNam tbl"""
        PRINT "    .AX ""WHERE """
        PRINT "    .AX ""    tbl.SKeyID = "" & lngSKeyID & """""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If False Then Call wtx.AX_WrtTmp  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Read the data elements from the record"
        PRINT "    Set rst = dbs.OpenRecordset(wtx.Text)"
        PRINT "    With rst"
        PRINT "        Do While Not .EOF"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            FKeyID = .Fields(""FKeyID"")"
        PRINT "            TxtVal = .Fields(""TxtVal"")"
        PRINT "            NumVal = .Fields(""NumVal"")"
        PRINT "            '---------------------------------------------------------------------------------------"
        PRINT "            Read = True: Exit Do"
        PRINT "        Loop"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' ADDNEW:  Add a new data record"
        PRINT "'###################################################################################################"
        PRINT "Public Function AddNew() As Boolean"
        PRINT "    Const pcMsgTtl = mcModNam & "".AddNew"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Verify required data"
        PRINT "    If Len(TxtVal) = 0 Then"
        PRINT "        Exit Function"
        PRINT "    End If"
        PRINT "    If NumVal = UnknownID Then"
        PRINT "        Exit Function"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Check for existence"
        PRINT "    If Exists(TxtVal, NumVal) Then"
        PRINT "        AddNew = False: GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize current database"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Dim qdf As QueryDef"
        PRINT "    Set qdf = dbs.CreateQueryDef("""")"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""INSERT INTO pfx_TblNam ("""
        PRINT "    .AX ""    FKeyID,"""
        PRINT "    .AX ""    TxtVal,"""
        PRINT "    .AX ""    NumVal"""
        PRINT "    .AX "") VALUES ("""
        PRINT "    .AX ""    "" & FKeyID_TX & "","""
        PRINT "    .AX ""    "" & TxtVal_TX & "","""
        PRINT "    .AX ""    "" & NumVal_TX & """""
        PRINT "    .AX "")"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If False Then Call wtx.AX_WrtTmp  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    qdf.SQL = wtx.Text: Call qdf.Execute: AddNew = True"
        PRINT "    '***********************************************************************************************"
        PRINT "    mvrnSKeyID = GetMaxSKey"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' UPDATE:  Update the current data record"
        PRINT "'###################################################################################################"
        PRINT "Public Function Update() As Boolean"
        PRINT "    Const pcMsgTtl = mcModNam & "".Update"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Verify required data"
        PRINT "    If SKeyID = UnknownID Then"
        PRINT "        Exit Function"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize current database"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Dim qdf As QueryDef"
        PRINT "    Set qdf = dbs.CreateQueryDef("""")"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""UPDATE"""
        PRINT "    .AX ""    pfx_TblNam"""
        PRINT "    .AX ""SET"""
        PRINT "    .AX ""    FKeyID = "" & FKeyID_TX & "","""
        PRINT "    .AX ""    TxtVal = "" & TxtVal_TX & "","""
        PRINT "    .AX ""    NumVal = "" & NumVal_TX & """""
        PRINT "    .AX ""WHERE """
        PRINT "    .AX ""    SKeyID = "" & SKeyID_TX & """""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If False Then Call wtx.AX_WrtTmp  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    qdf.SQL = wtx.Text: Call qdf.Execute: Update = True"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' GETVAL:  Lookup SKey from NatKeys"
        PRINT "'###################################################################################################"
        PRINT "Public Function LookupSKey( _"
        PRINT "    Optional ByVal strTxtVal As String, _"
        PRINT "    Optional ByVal lngNumVal As Long _"
        PRINT ") As Long"
        PRINT "    Const pcMsgTtl = mcModNam & "".LookupSKey"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Verify required data"
        PRINT "    If Len(TxtVal) = 0 Then"
        PRINT "        Exit Function"
        PRINT "    End If"
        PRINT "    If NumVal = UnknownID Then"
        PRINT "        Exit Function"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize current database"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Dim rst As Recordset"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""SELECT"""
        PRINT "    .AX ""    tbl.SKeyID AS SKey"""
        PRINT "    .AX ""FROM"""
        PRINT "    .AX ""    pfx_TblNam tbl"""
        PRINT "    .AX ""WHERE """
        PRINT "    .AX ""    tbl.TxtVal = '"" & strTxtVal & ""'"""
        PRINT "    .AX ""AND tbl.NumVal = "" & NumVal_TX & """""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If False Then Call wtx.AX_WrtTmp  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set rst = dbs.OpenRecordset(wtx.Text)"
        PRINT "    With rst"
        PRINT "        Do While Not .EOF"
        PRINT "            LookupSKey = .Fields(""SKey""): Exit Do"
        PRINT "        Loop"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'###################################################################################################"
        PRINT "' GETVAL:  Get the maximum SKey"
        PRINT "'###################################################################################################"
        PRINT "Public Function GetMaxSKey() As Long"
        PRINT "    Const pcMsgSer = mcModNam & "".GetMaxSKey"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize current database"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb"
        PRINT "    Dim rst As Recordset"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""SELECT"""
        PRINT "    .AX ""    MAX(tbl.SKeyID) AS SKey"""
        PRINT "    .AX ""FROM"""
        PRINT "    .AX ""    pfx_TblNam tbl"""
        PRINT "    .AX ""WHERE """
        PRINT "    .AX ""    tbl.SKeyID >= 1001"""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If False Then Call wtx.AX_WrtTmp  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Set rst = dbs.OpenRecordset(wtx.Text)"
        PRINT "    With rst"
        PRINT "        Do While Not .EOF"
        PRINT "            GetMaxSKey = Nz(.Fields(""SKey""), mcNulNBR): Exit Do"
        PRINT "        Loop"
        PRINT "    End With"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgSer & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' SYNC:  Synchronize imported text values with reference data"
        PRINT "'###################################################################################################"
        PRINT "Public Function SyncImxID() As Boolean"
        PRINT "    Const pcMsgTtl = mcModNam & "".SyncImxID"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Verify required data"
        PRINT "    If SKeyID = EmptyID Then"
        PRINT "        Exit Function"
        PRINT "    End If"
        PRINT "    If IKeyID = EmptyID Then"
        PRINT "        Exit Function"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize current database"
        PRINT "    Dim dbs As Database"
        PRINT "    Set dbs = CurrentDb()"
        PRINT "    Dim qdf As QueryDef"
        PRINT "    Set qdf = dbs.CreateQueryDef("""")"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Build query"
        PRINT "    '***********************************************************************************************"
        PRINT "    Call wtx.AX_Clear: With wtx"
        PRINT "    '***********************************************************************************************"
        PRINT "    .AX ""UPDATE"""
        PRINT "    .AX ""    imx_TtlTxt"""
        PRINT "    .AX ""SET"""
        PRINT "    .AX ""    SKeyID = "" & SKeyID_TX & """""
        PRINT "    .AX ""WHERE """
        PRINT "    .AX ""    IKeyID = "" & IKeyID_TX & """""
        PRINT "    '***********************************************************************************************"
        PRINT "    End With: If False Then Call wtx.AX_WrtTmp  ' False True"
        PRINT "    '***********************************************************************************************"
        PRINT "    ' Process query"
        PRINT "    '***********************************************************************************************"
        PRINT "    qdf.SQL = wtx.Text: Call qdf.Execute: SyncImxID = True"
        PRINT "    '***********************************************************************************************"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' PACK:  Pack/Open delimited data record"
        PRINT "'###################################################################################################"
        PRINT "Public Function PackData() As String"
        PRINT "    Const pcMsgTtl = mcModNam & "".PackData"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize working variables"
        PRINT "    Const pcDLM As String = ""|"""
        PRINT "    Dim vrnLST  As Variant"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Pack the data into a delimited string"
        PRINT "    vrnLST = Array( _"
        PRINT "        SKeyID, _"
        PRINT "        FKeyID, _"
        PRINT "        TxtVal _"
        PRINT "    )"
        PRINT "    PackData = CStr(Join(vrnLST, pcDLM))"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT "Public Function OpenData(ByVal strREC As String) As Boolean"
        PRINT "    Const pcMsgTtl = mcModNam & "".OpenData"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Initialize working variables"
        PRINT "    Const pcDLM As String = ""|"""
        PRINT "    Const pcUBD As Integer = 9"
        PRINT "    Dim vrnLST  As Variant"
        PRINT "    Dim intIDX  As Integer"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Unpack the data from the delimited string"
        PRINT "    vrnLST = Split(strREC, pcDLM)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Assign data values"
        PRINT "    If UBound(vrnLST) >= pcUBD Then"
        PRINT "        SKeyID = vrnLST(intIDX): intIDX = intIDX+1"
        PRINT "        FKeyID = vrnLST(intIDX): intIDX = intIDX+1"
        PRINT "        TxtVal = vrnLST(intIDX): intIDX = intIDX+1"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Return success"
        PRINT "    OpenData = True"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' CLEAN:  Clean the text"
        PRINT "'###################################################################################################"
        PRINT "Public Function CleanText(ByVal strTXT As String) As String"
        PRINT "    Dim lngPS1 As Long"
        PRINT "    Dim lngPS2 As Long"
        PRINT "    Dim lngLN1 As Long"
        PRINT "    Dim strTX1 As String"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Prep text for processing"
        PRINT "    strTXT = Trim$(strTXT)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Strip standard strings"
        PRINT "    strTXT = Trim$(Replace$(strTXT, "" {}"", """"))"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Strip bracketed string"
        PRINT "    lngPS1 = InStr(strTXT, ""{"")"
        PRINT "    lngPS2 = InStr(strTXT, ""}"")"
        PRINT "    lngLN1 = lngPS2 - lngPS1+1"
        PRINT "    If lngPS1 > 0 And lngPS2 > 0 And lngLN1 > 0 Then"
        PRINT "        strTX1 = Mid$(strTXT, lngPS1, lngLN1)"
        PRINT "        strTXT = Trim$(Replace$(strTXT, strTX1, """"))"
        PRINT "    End If"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Strip prefix characters"
        PRINT "    Do While Left$(strTXT, 1) = "":"": strTXT = Trim$(Right$(strTXT, Len(strTXT) - 1)): Loop"
        PRINT "    Do While Left$(strTXT, 1) = "";"": strTXT = Trim$(Right$(strTXT, Len(strTXT) - 1)): Loop"
        PRINT ""
        PRINT "    ' Strip suffix characters"
        PRINT "    Do While Right$(strTXT, 1) = "":"": strTXT = Trim$(Left$(strTXT, Len(strTXT) - 1)): Loop"
        PRINT "    Do While Right$(strTXT, 1) = "";"": strTXT = Trim$(Left$(strTXT, Len(strTXT) - 1)): Loop"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "    ' Return clean text"
        PRINT "    CleanText = Trim$(strTXT)"
        PRINT "    '-----------------------------------------------------------------------------------------------"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ANYRPT = Build module:  rpt_RptNam
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA ANYRPT,rpt_RptNam,'Manage Report Values'
        EXEC ut_zzVBA ANYRPT,tpl_NARROW
        EXEC ut_zzVBA ANYRPT,tpl_WIDE
        EXEC ut_zzVBA ANYRPT,rpt_UTL_Ann_Summ,'Utilities: Annual Summary'
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecANYRPT) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' Module Objects"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Flags"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Constants"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Variables"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT "' Module Properties"
        PRINT "'***************************************************************************************************"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when report is activated"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_Activate()"
        PRINT "    If Len(RunSQL.Title01) > 0 Then Me.lblTitle01.Caption = RunSQL.Title01"
        PRINT "    'f Len(RunSQL.Title02) > 0 Then Me.lblTitle02.Caption = RunSQL.Title02"
        PRINT "    'f Len(RunSQL.Title03) > 0 Then Me.lblTitle03.Caption = RunSQL.Title03"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when report is opened"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_Open(Cancel As Integer)"
        PRINT "    If Len(RunSQL.Sql01) > 0 Then Me.RecordSource = RunSQL.Sql01"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is loaded"
        PRINT "'###################################################################################################"
        PRINT "Private Sub Report_NoData(Cancel As Integer)"
        PRINT "    MsgBox ""There is not any data which meets the specified criteria."", _"
        PRINT "        vbInformation, Me.lblTitle01.Caption & "" Report"""
        PRINT "    Cancel = True"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- CLSTCN = Build module:  clsTxtCon
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBA CLSTCN
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecCLSTCN) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Standard text string list delimiters"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDLM                 As String = "";""         ' Separate items"
        PRINT "Private Const mcDLG                 As String = "":""         ' Separate groups"
        PRINT "Private Const mcDLX                 As String = ""`""         ' Separate lines"
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Quote constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcNQT                 As String = """""
        PRINT "Private Const mcSQT                 As String = ""'"""
        PRINT "Private Const mcDQT                 As String = """""""""
        PRINT "Private Const mcTQT                 As String = ""#"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Miscellaneous constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcNope                As String = ""***NotUsed***"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Variable data categories"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatCatTXT           As Long = 1"
        PRINT "Private Const mcDatCatBLN           As Long = 2"
        PRINT "Private Const mcDatCatNUM           As Long = 3"
        PRINT "Private Const mcDatCatDAT           As Long = 4"
        PRINT "Private Const mcDatCatVRN           As Long = 5"
        PRINT "Private Const mcDatCatENM           As Long = 6"
        PRINT "Private Const mcDatCatNON           As Long = 7"
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Variable values"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatValTXT           As String = """""""""""""
        PRINT "Private Const mcDatValBLN           As String = ""False"""
        PRINT "Private Const mcDatValNUM           As String = ""0"""
        PRINT "Private Const mcDatValDAT           As String = ""#12:00:00 AM#"""
        PRINT "Private Const mcDatValVRN           As String = ""Null"""
        PRINT "Private Const mcDatValENM           As String = ""0"""
        PRINT "Private Const mcDatValNON           As String = """""""""""""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Variable null values"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatNvuTXT           As String = """""""""""""
        PRINT "Private Const mcDatNvuBLN           As String = ""False"""
        PRINT "Private Const mcDatNvuNUM           As String = ""0"""
        PRINT "Private Const mcDatNvuDAT           As String = ""0"""
        PRINT "Private Const mcDatNvuVRN           As String = ""Null"""
        PRINT "Private Const mcDatNvuENM           As String = ""0"""
        PRINT "Private Const mcDatNvuNON           As String = """""""""""""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Variable null constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcDatNgcTXT           As String = ""gcNulTXT"""
        PRINT "Private Const mcDatNgcBLN           As String = ""gcNulBLN"""
        PRINT "Private Const mcDatNgcNUM           As String = ""gcNulNBR"""
        PRINT "Private Const mcDatNgcDAT           As String = ""gcNulDAT"""
        PRINT "Private Const mcDatNgcVRN           As String = ""gcNulVRN"""
        PRINT "Private Const mcDatNgcENM           As String = ""gcNulENM"""
        PRINT "Private Const mcDatNgcNON           As String = ""gcNulNON"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Variable lkp_VarTyp.VarTypID Numbers"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVbaIdnSTR           As Long = 1"
        PRINT "Private Const mcVbaIdnBLN           As Long = 2"
        PRINT "Private Const mcVbaIdnBYT           As Long = 3"
        PRINT "Private Const mcVbaIdnINT           As Long = 4"
        PRINT "Private Const mcVbaIdnLNG           As Long = 5"
        PRINT "Private Const mcVbaIdnCUR           As Long = 6"
        PRINT "Private Const mcVbaIdnSGL           As Long = 7"
        PRINT "Private Const mcVbaIdnDBL           As Long = 8"
        PRINT "Private Const mcVbaIdnDAT           As Long = 9"
        PRINT "Private Const mcVbaIdnTIM           As Long = 10"
        PRINT "Private Const mcVbaIdnTXT           As Long = 11"
        PRINT "Private Const mcVbaIdnOBJ           As Long = 12"
        PRINT "Private Const mcVbaIdnMEM           As Long = 13"
        PRINT "Private Const mcVbaIdnVRN           As Long = 14"
        PRINT "Private Const mcVbaIdnENM           As Long = 15"
        PRINT "Private Const mcVbaIdnRST           As Long = 16"
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Variable prefixes"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVarPfxSTR           As String = ""str"""
        PRINT "Private Const mcVarPfxBLN           As String = ""bln"""
        PRINT "Private Const mcVarPfxBYT           As String = ""byt"""
        PRINT "Private Const mcVarPfxINT           As String = ""int"""
        PRINT "Private Const mcVarPfxLNG           As String = ""lng"""
        PRINT "Private Const mcVarPfxCUR           As String = ""cur"""
        PRINT "Private Const mcVarPfxSGL           As String = ""sgl"""
        PRINT "Private Const mcVarPfxDBL           As String = ""dbl"""
        PRINT "Private Const mcVarPfxDAT           As String = ""dat"""
        PRINT "Private Const mcVarPfxTIM           As String = ""tim"""
        PRINT "Private Const mcVarPfxTXT           As String = ""str"""
        PRINT "Private Const mcVarPfxOBJ           As String = ""ole"""
        PRINT "Private Const mcVarPfxMEM           As String = ""mem"""
        PRINT "Private Const mcVarPfxVRN           As String = ""vrn"""
        PRINT "Private Const mcVarPfxENM           As String = ""enm"""
        PRINT "Private Const mcVarPfxRST           As String = ""rst"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Variable data types"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVarTypSTR           As String = ""String"""
        PRINT "Private Const mcVarTypBLN           As String = ""Boolean"""
        PRINT "Private Const mcVarTypBYT           As String = ""Byte"""
        PRINT "Private Const mcVarTypINT           As String = ""Integer"""
        PRINT "Private Const mcVarTypLNG           As String = ""Long"""
        PRINT "Private Const mcVarTypCUR           As String = ""Currency"""
        PRINT "Private Const mcVarTypSGL           As String = ""Single"""
        PRINT "Private Const mcVarTypDBL           As String = ""Double"""
        PRINT "Private Const mcVarTypDAT           As String = ""Date"""
        PRINT "Private Const mcVarTypTIM           As String = ""Date"""
        PRINT "Private Const mcVarTypTXT           As String = ""String"""
        PRINT "Private Const mcVarTypOBJ           As String = ""Variant"""
        PRINT "Private Const mcVarTypMEM           As String = ""String"""
        PRINT "Private Const mcVarTypVRN           As String = ""Variant"""
        PRINT "Private Const mcVarTypENM           As String = ""EnumConstant"""
        PRINT "Private Const mcVarTypRST           As String = ""ADOR.RecordSet"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' Variable type casting functions"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcVarCstSTR           As String = ""CStr"""
        PRINT "Private Const mcVarCstBLN           As String = ""CBool"""
        PRINT "Private Const mcVarCstBYT           As String = ""CByte"""
        PRINT "Private Const mcVarCstINT           As String = ""CInt"""
        PRINT "Private Const mcVarCstLNG           As String = ""CLng"""
        PRINT "Private Const mcVarCstCUR           As String = ""CCur"""
        PRINT "Private Const mcVarCstSGL           As String = ""CSng"""
        PRINT "Private Const mcVarCstDBL           As String = ""CDbl"""
        PRINT "Private Const mcVarCstDAT           As String = ""CDate"""
        PRINT "Private Const mcVarCstTIM           As String = ""CDate"""
        PRINT "Private Const mcVarCstTXT           As String = ""CStr"""
        PRINT "Private Const mcVarCstOBJ           As String = ""CVar"""
        PRINT "Private Const mcVarCstMEM           As String = ""CStr"""
        PRINT "Private Const mcVarCstVRN           As String = ""CVar"""
        PRINT "Private Const mcVarCstENM           As String = ""CLng"""
        PRINT "Private Const mcVarCstRST           As String = ""*NA*"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' VBControl prefix text"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlPfxCLM           As String = ""clm"""
        PRINT "Private Const mcCtlPfxCMD           As String = ""cmd"""
        PRINT "Private Const mcCtlPfxDTP           As String = ""dtp"""
        PRINT "Private Const mcCtlPfxGRD           As String = ""grd"""
        PRINT "Private Const mcCtlPfxVRN           As String = ""vrn"""
        PRINT ""
        PRINT "Private Const mcCtlPfxOBJ           As String = ""obj"""
        PRINT "Private Const mcCtlPfxCHK           As String = ""chk"""
        PRINT "Private Const mcCtlPfxCBO           As String = ""cbo"""
        PRINT "Private Const mcCtlPfxCMD           As String = ""cmd"""
        PRINT "Private Const mcCtlPfxCUS           As String = ""cus"""
        PRINT "Private Const mcCtlPfxIMG           As String = ""img"""
        PRINT "Private Const mcCtlPfxLBL           As String = ""lbl"""
        PRINT "Private Const mcCtlPfxLIN           As String = ""lin"""
        PRINT "Private Const mcCtlPfxLST           As String = ""lst"""
        PRINT "Private Const mcCtlPfxFRA           As String = ""fra"""
        PRINT "Private Const mcCtlPfxOPT           As String = ""opt"""
        PRINT "Private Const mcCtlPfxGRP           As String = ""grp"""
        PRINT "Private Const mcCtlPfxPAG           As String = ""pag"""
        PRINT "Private Const mcCtlPfxBRK           As String = ""brk"""
        PRINT "Private Const mcCtlPfxBOX           As String = ""box"""
        PRINT "Private Const mcCtlPfxSFM           As String = ""sfm"""
        PRINT "Private Const mcCtlPfxTAB           As String = ""tab"""
        PRINT "Private Const mcCtlPfxTXT           As String = ""txt"""
        PRINT "Private Const mcCtlPfxTGL           As String = ""tgl"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' VBControl prefix properties"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlPrpBOX           As String = ""Caption"""
        PRINT "Private Const mcCtlPrpCBO           As String = ""ListIndex"""
        PRINT "Private Const mcCtlPrpCHK           As String = ""Value"""
        PRINT "Private Const mcCtlPrpCLM           As String = """""
        PRINT "Private Const mcCtlPrpCMD           As String = ""Caption"""
        PRINT "Private Const mcCtlPrpDTP           As String = ""Value"""
        PRINT "Private Const mcCtlPrpGRD           As String = """""
        PRINT "Private Const mcCtlPrpLBL           As String = ""Caption"""
        PRINT "Private Const mcCtlPrpLIN           As String = """""
        PRINT "Private Const mcCtlPrpTXT           As String = ""Text"""
        PRINT "Private Const mcCtlPrpVRN           As String = """""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' VBControl prefix values"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcCtlNvuBOX           As String = mcDatNgcTXT"
        PRINT "Private Const mcCtlNvuCBO           As String = ""gcNotSelected"""
        PRINT "Private Const mcCtlNvuCHK           As String = ""vbGrayed"""
        PRINT "Private Const mcCtlNvuCLM           As String = mcDatNgcTXT"
        PRINT "Private Const mcCtlNvuCMD           As String = mcDatNgcTXT"
        PRINT "Private Const mcCtlNvuDTP           As String = ""NULL"""
        PRINT "Private Const mcCtlNvuGRD           As String = mcDatNgcTXT"
        PRINT "Private Const mcCtlNvuLBL           As String = mcDatNgcTXT"
        PRINT "Private Const mcCtlNvuLIN           As String = mcDatNgcTXT"
        PRINT "Private Const mcCtlNvuTXT           As String = mcDatNgcTXT"
        PRINT "Private Const mcCtlNvuVRN           As String = mcDatNgcTXT"
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' VBControl alignment prefixes"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcAlnPfxACC           As String = ""ACC"""
        PRINT "Private Const mcAlnPfxALC           As String = ""ALC"""
        PRINT "Private Const mcAlnPfxARC           As String = ""ARC"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' VBControl flex grid alignment"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcFlxAlnACC           As String = ""flexAlignCenterCenter"""
        PRINT "Private Const mcFlxAlnALC           As String = ""flexAlignLeftCenter"""
        PRINT "Private Const mcFlxAlnARC           As String = ""flexAlignRightCenter"""
        PRINT ""
        PRINT "'***************************************************************************************************"
        PRINT "' DB Table Column nulls"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcClmNvuTXT           As String = ""'             '"""
        PRINT "Private Const mcClmNvuBLN           As String = ""0"""
        PRINT "Private Const mcClmNvuNUM           As String = ""0"""
        PRINT "Private Const mcClmNvuDAT           As String = ""0"""
        PRINT "Private Const mcClmNvuVRN           As String = ""NULL"""
        PRINT "Private Const mcClmNvuENM           As String = ""0"""
        PRINT "Private Const mcClmNvuNON           As String = ""'             '"""
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' Standard text string list delimiters"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DLM() As String: DLM = mcDLM: End Property"
        PRINT "Public Property Get DLG() As String: DLG = mcDLG: End Property"
        PRINT "Public Property Get DLX() As String: DLX = mcDLX: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Quote constants"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get NQT() As String: NQT = mcNQT: End Property"
        PRINT "Public Property Get SQT() As String: SQT = mcSQT: End Property"
        PRINT "Public Property Get DQT() As String: DQT = mcDQT: End Property"
        PRINT "Public Property Get TQT() As String: TQT = mcTQT: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Miscellaneous constants"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get Nope() As String: Nope = mcNope: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable lkp_VarTyp.VarTypID Numbers"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VbaIdnSTR() As Long: VbaIdnSTR = mcVbaIdnSTR: End Property"
        PRINT "Public Property Get VbaIdnBLN() As Long: VbaIdnBLN = mcVbaIdnBLN: End Property"
        PRINT "Public Property Get VbaIdnBYT() As Long: VbaIdnBYT = mcVbaIdnBYT: End Property"
        PRINT "Public Property Get VbaIdnINT() As Long: VbaIdnINT = mcVbaIdnINT: End Property"
        PRINT "Public Property Get VbaIdnLNG() As Long: VbaIdnLNG = mcVbaIdnLNG: End Property"
        PRINT "Public Property Get VbaIdnCUR() As Long: VbaIdnCUR = mcVbaIdnCUR: End Property"
        PRINT "Public Property Get VbaIdnSGL() As Long: VbaIdnSGL = mcVbaIdnSGL: End Property"
        PRINT "Public Property Get VbaIdnDBL() As Long: VbaIdnDBL = mcVbaIdnDBL: End Property"
        PRINT "Public Property Get VbaIdnDAT() As Long: VbaIdnDAT = mcVbaIdnDAT: End Property"
        PRINT "Public Property Get VbaIdnTIM() As Long: VbaIdnTIM = mcVbaIdnTIM: End Property"
        PRINT "Public Property Get VbaIdnTXT() As Long: VbaIdnTXT = mcVbaIdnTXT: End Property"
        PRINT "Public Property Get VbaIdnOBJ() As Long: VbaIdnOBJ = mcVbaIdnOBJ: End Property"
        PRINT "Public Property Get VbaIdnMEM() As Long: VbaIdnMEM = mcVbaIdnMEM: End Property"
        PRINT "Public Property Get VbaIdnVRN() As Long: VbaIdnVRN = mcVbaIdnVRN: End Property"
        PRINT "Public Property Get VbaIdnENM() As Long: VbaIdnENM = mcVbaIdnENM: End Property"
        PRINT "Public Property Get VbaIdnRST() As Long: VbaIdnRST = mcVbaIdnRST: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable prefixes"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarPfxSTR() As String: VarPfxSTR = mcVarPfxSTR: End Property"
        PRINT "Public Property Get VarPfxBLN() As String: VarPfxBLN = mcVarPfxBLN: End Property"
        PRINT "Public Property Get VarPfxBYT() As String: VarPfxBYT = mcVarPfxBYT: End Property"
        PRINT "Public Property Get VarPfxINT() As String: VarPfxINT = mcVarPfxINT: End Property"
        PRINT "Public Property Get VarPfxLNG() As String: VarPfxLNG = mcVarPfxLNG: End Property"
        PRINT "Public Property Get VarPfxCUR() As String: VarPfxCUR = mcVarPfxCUR: End Property"
        PRINT "Public Property Get VarPfxSGL() As String: VarPfxSGL = mcVarPfxSGL: End Property"
        PRINT "Public Property Get VarPfxDBL() As String: VarPfxDBL = mcVarPfxDBL: End Property"
        PRINT "Public Property Get VarPfxDAT() As String: VarPfxDAT = mcVarPfxDAT: End Property"
        PRINT "Public Property Get VarPfxTIM() As String: VarPfxTIM = mcVarPfxTIM: End Property"
        PRINT "Public Property Get VarPfxTXT() As String: VarPfxTXT = mcVarPfxTXT: End Property"
        PRINT "Public Property Get VarPfxOBJ() As String: VarPfxOBJ = mcVarPfxOBJ: End Property"
        PRINT "Public Property Get VarPfxMEM() As String: VarPfxMEM = mcVarPfxMEM: End Property"
        PRINT "Public Property Get VarPfxVRN() As String: VarPfxVRN = mcVarPfxVRN: End Property"
        PRINT "Public Property Get VarPfxENM() As String: VarPfxENM = mcVarPfxENM: End Property"
        PRINT "Public Property Get VarPfxRST() As String: VarPfxRST = mcVarPfxRST: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable data types"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarTypSTR() As String: VarTypSTR = mcVarTypSTR: End Property"
        PRINT "Public Property Get VarTypBLN() As String: VarTypBLN = mcVarTypBLN: End Property"
        PRINT "Public Property Get VarTypBYT() As String: VarTypBYT = mcVarTypBYT: End Property"
        PRINT "Public Property Get VarTypINT() As String: VarTypINT = mcVarTypINT: End Property"
        PRINT "Public Property Get VarTypLNG() As String: VarTypLNG = mcVarTypLNG: End Property"
        PRINT "Public Property Get VarTypCUR() As String: VarTypCUR = mcVarTypCUR: End Property"
        PRINT "Public Property Get VarTypSGL() As String: VarTypSGL = mcVarTypSGL: End Property"
        PRINT "Public Property Get VarTypDBL() As String: VarTypDBL = mcVarTypDBL: End Property"
        PRINT "Public Property Get VarTypDAT() As String: VarTypDAT = mcVarTypDAT: End Property"
        PRINT "Public Property Get VarTypTIM() As String: VarTypTIM = mcVarTypTIM: End Property"
        PRINT "Public Property Get VarTypTXT() As String: VarTypTXT = mcVarTypTXT: End Property"
        PRINT "Public Property Get VarTypOBJ() As String: VarTypOBJ = mcVarTypOBJ: End Property"
        PRINT "Public Property Get VarTypMEM() As String: VarTypMEM = mcVarTypMEM: End Property"
        PRINT "Public Property Get VarTypVRN() As String: VarTypVRN = mcVarTypVRN: End Property"
        PRINT "Public Property Get VarTypENM() As String: VarTypENM = mcVarTypENM: End Property"
        PRINT "Public Property Get VarTypRST() As String: VarTypRST = mcVarTypRST: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable type casting functions"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarCstSTR() As String: VarCstSTR = mcVarCstSTR: End Property"
        PRINT "Public Property Get VarCstBLN() As String: VarCstBLN = mcVarCstBLN: End Property"
        PRINT "Public Property Get VarCstBYT() As String: VarCstBYT = mcVarCstBYT: End Property"
        PRINT "Public Property Get VarCstINT() As String: VarCstINT = mcVarCstINT: End Property"
        PRINT "Public Property Get VarCstLNG() As String: VarCstLNG = mcVarCstLNG: End Property"
        PRINT "Public Property Get VarCstCUR() As String: VarCstCUR = mcVarCstCUR: End Property"
        PRINT "Public Property Get VarCstSGL() As String: VarCstSGL = mcVarCstSGL: End Property"
        PRINT "Public Property Get VarCstDBL() As String: VarCstDBL = mcVarCstDBL: End Property"
        PRINT "Public Property Get VarCstDAT() As String: VarCstDAT = mcVarCstDAT: End Property"
        PRINT "Public Property Get VarCstTIM() As String: VarCstTIM = mcVarCstTIM: End Property"
        PRINT "Public Property Get VarCstTXT() As String: VarCstTXT = mcVarCstTXT: End Property"
        PRINT "Public Property Get VarCstOBJ() As String: VarCstOBJ = mcVarCstOBJ: End Property"
        PRINT "Public Property Get VarCstMEM() As String: VarCstMEM = mcVarCstMEM: End Property"
        PRINT "Public Property Get VarCstVRN() As String: VarCstVRN = mcVarCstVRN: End Property"
        PRINT "Public Property Get VarCstENM() As String: VarCstENM = mcVarCstENM: End Property"
        PRINT "Public Property Get VarCstRST() As String: VarCstRST = mcVarCstRST: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable data categories"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DatCatTXT() As Long: DatCatTXT = mcDatCatTXT: End Property"
        PRINT "Public Property Get DatCatBLN() As Long: DatCatBLN = mcDatCatBLN: End Property"
        PRINT "Public Property Get DatCatNUM() As Long: DatCatNUM = mcDatCatNUM: End Property"
        PRINT "Public Property Get DatCatDAT() As Long: DatCatDAT = mcDatCatDAT: End Property"
        PRINT "Public Property Get DatCatVRN() As Long: DatCatVRN = mcDatCatVRN: End Property"
        PRINT "Public Property Get DatCatENM() As Long: DatCatENM = mcDatCatENM: End Property"
        PRINT "Public Property Get DatCatNON() As Long: DatCatNON = mcDatCatNON: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable values"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DatValTXT() As String: DatValTXT = mcDatValTXT: End Property"
        PRINT "Public Property Get DatValBLN() As String: DatValBLN = mcDatValBLN: End Property"
        PRINT "Public Property Get DatValNUM() As String: DatValNUM = mcDatValNUM: End Property"
        PRINT "Public Property Get DatValDAT() As String: DatValDAT = mcDatValDAT: End Property"
        PRINT "Public Property Get DatValVRN() As String: DatValVRN = mcDatValVRN: End Property"
        PRINT "Public Property Get DatValENM() As String: DatValENM = mcDatValENM: End Property"
        PRINT "Public Property Get DatValNON() As String: DatValNON = mcDatValNON: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable null values"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DatNvuTXT() As String: DatNvuTXT = mcDatNvuTXT: End Property"
        PRINT "Public Property Get DatNvuBLN() As String: DatNvuBLN = mcDatNvuBLN: End Property"
        PRINT "Public Property Get DatNvuNUM() As String: DatNvuNUM = mcDatNvuNUM: End Property"
        PRINT "Public Property Get DatNvuDAT() As String: DatNvuDAT = mcDatNvuDAT: End Property"
        PRINT "Public Property Get DatNvuVRN() As String: DatNvuVRN = mcDatNvuVRN: End Property"
        PRINT "Public Property Get DatNvuENM() As String: DatNvuENM = mcDatNvuENM: End Property"
        PRINT "Public Property Get DatNvuNON() As String: DatNvuNON = mcDatNvuNON: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable null constants"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get DatNgcTXT() As String: DatNgcTXT = mcDatNgcTXT: End Property"
        PRINT "Public Property Get DatNgcBLN() As String: DatNgcBLN = mcDatNgcBLN: End Property"
        PRINT "Public Property Get DatNgcNUM() As String: DatNgcNUM = mcDatNgcNUM: End Property"
        PRINT "Public Property Get DatNgcDAT() As String: DatNgcDAT = mcDatNgcDAT: End Property"
        PRINT "Public Property Get DatNgcVRN() As String: DatNgcVRN = mcDatNgcVRN: End Property"
        PRINT "Public Property Get DatNgcENM() As String: DatNgcENM = mcDatNgcENM: End Property"
        PRINT "Public Property Get DatNgcNON() As String: DatNgcNON = mcDatNgcNON: End Property"
        PRINT "'==================================================================================================="
        PRINT "' VBControl prefix text"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get CtlPfxBOX() As String: CtlPfxBOX = mcCtlPfxBOX: End Property"
        PRINT "Public Property Get CtlPfxCBO() As String: CtlPfxCBO = mcCtlPfxCBO: End Property"
        PRINT "Public Property Get CtlPfxCHK() As String: CtlPfxCHK = mcCtlPfxCHK: End Property"
        PRINT "Public Property Get CtlPfxCLM() As String: CtlPfxCLM = mcCtlPfxCLM: End Property"
        PRINT "Public Property Get CtlPfxCMD() As String: CtlPfxCMD = mcCtlPfxCMD: End Property"
        PRINT "Public Property Get CtlPfxDTP() As String: CtlPfxDTP = mcCtlPfxDTP: End Property"
        PRINT "Public Property Get CtlPfxGRD() As String: CtlPfxGRD = mcCtlPfxGRD: End Property"
        PRINT "Public Property Get CtlPfxLBL() As String: CtlPfxLBL = mcCtlPfxLBL: End Property"
        PRINT "Public Property Get CtlPfxLIN() As String: CtlPfxLIN = mcCtlPfxLIN: End Property"
        PRINT "Public Property Get CtlPfxTXT() As String: CtlPfxTXT = mcCtlPfxTXT: End Property"
        PRINT "Public Property Get CtlPfxVRN() As String: CtlPfxVRN = mcCtlPfxVRN: End Property"
        PRINT ""
        PRINT ""
        PRINT "'==================================================================================================="
        PRINT "' VBControl prefix properties"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get CtlPrpBOX() As String: CtlPrpBOX = mcCtlPrpBOX: End Property"
        PRINT "Public Property Get CtlPrpCBO() As String: CtlPrpCBO = mcCtlPrpCBO: End Property"
        PRINT "Public Property Get CtlPrpCHK() As String: CtlPrpCHK = mcCtlPrpCHK: End Property"
        PRINT "Public Property Get CtlPrpCLM() As String: CtlPrpCLM = mcCtlPrpCLM: End Property"
        PRINT "Public Property Get CtlPrpCMD() As String: CtlPrpCMD = mcCtlPrpCMD: End Property"
        PRINT "Public Property Get CtlPrpDTP() As String: CtlPrpDTP = mcCtlPrpDTP: End Property"
        PRINT "Public Property Get CtlPrpGRD() As String: CtlPrpGRD = mcCtlPrpGRD: End Property"
        PRINT "Public Property Get CtlPrpLBL() As String: CtlPrpLBL = mcCtlPrpLBL: End Property"
        PRINT "Public Property Get CtlPrpLIN() As String: CtlPrpLIN = mcCtlPrpLIN: End Property"
        PRINT "Public Property Get CtlPrpTXT() As String: CtlPrpTXT = mcCtlPrpTXT: End Property"
        PRINT "Public Property Get CtlPrpVRN() As String: CtlPrpVRN = mcCtlPrpVRN: End Property"
        PRINT "'==================================================================================================="
        PRINT "' VBControl prefix nulls"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get CtlNvuBOX() As String: CtlNvuBOX = mcCtlNvuBOX: End Property"
        PRINT "Public Property Get CtlNvuCBO() As String: CtlNvuCBO = mcCtlNvuCBO: End Property"
        PRINT "Public Property Get CtlNvuCHK() As String: CtlNvuCHK = mcCtlNvuCHK: End Property"
        PRINT "Public Property Get CtlNvuCLM() As String: CtlNvuCLM = mcCtlNvuCLM: End Property"
        PRINT "Public Property Get CtlNvuCMD() As String: CtlNvuCMD = mcCtlNvuCMD: End Property"
        PRINT "Public Property Get CtlNvuDTP() As String: CtlNvuDTP = mcCtlNvuDTP: End Property"
        PRINT "Public Property Get CtlNvuGRD() As String: CtlNvuGRD = mcCtlNvuGRD: End Property"
        PRINT "Public Property Get CtlNvuLBL() As String: CtlNvuLBL = mcCtlNvuLBL: End Property"
        PRINT "Public Property Get CtlNvuLIN() As String: CtlNvuLIN = mcCtlNvuLIN: End Property"
        PRINT "Public Property Get CtlNvuTXT() As String: CtlNvuTXT = mcCtlNvuTXT: End Property"
        PRINT "Public Property Get CtlNvuVRN() As String: CtlNvuVRN = mcCtlNvuVRN: End Property"
        PRINT "'==================================================================================================="
        PRINT "' VBControl flex grid alignment"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get AlnPfxACC() As String: AlnPfxACC = mcAlnPfxACC: End Property"
        PRINT "Public Property Get AlnPfxALC() As String: AlnPfxALC = mcAlnPfxALC: End Property"
        PRINT "Public Property Get AlnPfxARC() As String: AlnPfxARC = mcAlnPfxARC: End Property"
        PRINT "'==================================================================================================="
        PRINT "' VBControl flex grid alignment"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get FlxAlnACC() As String: FlxAlnACC = mcFlxAlnACC: End Property"
        PRINT "Public Property Get FlxAlnALC() As String: FlxAlnALC = mcFlxAlnALC: End Property"
        PRINT "Public Property Get FlxAlnARC() As String: FlxAlnARC = mcFlxAlnARC: End Property"
        PRINT "'==================================================================================================="
        PRINT "' Column nulls"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get ClmNvuTXT() As String: ClmNvuTXT = mcClmNvuTXT: End Property"
        PRINT "Public Property Get ClmNvuBLN() As String: ClmNvuBLN = mcClmNvuBLN: End Property"
        PRINT "Public Property Get ClmNvuNUM() As String: ClmNvuNUM = mcClmNvuNUM: End Property"
        PRINT "Public Property Get ClmNvuDAT() As String: ClmNvuDAT = mcClmNvuDAT: End Property"
        PRINT "Public Property Get ClmNvuVRN() As String: ClmNvuVRN = mcClmNvuVRN: End Property"
        PRINT "Public Property Get ClmNvuENM() As String: ClmNvuENM = mcClmNvuENM: End Property"
        PRINT "Public Property Get ClmNvuNON() As String: ClmNvuNON = mcClmNvuNON: End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Category code => Null global constant"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get DatNgc(ByVal lngDatCat As Long) As String"
        PRINT "    Select Case lngDatCat"
        PRINT "        Case mcDatCatTXT:  DatNgc = Me.DatNgcTXT ' Text"
        PRINT "        Case mcDatCatBLN:  DatNgc = Me.DatNgcBLN ' Boolean"
        PRINT "        Case mcDatCatNUM:  DatNgc = Me.DatNgcNUM ' Numeric"
        PRINT "        Case mcDatCatDAT:  DatNgc = Me.DatNgcDAT ' Date"
        PRINT "        Case mcDatCatVRN:  DatNgc = Me.DatNgcVRN ' Variant"
        PRINT "        Case Else:         DatNgc = ""*INVALID DatCat*"""
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Variable name => VBA variable scope"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VarScp(ByVal strVarNam As String) As String"
        PRINT "    Select Case VarLvl(strVarNam)"
        PRINT "        Case ""g"""
        PRINT "            VarScp = ""Public """
        PRINT "        Case ""m"""
        PRINT "            VarScp = ""Private """
        PRINT "        Case Else"
        PRINT "            VarScp = """""
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA variable dimension"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarDim(ByVal strVarNam As String) As String"
        PRINT "    strVarNam = Trim$(strVarNam)"
        PRINT "    Select Case VarLvl(strVarNam)"
        PRINT "        Case ""g"""
        PRINT "            VarDim = ""Public """
        PRINT "        Case ""m"""
        PRINT "            VarDim = ""Private """
        PRINT "        Case Else"
        PRINT "            VarDim = ""Dim """
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA constant dimension"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarCon(ByVal strVarNam As String) As String"
        PRINT "    strVarNam = Trim$(strVarNam)"
        PRINT "    Select Case VarLvl(strVarNam)"
        PRINT "        Case ""g"""
        PRINT "            VarCon = ""Public Const """
        PRINT "        Case ""m"""
        PRINT "            VarCon = ""Private Const """
        PRINT "        Case Else"
        PRINT "            VarCon = ""Const """
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA variable level"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarLvl(ByVal strVarNam As String) As String"
        PRINT "    strVarNam = Trim$(strVarNam)"
        PRINT "    Select Case Left$(strVarNam, 1)"
        PRINT "        Case ""g"", ""m"", ""p"""
        PRINT "            VarLvl = Left$(strVarNam, 1)"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA variable prefix"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarPfx(ByVal strVarNam As String) As String"
        PRINT "    strVarNam = Trim$(strVarNam)"
        PRINT "    Select Case Left$(strVarNam, 1)"
        PRINT "        Case ""g"", ""m"", ""p"""
        PRINT "            VarPfx = Mid$(strVarNam, 2, 3)"
        PRINT "            Select Case Left$(strVarNam, 2)"
        PRINT "                Case ""gc"", ""mc"", ""pc"""
        PRINT "                    VarPfx = """""
        PRINT "            End Select"
        PRINT "        Case Else"
        PRINT "            VarPfx = Left$(strVarNam, 3)"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA constant prefix"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarCnx(ByVal strVarNam As String) As String"
        PRINT "    strVarNam = Trim$(strVarNam)"
        PRINT "    Select Case VarLvl(strVarNam)"
        PRINT "        Case ""g"""
        PRINT "            VarCnx = ""gc"""
        PRINT "        Case ""m"""
        PRINT "            VarCnx = ""mc"""
        PRINT "        Case Else"
        PRINT "            VarCnx = ""pc"""
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA variable base name"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarBas(ByVal strVarNam As String) As String"
        PRINT "    strVarNam = Trim$(strVarNam)"
        PRINT "    Select Case Left$(strVarNam, 2)"
        PRINT "        Case ""gc"", ""mc"", ""pc"""
        PRINT "            VarBas = Mid$(strVarNam, 3, 999)"
        PRINT "        Case Else"
        PRINT "            Select Case Left$(strVarNam, 1)"
        PRINT "                Case ""g"", ""m"", ""p"""
        PRINT "                    VarBas = Mid$(strVarNam, 5, 999)"
        PRINT "                Case Else"
        PRINT "                    VarBas = Mid$(strVarNam, 4, 999)"
        PRINT "            End Select"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA variable constant number"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarVba(ByVal strVarNam As String) As Integer"
        PRINT "    VarVba = PfxVba(VarPfx(strVarNam))"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA variable type"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarTyp(ByVal strVarNam As String, Optional ByVal strCurTyp As String) As String"
        PRINT "    VarTyp = PfxTyp(VarPfx(strVarNam), strCurTyp)"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA default value"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarVal(ByVal strVarNam As String) As String"
        PRINT "    VarVal = PfxVal(VarPfx(strVarNam))"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA null value"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarNvu(ByVal strVarNam As String) As String"
        PRINT "    VarNvu = PfxNvu(VarPfx(strVarNam))"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA null global constant"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarNgc(ByVal strVarNam As String) As String"
        PRINT "    VarNgc = PfxNgc(VarPfx(strVarNam))"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA data categories"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarCat(ByVal strVarNam As String) As String"
        PRINT "    VarCat = PfxCat(VarPfx(strVarNam))"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA double quote"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarDqt(ByVal strVarNam As String) As String"
        PRINT "    VarDqt = PfxDqt(VarPfx(strVarNam))"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => VBA single quote"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarSqt(ByVal strVarNam As String) As String"
        PRINT "    VarSqt = PfxSqt(VarPfx(strVarNam))"
        PRINT "End Property"
        PRINT "'==================================================================================================="
        PRINT "' Variable name => Separator line"
        PRINT "'==================================================================================================="
        PRINT "Public Property Get VarLIN(ByVal blnLIN As Boolean) As String"
        PRINT "    If blnLIN Then"
        PRINT "        VarLIN = ""'==================================================================================================="""
        PRINT "    End If"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA variable constant"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxVba(ByVal strVarPfx As String) As Integer"
        PRINT "    Select Case strVarPfx"
        PRINT "        Case Me.VarPfxSTR: PfxVba = vbString   ' String"
        PRINT "        Case Me.VarPfxBLN: PfxVba = vbBoolean  ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxVba = vbByte     ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxVba = vbInteger  ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxVba = vbLong     ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxVba = vbCurrency ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxVba = vbSingle   ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxVba = vbDouble   ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxVba = vbDate     ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxVba = vbDate     ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxVba = vbVariant  ' Variant"
        PRINT "        Case Else:         PfxVba = -1"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant => VBA variable prefix"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaPfx(ByVal intVbaNum As Integer) As String"
        PRINT "    Select Case intVbaNum"
        PRINT "        Case vbString:   VbaPfx = Me.VarPfxSTR ' String"
        PRINT "        Case vbBoolean:  VbaPfx = Me.VarPfxBLN ' Boolean"
        PRINT "        Case vbByte:     VbaPfx = Me.VarPfxBYT ' Byte"
        PRINT "        Case vbInteger:  VbaPfx = Me.VarPfxINT ' Integer"
        PRINT "        Case vbLong:     VbaPfx = Me.VarPfxLNG ' Long"
        PRINT "        Case vbCurrency: VbaPfx = Me.VarPfxCUR ' Currency"
        PRINT "        Case vbSingle:   VbaPfx = Me.VarPfxSGL ' Single"
        PRINT "        Case vbDouble:   VbaPfx = Me.VarPfxDBL ' Double"
        PRINT "        Case vbDate:     VbaPfx = Me.VarPfxDAT ' Datetime"
        PRINT "        Case vbDate:     VbaPfx = Me.VarPfxTIM ' Datetime"
        PRINT "        Case vbVariant:  VbaPfx = Me.VarPfxVRN ' Variant"
        PRINT "        Case Else:       VbaPfx = Me.VarPfxVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant => VBA variable type"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaTyp(ByVal intVbaNum As Integer) As String"
        PRINT "    Select Case intVbaNum"
        PRINT "        Case vbString:   VbaTyp = Me.VarTypSTR ' String"
        PRINT "        Case vbBoolean:  VbaTyp = Me.VarTypBLN ' Boolean"
        PRINT "        Case vbByte:     VbaTyp = Me.VarTypBYT ' Byte"
        PRINT "        Case vbInteger:  VbaTyp = Me.VarTypINT ' Integer"
        PRINT "        Case vbLong:     VbaTyp = Me.VarTypLNG ' Long"
        PRINT "        Case vbCurrency: VbaTyp = Me.VarTypCUR ' Currency"
        PRINT "        Case vbSingle:   VbaTyp = Me.VarTypSGL ' Single"
        PRINT "        Case vbDouble:   VbaTyp = Me.VarTypDBL ' Double"
        PRINT "        Case vbDate:     VbaTyp = Me.VarTypDAT ' Datetime"
        PRINT "        Case vbDate:     VbaTyp = Me.VarTypTIM ' Datetime"
        PRINT "        Case vbVariant:  VbaTyp = Me.VarTypVRN ' Variant"
        PRINT "        Case Else:       VbaTyp = Me.VarTypVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant => VBA type casting function"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaCst(ByVal intVbaNum As Integer) As String"
        PRINT "    Select Case intVbaNum"
        PRINT "        Case vbString:   VbaCst = Me.VarCstSTR ' String"
        PRINT "        Case vbBoolean:  VbaCst = Me.VarCstBLN ' Boolean"
        PRINT "        Case vbByte:     VbaCst = Me.VarCstBYT ' Byte"
        PRINT "        Case vbInteger:  VbaCst = Me.VarCstINT ' Integer"
        PRINT "        Case vbLong:     VbaCst = Me.VarCstLNG ' Long"
        PRINT "        Case vbCurrency: VbaCst = Me.VarCstCUR ' Currency"
        PRINT "        Case vbSingle:   VbaCst = Me.VarCstSGL ' Single"
        PRINT "        Case vbDouble:   VbaCst = Me.VarCstDBL ' Double"
        PRINT "        Case vbDate:     VbaCst = Me.VarCstDAT ' Datetime"
        PRINT "        Case vbDate:     VbaCst = Me.VarCstTIM ' Datetime"
        PRINT "        Case vbVariant:  VbaCst = Me.VarCstVRN ' Variant"
        PRINT "        Case Else:       VbaCst = Me.VarCstVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant number => VBA double quote"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaDqt(ByVal lngVbaNum As Long) As String"
        PRINT "    Select Case lngVbaNum"
        PRINT "        Case vbString:     VbaDqt = mcDQT ' String"
        PRINT "        Case vbBoolean:    VbaDqt = mcNQT ' Boolean"
        PRINT "        Case vbByte:       VbaDqt = mcNQT ' Byte"
        PRINT "        Case vbInteger:    VbaDqt = mcNQT ' Integer"
        PRINT "        Case vbLong:       VbaDqt = mcNQT ' Long"
        PRINT "        Case vbCurrency:   VbaDqt = mcNQT ' Currency"
        PRINT "        Case vbSingle:     VbaDqt = mcNQT ' Single"
        PRINT "        Case vbDouble:     VbaDqt = mcNQT ' Double"
        PRINT "        Case vbDate:       VbaDqt = mcTQT ' Datetime"
        PRINT "        Case vbDate:       VbaDqt = mcTQT ' Datetime"
        PRINT "        Case vbVariant:    VbaDqt = mcDQT ' Variant"
        PRINT "        Case Else:         VbaDqt = mcDQT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant number => VBA single quote"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaSqt(ByVal lngVbaNum As Long) As String"
        PRINT "    Select Case lngVbaNum"
        PRINT "        Case vbString:     VbaSqt = mcSQT ' String"
        PRINT "        Case vbBoolean:    VbaSqt = mcNQT ' Boolean"
        PRINT "        Case vbByte:       VbaSqt = mcNQT ' Byte"
        PRINT "        Case vbInteger:    VbaSqt = mcNQT ' Integer"
        PRINT "        Case vbLong:       VbaSqt = mcNQT ' Long"
        PRINT "        Case vbCurrency:   VbaSqt = mcNQT ' Currency"
        PRINT "        Case vbSingle:     VbaSqt = mcNQT ' Single"
        PRINT "        Case vbDouble:     VbaSqt = mcNQT ' Double"
        PRINT "        Case vbDate:       VbaSqt = mcTQT ' Datetime"
        PRINT "        Case vbDate:       VbaSqt = mcTQT ' Datetime"
        PRINT "        Case vbVariant:    VbaSqt = mcSQT ' Variant"
        PRINT "        Case Else:         VbaSqt = mcSQT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant number => VBA default value"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaVal(ByVal lngVbaNum As Long) As String"
        PRINT "    Select Case lngVbaNum"
        PRINT "        Case vbString:     VbaVal = Me.DatValTXT ' String"
        PRINT "        Case vbBoolean:    VbaVal = Me.DatValBLN ' Boolean"
        PRINT "        Case vbByte:       VbaVal = Me.DatValNUM ' Byte"
        PRINT "        Case vbInteger:    VbaVal = Me.DatValNUM ' Integer"
        PRINT "        Case vbLong:       VbaVal = Me.DatValNUM ' Long"
        PRINT "        Case vbCurrency:   VbaVal = Me.DatValNUM ' Currency"
        PRINT "        Case vbSingle:     VbaVal = Me.DatValNUM ' Single"
        PRINT "        Case vbDouble:     VbaVal = Me.DatValNUM ' Double"
        PRINT "        Case vbDate:       VbaVal = Me.DatValDAT ' Datetime"
        PRINT "        Case vbDate:       VbaVal = Me.DatValDAT ' Datetime"
        PRINT "        Case vbVariant:    VbaVal = Me.DatValTXT ' Variant"
        PRINT "        Case Else:         VbaVal = Me.DatValTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant number => VBA null value"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaNvu(ByVal lngVbaNum As Long) As String"
        PRINT "    Select Case lngVbaNum"
        PRINT "        Case vbString:     VbaNvu = Me.DatNvuTXT ' String"
        PRINT "        Case vbBoolean:    VbaNvu = Me.DatNvuBLN ' Boolean"
        PRINT "        Case vbByte:       VbaNvu = Me.DatNvuNUM ' Byte"
        PRINT "        Case vbInteger:    VbaNvu = Me.DatNvuNUM ' Integer"
        PRINT "        Case vbLong:       VbaNvu = Me.DatNvuNUM ' Long"
        PRINT "        Case vbCurrency:   VbaNvu = Me.DatNvuNUM ' Currency"
        PRINT "        Case vbSingle:     VbaNvu = Me.DatNvuNUM ' Single"
        PRINT "        Case vbDouble:     VbaNvu = Me.DatNvuNUM ' Double"
        PRINT "        Case vbDate:       VbaNvu = Me.DatNvuDAT ' Datetime"
        PRINT "        Case vbDate:       VbaNvu = Me.DatNvuDAT ' Datetime"
        PRINT "        Case vbVariant:    VbaNvu = Me.DatNvuTXT ' Variant"
        PRINT "        Case Else:         VbaNvu = Me.DatNvuTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant number => VBA null global constant"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaNgc(ByVal lngVbaNum As Long) As String"
        PRINT "    Select Case lngVbaNum"
        PRINT "        Case vbString:     VbaNgc = Me.DatNgcTXT ' String"
        PRINT "        Case vbBoolean:    VbaNgc = Me.DatNgcBLN ' Boolean"
        PRINT "        Case vbByte:       VbaNgc = Me.DatNgcNUM ' Byte"
        PRINT "        Case vbInteger:    VbaNgc = Me.DatNgcNUM ' Integer"
        PRINT "        Case vbLong:       VbaNgc = Me.DatNgcNUM ' Long"
        PRINT "        Case vbCurrency:   VbaNgc = Me.DatNgcNUM ' Currency"
        PRINT "        Case vbSingle:     VbaNgc = Me.DatNgcNUM ' Single"
        PRINT "        Case vbDouble:     VbaNgc = Me.DatNgcNUM ' Double"
        PRINT "        Case vbDate:       VbaNgc = Me.DatNgcDAT ' Datetime"
        PRINT "        Case vbDate:       VbaNgc = Me.DatNgcDAT ' Datetime"
        PRINT "        Case vbVariant:    VbaNgc = Me.DatNgcTXT ' Variant"
        PRINT "        Case Else:         VbaNgc = Me.DatNgcTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable constant number => VBA data categories"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get VbaCat(ByVal lngVbaNum As Long) As String"
        PRINT "    Select Case lngVbaNum"
        PRINT "        Case vbString:     VbaCat = Me.DatCatTXT ' String"
        PRINT "        Case vbBoolean:    VbaCat = Me.DatCatBLN ' Boolean"
        PRINT "        Case vbByte:       VbaCat = Me.DatCatNUM ' Byte"
        PRINT "        Case vbInteger:    VbaCat = Me.DatCatNUM ' Integer"
        PRINT "        Case vbLong:       VbaCat = Me.DatCatNUM ' Long"
        PRINT "        Case vbCurrency:   VbaCat = Me.DatCatNUM ' Currency"
        PRINT "        Case vbSingle:     VbaCat = Me.DatCatNUM ' Single"
        PRINT "        Case vbDouble:     VbaCat = Me.DatCatNUM ' Double"
        PRINT "        Case vbDate:       VbaCat = Me.DatCatDAT ' Datetime"
        PRINT "        Case vbDate:       VbaCat = Me.DatCatDAT ' Datetime"
        PRINT "        Case vbVariant:    VbaCat = Me.DatCatVRN ' Variant"
        PRINT "        Case Else:         VbaCat = Me.DatCatVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA variable prefix"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnPfx(ByVal lngVbaIdn As Long) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnPfx = Me.VarPfxSTR ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnPfx = Me.VarPfxBLN ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnPfx = Me.VarPfxBYT ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnPfx = Me.VarPfxINT ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnPfx = Me.VarPfxLNG ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnPfx = Me.VarPfxCUR ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnPfx = Me.VarPfxSGL ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnPfx = Me.VarPfxDBL ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnPfx = Me.VarPfxDAT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnPfx = Me.VarPfxTIM ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnPfx = Me.VarPfxVRN ' Variant"
        PRINT "        Case Me.VbaIdnENM: IdnPfx = Me.VarPfxENM ' EnumConstant"
        PRINT "        Case Me.VbaIdnRST: IdnPfx = Me.VarPfxRST ' ADOR.Recordset"
        PRINT "        Case Else:         IdnPfx = Me.VarPfxVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA variable type"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnTyp(ByVal lngVbaIdn As Long, Optional ByVal strCurTyp As String) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnTyp = Me.VarTypSTR ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnTyp = Me.VarTypBLN ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnTyp = Me.VarTypBYT ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnTyp = Me.VarTypINT ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnTyp = Me.VarTypLNG ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnTyp = Me.VarTypCUR ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnTyp = Me.VarTypSGL ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnTyp = Me.VarTypDBL ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnTyp = Me.VarTypDAT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnTyp = Me.VarTypTIM ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnTyp = Me.VarTypVRN ' Variant"
        PRINT "        Case Me.VbaIdnENM: IdnTyp = IIf(Len(strCurTyp) > 0, strCurTyp, Me.VarTypENM) ' EnumConstant"
        PRINT "        Case Me.VbaIdnRST: IdnTyp = Me.VarTypRST ' ADOR.Recordset"
        PRINT "        Case Else:         IdnTyp = IIf(Len(strCurTyp) > 0, strCurTyp, ""Unknown"")"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA type casting function"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnCst(ByVal lngVbaIdn As Long) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnCst = Me.VarCstSTR ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnCst = Me.VarCstBLN ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnCst = Me.VarCstBYT ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnCst = Me.VarCstINT ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnCst = Me.VarCstLNG ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnCst = Me.VarCstCUR ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnCst = Me.VarCstSGL ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnCst = Me.VarCstDBL ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnCst = Me.VarCstDAT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnCst = Me.VarCstTIM ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnCst = Me.VarCstVRN ' Variant"
        PRINT "        Case Else:         IdnCst = Me.VarCstVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA double quote"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnDqt(ByVal lngVbaIdn As Long) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnDqt = mcDQT ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnDqt = mcNQT ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnDqt = mcNQT ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnDqt = mcNQT ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnDqt = mcNQT ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnDqt = mcNQT ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnDqt = mcNQT ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnDqt = mcNQT ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnDqt = mcTQT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnDqt = mcTQT ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnDqt = mcDQT ' Variant"
        PRINT "        Case Else:         IdnDqt = mcDQT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA single quote"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnSqt(ByVal lngVbaIdn As Long) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnSqt = mcSQT ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnSqt = mcNQT ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnSqt = mcNQT ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnSqt = mcNQT ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnSqt = mcNQT ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnSqt = mcNQT ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnSqt = mcNQT ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnSqt = mcNQT ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnSqt = mcTQT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnSqt = mcTQT ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnSqt = mcSQT ' Variant"
        PRINT "        Case Else:         IdnSqt = mcSQT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA default value"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnVal(ByVal lngVbaIdn As Long) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnVal = Me.DatValTXT ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnVal = Me.DatValBLN ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnVal = Me.DatValNUM ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnVal = Me.DatValNUM ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnVal = Me.DatValNUM ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnVal = Me.DatValNUM ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnVal = Me.DatValNUM ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnVal = Me.DatValNUM ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnVal = Me.DatValDAT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnVal = Me.DatValDAT ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnVal = Me.DatValTXT ' Variant"
        PRINT "        Case Else:         IdnVal = Me.DatValTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA null value"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnNvu(ByVal lngVbaIdn As Long) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnNvu = Me.DatNvuTXT ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnNvu = Me.DatNvuBLN ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnNvu = Me.DatNvuNUM ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnNvu = Me.DatNvuNUM ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnNvu = Me.DatNvuNUM ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnNvu = Me.DatNvuNUM ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnNvu = Me.DatNvuNUM ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnNvu = Me.DatNvuNUM ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnNvu = Me.DatNvuDAT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnNvu = Me.DatNvuDAT ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnNvu = Me.DatNvuTXT ' Variant"
        PRINT "        Case Else:         IdnNvu = Me.DatNvuTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA null global constant"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnNgc(ByVal lngVbaIdn As Long) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnNgc = Me.DatNgcTXT ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnNgc = Me.DatNgcBLN ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnNgc = Me.DatNgcNUM ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnNgc = Me.DatNgcNUM ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnNgc = Me.DatNgcNUM ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnNgc = Me.DatNgcNUM ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnNgc = Me.DatNgcNUM ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnNgc = Me.DatNgcNUM ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnNgc = Me.DatNgcDAT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnNgc = Me.DatNgcDAT ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnNgc = Me.DatNgcTXT ' Variant"
        PRINT "        Case Else:         IdnNgc = Me.DatNgcTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable lkp_VarTyp.VarTypID number => VBA data categories"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get IdnCat(ByVal lngVbaIdn As Long) As String"
        PRINT "    Select Case lngVbaIdn"
        PRINT "        Case Me.VbaIdnSTR: IdnCat = Me.DatCatTXT ' String"
        PRINT "        Case Me.VbaIdnBLN: IdnCat = Me.DatCatBLN ' Boolean"
        PRINT "        Case Me.VbaIdnBYT: IdnCat = Me.DatCatNUM ' Byte"
        PRINT "        Case Me.VbaIdnINT: IdnCat = Me.DatCatNUM ' Integer"
        PRINT "        Case Me.VbaIdnLNG: IdnCat = Me.DatCatNUM ' Long"
        PRINT "        Case Me.VbaIdnCUR: IdnCat = Me.DatCatNUM ' Currency"
        PRINT "        Case Me.VbaIdnSGL: IdnCat = Me.DatCatNUM ' Single"
        PRINT "        Case Me.VbaIdnDBL: IdnCat = Me.DatCatNUM ' Double"
        PRINT "        Case Me.VbaIdnDAT: IdnCat = Me.DatCatDAT ' Datetime"
        PRINT "        Case Me.VbaIdnTIM: IdnCat = Me.DatCatDAT ' Datetime"
        PRINT "        Case Me.VbaIdnVRN: IdnCat = Me.DatCatVRN ' Variant"
        PRINT "        Case Else:         IdnCat = Me.DatCatVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA variable type"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxTyp(ByVal strVarPfx As String, Optional ByVal strCurTyp As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: PfxTyp = Me.VarTypSTR ' String"
        PRINT "        Case Me.VarPfxBLN: PfxTyp = Me.VarTypBLN ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxTyp = Me.VarTypBYT ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxTyp = Me.VarTypINT ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxTyp = Me.VarTypLNG ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxTyp = Me.VarTypCUR ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxTyp = Me.VarTypSGL ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxTyp = Me.VarTypDBL ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxTyp = Me.VarTypDAT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxTyp = Me.VarTypTIM ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxTyp = Me.VarTypVRN ' Variant"
        PRINT "        Case Me.VarPfxENM: PfxTyp = Me.VarTypENM ' EnumConstant"
        PRINT "        Case Me.VarPfxRST: PfxTyp = Me.VarTypRST ' ADOR.Recordset"
        PRINT "        Case Me.VarPfxENM: PfxTyp = IIf(Len(strCurTyp) > 0, strCurTyp, Me.VarTypENM) ' EnumConstant"
        PRINT "        Case Me.VarPfxRST: PfxTyp = Me.VarTypRST ' ADOR.Recordset"
        PRINT "        Case Else:         PfxTyp = IIf(Len(strCurTyp) > 0, strCurTyp, ""Unknown"")"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable type => VBA variable prefix"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get TypPfx(ByVal strVarTyp As String, Optional ByVal strCurPfx As String) As String"
        PRINT "    Select Case strVarTyp"
        PRINT "        Case Me.VarTypSTR: TypPfx = Me.VarPfxSTR ' String"
        PRINT "        Case Me.VarTypBLN: TypPfx = Me.VarPfxBLN ' Boolean"
        PRINT "        Case Me.VarTypBYT: TypPfx = Me.VarPfxBYT ' Byte"
        PRINT "        Case Me.VarTypINT: TypPfx = Me.VarPfxINT ' Integer"
        PRINT "        Case Me.VarTypLNG: TypPfx = Me.VarPfxLNG ' Long"
        PRINT "        Case Me.VarTypCUR: TypPfx = Me.VarPfxCUR ' Currency"
        PRINT "        Case Me.VarTypSGL: TypPfx = Me.VarPfxSGL ' Single"
        PRINT "        Case Me.VarTypDBL: TypPfx = Me.VarPfxDBL ' Double"
        PRINT "        Case Me.VarTypDAT: TypPfx = Me.VarPfxDAT ' Datetime"
        PRINT "        Case Me.VarTypTIM: TypPfx = Me.VarPfxTIM ' Datetime"
        PRINT "        Case Me.VarTypVRN: TypPfx = Me.VarPfxVRN ' Variant"
        PRINT "        Case Me.VarTypENM: TypPfx = IIf(Len(strCurPfx) > 0, strCurPfx, Me.VarPfxENM) ' EnumConstant"
        PRINT "        Case Me.VarTypRST: TypPfx = Me.VarPfxRST ' ADOR.Recordset"
        PRINT "        Case Else:         TypPfx = IIf(Len(strCurPfx) > 0, strCurPfx, ""Unknown"")"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA type casting function"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxCst(ByVal strVarPfx As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: PfxCst = Me.VarCstSTR ' String"
        PRINT "        Case Me.VarPfxBLN: PfxCst = Me.VarCstBLN ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxCst = Me.VarCstBYT ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxCst = Me.VarCstINT ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxCst = Me.VarCstLNG ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxCst = Me.VarCstCUR ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxCst = Me.VarCstSGL ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxCst = Me.VarCstDBL ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxCst = Me.VarCstDAT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxCst = Me.VarCstTIM ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxCst = Me.VarCstVRN ' Variant"
        PRINT "        Case Else:         PfxCst = Me.VarCstVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA double quote"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxDqt(ByVal strVarPfx As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: PfxDqt = mcDQT ' String"
        PRINT "        Case Me.VarPfxBLN: PfxDqt = mcNQT ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxDqt = mcNQT ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxDqt = mcNQT ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxDqt = mcNQT ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxDqt = mcNQT ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxDqt = mcNQT ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxDqt = mcNQT ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxDqt = mcTQT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxDqt = mcTQT ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxDqt = mcDQT ' Variant"
        PRINT "        Case Else:         PfxDqt = mcDQT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA single quote"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxSqt(ByVal strVarPfx As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: PfxSqt = mcSQT ' String"
        PRINT "        Case Me.VarPfxBLN: PfxSqt = mcNQT ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxSqt = mcNQT ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxSqt = mcNQT ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxSqt = mcNQT ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxSqt = mcNQT ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxSqt = mcNQT ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxSqt = mcNQT ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxSqt = mcTQT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxSqt = mcTQT ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxSqt = mcSQT ' Variant"
        PRINT "        Case Else:         PfxSqt = mcSQT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA default value"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxVal(ByVal strVarPfx As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: PfxVal = Me.DatValTXT ' String"
        PRINT "        Case Me.VarPfxBLN: PfxVal = Me.DatValBLN ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxVal = Me.DatValNUM ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxVal = Me.DatValNUM ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxVal = Me.DatValNUM ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxVal = Me.DatValNUM ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxVal = Me.DatValNUM ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxVal = Me.DatValNUM ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxVal = Me.DatValDAT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxVal = Me.DatValDAT ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxVal = Me.DatValTXT ' Variant"
        PRINT "        Case Else:         PfxVal = Me.DatValTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA null value"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxNvu(ByVal strVarPfx As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: PfxNvu = Me.DatNvuTXT ' String"
        PRINT "        Case Me.VarPfxBLN: PfxNvu = Me.DatNvuBLN ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxNvu = Me.DatNvuNUM ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxNvu = Me.DatNvuNUM ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxNvu = Me.DatNvuNUM ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxNvu = Me.DatNvuNUM ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxNvu = Me.DatNvuNUM ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxNvu = Me.DatNvuNUM ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxNvu = Me.DatNvuDAT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxNvu = Me.DatNvuDAT ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxNvu = Me.DatNvuTXT ' Variant"
        PRINT "        Case Else:         PfxNvu = Me.DatNvuTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA null global constant"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxNgc(ByVal strVarPfx As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: PfxNgc = Me.DatNgcTXT ' String"
        PRINT "        Case Me.VarPfxBLN: PfxNgc = Me.DatNgcBLN ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxNgc = Me.DatNgcNUM ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxNgc = Me.DatNgcNUM ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxNgc = Me.DatNgcNUM ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxNgc = Me.DatNgcNUM ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxNgc = Me.DatNgcNUM ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxNgc = Me.DatNgcNUM ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxNgc = Me.DatNgcDAT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxNgc = Me.DatNgcDAT ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxNgc = Me.DatNgcVRN ' Variant"
        PRINT "        Case Else:         PfxNgc = Me.DatNgcTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA data categories"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get PfxCat(ByVal strVarPfx As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: PfxCat = Me.DatCatTXT ' String"
        PRINT "        Case Me.VarPfxBLN: PfxCat = Me.DatCatBLN ' Boolean"
        PRINT "        Case Me.VarPfxBYT: PfxCat = Me.DatCatNUM ' Byte"
        PRINT "        Case Me.VarPfxINT: PfxCat = Me.DatCatNUM ' Integer"
        PRINT "        Case Me.VarPfxLNG: PfxCat = Me.DatCatNUM ' Long"
        PRINT "        Case Me.VarPfxCUR: PfxCat = Me.DatCatNUM ' Currency"
        PRINT "        Case Me.VarPfxSGL: PfxCat = Me.DatCatNUM ' Single"
        PRINT "        Case Me.VarPfxDBL: PfxCat = Me.DatCatNUM ' Double"
        PRINT "        Case Me.VarPfxDAT: PfxCat = Me.DatCatDAT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: PfxCat = Me.DatCatDAT ' Datetime"
        PRINT "        Case Me.VarPfxVRN: PfxCat = Me.DatCatVRN ' Variant"
        PRINT "        Case Else:         PfxCat = Me.DatCatTXT"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VB control prefix => VB control property"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get CpxPrp(ByVal strCtlPfx As String) As String"
        PRINT "    Select Case strCtlPfx"
        PRINT "        Case Me.CtlPfxTXT: CpxPrp = Me.CtlPrpTXT ' TextBox"
        PRINT "        Case Me.CtlPfxCBO: CpxPrp = Me.CtlPrpCBO ' ComboBox"
        PRINT "        Case Me.CtlPfxDTP: CpxPrp = Me.CtlPrpDTP ' DatePicker"
        PRINT "        Case Me.CtlPfxCHK: CpxPrp = Me.CtlPrpCHK ' CheckBox"
        PRINT "        Case Me.CtlPfxCMD: CpxPrp = Me.CtlPrpCMD ' Command"
        PRINT "        Case Me.CtlPfxBOX: CpxPrp = Me.CtlPrpBOX ' Shape"
        PRINT "        Case Me.CtlPfxLIN: CpxPrp = Me.CtlPrpLIN ' Line"
        PRINT "        Case Me.CtlPfxLBL: CpxPrp = Me.CtlPrpLBL ' Label"
        PRINT "        Case Me.CtlPfxGRD: CpxPrp = Me.CtlPrpGRD ' Grid"
        PRINT "        Case Me.CtlPfxCLM: CpxPrp = Me.CtlPrpCLM ' Grid Column"
        PRINT "        Case Me.CtlPfxVRN: CpxPrp = Me.CtlPrpVRN ' Variable"
        PRINT "        Case Else:         CpxPrp = Me.CtlPrpVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VB control prefix => VB control property"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get CpxNvu(ByVal strCtlPfx As String) As String"
        PRINT "    Select Case strCtlPfx"
        PRINT "        Case Me.CtlPfxTXT: CpxNvu = Me.CtlNvuTXT ' TextBox"
        PRINT "        Case Me.CtlPfxCBO: CpxNvu = Me.CtlNvuCBO ' ComboBox"
        PRINT "        Case Me.CtlPfxDTP: CpxNvu = Me.CtlNvuDTP ' DatePicker"
        PRINT "        Case Me.CtlPfxCHK: CpxNvu = Me.CtlNvuCHK ' CheckBox"
        PRINT "        Case Me.CtlPfxCMD: CpxNvu = Me.CtlNvuCMD ' Command"
        PRINT "        Case Me.CtlPfxBOX: CpxNvu = Me.CtlNvuBOX ' Shape"
        PRINT "        Case Me.CtlPfxLIN: CpxNvu = Me.CtlNvuLIN ' Line"
        PRINT "        Case Me.CtlPfxLBL: CpxNvu = Me.CtlNvuLBL ' Label"
        PRINT "        Case Me.CtlPfxGRD: CpxNvu = Me.CtlNvuGRD ' Grid"
        PRINT "        Case Me.CtlPfxCLM: CpxNvu = Me.CtlNvuCLM ' Grid Column"
        PRINT "        Case Me.CtlPfxVRN: CpxNvu = Me.CtlNvuVRN ' Variable"
        PRINT "        Case Else:         CpxNvu = Me.CtlNvuVRN"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VB control prefix => VB control property"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get CpxNgc(ByVal strCtlPfx As String) As String"
        PRINT "    Select Case strCtlPfx"
        PRINT "        Case Me.CtlPfxTXT: CpxNgc = Me.DatNgcTXT ' TextBox"
        PRINT "        Case Me.CtlPfxCBO: CpxNgc = Me.DatNgcNUM ' ComboBox"
        PRINT "        Case Me.CtlPfxDTP: CpxNgc = Me.DatNgcDAT ' DatePicker"
        PRINT "        Case Me.CtlPfxCHK: CpxNgc = Me.DatNgcBLN ' CheckBox"
        PRINT "        Case Me.CtlPfxCMD: CpxNgc = Me.DatNgcNON ' Command"
        PRINT "        Case Me.CtlPfxBOX: CpxNgc = Me.DatNgcNON ' Shape"
        PRINT "        Case Me.CtlPfxLIN: CpxNgc = Me.DatNgcNON ' Line"
        PRINT "        Case Me.CtlPfxLBL: CpxNgc = Me.DatNgcTXT ' Label"
        PRINT "        Case Me.CtlPfxGRD: CpxNgc = Me.DatNgcNON ' Grid"
        PRINT "        Case Me.CtlPfxCLM: CpxNgc = Me.DatNgcNON ' Grid Column"
        PRINT "        Case Me.CtlPfxVRN: CpxNgc = Me.DatNgcNON ' Variable"
        PRINT "        Case Else:         CpxNgc = Me.DatNgcNON"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => VBA data categories"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get CpxCat(ByVal strCtlPfx As String) As String"
        PRINT "    Select Case strCtlPfx"
        PRINT "        Case Me.CtlPfxTXT: CpxCat = Me.DatCatTXT ' TextBox"
        PRINT "        Case Me.CtlPfxCBO: CpxCat = Me.DatCatNUM ' ComboBox"
        PRINT "        Case Me.CtlPfxDTP: CpxCat = Me.DatCatDAT ' DatePicker"
        PRINT "        Case Me.CtlPfxCHK: CpxCat = Me.DatCatBLN ' CheckBox"
        PRINT "        Case Me.CtlPfxCMD: CpxCat = Me.DatCatNON ' Command"
        PRINT "        Case Me.CtlPfxBOX: CpxCat = Me.DatCatNON ' Shape"
        PRINT "        Case Me.CtlPfxLIN: CpxCat = Me.DatCatNON ' Line"
        PRINT "        Case Me.CtlPfxLBL: CpxCat = Me.DatCatTXT ' Label"
        PRINT "        Case Me.CtlPfxGRD: CpxCat = Me.DatCatNON ' Grid"
        PRINT "        Case Me.CtlPfxCLM: CpxCat = Me.DatCatNON ' Grid Column"
        PRINT "        Case Me.CtlPfxVRN: CpxCat = Me.DatCatNON ' Variable"
        PRINT "        Case Else:         CpxCat = Me.DatCatNON"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VB alignment prefix => VB corresponding constant"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get ApxAln(ByVal strAlnPfx As String) As String"
        PRINT "    Select Case strAlnPfx"
        PRINT "        Case Me.AlnPfxACC: ApxAln = Me.FlxAlnACC ' flexAlignCenterCenter"
        PRINT "        Case Me.AlnPfxALC: ApxAln = Me.FlxAlnALC ' flexAlignLeftCenter"
        PRINT "        Case Me.AlnPfxARC: ApxAln = Me.FlxAlnARC ' flexAlignRightCenter"
        PRINT "        Case Else:         ApxAln = Me.FlxAlnACC"
        PRINT "    End Select"
        PRINT "End Property"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' VBA variable prefix => SQL null value"
        PRINT "'###################################################################################################"
        PRINT "Public Property Get ClmNvu(ByVal strVarPfx As String) As String"
        PRINT "    Select Case Left$(strVarPfx, 3)"
        PRINT "        Case Me.VarPfxSTR: ClmNvu = Me.ClmNvuTXT ' String"
        PRINT "        Case Me.VarPfxBLN: ClmNvu = Me.ClmNvuBLN ' Boolean"
        PRINT "        Case Me.VarPfxBYT: ClmNvu = Me.ClmNvuNUM ' Byte"
        PRINT "        Case Me.VarPfxINT: ClmNvu = Me.ClmNvuNUM ' Integer"
        PRINT "        Case Me.VarPfxLNG: ClmNvu = Me.ClmNvuNUM ' Long"
        PRINT "        Case Me.VarPfxCUR: ClmNvu = Me.ClmNvuNUM ' Currency"
        PRINT "        Case Me.VarPfxSGL: ClmNvu = Me.ClmNvuNUM ' Single"
        PRINT "        Case Me.VarPfxDBL: ClmNvu = Me.ClmNvuNUM ' Double"
        PRINT "        Case Me.VarPfxDAT: ClmNvu = Me.ClmNvuDAT ' Datetime"
        PRINT "        Case Me.VarPfxTIM: ClmNvu = Me.ClmNvuDAT ' Datetime"
        PRINT "        Case Me.VarPfxVRN: ClmNvu = Me.ClmNvuTXT ' Variant"
        PRINT "        Case Else:         ClmNvu = Me.ClmNvuTXT"
        PRINT "    End Select"
        PRINT "End Property"
        CONTINUE
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    END
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- ADJMRS = Object - Manual recordset
    /*----------------------------------------------------------------------------------------------
        EXEC ut_zzVBX ADJMRS
    ----------------------------------------------------------------------------------------------*/
    IF @BldCOD IN (@SecADJMRS) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Run Manual Recordset"
        PRINT "'###################################################################################################"
        PRINT "Public Sub Run_MRS()"
        PRINT ""
        PRINT "    ' Declare recordset object"
        PRINT "    Dim rst    As ADODB.Recordset"
        PRINT "    Set rst = New ADODB.Recordset"
        PRINT ""
        PRINT "    ' Initialize record format definition"
        PRINT "    Dim vrnFldLst As Variant"
        PRINT "    vrnFldLst = Array(""FldNum"", ""FldNam"", ""FldVal"")"
        PRINT ""
        PRINT "    ' Create recordset fields"
        PRINT "    Call rst.Fields.Append(""FldNum"", adVarChar, 4)"
        PRINT "    Call rst.Fields.Append(""FldNam"", adVarChar, 100)"
        PRINT "    Call rst.Fields.Append(""FldVal"", adVarChar, 100)"
        PRINT ""
        PRINT "    ' Insert records"
        PRINT "    rst.Open"
        PRINT "    With rst"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "        .AddNew vrnFldLst, Array(""01"", ""Name01"", ""Value01"")"
        PRINT "        .AddNew vrnFldLst, Array(""02"", ""Name02"", ""Value02"")"
        PRINT "        .AddNew vrnFldLst, Array(""03"", ""Name03"", ""Value03"")"
        PRINT "        '-------------------------------------------------------------------------------------------"
        PRINT "    End With"
        PRINT ""
        PRINT "    ' Display recordset data"
        PRINT "    With rst"
        PRINT "        .MoveFirst"
        PRINT "        Do While Not .EOF"
        PRINT "            Debug.Print .Fields(0) & ""|"" & .Fields(1) & ""|"" & .Fields(2)"
        PRINT "            .MoveNext"
        PRINT "        Loop"
        PRINT "    End With"
        PRINT "    rst.Close"
        PRINT "    Set rst = Nothing"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- ADFDEC = Form - Form module declarations
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx Lft Spc Ttl Bat Tx1 Tx2 Tx3 Trn Idn Erm
        EXEC ut_zzVBX ADFDEC,'' ,0  ,0  ,0  ,0  ,'' ,'' ,'' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFDEC) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @ModNam = CASE WHEN LEN(@SrcObj) > 0 THEN @SrcObj ELSE "frm_FrmName" END
        SET @ModTtl = CASE WHEN LEN(@StdTx1) > 0 THEN @StdTx1 ELSE "FormTitle" END
        PRINT "'###################################################################################################"
        PRINT "' Name:"+REPLICATE(" ",74)+CONVERT(char(19),GETDATE(),120)
        PRINT "'   "+@ModNam+""
        PRINT "'###################################################################################################"
        PRINT "' Purpose:"
        PRINT "'   "+@ModTtl
        PRINT "'###################################################################################################"
        PRINT "' Developer    Date     Action"
        PRINT "' ------------ -------- ----------------------------------------------------------------------------"
        PRINT "' "+@DvpTxt+" "+CONVERT(char(8),GETDATE(),1)+" Created the script"
        PRINT "'###################################################################################################"
        PRINT "Option Compare Database"
        PRINT "Option Explicit"
        PRINT "Option Base 0"
        PRINT "'***************************************************************************************************"
        PRINT "' Initialize module message constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcModNam              As String = """+@ModNam+""""
        PRINT "Private Const mcModTtl              As String = """+@ModTtl+""""
        PRINT "Private Const mcModErr              As String = mcModNam"
        PRINT "Private Const mcModMsg              As String = mcModTtl & "" - """
        PRINT "'***************************************************************************************************"
        PRINT "' Form/Report Management"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrOpenText                As String"
        PRINT "Private mstrOpenName                As String"
        PRINT "Private mintOpenView                As Integer"
        PRINT "Private mstrFiltName                As String"
        PRINT "Private mstrWhereTxt                As String"
        PRINT "Private mintDataMode                As Integer"
        PRINT "Private mintWindMode                As Integer"
        PRINT "Private mstrOpenArgs                As String"
        PRINT "'***************************************************************************************************"
        PRINT "' Standard form constants"
        PRINT "'***************************************************************************************************"
        PRINT "Private Const mcReset               As Boolean = True"
        PRINT "Private Const mcNoReset             As Boolean = False"
        PRINT "Private Const mcActive              As Boolean = True"
        PRINT "Private Const mcInActive            As Boolean = False"
        PRINT "Private Const mcSync                As Boolean = True"
        PRINT "Private Const mcNoSync              As Boolean = False"
        PRINT "'***************************************************************************************************"
        PRINT "' Criteria tracking variables"
        PRINT "'***************************************************************************************************"
        PRINT "Private mstrPKey                    As String"
        PRINT "Private mstrYear                    As String"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFFOP = Form - Standard form open function
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFFOP,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFFOP) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT "'***************************************************************************************************"
        PRINT "' SrtBy tracking"
        PRINT "Private Const mcSrtByNON           As Integer = 0"
        PRINT "Private Const mcSrtBy001           As Integer = 1"
        PRINT "Private Const mcSrtBy002           As Integer = 2"
        PRINT "Private Const mcSrtBy003           As Integer = 3"
        PRINT "Private Const mcSrtBy004           As Integer = 4"
        PRINT "Private Const mcSrtBy005           As Integer = 5"
        PRINT "'***************************************************************************************************"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is opened"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Open(Cancel As Integer)"
        PRINT ""
        PRINT "    ' Display form full screen"
        PRINT "    DoCmd.Maximize"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADPFOP = Form - Popup form open functions
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADPFOP,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADPFOP) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT "' Form tracking variables"
        PRINT "Private mstrCallForm                As String"
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is opened"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Open(Cancel As Integer)"
        PRINT ""
        PRINT "    ' Read the calling Form name"
        PRINT "    mstrCallForm = Nz(Me.OpenArgs, """")"
        PRINT ""
        PRINT "    ' Enable/disable controls"
        PRINT "    Call EnableFields"
        PRINT ""
        PRINT "    ' Enable/disable Accept button"
        PRINT "    Call EnableAcceptButton"
        PRINT ""
        PRINT "    ' Position the cursor"
        PRINT "    If Me.txtRgnCod.Enabled Then"
        PRINT "        Me.txtRgnCod.SetFocus"
        PRINT "    Else"
        PRINT "        Me.cmdHideCursor.SetFocus"
        PRINT "    End If"
        PRINT ""
        PRINT "End Sub"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFFUN = Form - Standard form module functions
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFFUN,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFFUN) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is loaded"
        PRINT "'###################################################################################################"
        PRINT "' Open => Load => Resize => Activate => Current"
        PRINT "Private Sub Form_Load()"
        PRINT ""
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Clear nulls"
        PRINT "    Me.cboSelectOn01 = """""
        PRINT "    Me.cboSelectOn02 = """""
        PRINT ""
        PRINT "    ' Assign defaults"
        PRINT "    Me.optSrtBy = mcSrtByNON"
        PRINT ""
        PRINT "    ' Build default SQL statement"
        PRINT "    Call optSrtBy_AfterUpdate"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when form is unloaded"
        PRINT "'###################################################################################################"
        PRINT "' Unload => Deactivate => Close"
        PRINT "Private Sub Form_Unload(Cancel As Integer)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Actions to perform when record becomes current"
        PRINT "'###################################################################################################"
        PRINT "' BeforeUpdate(frm) => AfterUpdate(frm) => Exit(ctl) => LostFocus(ctl) => Current(frm)"
        PRINT "Private Sub Form_Current()"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Public Sub Form_Requery()"
        PRINT "'###################################################################################################"
        PRINT ""
        PRINT "    ' Requery all objects"
        PRINT "    Me.cboSelectOn01.Requery"
        PRINT "    Me.cboSelectOn02.Requery"
        PRINT "    Me.Requery"
        PRINT ""
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFSQ1 = FORM - Manage SelectOn synchronization
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFSQ1,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFSQ1) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub SyncSelectOnValues(ctlCurrent As Control, blnOkToSyncRow As Boolean)"
        PRINT "'###################################################################################################"
        PRINT "    '***************************************************************************"
        PRINT "    ' This function provides for synchronizing values among related controls."
        PRINT "    ' Any formatting required by the displayed values should be applied here"
        PRINT "    ' (the control's formatting will not work).  If the value of one control"
        PRINT "    ' limits the records available in another SelectOn control then the"
        PRINT "    ' SyncSelectOnRowSource must be called after the values have been assigned."
        PRINT "    '***************************************************************************"
        PRINT "    Dim blnSyncNow As Boolean"
        PRINT "    blnSyncNow = False"
        PRINT "    Select Case ctlCurrent.Name"
        PRINT "        Case ""cboSelectOn01"""
        PRINT "        Case ""cboSelectOn02"""
        PRINT "    End Select"
        PRINT "    If blnSyncNow Then Call SyncSelectOnRowSource"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub SyncSelectOnRowSource()"
        PRINT "'###################################################################################################"
        PRINT "    '***************************************************************************"
        PRINT "    ' This function provides for adjusting SelectOn rowsource statements based on"
        PRINT "    ' limiting relationships with other SelectOn controls."
        PRINT "    '***************************************************************************"
        PRINT ""
        PRINT "    ' Initialize standard SQL construction variables"
        PRINT "    Dim strWHR As String"
        PRINT "    Dim strAND As String"
        PRINT "    Const conAND = "") AND ("""
        PRINT "    strWHR = """""
        PRINT "    strAND = ""("""
        PRINT "    ' Initialize cascading SelectOn SQL construction variables"
        PRINT "    'Dim strWH_02 As String"
        PRINT "    ' Accumulate WHERE statement elements"
        PRINT "    'If Len(Trim$(Nz(Me.cboSelectOn01, """"))) > 0 Then"
        PRINT "    '    strWHR = strWHR & strAND & ""ColInteger = "" & Trim$(Me.cboSelectOn01) & """""
        PRINT "    '    strAND = conAND"
        PRINT "    '    strWH_02 = strWHR & "")"""
        PRINT "    'End If"
        PRINT "    ' Synchronize SelectOn controls based on rowsource criteria"
        PRINT "    'Me.cboSelectOn02.RowSource = InsertWhereClause(Me.cboSelectOn02.RowSource, strWH_02)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Public Sub SyncSelectOnReset( _"
        PRINT "    Optional strSelectOn01 As String = """", _"
        PRINT "    Optional strSelectOn02 As String = """" _"
        PRINT ")"
        PRINT "'###################################################################################################"
        PRINT "    '***************************************************************************"
        PRINT "    ' This functions provides for the selective setting/clearing of all SelectOn"
        PRINT "    ' values. Its primary purpose is to enable external programs to reset the"
        PRINT "    ' selection criteria without having to restate all of the SelectOn logic.  It"
        PRINT "    ' is very useful for the PopUp Add form which normally adds a record and then"
        PRINT "    ' displays it in the parent form."
        PRINT "    '***************************************************************************"
        PRINT ""
        PRINT "    ' Reset cboSelectOn01"
        PRINT "    If Len(Trim$(strSelectOn01)) > 0 Then"
        PRINT "        Me.cboSelectOn01 = strSelectOn01"
        PRINT "        Call SyncSelectOnValues(Me.cboSelectOn01, mcNoSync)"
        PRINT "    Else"
        PRINT "        Me.cboSelectOn01 = """""
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Reset cboSelectOn02"
        PRINT "    If Len(Trim$(strSelectOn02)) > 0 Then"
        PRINT "        Me.cboSelectOn02 = strSelectOn02"
        PRINT "        Call SyncSelectOnValues(Me.cboSelectOn02, mcNoSync)"
        PRINT "    Else"
        PRINT "        Me.cboSelectOn02 = """""
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Reset SelectOn rowsource statements"
        PRINT "    Call SyncSelectOnRowSource"
        PRINT "    ' Assign normal SQL statement to the Form's recordsource"
        PRINT "    Call SetRecSource(Me.cboSelectOn01)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub SetRecSource(ctlCurrent As Control)"
        PRINT "'###################################################################################################"
        PRINT "    Dim intSrtBy As Integer"
        PRINT "    Select Case ctlCurrent.Name"
        PRINT "        Case ""cboSelectOn01"""
        PRINT "            intSrtBy = Me.optSrtBy"
        PRINT "        Case ""cboSelectOn02"""
        PRINT "            intSrtBy = Me.optSrtBy"
        PRINT "        Case ""optSrtBy"""
        PRINT "            intSrtBy = Me.optSrtBy"
        PRINT "    End Select"
        PRINT "    Me.RecordSource = BuildSQLSelect( _"
        PRINT "        Nz(Me.cboSelectOn01, "" ""), _"
        PRINT "        Nz(Me.cboSelectOn02, "" ""), _"
        PRINT "        intSrtBy _"
        PRINT "    )"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFSQ2 = FORM - Manage SelectOn events
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFSQ2,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFSQ2) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub ColumnAfterUpdate(ctlCurrent As Control, blnActive As Boolean)"
        PRINT "'###################################################################################################"
        PRINT "    ' Synchronize SelectOn controls"
        PRINT "    Call SyncSelectOnValues(ctlCurrent, mcSync)"
        PRINT "    ' Display records based on selection criteria"
        PRINT "    If blnActive Then Call SetRecSource(ctlCurrent)"
        PRINT "    ctlCurrent.SetFocus"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub ColumnDoubleClick(ctlCurrent As Control, blnActive As Boolean)"
        PRINT "'###################################################################################################"
        PRINT "    ' Synchronize SelectOn controls"
        PRINT "    Call SyncSelectOnValues(ctlCurrent, mcSync)"
        PRINT "    ' Clear field and display records based on resultant selection criteria"
        PRINT "    ctlCurrent = """""
        PRINT "    If blnActive Then Call SetRecSource(ctlCurrent)"
        PRINT "    ctlCurrent.SetFocus"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub optSrtBy_AfterUpdate()"
        PRINT "'###################################################################################################"
        PRINT "    Call ColumnAfterUpdate(Me.optSrtBy, mcActive)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub cboSelectOn01_Enter()"
        PRINT "'###################################################################################################"
        PRINT "    Screen.ActiveControl.Dropdown"
        PRINT "End Sub"
        PRINT "Private Sub cboSelectOn01_AfterUpdate()"
        PRINT "    Call ColumnAfterUpdate(Me.cboSelectOn01, mcActive)"
        PRINT "End Sub"
        PRINT "Private Sub cboSelectOn01_DblClick(Cancel As Integer)"
        PRINT "    Call ColumnDoubleClick(Me.cboSelectOn01, mcActive)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub cboSelectOn02_Enter()"
        PRINT "'###################################################################################################"
        PRINT "    Screen.ActiveControl.Dropdown"
        PRINT "End Sub"
        PRINT "Private Sub cboSelectOn02_AfterUpdate()"
        PRINT "    Call ColumnAfterUpdate(Me.cboSelectOn02, mcActive)"
        PRINT "End Sub"
        PRINT "Private Sub cboSelectOn02_DblClick(Cancel As Integer)"
        PRINT "    Call ColumnDoubleClick(Me.cboSelectOn02, mcActive)"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- ADECBO = Event - Combo Box
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADECBO,FldNam                ,0  ,0  ,0  ,0  ,'' ,'' ,'PopUp' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADECBO) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub cbo"+@SrcObj+"_AfterUpdate()"
        PRINT "'###################################################################################################"
        PRINT "    ' Hide cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cbo"+@SrcObj+"_DblClick(Cancel As Integer)"
        PRINT "    ' Hide cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Clear combo box"
        PRINT "    Me.cbo"+@SrcObj+" = Null"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADECHK = Event - Check Box
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADECHK,FldNam                ,0  ,0  ,0  ,0  ,'' ,'' ,'PopUp' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADECHK) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub chk"+@SrcObj+"_AfterUpdate()"
        PRINT "'###################################################################################################"
        PRINT "    ' Hide cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADEKPS = Event - KeyPress
    /*----------------------------------------------------------------------------------------------
        For UtlASCii = 123 To 127
            Debug.Print "        PRINT ""        Case " & UtlASCii & "        '  (" & Chr(UtlASCii) & ")"""
        Next
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        --------------------------------------------------------------------------------------------
        EXEC ut_zzVBX ADETBX,FldNam                ,0  ,0  ,0  ,0  ,'' ,'' ,'PopUp' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADEKPS) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub txt"+@SrcObj+"_KeyPress(UtlASCii As Integer)"
        PRINT "'###################################################################################################"
        PRINT "    ' Disallow single/double quotes"
        PRINT "    If UtlASCii = 34 _"
        PRINT "    Or UtlASCii = 39 _"
        PRINT "    Then"
        PRINT "        UtlASCii = 0"
        PRINT "        Beep"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (TAB)"
        PRINT "        Case 9         ' Backtab      (BTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 33        ' Bang         (!)"
        PRINT "        Case 34        ' DoubleQuote  ("")"
        PRINT "        Case 35        ' Pound        (#)"
        PRINT "        Case 36        ' Dollar       ($)"
        PRINT "        Case 37        ' Percent      (%)"
        PRINT "        Case 38        ' Andpersand   (&)"
        PRINT "        Case 39        ' SingleQuote  (')"
        PRINT "        Case 40        ' OpenParen    (()"
        PRINT "        Case 41        ' CloseParen   ())"
        PRINT "        Case 42        ' Star         (*)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 44        ' Comma        (,)"
        PRINT "        Case 45        ' Minus        (-)" 
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 58        ' Colon        (:)"
        PRINT "        Case 59        ' SemiColon    (;)"
        PRINT "        Case 60        ' GreaterThan  (<)"
        PRINT "        Case 61        ' Equals       (=)"
        PRINT "        Case 62        ' LessThan     (>)"
        PRINT "        Case 63        ' Question     (?)"
        PRINT "        Case 64        ' Each         (@)"
        PRINT "        Case 91        ' OpenBracket  ([)"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 93        ' CloseBracket (])"
        PRINT "        Case 94        ' Caret        (^)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        Case 96        ' BackTick     (`)"
        PRINT "        Case 123       ' OpenBrace    ({)"
        PRINT "        Case 124       ' Pipe         (|)"
        PRINT "        Case 125       ' CloseBrace   (})"
        PRINT "        Case 126       ' Tilde        (~)"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0"
        PRINT "            Beep"
        PRINT "            Exit Sub"
        PRINT "    End Select"
        PRINT "    ' Force upper case"
        PRINT "    'UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADETBX = Event - Text Box (text)
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADETBX,FldNam                ,0  ,0  ,0  ,0  ,'' ,'' ,'PopUp' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADETBX) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub txt"+@SrcObj+"_KeyPress(UtlASCii As Integer)"
        PRINT "'###################################################################################################"
        PRINT "    ' Disallow single/double quotes"
        PRINT "    If UtlASCii = 34 _"
        PRINT "    Or UtlASCii = 39 _"
        PRINT "    Then"
        PRINT "        UtlASCii = 0"
        PRINT "        Beep"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (TAB)"
        PRINT "        Case 9         ' Backtab      (BTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 32        ' Space        ( )"
        PRINT "        Case 33        ' Bang         (!)"
        PRINT "        Case 34        ' DoubleQuote  ("")"
        PRINT "        Case 35        ' Pound        (#)"
        PRINT "        Case 36        ' Dollar       ($)"
        PRINT "        Case 37        ' Percent      (%)"
        PRINT "        Case 38        ' Andpersand   (&)"
        PRINT "        Case 39        ' SingleQuote  (')"
        PRINT "        Case 40        ' OpenParen    (()"
        PRINT "        Case 41        ' CloseParen   ())"
        PRINT "        Case 42        ' Star         (*)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 44        ' Comma        (,)"
        PRINT "        Case 45        ' Minus        (-)" 
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 58        ' Colon        (:)"
        PRINT "        Case 59        ' SemiColon    (;)"
        PRINT "        Case 60        ' GreaterThan  (<)"
        PRINT "        Case 61        ' Equals       (=)"
        PRINT "        Case 62        ' LessThan     (>)"
        PRINT "        Case 63        ' Question     (?)"
        PRINT "        Case 64        ' Each         (@)"
        PRINT "        Case 91        ' OpenBracket  ([)"
        PRINT "        Case 92        ' BackSlash    (\)"
        PRINT "        Case 93        ' CloseBracket (])"
        PRINT "        Case 94        ' Caret        (^)"
        PRINT "        Case 95        ' Underbar     (_)"
        PRINT "        Case 96        ' BackTick     (`)"
        PRINT "        Case 123       ' OpenBrace    ({)"
        PRINT "        Case 124       ' Pipe         (|)"
        PRINT "        Case 125       ' CloseBrace   (})"
        PRINT "        Case 126       ' Tilde        (~)"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0"
        PRINT "            Beep"
        PRINT "            Exit Sub"
        PRINT "    End Select"
        PRINT "    ' Force upper case"
        PRINT "    'UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub txt"+@SrcObj+"_AfterUpdate()"
        PRINT "    ' Disallow null values"
        PRINT "    Me.txt"+@SrcObj+" = Nz(Me.txt"+@SrcObj+", gcStdNulTXT)"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub txt"+@SrcObj+"_DblClick(Cancel As Integer)"
        PRINT "    ' Hide cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Clear combo box"
        PRINT "    Me.txt"+@SrcObj+" = gcStdNulTXT"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADETBC = Event - Text Box (code)
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADETBC,FldNam                ,0  ,0  ,0  ,0  ,'' ,'' ,'PopUp' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADETBC) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub txt"+@SrcObj+"_KeyPress(UtlASCii As Integer)"
        PRINT "'###################################################################################################"
        PRINT "    ' Disallow single/double quotes"
        PRINT "    If UtlASCii = 34 _"
        PRINT "    Or UtlASCii = 39 _"
        PRINT "    Then"
        PRINT "        UtlASCii = 0"
        PRINT "        Beep"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (TAB)"
        PRINT "        Case 9         ' Backtab      (BTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case 65 To 90  ' Upper case letters"
        PRINT "        Case 97 To 122 ' Lower case letters"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0"
        PRINT "            Beep"
        PRINT "            Exit Sub"
        PRINT "    End Select"
        PRINT "    ' Force upper case"
        PRINT "    UtlASCii = Asc(UCase$(Chr(UtlASCii)))"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub txt"+@SrcObj+"_AfterUpdate()"
        PRINT "    ' Disallow null values"
        PRINT "    Me.txt"+@SrcObj+" = Nz(Me.txt"+@SrcObj+", gcStdNulTXT)"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub txt"+@SrcObj+"_DblClick(Cancel As Integer)"
        PRINT "    ' Hide cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Clear combo box"
        PRINT "    Me.txt"+@SrcObj+" = gcStdNulTXT"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADETBN = Event - Text Box (numeric)
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADETBN,FldNam                ,0  ,0  ,0  ,0  ,'' ,'' ,'PopUp' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADETBN) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub txt"+@SrcObj+"_KeyPress(UtlASCii As Integer)"
        PRINT "'###################################################################################################"
        PRINT "    ' Disallow single/double quotes"
        PRINT "    If UtlASCii = 34 _"
        PRINT "    Or UtlASCii = 39 _"
        PRINT "    Then"
        PRINT "        UtlASCii = 0"
        PRINT "        Beep"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (TAB)"
        PRINT "        Case 9         ' Backtab      (BTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 43        ' Plus         (+)"
        PRINT "        Case 45        ' Minus        (-)" 
        PRINT "        Case 46        ' Period       (.)"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0"
        PRINT "            Beep"
        PRINT "            Exit Sub"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub txt"+@SrcObj+"_AfterUpdate()"
        PRINT "    ' Disallow null values"
        PRINT "    Me.txt"+@SrcObj+" = CInt(Nz(Me.txt"+@SrcObj+", gcStdNulNUM))  ' gcStdNulNUM gcStdNulTXT"
        PRINT "    ' Limit the value range"
        PRINT "    Me.txt"+@SrcObj+" = IIf(Me.txt"+@SrcObj+" < 0, 0, Me.txt"+@SrcObj+")"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub txt"+@SrcObj+"_DblClick(Cancel As Integer)"
        PRINT "    ' Hide cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Clear text box"
        PRINT "    Me.txt"+@SrcObj+" = gcStdNulNUM  ' gcStdNulNUM gcStdNulTXT"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADETBD = Event - Text Box (date)
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADETBD,FldNam                ,0  ,0  ,0  ,0  ,'' ,'' ,'PopUp' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADETBD) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "Private Sub txt"+@SrcObj+"_KeyPress(UtlASCii As Integer)"
        PRINT "'###################################################################################################"
        PRINT "    ' Disallow single/double quotes"
        PRINT "    If UtlASCii = 34 _"
        PRINT "    Or UtlASCii = 39 _"
        PRINT "    Then"
        PRINT "        UtlASCii = 0"
        PRINT "        Beep"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT "    ' Only allow alphanumeric characters"
        PRINT "    Select Case UtlASCii"
        PRINT "        Case 8         ' Backspace    (TAB)"
        PRINT "        Case 9         ' Backtab      (BTAB)"
        PRINT "        Case 27        ' Escape       (ESC)"
        PRINT "        Case 47        ' Slash        (/)"
        PRINT "        Case 48 To 57  ' Digits"
        PRINT "        Case Else"
        PRINT "            UtlASCii = 0"
        PRINT "            Beep"
        PRINT "            Exit Sub"
        PRINT "    End Select"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub txt"+@SrcObj+"_AfterUpdate()"
        PRINT "    ' Disallow null values"
        PRINT "    Me.txt"+@SrcObj+" = CInt(Nz(Me.txt"+@SrcObj+", gcStdNulTXT))  ' gcStdNulDAT gcStdNulTXT"
        PRINT "    ' Format with century"
        PRINT "    If Len(Me.txt"+@SrcObj+") > 0 Then"
        PRINT "        Me.txt"+@SrcObj+" = Format$(Me.txt"+@SrcObj+", ""00/00/0000"")"
        PRINT "    End If"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub txt"+@SrcObj+"_DblClick(Cancel As Integer)"
        PRINT "    ' Hide cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Clear text box"
        PRINT "    Me.txt"+@SrcObj+" = gcStdNulNUM  ' gcStdNulNUM gcStdNulTXT"
        IF @StdTx3 = "PopUp" BEGIN
        PRINT "    ' Enable/Disable Accept Button"
        PRINT "    Call EnableAcceptButton"
        END
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- ADFCMD = Form - Standard form commands
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFCMD,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFCMD) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Commands"
        PRINT "'###################################################################################################"
        PRINT "Private Sub cmdPreviewReport01_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdPreviewReport01_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Set the current form focus first"""
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox ""cmdPreviewReport ERROR: "" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdPrintReport01_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdPrintReport01_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Set the current form focus first"""
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox ""cmdPrintReport ERROR: "" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdRefreshForm_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdRefreshForm_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Refresh the form"
        PRINT "    DoCmd.DoMenuItem acFormBar, acRecordsMenu, acRefresh, , acMenuVer70"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox ""cmdRefreshForm ERROR: "" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdAddNewRecord_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdAddNewRecord_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Save the current record"
        PRINT "    DoCmd.DoMenuItem acFormBar, acRecordsMenu, acSaveRecord, , acMenuVer70"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox ""cmdSaveRecord ERROR: "" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdSaveRecord_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdSaveRecord_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Save the current record"
        PRINT "    DoCmd.DoMenuItem acFormBar, acRecordsMenu, acSaveRecord, , acMenuVer70"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox ""cmdSaveRecord ERROR: "" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdUndoRecord_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdUndoRecord_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Undo all unsaved changes for the current record"
        PRINT "    If Me.Dirty Then"
        PRINT "        DoCmd.DoMenuItem acFormBar, acEditMenu, acUndo, , acMenuVer70"
        PRINT "    End If"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox ""cmdUndoRecord ERROR: "" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdDeleteRecord_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdDeleteRecord_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Save the current record"
        PRINT "    DoCmd.DoMenuItem acFormBar, acRecordsMenu, acSaveRecord, , acMenuVer70"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox ""cmdSaveRecord ERROR: "" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdCloseForm_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdCloseForm_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        --INT "    DoCmd.Close acForm, Me.Name"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADPCMD = Form - Popup form commands
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADPCMD,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADPCMD) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Form Commands"
        PRINT "'###################################################################################################"
        PRINT "Private Sub cmdAccept_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdAccept_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Verify and write the record"
        PRINT "    If Not VerifyInsert Then"
        PRINT "        If MsgBox(""Data could not be written. The form will be closed."" & _"
        PRINT "        vbCrLf & ""Press Cancel to continue this operation."", _"
        PRINT "        vbExclamation+vbOKCancel, mcMsgTtl) = vbCancel Then"
        PRINT "            Exit Sub"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        --INT "    DoCmd.Close acForm, Me.Name"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        PRINT "Private Sub cmdCancel_Click()"
        PRINT "    Const pcMsgTtl = mcModNam & "".cmdCancel_Click"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT "    ' Hide the cursor"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Confirm cancel if data has been changed"
        PRINT "    If DirtyFields Then"
        PRINT "        If MsgBox(""All changes will be discarded."", _"
        PRINT "        vbExclamation+vbOKCancel, mcMsgTtl) = vbCancel Then"
        PRINT "            Exit Sub"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Close the current form"
        PRINT "    DoCmd.RunCommand acCmdClose"
        --INT "    DoCmd.Close acForm, Me.Name"
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFPRN = Form - Print default report
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFPRN,'XXX_ReportName'      ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFPRN) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@SrcObj) = 0 SET @SrcObj = "XXX_ReportName"; SET @SrcObj = REPLACE(@SrcObj,"rpt_","")
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Print default report - ut_zzVBX "+@BldCOD+",rpt_"+@SrcObj
        PRINT "'###################################################################################################"
        PRINT "Private Sub Print_Report01(ByVal lngViewType As Long)  ' acViewPreview acViewNormal"
        PRINT "    Const pcMsgTtl = mcClsTtl & "".Print_Report01"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Set the current form focus first"""
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This feature is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Make sure there is a current active record"
        PRINT "    If Me.NewRecord Or Me.Count = 0 Then"
        PRINT "        MsgBox ""This report requires an active record."", vbInformation, mcMsgTtl"
        PRINT "        Exit Sub"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Confirm printing"
        PRINT "    If mstrPKey = """" And mstrYear = """" Then"
        PRINT "        MsgBox ""You must select a XxxDesc or a Year."", vbInformation, mcMsgTtl"
        PRINT "        Exit Sub"
        PRINT "    ElseIf lngViewType = acViewNormal And mstrPKey = """" Then"
        PRINT "        If MsgBox(""This will print all XxxDescs for the current Year."", vbOKCancel, mcMsgTtl) = vbCancel Then"
        PRINT "            Exit Sub"
        PRINT "        End If"
        PRINT "    ElseIf lngViewType = acViewNormal And mstrYear = """" Then"
        PRINT "        If MsgBox(""This will print all Years for the current XxxDesc."", vbOKCancel, mcMsgTtl) = vbCancel Then"
        PRINT "            Exit Sub"
        PRINT "        End If"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Initialize the report object"
        PRINT "    Dim rpt    As clsReports"
        PRINT "    Set rpt = New clsReports"
        PRINT ""
        PRINT "    ' Set report criteria"
        PRINT "    rpt.ItmId1 = IIf(Len(Nz(Me.cboSelectOn01, 0)) > 0, Nz(Me.cboSelectOn01, 0), 0)"
        PRINT "    rpt.TaxYer = IIf(Len(Nz(Me.cboSelectOn02, """")) > 0, Nz(Me.cboSelectOn02, 0), """")"
        PRINT ""
        PRINT "    ' Run the report"
        PRINT "    Call rpt.Print_"+@SrcObj+"(lngViewType)"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFRPT = Form - Process default report
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFRPT,'XXX_ReportName'      ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFRPT) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@SrcObj) = 0 SET @SrcObj = "XXX_ReportName"; SET @SrcObj = REPLACE(@SrcObj,"rpt_","")
        SET @TXT = LEFT(@SrcObj,3); SET @TXT = UPPER(LEFT(@TXT,1))+LOWER(RIGHT(@TXT,2))
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Process report - ut_zzVBX "+@BldCOD+",rpt_"+@SrcObj
        PRINT "'###################################################################################################"
        PRINT "Public Sub Print_"+@SrcObj+"(ByVal lngViewType As Long)"
        PRINT "    Const pcMsgTtl = mcClsTtl & "".Print_"+@SrcObj+""""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This feature is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Build the WHERE statement"
        PRINT "    Dim strAND As String"
        PRINT "    Dim strWHR As String"
        PRINT "    If ItmId1 > 0 Then"
        PRINT "        strWHR = strWHR & strAND & """+@TXT+"DefID = "" & ItmId1"
        PRINT "        strAND = "" AND """
        PRINT "    End If"
        PRINT "    If Len(TaxYer) > 0 Then"
        PRINT "        strWHR = strWHR & strAND & ""TaxYer = "" & TaxYer"
        PRINT "        strAND = "" AND """
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Open a form"""
        PRINT "    mstrOpenName = ""rpt_"+@SrcObj+""""
        PRINT "    mstrFiltName = """""
        PRINT "    mstrWhereTxt = strWHR"
        PRINT "    ' Advanced parameters"
        PRINT "    mintOpenView = lngViewType  ' acViewPreview acViewNormal"
        PRINT ""
        PRINT "    ' Call the report ignoring any error conditions"""
        PRINT "    If Len(mstrOpenName) > 0 Then"
        PRINT "        On Error Resume Next"
        PRINT "        DoCmd.OpenReport mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt"
        PRINT "        'On Error GoTo Error_Handler"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & ""  "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFXTD = Form - Extend object for active tax years
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFXTD,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFXTD) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Extend objects for all active tax years - ut_zzADL "+@BldCOD
        PRINT "'###################################################################################################"
        PRINT "Private Sub tglExtendTaxYer_Click()"
        PRINT "    Const pcMsgTtl = mcClsTtl & "".tglExtendTaxYer"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Set toggle to busy"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.tglExtendTaxYer.Value = True"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This feature is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Declare parameter variables"
        PRINT "    Dim lngSchPkyID As Long"
        PRINT "    Dim lngSchYerID As Long"
        PRINT ""
        PRINT "    ' Assign parameter values"
        PRINT "    lngSchPkyID = IIf(Len(Nz(Me.cboSelectOn01, 0)) > 0, Nz(Me.cboSelectOn01, 0), 0)"
        PRINT "    lngSchYerID = IIf(Len(Nz(Me.cboSelectOn02, 0)) > 0, Nz(Me.cboSelectOn02, 0), 0)"
        PRINT ""
        PRINT "    ' Initialize the process class object"
        PRINT "    Dim run    As clsProcess"
        PRINT "    Set run = New clsProcess"
        PRINT ""
        PRINT "    ' Run the process and return the result"
        PRINT "    Call run.Process_usp_Run_ExtendXXX( _"
        PRINT "        lngSchPkyID, _"
        PRINT "        lngSchYerID _"
        PRINT "    )"
        PRINT ""
        PRINT "    ' Refresh the screen"
        PRINT "    Call Form_Requery"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    ' Set toggle to done"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.tglExtendTaxYer.Value = False"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFSYN = Form - Synchronize related objects
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFSYN,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFSYN) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Synchronize related objects - ut_zzADL "+@BldCOD
        PRINT "'###################################################################################################"
        PRINT "Private Sub tglSyncObjects_Click()"
        PRINT "    Const pcMsgTtl = mcClsTtl & "".cmdSyncObjects"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Set toggle to busy"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.tglSyncObjects.Value = True"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This feature is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Declare parameter variables"
        PRINT "    Dim lngSchPkyID As Long"
        PRINT ""
        PRINT "    ' Assign parameter values"
        PRINT "    lngSchPkyID = IIf(Len(Nz(Me.cboSelectOn01, 0)) > 0, Nz(Me.cboSelectOn01, 0), 0)"
        PRINT ""
        PRINT "    ' Initialize the process class object"
        PRINT "    Dim run    As clsProcess"
        PRINT "    Set run = New clsProcess"
        PRINT ""
        PRINT "    ' Run the process and return the result"
        PRINT "    Call run.Process_usp_Run_SyncXXX( _"
        PRINT "        lngSchPkyID _"
        PRINT "    )"
        PRINT ""
        PRINT "    ' Refresh the screen"
        PRINT "    Call Form_Requery"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    ' Set toggle to done"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT "    Me.tglSyncObjects.Value = False"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADFOPN = Form - Open external form
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADFOPN,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
        EXEC ut_zzVBX ADFOPN,'XXX_FormName'        ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADFOPN) BEGIN
    ------------------------------------------------------------------------------------------------
        IF LEN(@SrcObj) = 0 SET @SrcObj = "XXX_FormName"; SET @SrcObj = REPLACE(@SrcObj,"frm_","")
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Open external form - ut_zzADL "+@BldCOD
        PRINT "'###################################################################################################"
        PRINT "Private Sub Run_Process00()"
        PRINT "    Const pcMsgTtl = mcClsTtl & "".Run_Process00"""
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This feature is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Open a form"
        PRINT "    mstrOpenText = ""frm_"+@SrcObj+""""
        PRINT "    mstrOpenName = mstrOpenText"
        PRINT "    mstrFiltName = """""
        PRINT "    mstrWhereTxt = """""
        PRINT "    mstrOpenArgs = Me.Name"
        PRINT "    mintOpenView = acNormal"
        PRINT "    mintDataMode = acFormPropertySettings"
        PRINT "    mintWindMode = acWindowNormal"
        PRINT ""
        PRINT "    ' Set the current form focus first"
        PRINT "    Me.cmdHideCursor.SetFocus"
        PRINT ""
        PRINT "    ' Call the report ignoring any error conditions"
        PRINT "    If Len(mstrOpenName) > 0 Then"
        PRINT "        On Error Resume Next"
        PRINT "        DoCmd.OpenForm mstrOpenName, mintOpenView, mstrFiltName, mstrWhereTxt, mintDataMode, mintWindMode, mstrOpenArgs"
        PRINT "        'On Error GoTo Error_Handler"
        PRINT "    Else"
        PRINT "        MsgBox ""This form is not available."", vbOKOnly, ""Open "" & mstrOpenText"
        PRINT "    End If"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Sub"
        PRINT "Error_Handler:"
        PRINT "    MsgBox pcMsgTtl & "" ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Sub"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- ADIVFY = Form - Verify insert process
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX ADIVFY,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecADIVFY) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT ""
        PRINT ""
        PRINT "'###################################################################################################"
        PRINT "' Verify insert process - ut_zzADL "+@BldCOD
        PRINT "'###################################################################################################"
        PRINT "Private Function VerifyInsert() As Boolean"
        PRINT "    'On Error GoTo Error_Handler"
        PRINT ""
        PRINT "    ' Deactivate this procedure"
        PRINT "    If True Then  ' False True"
        PRINT "        MsgBox ""This feature is not active."", vbInformation, pcMsgTtl"
        PRINT "        GoTo Exit_Procedure"
        PRINT "    End If"
        PRINT ""
        PRINT "    ' Declare working variables"
        PRINT "    Dim lngRgnDefID As Long"
        PRINT ""
        PRINT "    ' Insert the new record"
        PRINT "    lngRtnPkyID = InsertRecord"
        PRINT ""
        PRINT "    ' Display the new parent record"
        PRINT "    Dim frm As Form"
        PRINT "    For Each frm In Forms"
        PRINT "        If frm.Name = mstrCallForm Then"
        PRINT "            Call frm.Form_Requery"
        PRINT "            Call frm.SyncSelectOnReset(CStr(lngRtnPkyID))"
        PRINT "            Exit For"
        PRINT "        End If"
        PRINT "    Next"
        PRINT ""
        PRINT "    ' Assign return value"
        PRINT "    VerifyInsert = True"
        PRINT ""
        PRINT "Exit_Procedure:"
        PRINT "    Exit Function"
        PRINT "Error_Handler:"
        PRINT "    MsgBox ""VerifyInsert ERROR:"" & Err.Number & "" "" & Err.Description, vbCritical, ""Error Messages"""
        PRINT "    Resume Exit_Procedure"
        PRINT "End Function"
        PRINT "'==================================================================================================="
        CONTINUE
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- XTDXYR = Extend Tax Year
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX XTDXYR,pfx_TblNam            ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecXTDXYR) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @TX1 = CASE WHEN SUBSTRING(@SrcObj,4,1) = "_" THEN SUBSTRING(@SrcObj,5,3) ELSE "Xxx" END
        SET @TX2 = UPPER(@TX1)
        PRINT "/*"
        PRINT "EXEC ut_zzUSP usp_Run_Extend"+@TX2+",STD"
        PRINT "*/"
        PRINT "CREATE PROCEDURE dbo.usp_Run_Extend"+@TX2+" ("
        PRINT "    @SchPkyID  int = 0,"
        PRINT "    @SchYerID  int = 0"
        PRINT ") AS BEGIN   -- ALTER CREATE"
        PRINT ""
        PRINT "    -- Set the environment"
        PRINT "    SET NOCOUNT ON  -- ON OFF"
        PRINT ""
        PRINT "    -- Initialize results tracking variables"
        PRINT "    DECLARE @ErrNum    int          ; SET @ErrNum    = 0      -- Track error number"
        PRINT "    DECLARE @RowCnt    int          ; SET @RowCnt    = 0      -- Track global row count"
        PRINT "    DECLARE @RetVal    int          ; SET @RetVal    = 0      -- Track return status"
        PRINT "    DECLARE @RetCnt    int          ; SET @RetCnt    = 0      -- Track return row count"
        PRINT ""
        PRINT "    -- Initialize boolean constants"
        PRINT "    DECLARE @False     smallint     ; SET @False     = 0      -- Working value for False"
        PRINT "    DECLARE @True      smallint     ; SET @True      = 1      -- Working value for True"
        PRINT ""
        PRINT "    -- Initialize test mode flags"
        PRINT "    DECLARE @TstFlg    bit          ; SET @TstFlg    = 0      -- Set test mode"
        PRINT "    DECLARE @DbgFlg    bit          ; SET @DbgFlg    = 0      -- Display debug text"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Create supporting objects:"
        PRINT "    --     ut_zzADL XTDXYR,ref_"+@TX1+"Def"
        PRINT "    --     ut_zzUSP ref_"+@TX1+"Def,ADN"
        PRINT "    --     ut_zzUSP ref_"+@TX1+"Yer,ADN"
        PRINT "    --     ut_zzUSP ref_"+@TX1+"Stm,ADN"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Initialize tax year variables"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @TaxYer    smallint"
        PRINT "    DECLARE @TaxMon    tinyint"
        PRINT "    DECLARE @TaxPrd    int"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Initialize definition column variables - ut_zzADL DTV,ref_"+@TX1+"Def"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @"+@TX1+"DefID    int"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Initialize year level column variables - ut_zzADL DTV,trx_"+@TX1+"Yer"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @"+@TX1+"YerID    int"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Initialize month level column variables - ut_zzADL DTV,trx_"+@TX1+"Stm"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @"+@TX1+"StmID    int"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Resolve nulls"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    SET @SchPkyID = ISNULL(@SchPkyID,0)"
        PRINT "    SET @SchYerID = ISNULL(@SchYerID,0)"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Process records for each active Tax Year"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE cur_TaxYer CURSOR LOCAL FAST_FORWARD READ_ONLY FOR"
        PRINT "        SELECT"
        PRINT "            t00.TaxYer"
        PRINT "        FROM"
        PRINT "            dbo.ref_TaxYer t00"
        PRINT "        WHERE"
        PRINT "            (@SchYerID = 0 OR TaxYer = @SchYerID)"
        PRINT "        AND t00.AtvFlg = @True"
        PRINT "    OPEN cur_TaxYer"
        PRINT "    WHILE 1=1 BEGIN"
        PRINT "        FETCH NEXT FROM cur_TaxYer INTO @TaxYer"
        PRINT "        IF @@FETCH_STATUS <> 0 BREAK"
        PRINT "        IF @TstFlg = 1 PRINT ""@TaxYer: ""+CAST(@TaxYer AS varchar(10))"
        PRINT ""
        PRINT "        --------------------------------------------------------------------------------------------"
        PRINT "        -- Process definition records - ut_zzADL CUR,ref_"+@TX1+"Def"
        PRINT "        --------------------------------------------------------------------------------------------"
        PRINT "        DECLARE cur_ObjDef CURSOR LOCAL FAST_FORWARD READ_ONLY FOR"
        PRINT "            SELECT"
        PRINT "                t00."+@TX1+"DefID"
        PRINT "            FROM"
        PRINT "                dbo.ref_"+@TX1+"Def t00"
        PRINT "            WHERE"
        PRINT "                (@SchPkyID =0 OR t00."+@TX1+"DefID = @SchPkyID)"
        PRINT "            AND t00.BegYer <= @TaxYer"
        PRINT "            AND t00.EndYer >= @TaxYer"
        PRINT "        OPEN cur_ObjDef"
        PRINT "        WHILE 1=1 BEGIN"
        PRINT "            FETCH NEXT FROM cur_ObjDef INTO"
        PRINT "                @"+@TX1+"DefID"
        PRINT "            IF @@FETCH_STATUS <> 0 BREAK"
        PRINT "            IF @TstFlg = 1 PRINT ""    @"+@TX1+"DefID: ""+CAST(@"+@TX1+"DefID AS varchar(10))"
        PRINT ""
        PRINT "            ----------------------------------------------------------------------------------------"
        PRINT "            -- Add new year level record - ut_zzADL XSP,usp_AddNew_trx_"+@TX1+"Yer"
        PRINT "            ----------------------------------------------------------------------------------------"
        PRINT "            EXEC @RetVal = dbo.usp_AddNew_trx_"+@TX1+"Yer"
        PRINT "                @"+@TX1+"DefID,"
        PRINT "                @TaxYer"
        PRINT "            IF @TstFlg = 1 PRINT ""        usp_AddNew_trx_"+@TX1+"Yer: ""+CAST(@RetVal AS varchar(10))"
        PRINT ""
        PRINT "            -- Check for errors"
        PRINT "            SET @ErrNum = ABS(@@ERROR)"
        PRINT "            IF @ErrNum <> 0 BEGIN"
        PRINT "                SET @RetVal = -@ErrNum"
        PRINT "                RETURN @RetVal"
        PRINT "            END"
        PRINT ""
        PRINT "            -- Loop through the months of the year"
        PRINT "            SET @TaxMon = 1"
        PRINT "            WHILE @TaxMon <= 12 BEGIN"
        PRINT ""
        PRINT "                ------------------------------------------------------------------------------------"
        PRINT "                -- Add new month level record - ut_zzADL XSP,usp_AddNew_trx_"+@TX1+"Stm"
        PRINT "                ------------------------------------------------------------------------------------"
        PRINT "                EXEC @RetVal = dbo.usp_AddNew_trx_"+@TX1+"Stm"
        PRINT "                    @"+@TX1+"StmID OUTPUT,"
        PRINT "                    @"+@TX1+"DefID,"
        PRINT "                    @TaxYer,"
        PRINT "                    @TaxMon"
        PRINT "                IF @TstFlg = 1 PRINT ""            usp_AddNew_trx_"+@TX1+"Stm: ""+CAST(@RetVal AS varchar(10))"
        PRINT ""
        PRINT "                -- Check for errors"
        PRINT "                SET @ErrNum = ABS(@@ERROR)"
        PRINT "                IF @ErrNum <> 0 BEGIN"
        PRINT "                    SET @RetVal = -@ErrNum"
        PRINT "                    RETURN @RetVal"
        PRINT "                END"
        PRINT ""
        PRINT "                -- Track the row count"
        PRINT "                SET @RowCnt = @RowCnt+@RetVal"
        PRINT ""
        PRINT "                SET @TaxMon = @TaxMon+1"
        PRINT "            END"
        PRINT ""
        PRINT "        END"
        PRINT "        DEALLOCATE cur_ObjDef"
        PRINT "    END"
        PRINT "    DEALLOCATE cur_TaxYer"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Return completion status values"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    IF @RowCnt > 0 BEGIN"
        PRINT "        SET @RetVal = @RowCnt"
        PRINT "    END ELSE BEGIN"
        PRINT "        SET @RetVal = 0"
        PRINT "    END"
        PRINT "    RETURN @RetVal"
        PRINT ""
        PRINT "END"
        PRINT "GO"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- XTDXPD = Extend Tax Period
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX XTDXPD,pfx_TblNam            ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecXTDXPD) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @TX1 = CASE WHEN SUBSTRING(@SrcObj,4,1) = "_" THEN SUBSTRING(@SrcObj,5,3) ELSE "Xxx" END
        SET @TX2 = UPPER(@TX1)
        PRINT "/*"
        PRINT "EXEC ut_zzUSP usp_Run_Extend"+@TX2+",STD"
        PRINT "*/"
        PRINT "CREATE PROCEDURE dbo.usp_Run_Extend"+@TX2+" ("
        PRINT "    @SchPkyID  int = 0,"
        PRINT "    @SchPrdID  int = 0"
        PRINT ") AS BEGIN   -- ALTER CREATE"
        PRINT ""
        PRINT "    -- Set the environment"
        PRINT "    SET NOCOUNT ON  -- ON OFF"
        PRINT ""
        PRINT "    -- Initialize results tracking variables"
        PRINT "    DECLARE @ErrNum    int          ; SET @ErrNum    = 0      -- Track error number"
        PRINT "    DECLARE @RowCnt    int          ; SET @RowCnt    = 0      -- Track global row count"
        PRINT "    DECLARE @RetVal    int          ; SET @RetVal    = 0      -- Track return status"
        PRINT "    DECLARE @RetCnt    int          ; SET @RetCnt    = 0      -- Track return row count"
        PRINT ""
        PRINT "    -- Initialize boolean constants"
        PRINT "    DECLARE @False     smallint     ; SET @False     = 0      -- Working value for False"
        PRINT "    DECLARE @True      smallint     ; SET @True      = 1      -- Working value for True"
        PRINT ""
        PRINT "    -- Initialize test mode flags"
        PRINT "    DECLARE @TstFlg    bit          ; SET @TstFlg    = 0      -- Set test mode"
        PRINT "    DECLARE @DbgFlg    bit          ; SET @DbgFlg    = 0      -- Display debug text"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Create supporting objects:"
        PRINT "    --     ut_zzADL XTDXYR,ref_"+@TX1+"Def"
        PRINT "    --     ut_zzUSP ref_"+@TX1+"Def,ADN"
        PRINT "    --     ut_zzUSP ref_"+@TX1+"Yer,ADN"
        PRINT "    --     ut_zzUSP ref_"+@TX1+"Stm,ADN"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Initialize tax year variables"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @TaxYer    smallint"
        PRINT "    DECLARE @TaxMon    tinyint"
        PRINT "    DECLARE @TaxPrd    int"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Initialize definition column variables - ut_zzADL DTV,ref_"+@TX1+"Def"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @"+@TX1+"DefID    int"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Initialize year level column variables - ut_zzADL DTV,trx_"+@TX1+"Yer"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @"+@TX1+"YerID    int"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Initialize month level column variables - ut_zzADL DTV,trx_"+@TX1+"Stm"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @"+@TX1+"StmID    int"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Resolve nulls"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    SET @SchPkyID = ISNULL(@SchPkyID,0)"
        PRINT "    SET @SchPrdID = ISNULL(@SchPrdID,0)"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Process records for each active Tax Year"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE cur_TaxPrd CURSOR LOCAL FAST_FORWARD READ_ONLY FOR"
        PRINT "        SELECT"
        PRINT "            t00.TaxPrd"
        PRINT "        FROM"
        PRINT "            dbo.ref_TaxPrd t00"
        PRINT "        WHERE"
        PRINT "            (@SchPrdID = 0 OR TaxPrd = @SchPrdID)"
        PRINT "        AND t00.AtvFlg = @True"
        PRINT "    OPEN cur_TaxPrd"
        PRINT "    WHILE 1=1 BEGIN"
        PRINT "        FETCH NEXT FROM cur_TaxPrd INTO @TaxPrd"
        PRINT "        IF @@FETCH_STATUS <> 0 BREAK"
        PRINT "        IF @TstFlg = 1 PRINT ""@TaxPrd: ""+CAST(@TaxPrd AS varchar(10))"
        PRINT ""
        PRINT "        --------------------------------------------------------------------------------------------"
        PRINT "        -- Process definition records - ut_zzADL CUR,ref_"+@TX1+"Def"
        PRINT "        --------------------------------------------------------------------------------------------"
        PRINT "        DECLARE cur_ObjDef CURSOR LOCAL FAST_FORWARD READ_ONLY FOR"
        PRINT "            SELECT"
        PRINT "                t00."+@TX1+"DefID"
        PRINT "            FROM"
        PRINT "                dbo.ref_"+@TX1+"Def t00"
        PRINT "            WHERE"
        PRINT "                (@SchPkyID =0 OR t00."+@TX1+"DefID = @SchPkyID)"
        PRINT "            AND t00.BegPrd <= @TaxPrd"
        PRINT "            AND t00.EndPrd >= @TaxPrd"
        PRINT "        OPEN cur_ObjDef"
        PRINT "        WHILE 1=1 BEGIN"
        PRINT "            FETCH NEXT FROM cur_ObjDef INTO"
        PRINT "                @"+@TX1+"DefID"
        PRINT "            IF @@FETCH_STATUS <> 0 BREAK"
        PRINT "            IF @TstFlg = 1 PRINT ""    @"+@TX1+"DefID: ""+CAST(@"+@TX1+"DefID AS varchar(10))"
        PRINT ""
        PRINT "            ----------------------------------------------------------------------------------------"
        PRINT "            -- Add new year level record - ut_zzADL XSP,usp_AddNew_trx_"+@TX1+"Yer"
        PRINT "            ----------------------------------------------------------------------------------------"
        PRINT "            EXEC @RetVal = dbo.usp_AddNew_trx_"+@TX1+"Yer"
        PRINT "                @"+@TX1+"DefID,"
        PRINT "                @TaxPrd"
        PRINT "            IF @TstFlg = 1 PRINT ""        usp_AddNew_trx_"+@TX1+"Yer: ""+CAST(@RetVal AS varchar(10))"
        PRINT ""
        PRINT "            -- Check for errors"
        PRINT "            SET @ErrNum = ABS(@@ERROR)"
        PRINT "            IF @ErrNum <> 0 BEGIN"
        PRINT "                SET @RetVal = -@ErrNum"
        PRINT "                RETURN @RetVal"
        PRINT "            END"
        PRINT ""
        PRINT "            -- Loop through the months of the year"
        PRINT "            SET @TaxMon = 1"
        PRINT "            WHILE @TaxMon <= 12 BEGIN"
        PRINT ""
        PRINT "                ------------------------------------------------------------------------------------"
        PRINT "                -- Add new month level record - ut_zzADL XSP,usp_AddNew_trx_"+@TX1+"Stm"
        PRINT "                ------------------------------------------------------------------------------------"
        PRINT "                EXEC @RetVal = dbo.usp_AddNew_trx_"+@TX1+"Stm"
        PRINT "                    @"+@TX1+"StmID OUTPUT,"
        PRINT "                    @"+@TX1+"DefID,"
        PRINT "                    @TaxPrd,"
        PRINT "                    @TaxMon"
        PRINT "                IF @TstFlg = 1 PRINT ""            usp_AddNew_trx_"+@TX1+"Stm: ""+CAST(@RetVal AS varchar(10))"
        PRINT ""
        PRINT "                -- Check for errors"
        PRINT "                SET @ErrNum = ABS(@@ERROR)"
        PRINT "                IF @ErrNum <> 0 BEGIN"
        PRINT "                    SET @RetVal = -@ErrNum"
        PRINT "                    RETURN @RetVal"
        PRINT "                END"
        PRINT ""
        PRINT "                -- Track the row count"
        PRINT "                SET @RowCnt = @RowCnt+@RetVal"
        PRINT ""
        PRINT "                SET @TaxMon = @TaxMon+1"
        PRINT "            END"
        PRINT ""
        PRINT "        END"
        PRINT "        DEALLOCATE cur_ObjDef"
        PRINT "    END"
        PRINT "    DEALLOCATE cur_TaxPrd"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Return completion status values"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    IF @RowCnt > 0 BEGIN"
        PRINT "        SET @RetVal = @RowCnt"
        PRINT "    END ELSE BEGIN"
        PRINT "        SET @RetVal = 0"
        PRINT "    END"
        PRINT "    RETURN @RetVal"
        PRINT ""
        PRINT "END"
        PRINT "GO"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- XTDXMN = Extend Tax Month
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX XTDXMN,pfx_TblNam            ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecXTDXMN) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @TX1 = CASE WHEN SUBSTRING(@SrcObj,4,1) = "_" THEN SUBSTRING(@SrcObj,5,3) ELSE "Xxx" END
        SET @TX2 = UPPER(@TX1)
        SET @TX3 = CASE WHEN SUBSTRING(@SrcObj,4,1) = "_" THEN SUBSTRING(@SrcObj,5,6) ELSE "XxxTbl" END
        IF LEN(@SrcObj) = 0 SET @SrcObj ="pfx_XxxTbl"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Loop through the months of the year - ut_zzADL XTDXMN,usp_AddNew_"+@SrcObj+"  -- XTDXMN XTDXAY"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    DECLARE @TaxMon    tinyint"
        PRINT "    SET @TaxMon = 1"
        PRINT "    WHILE @TaxMon <= 12 BEGIN"
        PRINT ""
        PRINT "        --------------------------------------------------------------------------------------------"
        PRINT "        -- Add new month level record - ut_zzADL XSP,usp_AddNew_"+@SrcObj+""
        PRINT "        --------------------------------------------------------------------------------------------"
        PRINT "        EXEC @RetVal = dbo.usp_AddNew_"+@SrcObj+""
        PRINT "            @"+ @TX3+"ID OUTPUT,"
        PRINT "            @"+@TX1+"DefID,"
        PRINT "            @TaxPrd,"
        PRINT "            @TaxMon"
        PRINT "        IF @TstFlg = 1 PRINT ""    usp_AddNew_"+@SrcObj+": ""+CAST(@RetVal AS varchar(10))"
        PRINT ""
        PRINT "        -- Check for errors"
        PRINT "        SET @ErrNum = ABS(@@ERROR)"
        PRINT "        IF @ErrNum <> 0 BEGIN"
        PRINT "            SET @RetVal = -@ErrNum"
        PRINT "            RETURN @RetVal"
        PRINT "        END"
        PRINT ""
        PRINT "        -- Track the row count"
        PRINT "        SET @RowCnt = @RowCnt+@RetVal"
        PRINT ""
        PRINT "        SET @TaxMon = @TaxMon+1"
        PRINT "    END"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    -- XTDXAY = Extend Active Tax Year
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup    Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3      Trn Idn Erm
        EXEC ut_zzVBX XTDXMN,pfx_TblNam            ,0  ,0  ,0  ,0  ,'' ,'' ,''      ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    END ELSE IF @BldCOD IN (@SecXTDXAY) BEGIN
    ------------------------------------------------------------------------------------------------
        SET @TX1 = CASE WHEN SUBSTRING(@SrcObj,4,1) = "_" THEN SUBSTRING(@SrcObj,5,3) ELSE "Xxx" END
        SET @TX2 = UPPER(@TX1)
        SET @TX3 = CASE WHEN SUBSTRING(@SrcObj,4,1) = "_" THEN SUBSTRING(@SrcObj,5,6) ELSE "XxxTbl" END
        IF LEN(@SrcObj) = 0 SET @SrcObj ="pfx_XxxTbl"
        PRINT ""
        PRINT ""
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    -- Process from active tax years - ut_zzADL INI,"+@SrcObj+"  -- INS INI INW UPD DEL CUR SPR SPE SKI XSP XTDXAY XTDXMN"
        PRINT "    ------------------------------------------------------------------------------------------------"
        PRINT "    INSERT INTO dbo."+@SrcObj+" ("
        PRINT "        "+@TX3+"ID,"
        PRINT "        TaxYer,"
        PRINT "        CreatedBy,"
        PRINT "        CreatedOn"
        PRINT "    ) SELECT"
        PRINT "        @"+@TX3+"ID  AS "+@TX3+"ID,"
        PRINT "        yer.TaxYer AS TaxYer,"
        PRINT "        @CreatedBy AS CreatedBy,"
        PRINT "        @CreatedOn AS CreatedOn"
        PRINT "    FROM"
        PRINT "        ref_TaxYer yer"
        PRINT "    WHERE"
        PRINT "        yer.AtvFlg = @True"
        PRINT "    ORDER BY"
        PRINT "        yer.TaxYer"
        CONTINUE
    ------------------------------------------------------------------------------------------------
    END
    ------------------------------------------------------------------------------------------------


    --@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


    ------------------------------------------------------------------------------------------------
    -- XXX = Output code description
    /*----------------------------------------------------------------------------------------------
        --   ut_zzVBX Oup Stx                    Lft Spc Ttl Bat Tx1 Tx2 Tx3 Trn Idn Erm
        EXEC ut_zzVBX XXX,''                    ,0  ,0  ,0  ,0  ,'' ,'' ,'' ,0  ,0  ,0
    ----------------------------------------------------------------------------------------------*/
    IF @BldCOD IN (@SecXXX) BEGIN
    ------------------------------------------------------------------------------------------------
        PRINT @LinSgl
        PRINT "-- XXX = Output code description - IS UNDER CONSTRUCTION!"
        PRINT @LinSgl
        CONTINUE
    ------------------------------------------------------------------------------------------------


    ------------------------------------------------------------------------------------------------
    -- Test output code
    ------------------------------------------------------------------------------------------------
    END ELSE IF @BldCOD IN (@SecZZZ) BEGIN
        SET @SecZZZ = @SecZZZ
    ------------------------------------------------------------------------------------------------
    -- Invalid output code
    ------------------------------------------------------------------------------------------------
    END ELSE BEGIN
        PRINT @CurUSP+":  Invalid @BldCOD ("+@BldCOD+")"
    END
    ------------------------------------------------------------------------------------------------


    --##############################################################################################
    END  -- Output section handler loop
    --##############################################################################################
 
END
GO

/*

=Choose([TaxMon],"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")

*/
 
/*--(LSP)-------------------------------------------------------------------------------------------
 
    --  (Oup: PHL SIG UTL URP LSP PVL)
 
    --   ut_zzUTL Soj      Oup Dbg Obj Dsc                                 Dsp Par Cod Exm Tcd
    EXEC ut_zzUTL ut_zzVBX,UTL,1  ,'' ,'List extended VBA code statements','' ,"
    @BldLST varchar(2000) = '',             -- Output code list (comma delimited; see below)
    @InpTxt varchar(8000) = '',             -- Source Object text (comma delimited)
    @LftMrg smallint      = 0,              -- Increase left margin (4x)
    @IncSpc tinyint       = 1,              -- Include space(s) before the header
    @IncTtl tinyint       = 0,              -- Include code segment titles
    @IncBat tinyint       = 0,              -- Include batch GO statement
    @StdTx1 varchar(8000) = '',             -- Miscellaneous text value
    @StdTx2 varchar(8000) = '',             -- Miscellaneous text value
    @StdTx3 varchar(8000) = '',             -- Miscellaneous text value
    @IncTrn tinyint       = 0,              -- Include transaction logic
    @IncIdn tinyint       = 0,              -- Include identity column logic
    @IncErm tinyint       = 0               -- Include error message
    ","
        PRINT '    PSH    = Push margin 4 spaces right'
        PRINT '    PUL    = Pull margin 4 spaces left'
        PRINT '    LMS    = Set left margin lines'
        PRINT '    LM0    = Set left margin to zero'
        PRINT '    LM1    = Set left margin to one'
        PRINT '    LM2    = Set left margin to two'
        PRINT '    RWP    = Set report width Portrait'
        PRINT '    RWL    = Set report width Landscape'
        PRINT ''
        PRINT '    GHF    = Adjust for page header/footer'
        PRINT '    NPG    = Pad trailing lines for new page'
        PRINT ''
        PRINT '    LSG    = Set lines for single lines'
        PRINT '    LDB    = Set lines for double lines'
        PRINT '    LPD    = Set lines for pound  lines'
        PRINT ''
        PRINT '    HSG    = Set header for single lines'
        PRINT '    HDB    = Set header for double lines'
        PRINT '    HPD    = Set header for pound  lines'
        PRINT ''
        PRINT '    SLN    = Print single line'
        PRINT '    DLN    = Print double line'
        PRINT '    ALN    = Print asterick line'
        PRINT '    PLN    = Print pound line'
        PRINT '    MLN    = Print ampersand line'
        PRINT '    TLN    = Print tilde line'
        PRINT ''
        PRINT '    SLT    = Print single    title'
        PRINT '    DLT    = Print double    title'
        PRINT '    ALT    = Print asterick  title'
        PRINT '    PLT    = Print pound     title'
        PRINT '    MLT    = Print ampersand title'
        PRINT '    TLT    = Print tilde     title'
        PRINT ''
        PRINT '    JLT    = Object list - Tables'
        PRINT '    JLV    = Object list - Views'
        PRINT '    JLU    = Object list - SProcs'
        PRINT ''
        PRINT '    LCP    = Lookup Constants: PKey'
        PRINT '    LCC    = Lookup Constants: Code'
        PRINT '    LCN    = Lookup Constants: Name'
        PRINT '    LCX    = Lookup Constants: CmdTxt'
        PRINT ''
        PRINT '    LPP    = Lookup Properties: PKey'
        PRINT '    LPC    = Lookup Properties: Code'
        PRINT '    LPN    = Lookup Properties: Name'
        PRINT '    LPX    = Lookup Properties: CmdTxt'
        PRINT ''
        PRINT '    BMC    = Basic  module standard comment'
        PRINT '    CMC    = Class  module standard comment'
        PRINT '    FMC    = Form   module standard comment'
        PRINT '    RMC    = Report module standard comment'
        PRINT '    CEV    = Public class events'
        PRINT '    TFL    = Temporary file location constants'
        PRINT '    DCS    = Declare class services'
        PRINT '    BTX    = Basic Text Constants/Variables'
        PRINT '    XTX    = Extended Text Constants/Variables'
        PRINT '    SQC    = SQL Construction Constants/Variables'
        PRINT '    SNC    = Standard Null Comparison Constants/Variables'
        PRINT '    TCV    = Standard Open Form/Report variables'
        PRINT '    ORV    = Standard Open Form/Report variables'
        PRINT '    SFC    = Standard form constants'
        PRINT '    CTV    = Criteria tracking variables'
        PRINT '    SCV    = Standard criteria variables'
        PRINT '    STV    = Standard criteria variables'
        PRINT '    CNC    = Connection component constants'
        PRINT '    PPH    = Public properties header'
        PRINT '    FIN    = Finish Initilization'
        PRINT '    DON    = Done with Code'
        PRINT ''
        PRINT '    ICS    = Initialize class services'
        PRINT '    TXP    = Text concatenation properties'
        PRINT '    IWT    = Initialize write text services'
        PRINT '    TXC    = Text concatenation methods'
        PRINT '    TXM    = Text manipulation methods'
        PRINT '    TXW    = Text write methods'
        PRINT '    TOC    = Test text output - class module format'
        PRINT '    TOB    = Test text output - base module format'
        PRINT '    TRC    = Translate Criteria methods'
        PRINT ''
        PRINT '    RPH    = Report header'
        PRINT ''
        PRINT '    LODCLM = Load #ObjClm records'
        PRINT ''
        PRINT '    MOJVAR = Module object variables'
        PRINT '    MOJPRP = Module object properties'
        PRINT '    MOJWHR = Module object where'
        PRINT ''
        PRINT '    BASAPC = Build module:  bas_AppCons'
        PRINT '    BASAPF = Build module:  bas_AppFunc'
        PRINT '    BASAPT = Build module:  bas_AppTest'
        PRINT '    BASAPV = Build module:  bas_AppVars'
        PRINT ''
        PRINT '    BASGLB = Build module:  bas_Global'
        PRINT '    BASIMX = Build module:  bas_ImpExp'
        PRINT '    BASTST = Build module:  bas_Test01'
        PRINT '    BASTBM = Build module:  bas_TblMnt'
        PRINT ''
        PRINT '    UTLASC = Build module:  clsUtlASC'
        PRINT '    UTLFMT = Build module:  clsUtlFMT'
        PRINT '    UTLVBG = Build module:  clsUtlVBG'
        PRINT '    UTLWSH = Build module:  clsUtlWSH'
        PRINT '    UTLWTX = Build module:  clsUtlWTX'
        PRINT ''
        PRINT '    GENGLB = Build module:  vba_Global'
        PRINT '    GENSTD = Build module:  vbaGenSTD'
        PRINT '    GENJET = Build module:  vbaGenJET'
        PRINT ''
        PRINT '    SGNFLG = StdGEN Objects:  Flags'
        PRINT ''
        PRINT '    SGXTBL = StdGEN Execute:  Table'
        PRINT '    SGXPRP = StdGEN Execute:  Property'
        PRINT '    SGXCMD = StdGEN Execute:  Command'
        PRINT '    SGXRPT = StdGEN Execute:  Report'
        PRINT '    SGXFRM = StdGEN Execute:  Form'
        PRINT '    SGXCTL = StdGEN Execute:  Control'
        PRINT '    SGXGBY = StdGEN Execute:  GroupBy'
        PRINT '    SGXSQL = StdGEN Execute:  SQLCode'
        PRINT '    SGXSBY = StdGEN Execute:  SortBy'
        PRINT '    SGXPTH = StdGEN Execute:  Path'
        PRINT ''
        PRINT '    GEN_IT = Build module:  vbaGen_IT'
        PRINT '    GENFRM = Build module:  vbaGenFRM'
        PRINT '    GENCTL = Build module:  vbaGenCTL'
        PRINT '    GENTBL = Build module:  vbaGenTBL'
        PRINT '    GENPRP = Build module:  vbaGenPRP'
        PRINT '    GENCMD = Build module:  vbaGenCMD'
        PRINT '    GENRPT = Build module:  vbaGenRPT'
        PRINT '    GENPTH = Build module:  vbaGenPTH'
        PRINT '    GENSQL = Build module:  vbaGenSQL'
        PRINT '    GENSBY = Build module:  vbaGenSBY'
        PRINT '    GENGBY = Build module:  vbaGenGBY'
        PRINT '    GENSLO = Build module:  vbaGenSLO'
        PRINT ''
        PRINT '    CLSAPC = Build module:  clsAppCons'
        PRINT '    CLSAPV = Build module:  clsAppVals'
        PRINT ''
        PRINT '    BASCMG = Build module:  bas_CmgCons'
        PRINT '    CLSCMG = Build module:  clsCtlMgr'
        PRINT ''
        PRINT '    REGTBL = Build module:  clsRegTBL'
        PRINT '    REGPRP = Build module:  clsRegPRP'
        PRINT '    REGCMD = Build module:  clsRegCMD'
        PRINT '    REGRPT = Build module:  clsRegRPT'
        PRINT '    REGPTH = Build module:  clsRegPTH'
        PRINT '    REGSRC = Build module:  clsRegSRC'
        PRINT ''
        PRINT '    SQLSTM = Build module:  clsSqlSTM'
        PRINT '    SQLOBY = Build module:  clsSqlOBY'
        PRINT '    RUNWHR = Build module:  clsRunWHR'
        PRINT ''
        PRINT '    RUNCMD = Build module:  clsRunCMD'
        PRINT '    RUNCMM = Build module:  Run_Process_0000 (CALL cls_Method)'
        PRINT '    RUNCMF = Build module:  Run_Process_0000 (OPEN frm_FrmNam)'
        PRINT ''
        PRINT '    RUNRPT = Build module:  clsRunRPT'
        PRINT '    RUNRPR = Build module:  Run_Report_0000'
        PRINT '    RUNRPX = Build module:  Print_rpt_ReportName'
        PRINT ''
        PRINT '    RUNUSP = Build module:  clsRunUSP'
        PRINT '    RUNUSR = Build module:  Run_Process_0000 (EXEC PROC)'
        PRINT '    RUNUSF = Build module:  Run_Process_0000 (OPEN FORM)'
        PRINT ''
        PRINT '    RUNRST = Build module:  clsRunRST'
        PRINT '    RUNSQL = Build module:  clsRunSQL'
        PRINT '    RUNSBY = Build module:  clsRunSBY'
        PRINT '    RUNGBY = Build module:  clsRunGBY'
        PRINT ''
        PRINT '    FRMCLR = Build module:  sys_Colors'
        PRINT '    FRMLNK = Build module:  sys_LinkAPP'
        PRINT ''
        PRINT '    RPTNAR = Build module:  tpl_NARROW'
        PRINT '    RPTWID = Build module:  tpl_WIDE'
        PRINT ''
        PRINT '    ANYFRM = Build module:  frm_FrmName'
        PRINT '    ANYTAB = Build module:  frm_FrmName'
        PRINT '    ANYLST = Build module:  lst_FrmName'
        PRINT '    ANYPOP = Build module:  pop_FrmName'
        PRINT '    ANYSUB = Build module:  sub_FrmName'
        PRINT '    ANYBAS = Build module:  basBasName'
        PRINT '    ANYCLS = Build module:  clsClsNam'
        PRINT '    ANYRPT = Build module:  rpt_RptNam'
        PRINT ''
        PRINT '    CLSTCN = Build module:  clsTxtCon'
        PRINT ''
        PRINT '    ADJMRS = Object - Manual recordset'
        PRINT ''
        PRINT '    ADFDEC = Form - Form module declarations'
        PRINT '    ADFFOP = Form - Standard form open function'
        PRINT '    ADPFOP = Form - Popup form open functions'
        PRINT '    ADFFUN = Form - Standard form module functions'
        PRINT '    ADFSQ1 = FORM - Manage SelectOn synchronization'
        PRINT '    ADFSQ2 = FORM - Manage SelectOn events'
        PRINT ''
        PRINT '    ADECBO = Event - Combo Box'
        PRINT '    ADECHK = Event - Check Box'
        PRINT '    ADEKPS = Event - KeyPress'
        PRINT '    ADETBX = Event - Text Box (text)'
        PRINT '    ADETBC = Event - Text Box (code)'
        PRINT '    ADETBN = Event - Text Box (numeric)'
        PRINT '    ADETBD = Event - Text Box (date)'
        PRINT ''
        PRINT '    ADFCMD = Form - Standard form commands'
        PRINT '    ADPCMD = Form - Popup form commands'
        PRINT '    ADFPRN = Form - Print default report'
        PRINT '    ADFRPT = Form - Process default report'
        PRINT '    ADFXTD = Form - Extend object for active tax years'
        PRINT '    ADFSYN = Form - Synchronize related objects'
        PRINT '    ADFOPN = Form - Open external form'
        PRINT '    ADIVFY = Form - Verify insert process'
        PRINT ''
        PRINT '    XTDXYR = Extend Tax Year'
        PRINT '    XTDXPD = Extend Tax Period'
        PRINT '    XTDXMN = Extend Tax Month'
        PRINT '    XTDXAY = Extend Active Tax Year'
    ","
        PRINT '    --   ut_zzVBX Oup     Stx Lft Spc Ttl Bat Tx1 Tx2 Tx3 Trn Idn Erm'
        PRINT '    EXEC ut_zzVBX        ,'''' ,0  ,1  ,0  ,0  ,'''' ,'''' ,'''' ,0  ,0  ,0'
        PRINT '    '
        PRINT '    --   ut_zzVBX Oup     Stx     Lft     Spc     Ttl     Bat     Tx1     Tx2     Tx3     Trn     Idn     Erm'
        PRINT '    EXEC ut_zzVBX @BldLST,@InpTxt,@LftMrg,@IncSpc,@IncTtl,@IncBat,@StdTx1,@StdTx2,@StdTx3,@IncTrn,@IncIdn,@IncErm'
    ","
    "
 
--------------------------------------------------------------------------------------------------*/
